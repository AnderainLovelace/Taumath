SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:43  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\abs.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           abs.c     1    // Absolute value, aka vector magnitude
           abs.c     2    
           abs.c     3    #include "stdafx.h"
           abs.c     4    #include "defs.h"
           abs.c     5    
           abs.c     6    void
           abs.c     7    eval_abs(void)
P   00000000              _eval_abs:                       ; function: eval_abs
                                                           ; frame size=8
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 4F22                   STS.L       PR,@-R15
           abs.c     8    {
           abs.c     9            push(cadr(p1));
    00000004 DE3A                   MOV.L       L1152+2,R14; _p1
    00000006 64E2                   MOV.L       @R14,R4
    00000008 8448                   MOV.B       @(8,R4),R0
    0000000A 2008                   TST         R0,R0
    0000000C 8B02                   BF          L1102
    0000000E 64E2                   MOV.L       @R14,R4
    00000010 A004                   BRA         L1104
    00000012 5441                   MOV.L       @(4,R4),R4
    00000014              L1102:                            
    00000014 936B                   MOV.W       L1152,R3   ; H'0570
    00000016 D237                   MOV.L       L1152+6,R2 ; _symtab
    00000018 6422                   MOV.L       @R2,R4
    0000001A 343C                   ADD         R3,R4
    0000001C              L1104:                            
    0000001C 8448                   MOV.B       @(8,R4),R0
    0000001E 2008                   TST         R0,R0
    00000020 8B0C                   BF          L1101
    00000022 64E2                   MOV.L       @R14,R4
    00000024 8448                   MOV.B       @(8,R4),R0
    00000026 2008                   TST         R0,R0
    00000028 8B02                   BF          L1103
    0000002A 64E2                   MOV.L       @R14,R4
    0000002C A004                   BRA         L1105
    0000002E 5441                   MOV.L       @(4,R4),R4
    00000030              L1103:                            
    00000030 935D                   MOV.W       L1152,R3   ; H'0570
    00000032 D230                   MOV.L       L1152+6,R2 ; _symtab
    00000034 6422                   MOV.L       @R2,R4
    00000036 343C                   ADD         R3,R4
    00000038              L1105:                            
    00000038 A004                   BRA         L1106
    0000003A 6442                   MOV.L       @R4,R4
    0000003C              L1101:                            
    0000003C 9357                   MOV.W       L1152,R3   ; H'0570
    0000003E D22D                   MOV.L       L1152+6,R2 ; _symtab
    00000040 6422                   MOV.L       @R2,R4
    00000042 343C                   ADD         R3,R4
    00000044              L1106:                            
    00000044 D32C                   MOV.L       L1152+10,R3; _push
    00000046 430B                   JSR         @R3
    00000048 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:43  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           abs.c    10            eval();
    0000004A D22C                   MOV.L       L1152+14,R2; _eval
    0000004C 420B                   JSR         @R2
    0000004E 0009                   NOP
           abs.c    11            absval();
    00000050 4F26                   LDS.L       @R15+,PR
    00000052 6EF6                   MOV.L       @R15+,R14
           abs.c    12    }
           abs.c    13    
           abs.c    14    void
           abs.c    15    absval(void)
    00000054              _absval:                         ; function: absval
                                                           ; frame size=20
    00000054 2FE6                   MOV.L       R14,@-R15
    00000056 2FD6                   MOV.L       R13,@-R15
    00000058 2FC6                   MOV.L       R12,@-R15
    0000005A 4F22                   STS.L       PR,@-R15
           abs.c    16    {
           abs.c    17            int h;
           abs.c    18            save();
    0000005C D328                   MOV.L       L1152+18,R3; _save
    0000005E 7FFC                   ADD         #-4,R15
    00000060 430B                   JSR         @R3
    00000062 0009                   NOP
           abs.c    19            p1 = pop();
    00000064 DE22                   MOV.L       L1152+2,R14; _p1
    00000066 D227                   MOV.L       L1152+22,R2; _pop
    00000068 420B                   JSR         @R2
    0000006A 0009                   NOP
    0000006C 2E02                   MOV.L       R0,@R14
    0000006E 6403                   MOV         R0,R4
    00000070 8448                   MOV.B       @(8,R4),R0
    00000072 600C                   EXTU.B      R0,R0
    00000074 8804                   CMP/EQ      #4,R0
    00000076 8B03                   BF          L1107
           abs.c    20    
           abs.c    21            if (istensor(p1)) {
           abs.c    22                    absval_tensor();
    00000078 B15F                   BSR         _absval_tensor
    0000007A 0009                   NOP
    0000007C A156                   BRA         L1078
    0000007E 0009                   NOP
    00000080              L1107:                            
           abs.c    23                    restore();
           abs.c    24                    return;
           abs.c    25            }
           abs.c    26    
           abs.c    27            if (isnum(p1)) {
    00000080 DD1D                   MOV.L       L1152+10,R13; _push
    00000082 8448                   MOV.B       @(8,R4),R0
    00000084 600C                   EXTU.B      R0,R0
    00000086 8801                   CMP/EQ      #1,R0
    00000088 8D03                   BT/S        L1110
    0000008A 6503                   MOV         R0,R5
    0000008C 6053                   MOV         R5,R0
    0000008E 8802                   CMP/EQ      #2,R0
    00000090 8B0D                   BF          L1109




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:43  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000092              L1110:                            
           abs.c    28                    push(p1);
    00000092 4D0B                   JSR         @R13
    00000094 0009                   NOP
           abs.c    29                    if (isnegativenumber(p1))
    00000096 D31C                   MOV.L       L1152+26,R3; _isnegativenumber
    00000098 430B                   JSR         @R3
    0000009A 64E2                   MOV.L       @R14,R4
    0000009C 2008                   TST         R0,R0
    0000009E 8B01                   BF          L1153
    000000A0 A144                   BRA         L1078
    000000A2 0009                   NOP
    000000A4              L1153:                            
           abs.c    30                            negate();
    000000A4 D319                   MOV.L       L1152+30,R3; _negate
    000000A6 430B                   JSR         @R3
    000000A8 0009                   NOP
    000000AA A13F                   BRA         L1078
    000000AC 0009                   NOP
    000000AE              L1109:                            
           abs.c    31                    restore();
           abs.c    32                    return;
           abs.c    33            }
           abs.c    34    
           abs.c    35            if (iscomplexnumber(p1)) {
    000000AE D218                   MOV.L       L1152+34,R2; _iscomplexnumber
    000000B0 420B                   JSR         @R2
    000000B2 0009                   NOP
    000000B4 2008                   TST         R0,R0
    000000B6 8912                   BT          L1112
           abs.c    36                    push(p1);
    000000B8 4D0B                   JSR         @R13
    000000BA 64E2                   MOV.L       @R14,R4
           abs.c    37                    push(p1);
    000000BC 4D0B                   JSR         @R13
    000000BE 64E2                   MOV.L       @R14,R4
           abs.c    38                    conjugate();
    000000C0 D214                   MOV.L       L1152+38,R2; _conjugate
    000000C2 420B                   JSR         @R2
    000000C4 0009                   NOP
           abs.c    39                    multiply();
    000000C6 D314                   MOV.L       L1152+42,R3; _multiply
    000000C8 430B                   JSR         @R3
    000000CA 0009                   NOP
           abs.c    40                    push_rational(1, 2);
    000000CC D213                   MOV.L       L1152+46,R2; _push_rational
    000000CE E502                   MOV         #2,R5
    000000D0 420B                   JSR         @R2
    000000D2 E401                   MOV         #1,R4
           abs.c    41                    power();
    000000D4 D312                   MOV.L       L1152+50,R3; _power
    000000D6 430B                   JSR         @R3
    000000D8 0009                   NOP
    000000DA A127                   BRA         L1078
    000000DC 0009                   NOP
    000000DE              L1112:                            
           abs.c    42                    restore();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:43  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           abs.c    43                    return;
           abs.c    44            }
           abs.c    45    
           abs.c    46            // abs(1/a) evaluates to 1/abs(a)
           abs.c    47    
           abs.c    48            if (car(p1) == symbol(POWER) && isnegativeterm(caddr(p1))) {
    000000DE DC05                   MOV.L       L1152+6,R12; _symtab
    000000E0 62E2                   MOV.L       @R14,R2
    000000E2 8428                   MOV.B       @(8,R2),R0
    000000E4 2008                   TST         R0,R0
    000000E6 8B1D                   BF          L1114
    000000E8 62E2                   MOV.L       @R14,R2
    000000EA A01F                   BRA         L1122
    000000EC 6322                   MOV.L       @R2,R3
    000000EE              L1152:                            
    000000EE 0570                   .DATA.W     H'0570
    000000F0 <00000000>             .DATA.L     _p1
    000000F4 <00000000>             .DATA.L     _symtab
    000000F8 <00000000>             .DATA.L     _push
    000000FC <00000000>             .DATA.L     _eval
    00000100 <00000000>             .DATA.L     _save
    00000104 <00000000>             .DATA.L     _pop
    00000108 <00000000>             .DATA.L     _isnegativenumber
    0000010C <00000000>             .DATA.L     _negate
    00000110 <00000000>             .DATA.L     _iscomplexnumber
    00000114 <00000000>             .DATA.L     _conjugate
    00000118 <00000000>             .DATA.L     _multiply
    0000011C <00000000>             .DATA.L     _push_rational
    00000120 <00000000>             .DATA.L     _power
    00000124              L1114:                            
    00000124 925E                   MOV.W       L1154,R2   ; H'0570
    00000126 D130                   MOV.L       L1154+4,R1 ; _symtab
    00000128 6312                   MOV.L       @R1,R3
    0000012A 332C                   ADD         R2,R3
    0000012C              L1122:                            
    0000012C 925B                   MOV.W       L1154+2,R2 ; H'03F0
    0000012E 60C2                   MOV.L       @R12,R0
    00000130 302C                   ADD         R2,R0
    00000132 3300                   CMP/EQ      R0,R3
    00000134 8B50                   BF          L1113
    00000136 64E2                   MOV.L       @R14,R4
    00000138 8448                   MOV.B       @(8,R4),R0
    0000013A 2008                   TST         R0,R0
    0000013C 8B02                   BF          L1117
    0000013E 64E2                   MOV.L       @R14,R4
    00000140 A003                   BRA         L1123
    00000142 5441                   MOV.L       @(4,R4),R4
    00000144              L1117:                            
    00000144 934E                   MOV.W       L1154,R3   ; H'0570
    00000146 64C2                   MOV.L       @R12,R4
    00000148 343C                   ADD         R3,R4
    0000014A              L1123:                            
    0000014A 8448                   MOV.B       @(8,R4),R0
    0000014C 2008                   TST         R0,R0
    0000014E 8B0B                   BF          L1116
    00000150 64E2                   MOV.L       @R14,R4
    00000152 8448                   MOV.B       @(8,R4),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:43  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000154 2008                   TST         R0,R0
    00000156 8B02                   BF          L1118
    00000158 64E2                   MOV.L       @R14,R4
    0000015A A003                   BRA         L1124
    0000015C 5441                   MOV.L       @(4,R4),R4
    0000015E              L1118:                            
    0000015E 9341                   MOV.W       L1154,R3   ; H'0570
    00000160 64C2                   MOV.L       @R12,R4
    00000162 343C                   ADD         R3,R4
    00000164              L1124:                            
    00000164 A003                   BRA         L1125
    00000166 5441                   MOV.L       @(4,R4),R4
    00000168              L1116:                            
    00000168 933C                   MOV.W       L1154,R3   ; H'0570
    0000016A 64C2                   MOV.L       @R12,R4
    0000016C 343C                   ADD         R3,R4
    0000016E              L1125:                            
    0000016E 8448                   MOV.B       @(8,R4),R0
    00000170 2008                   TST         R0,R0
    00000172 8B1D                   BF          L1115
    00000174 64E2                   MOV.L       @R14,R4
    00000176 8448                   MOV.B       @(8,R4),R0
    00000178 2008                   TST         R0,R0
    0000017A 8B02                   BF          L1120
    0000017C 64E2                   MOV.L       @R14,R4
    0000017E A003                   BRA         L1126
    00000180 5441                   MOV.L       @(4,R4),R4
    00000182              L1120:                            
    00000182 932F                   MOV.W       L1154,R3   ; H'0570
    00000184 64C2                   MOV.L       @R12,R4
    00000186 343C                   ADD         R3,R4
    00000188              L1126:                            
    00000188 8448                   MOV.B       @(8,R4),R0
    0000018A 2008                   TST         R0,R0
    0000018C 8B0B                   BF          L1119
    0000018E 64E2                   MOV.L       @R14,R4
    00000190 8448                   MOV.B       @(8,R4),R0
    00000192 2008                   TST         R0,R0
    00000194 8B02                   BF          L1121
    00000196 64E2                   MOV.L       @R14,R4
    00000198 A003                   BRA         L1127
    0000019A 5441                   MOV.L       @(4,R4),R4
    0000019C              L1121:                            
    0000019C 9322                   MOV.W       L1154,R3   ; H'0570
    0000019E 64C2                   MOV.L       @R12,R4
    000001A0 343C                   ADD         R3,R4
    000001A2              L1127:                            
    000001A2 A003                   BRA         L1128
    000001A4 5441                   MOV.L       @(4,R4),R4
    000001A6              L1119:                            
    000001A6 931D                   MOV.W       L1154,R3   ; H'0570
    000001A8 64C2                   MOV.L       @R12,R4
    000001AA 343C                   ADD         R3,R4
    000001AC              L1128:                            
    000001AC A003                   BRA         L1129
    000001AE 6442                   MOV.L       @R4,R4
    000001B0              L1115:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:43  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001B0 9318                   MOV.W       L1154,R3   ; H'0570
    000001B2 64C2                   MOV.L       @R12,R4
    000001B4 343C                   ADD         R3,R4
    000001B6              L1129:                            
    000001B6 D30D                   MOV.L       L1154+8,R3 ; _isnegativeterm
    000001B8 430B                   JSR         @R3
    000001BA 0009                   NOP
    000001BC 2008                   TST         R0,R0
    000001BE 890B                   BT          L1113
           abs.c    49                    push(p1);
    000001C0 4D0B                   JSR         @R13
    000001C2 64E2                   MOV.L       @R14,R4
           abs.c    50                    reciprocate();
    000001C4 D30A                   MOV.L       L1154+12,R3; _reciprocate
    000001C6 430B                   JSR         @R3
    000001C8 0009                   NOP
           abs.c    51                    absval();
    000001CA BF43                   BSR         _absval
    000001CC 0009                   NOP
           abs.c    52                    reciprocate();
    000001CE D308                   MOV.L       L1154+12,R3; _reciprocate
    000001D0 430B                   JSR         @R3
    000001D2 0009                   NOP
    000001D4 A0AA                   BRA         L1078
    000001D6 0009                   NOP
    000001D8              L1113:                            
    000001D8 64E2                   MOV.L       @R14,R4
    000001DA 8448                   MOV.B       @(8,R4),R0
    000001DC 2008                   TST         R0,R0
    000001DE 8B09                   BF          L1131
    000001E0 A00C                   BRA         L1132
    000001E2 6242                   MOV.L       @R4,R2
    000001E4              L1154:                            
    000001E4 0570                   .DATA.W     H'0570
    000001E6 03F0                   .DATA.W     H'03F0
    000001E8 <00000000>             .DATA.L     _symtab
    000001EC <00000000>             .DATA.L     _isnegativeterm
    000001F0 <00000000>             .DATA.L     _reciprocate
    000001F4              L1131:                            
    000001F4 935E                   MOV.W       L1155,R3   ; H'0570
    000001F6 D130                   MOV.L       L1155+4,R1 ; _symtab
    000001F8 6212                   MOV.L       @R1,R2
    000001FA 323C                   ADD         R3,R2
    000001FC              L1132:                            
    000001FC 935B                   MOV.W       L1155+2,R3 ; H'0384
    000001FE 60C2                   MOV.L       @R12,R0
    00000200 303C                   ADD         R3,R0
    00000202 3200                   CMP/EQ      R0,R2
    00000204 8B36                   BF          L1130
           abs.c    53                    restore();
           abs.c    54                    return;
           abs.c    55            }
           abs.c    56    
           abs.c    57            // abs(a*b) evaluates to abs(a)*abs(b)
           abs.c    58    
           abs.c    59            if (car(p1) == symbol(MULTIPLY)) {
           abs.c    60                    h = tos;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:43  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000206 D22D                   MOV.L       L1155+8,R2 ; _tos
    00000208 6122                   MOV.L       @R2,R1
    0000020A 2F12                   MOV.L       R1,@R15
           abs.c    61                    p1 = cdr(p1);
    0000020C 61E2                   MOV.L       @R14,R1
    0000020E 8418                   MOV.B       @(8,R1),R0
    00000210 2008                   TST         R0,R0
    00000212 8B02                   BF          L1133
    00000214 61E2                   MOV.L       @R14,R1
    00000216 A004                   BRA         L1134
    00000218 5111                   MOV.L       @(4,R1),R1
    0000021A              L1133:                            
    0000021A 904B                   MOV.W       L1155,R0   ; H'0570
    0000021C D326                   MOV.L       L1155+4,R3 ; _symtab
    0000021E 6132                   MOV.L       @R3,R1
    00000220 310C                   ADD         R0,R1
    00000222              L1134:                            
           abs.c    62                    while (iscons(p1)) {
    00000222 A01B                   BRA         L1135
    00000224 2E12                   MOV.L       R1,@R14
    00000226              L1136:                            
           abs.c    63                            push(car(p1));
    00000226 64E2                   MOV.L       @R14,R4
    00000228 8448                   MOV.B       @(8,R4),R0
    0000022A 2008                   TST         R0,R0
    0000022C 8B02                   BF          L1137
    0000022E 64E2                   MOV.L       @R14,R4
    00000230 A004                   BRA         L1138
    00000232 6442                   MOV.L       @R4,R4
    00000234              L1137:                            
    00000234 933E                   MOV.W       L1155,R3   ; H'0570
    00000236 D220                   MOV.L       L1155+4,R2 ; _symtab
    00000238 6422                   MOV.L       @R2,R4
    0000023A 343C                   ADD         R3,R4
    0000023C              L1138:                            
    0000023C 4D0B                   JSR         @R13
    0000023E 0009                   NOP
           abs.c    64                            absval();
    00000240 BF08                   BSR         _absval
    00000242 0009                   NOP
           abs.c    65                            p1 = cdr(p1);
    00000244 63E2                   MOV.L       @R14,R3
    00000246 8438                   MOV.B       @(8,R3),R0
    00000248 2008                   TST         R0,R0
    0000024A 8B02                   BF          L1139
    0000024C 62E2                   MOV.L       @R14,R2
    0000024E A004                   BRA         L1140
    00000250 5221                   MOV.L       @(4,R2),R2
    00000252              L1139:                            
    00000252 932F                   MOV.W       L1155,R3   ; H'0570
    00000254 D118                   MOV.L       L1155+4,R1 ; _symtab
    00000256 6212                   MOV.L       @R1,R2
    00000258 323C                   ADD         R3,R2
    0000025A              L1140:                            
    0000025A 2E22                   MOV.L       R2,@R14
    0000025C              L1135:                            
    0000025C 63E2                   MOV.L       @R14,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:43  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000025E 8438                   MOV.B       @(8,R3),R0
    00000260 2008                   TST         R0,R0
    00000262 89E0                   BT          L1136
           abs.c    66                    }
           abs.c    67                    multiply_all(tos - h);
    00000264 63F2                   MOV.L       @R15,R3
    00000266 D215                   MOV.L       L1155+8,R2 ; _tos
    00000268 D115                   MOV.L       L1155+12,R1; _multiply_all
    0000026A 6422                   MOV.L       @R2,R4
    0000026C 410B                   JSR         @R1
    0000026E 3438                   SUB         R3,R4
    00000270 A05C                   BRA         L1078
    00000272 0009                   NOP
    00000274              L1130:                            
           abs.c    68                    restore();
           abs.c    69                    return;
           abs.c    70            }
           abs.c    71    
           abs.c    72            if (isnegativeterm(p1) || (car(p1) == symbol(ADD) && isnegativeterm(cadr(p1)))) {
    00000274 D213                   MOV.L       L1155+16,R2; _isnegativeterm
    00000276 420B                   JSR         @R2
    00000278 64E2                   MOV.L       @R14,R4
    0000027A 2008                   TST         R0,R0
    0000027C 8B45                   BF          L1142
    0000027E D212                   MOV.L       L1155+20,R2; _p1
    00000280 6322                   MOV.L       @R2,R3
    00000282 8438                   MOV.B       @(8,R3),R0
    00000284 2008                   TST         R0,R0
    00000286 8B03                   BF          L1143
    00000288 6122                   MOV.L       @R2,R1
    0000028A 6212                   MOV.L       @R1,R2
    0000028C A004                   BRA         L1147
    0000028E 0009                   NOP
    00000290              L1143:                            
    00000290 9310                   MOV.W       L1155,R3   ; H'0570
    00000292 D009                   MOV.L       L1155+4,R0 ; _symtab
    00000294 6202                   MOV.L       @R0,R2
    00000296 323C                   ADD         R3,R2
    00000298              L1147:                            
    00000298 D107                   MOV.L       L1155+4,R1 ; _symtab
    0000029A 6312                   MOV.L       @R1,R3
    0000029C 730C                   ADD         #12,R3
    0000029E 3230                   CMP/EQ      R3,R2
    000002A0 8B3C                   BF          L1141
    000002A2 D309                   MOV.L       L1155+20,R3; _p1
    000002A4 6432                   MOV.L       @R3,R4
    000002A6 8448                   MOV.B       @(8,R4),R0
    000002A8 2008                   TST         R0,R0
    000002AA 8B0F                   BF          L1145
    000002AC D306                   MOV.L       L1155+20,R3; _p1
    000002AE 6432                   MOV.L       @R3,R4
    000002B0 A010                   BRA         L1148
    000002B2 5441                   MOV.L       @(4,R4),R4
    000002B4              L1155:                            
    000002B4 0570                   .DATA.W     H'0570
    000002B6 0384                   .DATA.W     H'0384
    000002B8 <00000000>             .DATA.L     _symtab




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:43  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002BC <00000000>             .DATA.L     _tos
    000002C0 <00000000>             .DATA.L     _multiply_all
    000002C4 <00000000>             .DATA.L     _isnegativeterm
    000002C8 <00000000>             .DATA.L     _p1
    000002CC              L1145:                            
    000002CC 935B                   MOV.W       L1156,R3   ; H'0570
    000002CE D22E                   MOV.L       L1156+2,R2 ; _symtab
    000002D0 6422                   MOV.L       @R2,R4
    000002D2 343C                   ADD         R3,R4
    000002D4              L1148:                            
    000002D4 8448                   MOV.B       @(8,R4),R0
    000002D6 2008                   TST         R0,R0
    000002D8 8B0E                   BF          L1144
    000002DA D32C                   MOV.L       L1156+6,R3 ; _p1
    000002DC 6432                   MOV.L       @R3,R4
    000002DE 8448                   MOV.B       @(8,R4),R0
    000002E0 2008                   TST         R0,R0
    000002E2 8B03                   BF          L1146
    000002E4 D329                   MOV.L       L1156+6,R3 ; _p1
    000002E6 6432                   MOV.L       @R3,R4
    000002E8 A004                   BRA         L1149
    000002EA 5441                   MOV.L       @(4,R4),R4
    000002EC              L1146:                            
    000002EC 934B                   MOV.W       L1156,R3   ; H'0570
    000002EE D226                   MOV.L       L1156+2,R2 ; _symtab
    000002F0 6422                   MOV.L       @R2,R4
    000002F2 343C                   ADD         R3,R4
    000002F4              L1149:                            
    000002F4 A004                   BRA         L1150
    000002F6 6442                   MOV.L       @R4,R4
    000002F8              L1144:                            
    000002F8 9345                   MOV.W       L1156,R3   ; H'0570
    000002FA D223                   MOV.L       L1156+2,R2 ; _symtab
    000002FC 6422                   MOV.L       @R2,R4
    000002FE 343C                   ADD         R3,R4
    00000300              L1150:                            
    00000300 D323                   MOV.L       L1156+10,R3; _isnegativeterm
    00000302 430B                   JSR         @R3
    00000304 0009                   NOP
    00000306 2008                   TST         R0,R0
    00000308 8908                   BT          L1141
    0000030A              L1142:                            
           abs.c    73                    push(p1);
    0000030A 4D0B                   JSR         @R13
    0000030C 64E2                   MOV.L       @R14,R4
           abs.c    74                    negate();
    0000030E D321                   MOV.L       L1156+14,R3; _negate
    00000310 430B                   JSR         @R3
    00000312 0009                   NOP
           abs.c    75                    p1 = pop();
    00000314 D220                   MOV.L       L1156+18,R2; _pop
    00000316 420B                   JSR         @R2
    00000318 0009                   NOP
    0000031A 2E02                   MOV.L       R0,@R14
    0000031C              L1141:                            
           abs.c    76            }
           abs.c    77    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:43  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           abs.c    78            push_symbol(ABS);
    0000031C D31F                   MOV.L       L1156+22,R3; _push_symbol
    0000031E 430B                   JSR         @R3
    00000320 E400                   MOV         #0,R4
           abs.c    79            push(p1);
    00000322 4D0B                   JSR         @R13
    00000324 64E2                   MOV.L       @R14,R4
           abs.c    80            list(2);
    00000326 D21E                   MOV.L       L1156+26,R2; _list
    00000328 420B                   JSR         @R2
    0000032A E402                   MOV         #2,R4
    0000032C              L1078:
           abs.c    81    
           abs.c    82            restore();
    0000032C D31D                   MOV.L       L1156+30,R3; _restore
    0000032E 7F04                   ADD         #4,R15
    00000330 4F26                   LDS.L       @R15+,PR
    00000332 6CF6                   MOV.L       @R15+,R12
    00000334 6DF6                   MOV.L       @R15+,R13
    00000336 432B                   JMP         @R3
    00000338 6EF6                   MOV.L       @R15+,R14
           abs.c    83    }
           abs.c    84    
           abs.c    85    void
           abs.c    86    absval_tensor(void)
    0000033A              _absval_tensor:                  ; function: absval_tensor
                                                           ; frame size=8
    0000033A 2FE6                   MOV.L       R14,@-R15
    0000033C 4F22                   STS.L       PR,@-R15
           abs.c    87    {
           abs.c    88            if (p1->u.tensor->ndim != 1)
    0000033E DE13                   MOV.L       L1156+6,R14; _p1
    00000340 60E2                   MOV.L       @R14,R0
    00000342 6002                   MOV.L       @R0,R0
    00000344 6002                   MOV.L       @R0,R0
    00000346 8801                   CMP/EQ      #1,R0
    00000348 8903                   BT          L1151
           abs.c    89                    stop("abs(tensor) with tensor rank > 1");
    0000034A D417                   MOV.L       L1156+34,R4; L1069
    0000034C D217                   MOV.L       L1156+38,R2; _stop
    0000034E 420B                   JSR         @R2
    00000350 0009                   NOP
    00000352              L1151:                            
           abs.c    90            push(p1);
    00000352 D317                   MOV.L       L1156+42,R3; _push
    00000354 430B                   JSR         @R3
    00000356 64E2                   MOV.L       @R14,R4
           abs.c    91            push(p1);
    00000358 D215                   MOV.L       L1156+42,R2; _push
    0000035A 420B                   JSR         @R2
    0000035C 64E2                   MOV.L       @R14,R4
           abs.c    92            conjugate();
    0000035E D315                   MOV.L       L1156+46,R3; _conjugate
    00000360 430B                   JSR         @R3
    00000362 0009                   NOP
           abs.c    93            inner();
    00000364 D214                   MOV.L       L1156+50,R2; _inner




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:43  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000366 420B                   JSR         @R2
    00000368 0009                   NOP
           abs.c    94            push_rational(1, 2);
    0000036A E502                   MOV         #2,R5
    0000036C D313                   MOV.L       L1156+54,R3; _push_rational
    0000036E 430B                   JSR         @R3
    00000370 E401                   MOV         #1,R4
           abs.c    95            power();
    00000372 D213                   MOV.L       L1156+58,R2; _power
    00000374 420B                   JSR         @R2
    00000376 0009                   NOP
           abs.c    96            simplify();
    00000378 D312                   MOV.L       L1156+62,R3; _simplify
    0000037A 430B                   JSR         @R3
    0000037C 0009                   NOP
           abs.c    97            eval();
    0000037E 4F26                   LDS.L       @R15+,PR
    00000380 D211                   MOV.L       L1156+66,R2; _eval
    00000382 422B                   JMP         @R2
    00000384 6EF6                   MOV.L       @R15+,R14
    00000386              L1156:                            
    00000386 0570                   .DATA.W     H'0570
    00000388 <00000000>             .DATA.L     _symtab
    0000038C <00000000>             .DATA.L     _p1
    00000390 <00000000>             .DATA.L     _isnegativeterm
    00000394 <00000000>             .DATA.L     _negate
    00000398 <00000000>             .DATA.L     _pop
    0000039C <00000000>             .DATA.L     _push_symbol
    000003A0 <00000000>             .DATA.L     _list
    000003A4 <00000000>             .DATA.L     _restore
    000003A8 <00000000>             .DATA.L     L1069
    000003AC <00000000>             .DATA.L     _stop
    000003B0 <00000000>             .DATA.L     _push
    000003B4 <00000000>             .DATA.L     _conjugate
    000003B8 <00000000>             .DATA.L     _inner
    000003BC <00000000>             .DATA.L     _push_rational
    000003C0 <00000000>             .DATA.L     _power
    000003C4 <00000000>             .DATA.L     _simplify
    000003C8 <00000000>             .DATA.L     _eval
           abs.c    98    }
C   00000000              L1069:
    00000000 6162732874             .SDATA      "abs(tensor) with tensor rank > 1"
             656E736F72   
             2920776974   
             682074656E   
             736F722072   
             616E6B203E   
             2031         
    00000020 00                     .DATA.B     H'00












SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:43  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:       98



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000003CC Byte(s)
CONSTANT SECTION (C):                               00000021 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000003ED Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           23
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           3
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            82






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk279E.tmp 

