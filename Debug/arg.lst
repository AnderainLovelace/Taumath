SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\arg.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           arg.c     1    /* Argument (angle) of complex z
           arg.c     2    
           arg.c     3            z               arg(z)
           arg.c     4            -               ------
           arg.c     5    
           arg.c     6            a               0
           arg.c     7    
           arg.c     8            -a              -pi                     See note 3 below
           arg.c     9    
           arg.c    10            (-1)^a          a pi
           arg.c    11    
           arg.c    12            exp(a + i b)    b
           arg.c    13    
           arg.c    14            a b             arg(a) + arg(b)
           arg.c    15    
           arg.c    16            a + i b         arctan(b/a)
           arg.c    17    
           arg.c    18    Result by quadrant
           arg.c    19    
           arg.c    20            z               arg(z)
           arg.c    21            -               ------
           arg.c    22    
           arg.c    23            1 + i           1/4 pi
           arg.c    24    
           arg.c    25            1 - i           -1/4 pi
           arg.c    26    
           arg.c    27            -1 + i          3/4 pi
           arg.c    28    
           arg.c    29            -1 - i          -3/4 pi
           arg.c    30    
           arg.c    31    Notes
           arg.c    32    
           arg.c    33            1. Handles mixed polar and rectangular forms, e.g. 1 + exp(i pi/3)
           arg.c    34    
           arg.c    35            2. Symbols in z are assumed to be positive and real.
           arg.c    36    
           arg.c    37            3. Negative direction adds -pi to angle.
           arg.c    38    
           arg.c    39               Example: z = (-1)^(1/3), mag(z) = 1/3 pi, mag(-z) = -2/3 pi
           arg.c    40    
           arg.c    41            4. jean-francois.debroux reports that when z=(a+i*b)/(c+i*d) then
           arg.c    42    
           arg.c    43                    arg(numerator(z)) - arg(denominator(z))
           arg.c    44    
           arg.c    45               must be used to get the correct answer. Now the operation is
           arg.c    46               automatic.
           arg.c    47    */
           arg.c    48    
           arg.c    49    #include "stdafx.h"
           arg.c    50    #include "defs.h"
           arg.c    51    
           arg.c    52    void
           arg.c    53    eval_arg(void)
P   00000000              _eval_arg:                       ; function: eval_arg




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=8
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 4F22                   STS.L       PR,@-R15
           arg.c    54    {
           arg.c    55            push(cadr(p1));
    00000004 DE37                   MOV.L       L1150+6,R14; _p1
    00000006 64E2                   MOV.L       @R14,R4
    00000008 8448                   MOV.B       @(8,R4),R0
    0000000A 2008                   TST         R0,R0
    0000000C 8B02                   BF          L1073
    0000000E 64E2                   MOV.L       @R14,R4
    00000010 A004                   BRA         L1075
    00000012 5441                   MOV.L       @(4,R4),R4
    00000014              L1073:                            
    00000014 9363                   MOV.W       L1150,R3   ; H'0570
    00000016 D234                   MOV.L       L1150+10,R2; _symtab
    00000018 6422                   MOV.L       @R2,R4
    0000001A 343C                   ADD         R3,R4
    0000001C              L1075:                            
    0000001C 8448                   MOV.B       @(8,R4),R0
    0000001E 2008                   TST         R0,R0
    00000020 8B0C                   BF          L1072
    00000022 64E2                   MOV.L       @R14,R4
    00000024 8448                   MOV.B       @(8,R4),R0
    00000026 2008                   TST         R0,R0
    00000028 8B02                   BF          L1074
    0000002A 64E2                   MOV.L       @R14,R4
    0000002C A004                   BRA         L1076
    0000002E 5441                   MOV.L       @(4,R4),R4
    00000030              L1074:                            
    00000030 9355                   MOV.W       L1150,R3   ; H'0570
    00000032 D22D                   MOV.L       L1150+10,R2; _symtab
    00000034 6422                   MOV.L       @R2,R4
    00000036 343C                   ADD         R3,R4
    00000038              L1076:                            
    00000038 A004                   BRA         L1077
    0000003A 6442                   MOV.L       @R4,R4
    0000003C              L1072:                            
    0000003C 934F                   MOV.W       L1150,R3   ; H'0570
    0000003E D22A                   MOV.L       L1150+10,R2; _symtab
    00000040 6422                   MOV.L       @R2,R4
    00000042 343C                   ADD         R3,R4
    00000044              L1077:                            
    00000044 D329                   MOV.L       L1150+14,R3; _push
    00000046 430B                   JSR         @R3
    00000048 0009                   NOP
           arg.c    56            eval();
    0000004A D229                   MOV.L       L1150+18,R2; _eval
    0000004C 420B                   JSR         @R2
    0000004E 0009                   NOP
           arg.c    57            arg();
    00000050 4F26                   LDS.L       @R15+,PR
    00000052 6EF6                   MOV.L       @R15+,R14
           arg.c    58    }
           arg.c    59    
           arg.c    60    void
           arg.c    61    arg(void)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000054              _arg:                            ; function: arg
                                                           ; frame size=8
    00000054 2FE6                   MOV.L       R14,@-R15
    00000056 4F22                   STS.L       PR,@-R15
           arg.c    62    {
           arg.c    63            save();
    00000058 D326                   MOV.L       L1150+22,R3; _save
    0000005A 430B                   JSR         @R3
    0000005C 0009                   NOP
           arg.c    64            p1 = pop();
    0000005E DE21                   MOV.L       L1150+6,R14; _p1
    00000060 D225                   MOV.L       L1150+26,R2; _pop
    00000062 420B                   JSR         @R2
    00000064 0009                   NOP
    00000066 2E02                   MOV.L       R0,@R14
           arg.c    65            push(p1);
    00000068 D320                   MOV.L       L1150+14,R3; _push
    0000006A 430B                   JSR         @R3
    0000006C 6403                   MOV         R0,R4
           arg.c    66            numerator();
    0000006E D223                   MOV.L       L1150+30,R2; _numerator
    00000070 420B                   JSR         @R2
    00000072 0009                   NOP
           arg.c    67            yyarg();
    00000074 B00F                   BSR         _yyarg
    00000076 0009                   NOP
           arg.c    68            push(p1);
    00000078 D21C                   MOV.L       L1150+14,R2; _push
    0000007A 420B                   JSR         @R2
    0000007C 64E2                   MOV.L       @R14,R4
           arg.c    69            denominator();
    0000007E D320                   MOV.L       L1150+34,R3; _denominator
    00000080 430B                   JSR         @R3
    00000082 0009                   NOP
           arg.c    70            yyarg();
    00000084 B007                   BSR         _yyarg
    00000086 0009                   NOP
           arg.c    71            subtract();
    00000088 D31E                   MOV.L       L1150+38,R3; _subtract
    0000008A 430B                   JSR         @R3
    0000008C 0009                   NOP
           arg.c    72            restore();
    0000008E 4F26                   LDS.L       @R15+,PR
    00000090 D21D                   MOV.L       L1150+42,R2; _restore
    00000092 422B                   JMP         @R2
    00000094 6EF6                   MOV.L       @R15+,R14
           arg.c    73    }
           arg.c    74    
           arg.c    75    #define RE p2
           arg.c    76    #define IM p3
           arg.c    77    
           arg.c    78    void
           arg.c    79    yyarg(void)
    00000096              _yyarg:                          ; function: yyarg
                                                           ; frame size=32
    00000096 2FE6                   MOV.L       R14,@-R15
    00000098 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000009A 2FC6                   MOV.L       R12,@-R15
    0000009C 2FB6                   MOV.L       R11,@-R15
    0000009E 2FA6                   MOV.L       R10,@-R15
    000000A0 2F96                   MOV.L       R9,@-R15
    000000A2 2F86                   MOV.L       R8,@-R15
    000000A4 4F22                   STS.L       PR,@-R15
           arg.c    80    {
           arg.c    81            save();
    000000A6 D313                   MOV.L       L1150+22,R3; _save
    000000A8 430B                   JSR         @R3
    000000AA 0009                   NOP
           arg.c    82            p1 = pop();
    000000AC DB12                   MOV.L       L1150+26,R11; _pop
    000000AE DE0D                   MOV.L       L1150+6,R14; _p1
    000000B0 4B0B                   JSR         @R11
    000000B2 0009                   NOP
    000000B4 2E02                   MOV.L       R0,@R14
           arg.c    83            if (isnegativenumber(p1)) {
    000000B6 9813                   MOV.W       L1150+2,R8 ; H'05F4
    000000B8 DC0B                   MOV.L       L1150+10,R12; _symtab
    000000BA DD0C                   MOV.L       L1150+14,R13; _push
    000000BC D213                   MOV.L       L1150+46,R2; _isnegativenumber
    000000BE 420B                   JSR         @R2
    000000C0 6403                   MOV         R0,R4
    000000C2 2008                   TST         R0,R0
    000000C4 8904                   BT          L1078
           arg.c    84                    push(symbol(PI));
    000000C6 64C2                   MOV.L       @R12,R4
    000000C8 4D0B                   JSR         @R13
    000000CA 348C                   ADD         R8,R4
    000000CC A19C                   BRA         L1070
    000000CE 0009                   NOP
    000000D0              L1078:                            
           arg.c    85                    negate();
           arg.c    86            } else if (car(p1) == symbol(POWER) && equaln(cadr(p1), -1)) {
    000000D0 63E2                   MOV.L       @R14,R3
    000000D2 8438                   MOV.B       @(8,R3),R0
    000000D4 2008                   TST         R0,R0
    000000D6 8B1B                   BF          L1081
    000000D8 62E2                   MOV.L       @R14,R2
    000000DA A01D                   BRA         L1085
    000000DC 6222                   MOV.L       @R2,R2
    000000DE              L1150:                            
    000000DE 0570                   .DATA.W     H'0570
    000000E0 05F4                   .DATA.W     H'05F4
    000000E2 0000                   .DATA.W     0
    000000E4 <00000000>             .DATA.L     _p1
    000000E8 <00000000>             .DATA.L     _symtab
    000000EC <00000000>             .DATA.L     _push
    000000F0 <00000000>             .DATA.L     _eval
    000000F4 <00000000>             .DATA.L     _save
    000000F8 <00000000>             .DATA.L     _pop
    000000FC <00000000>             .DATA.L     _numerator
    00000100 <00000000>             .DATA.L     _denominator
    00000104 <00000000>             .DATA.L     _subtract
    00000108 <00000000>             .DATA.L     _restore
    0000010C <00000000>             .DATA.L     _isnegativenumber




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000110              L1081:                            
    00000110 936B                   MOV.W       L1151,R3   ; H'0570
    00000112 D137                   MOV.L       L1151+6,R1 ; _symtab
    00000114 6212                   MOV.L       @R1,R2
    00000116 323C                   ADD         R3,R2
    00000118              L1085:                            
    00000118 9368                   MOV.W       L1151+2,R3 ; H'03F0
    0000011A 60C2                   MOV.L       @R12,R0
    0000011C 303C                   ADD         R3,R0
    0000011E 3200                   CMP/EQ      R0,R2
    00000120 8901                   BT          L1152
    00000122 A07A                   BRA         L1080
    00000124 0009                   NOP
    00000126              L1152:                            
    00000126 64E2                   MOV.L       @R14,R4
    00000128 8448                   MOV.B       @(8,R4),R0
    0000012A 2008                   TST         R0,R0
    0000012C 8F03                   BF/S        L1083
    0000012E E5FF                   MOV         #-1,R5
    00000130 64E2                   MOV.L       @R14,R4
    00000132 A003                   BRA         L1086
    00000134 5441                   MOV.L       @(4,R4),R4
    00000136              L1083:                            
    00000136 9258                   MOV.W       L1151,R2   ; H'0570
    00000138 64C2                   MOV.L       @R12,R4
    0000013A 342C                   ADD         R2,R4
    0000013C              L1086:                            
    0000013C 8448                   MOV.B       @(8,R4),R0
    0000013E 2008                   TST         R0,R0
    00000140 8B0B                   BF          L1082
    00000142 64E2                   MOV.L       @R14,R4
    00000144 8448                   MOV.B       @(8,R4),R0
    00000146 2008                   TST         R0,R0
    00000148 8B02                   BF          L1084
    0000014A 64E2                   MOV.L       @R14,R4
    0000014C A003                   BRA         L1087
    0000014E 5441                   MOV.L       @(4,R4),R4
    00000150              L1084:                            
    00000150 934B                   MOV.W       L1151,R3   ; H'0570
    00000152 64C2                   MOV.L       @R12,R4
    00000154 343C                   ADD         R3,R4
    00000156              L1087:                            
    00000156 A003                   BRA         L1088
    00000158 6442                   MOV.L       @R4,R4
    0000015A              L1082:                            
    0000015A 9346                   MOV.W       L1151,R3   ; H'0570
    0000015C 64C2                   MOV.L       @R12,R4
    0000015E 343C                   ADD         R3,R4
    00000160              L1088:                            
    00000160 D324                   MOV.L       L1151+10,R3; _equaln
    00000162 430B                   JSR         @R3
    00000164 0009                   NOP
    00000166 2008                   TST         R0,R0
    00000168 8957                   BT          L1080
           arg.c    87                    // -1 to a power
           arg.c    88                    push(symbol(PI));
    0000016A 64C2                   MOV.L       @R12,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000016C 4D0B                   JSR         @R13
    0000016E 348C                   ADD         R8,R4
           arg.c    89                    push(caddr(p1));
    00000170 64E2                   MOV.L       @R14,R4
    00000172 8448                   MOV.B       @(8,R4),R0
    00000174 2008                   TST         R0,R0
    00000176 8B02                   BF          L1091
    00000178 64E2                   MOV.L       @R14,R4
    0000017A A004                   BRA         L1096
    0000017C 5441                   MOV.L       @(4,R4),R4
    0000017E              L1091:                            
    0000017E 9334                   MOV.W       L1151,R3   ; H'0570
    00000180 D21B                   MOV.L       L1151+6,R2 ; _symtab
    00000182 6422                   MOV.L       @R2,R4
    00000184 343C                   ADD         R3,R4
    00000186              L1096:                            
    00000186 8448                   MOV.B       @(8,R4),R0
    00000188 2008                   TST         R0,R0
    0000018A 8B0C                   BF          L1090
    0000018C 64E2                   MOV.L       @R14,R4
    0000018E 8448                   MOV.B       @(8,R4),R0
    00000190 2008                   TST         R0,R0
    00000192 8B02                   BF          L1092
    00000194 64E2                   MOV.L       @R14,R4
    00000196 A004                   BRA         L1097
    00000198 5441                   MOV.L       @(4,R4),R4
    0000019A              L1092:                            
    0000019A 9326                   MOV.W       L1151,R3   ; H'0570
    0000019C D214                   MOV.L       L1151+6,R2 ; _symtab
    0000019E 6422                   MOV.L       @R2,R4
    000001A0 343C                   ADD         R3,R4
    000001A2              L1097:                            
    000001A2 A004                   BRA         L1098
    000001A4 5441                   MOV.L       @(4,R4),R4
    000001A6              L1090:                            
    000001A6 9320                   MOV.W       L1151,R3   ; H'0570
    000001A8 D211                   MOV.L       L1151+6,R2 ; _symtab
    000001AA 6422                   MOV.L       @R2,R4
    000001AC 343C                   ADD         R3,R4
    000001AE              L1098:                            
    000001AE 8448                   MOV.B       @(8,R4),R0
    000001B0 2008                   TST         R0,R0
    000001B2 8B27                   BF          L1089
    000001B4 64E2                   MOV.L       @R14,R4
    000001B6 8448                   MOV.B       @(8,R4),R0
    000001B8 2008                   TST         R0,R0
    000001BA 8B02                   BF          L1094
    000001BC 64E2                   MOV.L       @R14,R4
    000001BE A004                   BRA         L1099
    000001C0 5441                   MOV.L       @(4,R4),R4
    000001C2              L1094:                            
    000001C2 9312                   MOV.W       L1151,R3   ; H'0570
    000001C4 D20A                   MOV.L       L1151+6,R2 ; _symtab
    000001C6 6422                   MOV.L       @R2,R4
    000001C8 343C                   ADD         R3,R4
    000001CA              L1099:                            
    000001CA 8448                   MOV.B       @(8,R4),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001CC 2008                   TST         R0,R0
    000001CE 8B13                   BF          L1093
    000001D0 64E2                   MOV.L       @R14,R4
    000001D2 8448                   MOV.B       @(8,R4),R0
    000001D4 2008                   TST         R0,R0
    000001D6 8B02                   BF          L1095
    000001D8 64E2                   MOV.L       @R14,R4
    000001DA A004                   BRA         L1100
    000001DC 5441                   MOV.L       @(4,R4),R4
    000001DE              L1095:                            
    000001DE 9304                   MOV.W       L1151,R3   ; H'0570
    000001E0 D203                   MOV.L       L1151+6,R2 ; _symtab
    000001E2 6422                   MOV.L       @R2,R4
    000001E4 343C                   ADD         R3,R4
    000001E6              L1100:                            
    000001E6 A00B                   BRA         L1101
    000001E8 5441                   MOV.L       @(4,R4),R4
    000001EA              L1151:                            
    000001EA 0570                   .DATA.W     H'0570
    000001EC 03F0                   .DATA.W     H'03F0
    000001EE 0000                   .DATA.W     0
    000001F0 <00000000>             .DATA.L     _symtab
    000001F4 <00000000>             .DATA.L     _equaln
    000001F8              L1093:                            
    000001F8 935F                   MOV.W       L1153,R3   ; H'0570
    000001FA D231                   MOV.L       L1153+6,R2 ; _symtab
    000001FC 6422                   MOV.L       @R2,R4
    000001FE 343C                   ADD         R3,R4
    00000200              L1101:                            
    00000200 A004                   BRA         L1102
    00000202 6442                   MOV.L       @R4,R4
    00000204              L1089:                            
    00000204 9359                   MOV.W       L1153,R3   ; H'0570
    00000206 D22E                   MOV.L       L1153+6,R2 ; _symtab
    00000208 6422                   MOV.L       @R2,R4
    0000020A 343C                   ADD         R3,R4
    0000020C              L1102:                            
    0000020C 4D0B                   JSR         @R13
    0000020E 0009                   NOP
           arg.c    90                    multiply();
    00000210 D32C                   MOV.L       L1153+10,R3; _multiply
    00000212 430B                   JSR         @R3
    00000214 0009                   NOP
    00000216 A11D                   BRA         L1079
    00000218 0009                   NOP
    0000021A              L1080:                            
    0000021A 64E2                   MOV.L       @R14,R4
    0000021C 8448                   MOV.B       @(8,R4),R0
    0000021E 2008                   TST         R0,R0
    00000220 8F02                   BF/S        L1105
    00000222 65C2                   MOV.L       @R12,R5
    00000224 A003                   BRA         L1109
    00000226 6342                   MOV.L       @R4,R3
    00000228              L1105:                            
    00000228 9247                   MOV.W       L1153,R2   ; H'0570
    0000022A 63C2                   MOV.L       @R12,R3
    0000022C 332C                   ADD         R2,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000022E              L1109:                            
    0000022E 9045                   MOV.W       L1153+2,R0 ; H'03F0
    00000230 305C                   ADD         R5,R0
    00000232 3300                   CMP/EQ      R0,R3
    00000234 8B6D                   BF          L1104
    00000236 8448                   MOV.B       @(8,R4),R0
    00000238 2008                   TST         R0,R0
    0000023A 8B01                   BF          L1107
    0000023C A002                   BRA         L1110
    0000023E 5341                   MOV.L       @(4,R4),R3
    00000240              L1107:                            
    00000240 933B                   MOV.W       L1153,R3   ; H'0570
    00000242 335C                   ADD         R5,R3
    00000244              L1110:                            
    00000244 8438                   MOV.B       @(8,R3),R0
    00000246 2008                   TST         R0,R0
    00000248 8B08                   BF          L1106
    0000024A 8448                   MOV.B       @(8,R4),R0
    0000024C 2008                   TST         R0,R0
    0000024E 8B01                   BF          L1108
    00000250 A002                   BRA         L1111
    00000252 5241                   MOV.L       @(4,R4),R2
    00000254              L1108:                            
    00000254 9231                   MOV.W       L1153,R2   ; H'0570
    00000256 325C                   ADD         R5,R2
    00000258              L1111:                            
    00000258 A002                   BRA         L1112
    0000025A 6222                   MOV.L       @R2,R2
    0000025C              L1106:                            
    0000025C 922D                   MOV.W       L1153,R2   ; H'0570
    0000025E 325C                   ADD         R5,R2
    00000260              L1112:                            
    00000260 912D                   MOV.W       L1153+4,R1 ; H'05AC
    00000262 315C                   ADD         R5,R1
    00000264 3210                   CMP/EQ      R1,R2
    00000266 8B54                   BF          L1104
           arg.c    91            } else if (car(p1) == symbol(POWER) && cadr(p1) == symbol(E)) {
           arg.c    92                    // exponential
           arg.c    93                    push(caddr(p1));
    00000268 64E2                   MOV.L       @R14,R4
    0000026A 8448                   MOV.B       @(8,R4),R0
    0000026C 2008                   TST         R0,R0
    0000026E 8B02                   BF          L1115
    00000270 64E2                   MOV.L       @R14,R4
    00000272 A004                   BRA         L1120
    00000274 5441                   MOV.L       @(4,R4),R4
    00000276              L1115:                            
    00000276 9320                   MOV.W       L1153,R3   ; H'0570
    00000278 D211                   MOV.L       L1153+6,R2 ; _symtab
    0000027A 6422                   MOV.L       @R2,R4
    0000027C 343C                   ADD         R3,R4
    0000027E              L1120:                            
    0000027E 8448                   MOV.B       @(8,R4),R0
    00000280 2008                   TST         R0,R0
    00000282 8B0C                   BF          L1114
    00000284 64E2                   MOV.L       @R14,R4
    00000286 8448                   MOV.B       @(8,R4),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000288 2008                   TST         R0,R0
    0000028A 8B02                   BF          L1116
    0000028C 64E2                   MOV.L       @R14,R4
    0000028E A004                   BRA         L1121
    00000290 5441                   MOV.L       @(4,R4),R4
    00000292              L1116:                            
    00000292 9312                   MOV.W       L1153,R3   ; H'0570
    00000294 D20A                   MOV.L       L1153+6,R2 ; _symtab
    00000296 6422                   MOV.L       @R2,R4
    00000298 343C                   ADD         R3,R4
    0000029A              L1121:                            
    0000029A A004                   BRA         L1122
    0000029C 5441                   MOV.L       @(4,R4),R4
    0000029E              L1114:                            
    0000029E 930C                   MOV.W       L1153,R3   ; H'0570
    000002A0 D207                   MOV.L       L1153+6,R2 ; _symtab
    000002A2 6422                   MOV.L       @R2,R4
    000002A4 343C                   ADD         R3,R4
    000002A6              L1122:                            
    000002A6 8448                   MOV.B       @(8,R4),R0
    000002A8 2008                   TST         R0,R0
    000002AA 8B27                   BF          L1113
    000002AC 64E2                   MOV.L       @R14,R4
    000002AE 8448                   MOV.B       @(8,R4),R0
    000002B0 2008                   TST         R0,R0
    000002B2 8B09                   BF          L1118
    000002B4 64E2                   MOV.L       @R14,R4
    000002B6 A00B                   BRA         L1123
    000002B8 5441                   MOV.L       @(4,R4),R4
    000002BA              L1153:                            
    000002BA 0570                   .DATA.W     H'0570
    000002BC 03F0                   .DATA.W     H'03F0
    000002BE 05AC                   .DATA.W     H'05AC
    000002C0 <00000000>             .DATA.L     _symtab
    000002C4 <00000000>             .DATA.L     _multiply
    000002C8              L1118:                            
    000002C8 9368                   MOV.W       L1154,R3   ; H'0570
    000002CA D235                   MOV.L       L1154+4,R2 ; _symtab
    000002CC 6422                   MOV.L       @R2,R4
    000002CE 343C                   ADD         R3,R4
    000002D0              L1123:                            
    000002D0 8448                   MOV.B       @(8,R4),R0
    000002D2 2008                   TST         R0,R0
    000002D4 8B0C                   BF          L1117
    000002D6 64E2                   MOV.L       @R14,R4
    000002D8 8448                   MOV.B       @(8,R4),R0
    000002DA 2008                   TST         R0,R0
    000002DC 8B02                   BF          L1119
    000002DE 64E2                   MOV.L       @R14,R4
    000002E0 A004                   BRA         L1124
    000002E2 5441                   MOV.L       @(4,R4),R4
    000002E4              L1119:                            
    000002E4 935A                   MOV.W       L1154,R3   ; H'0570
    000002E6 D22E                   MOV.L       L1154+4,R2 ; _symtab
    000002E8 6422                   MOV.L       @R2,R4
    000002EA 343C                   ADD         R3,R4
    000002EC              L1124:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002EC A004                   BRA         L1125
    000002EE 5441                   MOV.L       @(4,R4),R4
    000002F0              L1117:                            
    000002F0 9354                   MOV.W       L1154,R3   ; H'0570
    000002F2 D22B                   MOV.L       L1154+4,R2 ; _symtab
    000002F4 6422                   MOV.L       @R2,R4
    000002F6 343C                   ADD         R3,R4
    000002F8              L1125:                            
    000002F8 A004                   BRA         L1126
    000002FA 6442                   MOV.L       @R4,R4
    000002FC              L1113:                            
    000002FC 934E                   MOV.W       L1154,R3   ; H'0570
    000002FE D228                   MOV.L       L1154+4,R2 ; _symtab
    00000300 6422                   MOV.L       @R2,R4
    00000302 343C                   ADD         R3,R4
    00000304              L1126:                            
    00000304 4D0B                   JSR         @R13
    00000306 0009                   NOP
           arg.c    94                    imag();
    00000308 D326                   MOV.L       L1154+8,R3 ; _imag
    0000030A 430B                   JSR         @R3
    0000030C 0009                   NOP
    0000030E A0A1                   BRA         L1079
    00000310 0009                   NOP
    00000312              L1104:                            
           arg.c    95            } else if (car(p1) == symbol(MULTIPLY)) {
    00000312 DA25                   MOV.L       L1154+12,R10; _add
    00000314 8448                   MOV.B       @(8,R4),R0
    00000316 2008                   TST         R0,R0
    00000318 8B01                   BF          L1129
    0000031A A002                   BRA         L1130
    0000031C 6342                   MOV.L       @R4,R3
    0000031E              L1129:                            
    0000031E 933D                   MOV.W       L1154,R3   ; H'0570
    00000320 335C                   ADD         R5,R3
    00000322              L1130:                            
    00000322 913C                   MOV.W       L1154+2,R1 ; H'0384
    00000324 315C                   ADD         R5,R1
    00000326 3310                   CMP/EQ      R1,R3
    00000328 8B32                   BF          L1128
           arg.c    96                    // product of factors
           arg.c    97                    push_integer(0);
    0000032A D220                   MOV.L       L1154+16,R2; _push_integer
    0000032C 420B                   JSR         @R2
    0000032E E400                   MOV         #0,R4
           arg.c    98                    p1 = cdr(p1);
    00000330 62E2                   MOV.L       @R14,R2
    00000332 8428                   MOV.B       @(8,R2),R0
    00000334 2008                   TST         R0,R0
    00000336 8B02                   BF          L1131
    00000338 62E2                   MOV.L       @R14,R2
    0000033A A004                   BRA         L1132
    0000033C 5321                   MOV.L       @(4,R2),R3
    0000033E              L1131:                            
    0000033E 922D                   MOV.W       L1154,R2   ; H'0570
    00000340 D117                   MOV.L       L1154+4,R1 ; _symtab
    00000342 6312                   MOV.L       @R1,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000344 332C                   ADD         R2,R3
    00000346              L1132:                            
           arg.c    99                    while (iscons(p1)) {
    00000346 A01D                   BRA         L1133
    00000348 2E32                   MOV.L       R3,@R14
    0000034A              L1134:                            
           arg.c   100                            push(car(p1));
    0000034A 64E2                   MOV.L       @R14,R4
    0000034C 8448                   MOV.B       @(8,R4),R0
    0000034E 2008                   TST         R0,R0
    00000350 8B02                   BF          L1135
    00000352 64E2                   MOV.L       @R14,R4
    00000354 A004                   BRA         L1136
    00000356 6442                   MOV.L       @R4,R4
    00000358              L1135:                            
    00000358 9320                   MOV.W       L1154,R3   ; H'0570
    0000035A D211                   MOV.L       L1154+4,R2 ; _symtab
    0000035C 6422                   MOV.L       @R2,R4
    0000035E 343C                   ADD         R3,R4
    00000360              L1136:                            
    00000360 4D0B                   JSR         @R13
    00000362 0009                   NOP
           arg.c   101                            arg();
    00000364 BE76                   BSR         _arg
    00000366 0009                   NOP
           arg.c   102                            add();
    00000368 4A0B                   JSR         @R10
    0000036A 0009                   NOP
           arg.c   103                            p1 = cdr(p1);
    0000036C 63E2                   MOV.L       @R14,R3
    0000036E 8438                   MOV.B       @(8,R3),R0
    00000370 2008                   TST         R0,R0
    00000372 8B02                   BF          L1137
    00000374 62E2                   MOV.L       @R14,R2
    00000376 A004                   BRA         L1138
    00000378 5221                   MOV.L       @(4,R2),R2
    0000037A              L1137:                            
    0000037A 930F                   MOV.W       L1154,R3   ; H'0570
    0000037C D108                   MOV.L       L1154+4,R1 ; _symtab
    0000037E 6212                   MOV.L       @R1,R2
    00000380 323C                   ADD         R3,R2
    00000382              L1138:                            
    00000382 2E22                   MOV.L       R2,@R14
    00000384              L1133:                            
    00000384 63E2                   MOV.L       @R14,R3
    00000386 8438                   MOV.B       @(8,R3),R0
    00000388 2008                   TST         R0,R0
    0000038A 89DE                   BT          L1134
    0000038C A062                   BRA         L1079
    0000038E 0009                   NOP
    00000390              L1128:                            
           arg.c   104                    }
           arg.c   105            } else if (car(p1) == symbol(ADD)) {
    00000390 8448                   MOV.B       @(8,R4),R0
    00000392 2008                   TST         R0,R0
    00000394 8F0C                   BF/S        L1141
    00000396 6153                   MOV         R5,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000398 A00C                   BRA         L1142
    0000039A 6342                   MOV.L       @R4,R3
    0000039C              L1154:                            
    0000039C 0570                   .DATA.W     H'0570
    0000039E 0384                   .DATA.W     H'0384
    000003A0 <00000000>             .DATA.L     _symtab
    000003A4 <00000000>             .DATA.L     _imag
    000003A8 <00000000>             .DATA.L     _add
    000003AC <00000000>             .DATA.L     _push_integer
    000003B0              L1141:                            
    000003B0 935A                   MOV.W       L1155,R3   ; H'0570
    000003B2 335C                   ADD         R5,R3
    000003B4              L1142:                            
    000003B4 710C                   ADD         #12,R1
    000003B6 3310                   CMP/EQ      R1,R3
    000003B8 8B49                   BF          L1140
           arg.c   106                    // sum of terms
           arg.c   107                    push(p1);
    000003BA 4D0B                   JSR         @R13
    000003BC 0009                   NOP
           arg.c   108                    rect();
    000003BE D22B                   MOV.L       L1155+4,R2 ; _rect
    000003C0 420B                   JSR         @R2
    000003C2 0009                   NOP
           arg.c   109                    p1 = pop();
    000003C4 4B0B                   JSR         @R11
    000003C6 0009                   NOP
    000003C8 2E02                   MOV.L       R0,@R14
           arg.c   110                    push(p1);
    000003CA 4D0B                   JSR         @R13
    000003CC 6403                   MOV         R0,R4
           arg.c   111                    real();
    000003CE D328                   MOV.L       L1155+8,R3 ; _real
    000003D0 430B                   JSR         @R3
    000003D2 0009                   NOP
           arg.c   112                    RE = pop();
    000003D4 D927                   MOV.L       L1155+12,R9; _p2
    000003D6 4B0B                   JSR         @R11
    000003D8 0009                   NOP
    000003DA 2902                   MOV.L       R0,@R9
           arg.c   113                    push(p1);
    000003DC 4D0B                   JSR         @R13
    000003DE 64E2                   MOV.L       @R14,R4
           arg.c   114                    imag();
    000003E0 D225                   MOV.L       L1155+16,R2; _imag
    000003E2 420B                   JSR         @R2
    000003E4 0009                   NOP
           arg.c   115                    IM = pop();
    000003E6 DE25                   MOV.L       L1155+20,R14; _p3
    000003E8 4B0B                   JSR         @R11
    000003EA 0009                   NOP
    000003EC 2E02                   MOV.L       R0,@R14
           arg.c   116                    if (iszero(RE)) {
    000003EE DB24                   MOV.L       L1155+24,R11; _isnegative
    000003F0 D324                   MOV.L       L1155+28,R3; _iszero
    000003F2 430B                   JSR         @R3
    000003F4 6492                   MOV.L       @R9,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003F6 2008                   TST         R0,R0
    000003F8 890B                   BT          L1143
           arg.c   117                            push(symbol(PI));
    000003FA 64C2                   MOV.L       @R12,R4
    000003FC 4D0B                   JSR         @R13
    000003FE 348C                   ADD         R8,R4
           arg.c   118                            if (isnegative(IM))
    00000400 4B0B                   JSR         @R11
    00000402 64E2                   MOV.L       @R14,R4
    00000404 2008                   TST         R0,R0
    00000406 8925                   BT          L1079
    00000408              L1070:
           arg.c   119                                    negate();
    00000408 D21F                   MOV.L       L1155+32,R2; _negate
    0000040A 420B                   JSR         @R2
    0000040C 0009                   NOP
    0000040E A021                   BRA         L1079
    00000410 0009                   NOP
    00000412              L1143:                            
           arg.c   120                    } else {
           arg.c   121                            push(IM);
    00000412 4D0B                   JSR         @R13
    00000414 64E2                   MOV.L       @R14,R4
           arg.c   122                            push(RE);
    00000416 4D0B                   JSR         @R13
    00000418 6492                   MOV.L       @R9,R4
           arg.c   123                            divide();
    0000041A D21C                   MOV.L       L1155+36,R2; _divide
    0000041C 420B                   JSR         @R2
    0000041E 0009                   NOP
           arg.c   124                            arctan();
    00000420 D31B                   MOV.L       L1155+40,R3; _arctan
    00000422 430B                   JSR         @R3
    00000424 0009                   NOP
           arg.c   125                            if (isnegative(RE)) {
    00000426 4B0B                   JSR         @R11
    00000428 6492                   MOV.L       @R9,R4
    0000042A 2008                   TST         R0,R0
    0000042C 8912                   BT          L1079
           arg.c   126                                    push_symbol(PI);
    0000042E D319                   MOV.L       L1155+44,R3; _push_symbol
    00000430 430B                   JSR         @R3
    00000432 E47F                   MOV         #127,R4
           arg.c   127                                    if (isnegative(IM))
    00000434 4B0B                   JSR         @R11
    00000436 64E2                   MOV.L       @R14,R4
    00000438 2008                   TST         R0,R0
    0000043A 8904                   BT          L1147
           arg.c   128                                            subtract();     // quadrant 1 -> 3
    0000043C D316                   MOV.L       L1155+48,R3; _subtract
    0000043E 430B                   JSR         @R3
    00000440 0009                   NOP
    00000442 A007                   BRA         L1079
    00000444 0009                   NOP
    00000446              L1147:                            
           arg.c   129                                    else
           arg.c   130                                            add();          // quadrant 4 -> 2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000446 4A0B                   JSR         @R10
    00000448 0009                   NOP
    0000044A A003                   BRA         L1079
    0000044C 0009                   NOP
    0000044E              L1140:                            
           arg.c   131                            }
           arg.c   132                    }
           arg.c   133            } else
           arg.c   134                    // pure real
           arg.c   135                    push_integer(0);
    0000044E D213                   MOV.L       L1155+52,R2; _push_integer
    00000450 420B                   JSR         @R2
    00000452 E400                   MOV         #0,R4
    00000454              L1079:                            
           arg.c   136            restore();
    00000454 4F26                   LDS.L       @R15+,PR
    00000456 68F6                   MOV.L       @R15+,R8
    00000458 D311                   MOV.L       L1155+56,R3; _restore
    0000045A 69F6                   MOV.L       @R15+,R9
    0000045C 6AF6                   MOV.L       @R15+,R10
    0000045E 6BF6                   MOV.L       @R15+,R11
    00000460 6CF6                   MOV.L       @R15+,R12
    00000462 6DF6                   MOV.L       @R15+,R13
    00000464 432B                   JMP         @R3
    00000466 6EF6                   MOV.L       @R15+,R14
    00000468              L1155:                            
    00000468 0570                   .DATA.W     H'0570
    0000046A 0000                   .DATA.W     0
    0000046C <00000000>             .DATA.L     _rect
    00000470 <00000000>             .DATA.L     _real
    00000474 <00000000>             .DATA.L     _p2
    00000478 <00000000>             .DATA.L     _imag
    0000047C <00000000>             .DATA.L     _p3
    00000480 <00000000>             .DATA.L     _isnegative
    00000484 <00000000>             .DATA.L     _iszero
    00000488 <00000000>             .DATA.L     _negate
    0000048C <00000000>             .DATA.L     _divide
    00000490 <00000000>             .DATA.L     _arctan
    00000494 <00000000>             .DATA.L     _push_symbol
    00000498 <00000000>             .DATA.L     _subtract
    0000049C <00000000>             .DATA.L     _push_integer
    000004A0 <00000000>             .DATA.L     _restore
           arg.c   137    }


















SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:46  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      137



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000004A4 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000004A4 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           26
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           3
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           106






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk337B.tmp 

