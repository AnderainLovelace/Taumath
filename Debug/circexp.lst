SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\circexp.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

       circexp.c     1    // Change circular functions to exponentials
       circexp.c     2    
       circexp.c     3    #include "stdafx.h"
       circexp.c     4    #include "defs.h"
       circexp.c     5    
       circexp.c     6    void
       circexp.c     7    eval_circexp(void)
P   00000000              _eval_circexp:                   ; function: eval_circexp
                                                           ; frame size=8
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 4F22                   STS.L       PR,@-R15
       circexp.c     8    {
       circexp.c     9            push(cadr(p1));
    00000004 DE3A                   MOV.L       L1215+4,R14; _p1
    00000006 64E2                   MOV.L       @R14,R4
    00000008 8448                   MOV.B       @(8,R4),R0
    0000000A 2008                   TST         R0,R0
    0000000C 8B02                   BF          L1145
    0000000E 64E2                   MOV.L       @R14,R4
    00000010 A004                   BRA         L1147
    00000012 5441                   MOV.L       @(4,R4),R4
    00000014              L1145:                            
    00000014 936A                   MOV.W       L1215,R3   ; H'0570
    00000016 D237                   MOV.L       L1215+8,R2 ; _symtab
    00000018 6422                   MOV.L       @R2,R4
    0000001A 343C                   ADD         R3,R4
    0000001C              L1147:                            
    0000001C 8448                   MOV.B       @(8,R4),R0
    0000001E 2008                   TST         R0,R0
    00000020 8B0C                   BF          L1144
    00000022 64E2                   MOV.L       @R14,R4
    00000024 8448                   MOV.B       @(8,R4),R0
    00000026 2008                   TST         R0,R0
    00000028 8B02                   BF          L1146
    0000002A 64E2                   MOV.L       @R14,R4
    0000002C A004                   BRA         L1148
    0000002E 5441                   MOV.L       @(4,R4),R4
    00000030              L1146:                            
    00000030 935C                   MOV.W       L1215,R3   ; H'0570
    00000032 D230                   MOV.L       L1215+8,R2 ; _symtab
    00000034 6422                   MOV.L       @R2,R4
    00000036 343C                   ADD         R3,R4
    00000038              L1148:                            
    00000038 A004                   BRA         L1149
    0000003A 6442                   MOV.L       @R4,R4
    0000003C              L1144:                            
    0000003C 9356                   MOV.W       L1215,R3   ; H'0570
    0000003E D22D                   MOV.L       L1215+8,R2 ; _symtab
    00000040 6422                   MOV.L       @R2,R4
    00000042 343C                   ADD         R3,R4
    00000044              L1149:                            
    00000044 D32C                   MOV.L       L1215+12,R3; _push
    00000046 430B                   JSR         @R3
    00000048 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

       circexp.c    10            eval();
    0000004A D22C                   MOV.L       L1215+16,R2; _eval
    0000004C 420B                   JSR         @R2
    0000004E 0009                   NOP
       circexp.c    11    
       circexp.c    12            circexp();
    00000050 B004                   BSR         _circexp
    00000052 0009                   NOP
       circexp.c    13    
       circexp.c    14            // normalize
       circexp.c    15    
       circexp.c    16            eval();
    00000054 4F26                   LDS.L       @R15+,PR
    00000056 D229                   MOV.L       L1215+16,R2; _eval
    00000058 422B                   JMP         @R2
    0000005A 6EF6                   MOV.L       @R15+,R14
       circexp.c    17    }
       circexp.c    18    
       circexp.c    19    void
       circexp.c    20    circexp(void)
    0000005C              _circexp:                        ; function: circexp
                                                           ; frame size=36
    0000005C 2FE6                   MOV.L       R14,@-R15
    0000005E 2FD6                   MOV.L       R13,@-R15
    00000060 2FC6                   MOV.L       R12,@-R15
    00000062 2FB6                   MOV.L       R11,@-R15
    00000064 2FA6                   MOV.L       R10,@-R15
    00000066 2F96                   MOV.L       R9,@-R15
    00000068 2F86                   MOV.L       R8,@-R15
    0000006A 4F22                   STS.L       PR,@-R15
       circexp.c    21    {
       circexp.c    22            int i, h;
       circexp.c    23            save();
    0000006C D324                   MOV.L       L1215+20,R3; _save
    0000006E 7FFC                   ADD         #-4,R15
    00000070 430B                   JSR         @R3
    00000072 0009                   NOP
       circexp.c    24            p1 = pop();
    00000074 DC23                   MOV.L       L1215+24,R12; _pop
    00000076 DE1E                   MOV.L       L1215+4,R14; _p1
    00000078 4C0B                   JSR         @R12
    0000007A 0009                   NOP
    0000007C 2E02                   MOV.L       R0,@R14
    0000007E 6403                   MOV         R0,R4
    00000080 D61C                   MOV.L       L1215+8,R6 ; _symtab
    00000082 DD1D                   MOV.L       L1215+12,R13; _push
    00000084 8448                   MOV.B       @(8,R4),R0
    00000086 2008                   TST         R0,R0
    00000088 8F03                   BF/S        L1151
    0000008A 6562                   MOV.L       @R6,R5
    0000008C 62E2                   MOV.L       @R14,R2
    0000008E A003                   BRA         L1152
    00000090 6222                   MOV.L       @R2,R2
    00000092              L1151:                            
    00000092 932B                   MOV.W       L1215,R3   ; H'0570
    00000094 6262                   MOV.L       @R6,R2
    00000096 323C                   ADD         R3,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000098              L1152:                            
    00000098 9029                   MOV.W       L1215+2,R0 ; H'0120
    0000009A 305C                   ADD         R5,R0
    0000009C 3200                   CMP/EQ      R0,R2
    0000009E 8B35                   BF          L1150
       circexp.c    25    
       circexp.c    26            if (car(p1) == symbol(COS)) {
       circexp.c    27                    push(cadr(p1));
    000000A0 64E2                   MOV.L       @R14,R4
    000000A2 8448                   MOV.B       @(8,R4),R0
    000000A4 2008                   TST         R0,R0
    000000A6 8B02                   BF          L1154
    000000A8 64E2                   MOV.L       @R14,R4
    000000AA A004                   BRA         L1156
    000000AC 5441                   MOV.L       @(4,R4),R4
    000000AE              L1154:                            
    000000AE 931D                   MOV.W       L1215,R3   ; H'0570
    000000B0 D210                   MOV.L       L1215+8,R2 ; _symtab
    000000B2 6422                   MOV.L       @R2,R4
    000000B4 343C                   ADD         R3,R4
    000000B6              L1156:                            
    000000B6 8448                   MOV.B       @(8,R4),R0
    000000B8 2008                   TST         R0,R0
    000000BA 8B0C                   BF          L1153
    000000BC 64E2                   MOV.L       @R14,R4
    000000BE 8448                   MOV.B       @(8,R4),R0
    000000C0 2008                   TST         R0,R0
    000000C2 8B02                   BF          L1155
    000000C4 64E2                   MOV.L       @R14,R4
    000000C6 A004                   BRA         L1157
    000000C8 5441                   MOV.L       @(4,R4),R4
    000000CA              L1155:                            
    000000CA 930F                   MOV.W       L1215,R3   ; H'0570
    000000CC D209                   MOV.L       L1215+8,R2 ; _symtab
    000000CE 6422                   MOV.L       @R2,R4
    000000D0 343C                   ADD         R3,R4
    000000D2              L1157:                            
    000000D2 A004                   BRA         L1158
    000000D4 6442                   MOV.L       @R4,R4
    000000D6              L1153:                            
    000000D6 9309                   MOV.W       L1215,R3   ; H'0570
    000000D8 D206                   MOV.L       L1215+8,R2 ; _symtab
    000000DA 6422                   MOV.L       @R2,R4
    000000DC 343C                   ADD         R3,R4
    000000DE              L1158:                            
    000000DE 4D0B                   JSR         @R13
    000000E0 0009                   NOP
       circexp.c    28                    expcos();
    000000E2 D309                   MOV.L       L1215+28,R3; _expcos
    000000E4 430B                   JSR         @R3
    000000E6 0009                   NOP
    000000E8 A1E2                   BRA         L1094
    000000EA 0009                   NOP
    000000EC              L1215:                            
    000000EC 0570                   .DATA.W     H'0570
    000000EE 0120                   .DATA.W     H'0120
    000000F0 <00000000>             .DATA.L     _p1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000F4 <00000000>             .DATA.L     _symtab
    000000F8 <00000000>             .DATA.L     _push
    000000FC <00000000>             .DATA.L     _eval
    00000100 <00000000>             .DATA.L     _save
    00000104 <00000000>             .DATA.L     _pop
    00000108 <00000000>             .DATA.L     _expcos
    0000010C              L1150:                            
       circexp.c    29                    restore();
       circexp.c    30                    return;
       circexp.c    31            }
       circexp.c    32    
       circexp.c    33            if (car(p1) == symbol(SIN)) {
    0000010C 8448                   MOV.B       @(8,R4),R0
    0000010E 2008                   TST         R0,R0
    00000110 8B01                   BF          L1161
    00000112 A002                   BRA         L1162
    00000114 6242                   MOV.L       @R4,R2
    00000116              L1161:                            
    00000116 9253                   MOV.W       L1216,R2   ; H'0570
    00000118 325C                   ADD         R5,R2
    0000011A              L1162:                            
    0000011A 9352                   MOV.W       L1216+2,R3 ; H'0498
    0000011C 335C                   ADD         R5,R3
    0000011E 3230                   CMP/EQ      R3,R2
    00000120 8B25                   BF          L1160
       circexp.c    34                    push(cadr(p1));
    00000122 64E2                   MOV.L       @R14,R4
    00000124 8448                   MOV.B       @(8,R4),R0
    00000126 2008                   TST         R0,R0
    00000128 8B02                   BF          L1164
    0000012A 64E2                   MOV.L       @R14,R4
    0000012C A004                   BRA         L1166
    0000012E 5441                   MOV.L       @(4,R4),R4
    00000130              L1164:                            
    00000130 9346                   MOV.W       L1216,R3   ; H'0570
    00000132 D225                   MOV.L       L1216+8,R2 ; _symtab
    00000134 6422                   MOV.L       @R2,R4
    00000136 343C                   ADD         R3,R4
    00000138              L1166:                            
    00000138 8448                   MOV.B       @(8,R4),R0
    0000013A 2008                   TST         R0,R0
    0000013C 8B0C                   BF          L1163
    0000013E 64E2                   MOV.L       @R14,R4
    00000140 8448                   MOV.B       @(8,R4),R0
    00000142 2008                   TST         R0,R0
    00000144 8B02                   BF          L1165
    00000146 64E2                   MOV.L       @R14,R4
    00000148 A004                   BRA         L1167
    0000014A 5441                   MOV.L       @(4,R4),R4
    0000014C              L1165:                            
    0000014C 9338                   MOV.W       L1216,R3   ; H'0570
    0000014E D21E                   MOV.L       L1216+8,R2 ; _symtab
    00000150 6422                   MOV.L       @R2,R4
    00000152 343C                   ADD         R3,R4
    00000154              L1167:                            
    00000154 A004                   BRA         L1168
    00000156 6442                   MOV.L       @R4,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000158              L1163:                            
    00000158 9332                   MOV.W       L1216,R3   ; H'0570
    0000015A D21B                   MOV.L       L1216+8,R2 ; _symtab
    0000015C 6422                   MOV.L       @R2,R4
    0000015E 343C                   ADD         R3,R4
    00000160              L1168:                            
    00000160 4D0B                   JSR         @R13
    00000162 0009                   NOP
       circexp.c    35                    expsin();
    00000164 D319                   MOV.L       L1216+12,R3; _expsin
    00000166 430B                   JSR         @R3
    00000168 0009                   NOP
    0000016A A1A1                   BRA         L1094
    0000016C 0009                   NOP
    0000016E              L1160:                            
       circexp.c    36                    restore();
       circexp.c    37                    return;
       circexp.c    38            }
       circexp.c    39    
       circexp.c    40            if (car(p1) == symbol(TAN)) {
    0000016E D918                   MOV.L       L1216+16,R9; _subtract
    00000170 DA18                   MOV.L       L1216+20,R10; _multiply
    00000172 DB19                   MOV.L       L1216+24,R11; _exponential
    00000174 8448                   MOV.B       @(8,R4),R0
    00000176 2008                   TST         R0,R0
    00000178 8B01                   BF          L1170
    0000017A A002                   BRA         L1171
    0000017C 6342                   MOV.L       @R4,R3
    0000017E              L1170:                            
    0000017E 931F                   MOV.W       L1216,R3   ; H'0570
    00000180 335C                   ADD         R5,R3
    00000182              L1171:                            
    00000182 911F                   MOV.W       L1216+4,R1 ; H'04E0
    00000184 315C                   ADD         R5,R1
    00000186 3310                   CMP/EQ      R1,R3
    00000188 8B5B                   BF          L1169
       circexp.c    41                    p1 = cadr(p1);
    0000018A 62E2                   MOV.L       @R14,R2
    0000018C 8428                   MOV.B       @(8,R2),R0
    0000018E 2008                   TST         R0,R0
    00000190 8B02                   BF          L1173
    00000192 62E2                   MOV.L       @R14,R2
    00000194 A004                   BRA         L1175
    00000196 5321                   MOV.L       @(4,R2),R3
    00000198              L1173:                            
    00000198 9212                   MOV.W       L1216,R2   ; H'0570
    0000019A D10B                   MOV.L       L1216+8,R1 ; _symtab
    0000019C 6312                   MOV.L       @R1,R3
    0000019E 332C                   ADD         R2,R3
    000001A0              L1175:                            
    000001A0 8438                   MOV.B       @(8,R3),R0
    000001A2 2008                   TST         R0,R0
    000001A4 8B1A                   BF          L1172
    000001A6 63E2                   MOV.L       @R14,R3
    000001A8 8438                   MOV.B       @(8,R3),R0
    000001AA 2008                   TST         R0,R0
    000001AC 8B02                   BF          L1174




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001AE 62E2                   MOV.L       @R14,R2
    000001B0 A004                   BRA         L1176
    000001B2 5221                   MOV.L       @(4,R2),R2
    000001B4              L1174:                            
    000001B4 9304                   MOV.W       L1216,R3   ; H'0570
    000001B6 D104                   MOV.L       L1216+8,R1 ; _symtab
    000001B8 6212                   MOV.L       @R1,R2
    000001BA 323C                   ADD         R3,R2
    000001BC              L1176:                            
    000001BC A012                   BRA         L1177
    000001BE 6222                   MOV.L       @R2,R2
    000001C0              L1216:                            
    000001C0 0570                   .DATA.W     H'0570
    000001C2 0498                   .DATA.W     H'0498
    000001C4 04E0                   .DATA.W     H'04E0
    000001C6 0000                   .DATA.W     0
    000001C8 <00000000>             .DATA.L     _symtab
    000001CC <00000000>             .DATA.L     _expsin
    000001D0 <00000000>             .DATA.L     _subtract
    000001D4 <00000000>             .DATA.L     _multiply
    000001D8 <00000000>             .DATA.L     _exponential
    000001DC              L1172:                            
    000001DC 937E                   MOV.W       L1217,R3   ; H'0570
    000001DE D141                   MOV.L       L1217+8,R1 ; _symtab
    000001E0 6212                   MOV.L       @R1,R2
    000001E2 323C                   ADD         R3,R2
    000001E4              L1177:                            
    000001E4 2E22                   MOV.L       R2,@R14
       circexp.c    42                    push(imaginaryunit);
    000001E6 D840                   MOV.L       L1217+12,R8; _imaginaryunit
    000001E8 4D0B                   JSR         @R13
    000001EA 6482                   MOV.L       @R8,R4
       circexp.c    43                    push(p1);
    000001EC 4D0B                   JSR         @R13
    000001EE 64E2                   MOV.L       @R14,R4
       circexp.c    44                    multiply();
    000001F0 4A0B                   JSR         @R10
    000001F2 0009                   NOP
       circexp.c    45                    exponential();
    000001F4 4B0B                   JSR         @R11
    000001F6 0009                   NOP
       circexp.c    46                    p2 = pop();
    000001F8 4C0B                   JSR         @R12
    000001FA 0009                   NOP
    000001FC D33B                   MOV.L       L1217+16,R3; _p2
    000001FE 2302                   MOV.L       R0,@R3
       circexp.c    47                    push(imaginaryunit);
    00000200 4D0B                   JSR         @R13
    00000202 6482                   MOV.L       @R8,R4
       circexp.c    48                    push(p1);
    00000204 4D0B                   JSR         @R13
    00000206 64E2                   MOV.L       @R14,R4
       circexp.c    49                    multiply();
    00000208 4A0B                   JSR         @R10
    0000020A 0009                   NOP
       circexp.c    50                    negate();
    0000020C D238                   MOV.L       L1217+20,R2; _negate




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000020E 420B                   JSR         @R2
    00000210 0009                   NOP
       circexp.c    51                    exponential();
    00000212 4B0B                   JSR         @R11
    00000214 0009                   NOP
       circexp.c    52                    p3 = pop();
    00000216 DE37                   MOV.L       L1217+24,R14; _p3
    00000218 4C0B                   JSR         @R12
    0000021A 0009                   NOP
    0000021C 2E02                   MOV.L       R0,@R14
       circexp.c    53                    push(p3);
    0000021E 4D0B                   JSR         @R13
    00000220 6403                   MOV         R0,R4
       circexp.c    54                    push(p2);
    00000222 D332                   MOV.L       L1217+16,R3; _p2
    00000224 4D0B                   JSR         @R13
    00000226 6432                   MOV.L       @R3,R4
       circexp.c    55                    subtract();
    00000228 490B                   JSR         @R9
    0000022A 0009                   NOP
       circexp.c    56                    push(imaginaryunit);
    0000022C 4D0B                   JSR         @R13
    0000022E 6482                   MOV.L       @R8,R4
       circexp.c    57                    multiply();
    00000230 4A0B                   JSR         @R10
    00000232 0009                   NOP
       circexp.c    58                    push(p2);
    00000234 D22D                   MOV.L       L1217+16,R2; _p2
    00000236 4D0B                   JSR         @R13
    00000238 6422                   MOV.L       @R2,R4
       circexp.c    59                    push(p3);
    0000023A 4D0B                   JSR         @R13
    0000023C 64E2                   MOV.L       @R14,R4
    0000023E A0CC                   BRA         L1105
    00000240 0009                   NOP
    00000242              L1169:                            
       circexp.c    60                    add();
       circexp.c    61                    divide();
       circexp.c    62                    restore();
       circexp.c    63                    return;
       circexp.c    64            }
       circexp.c    65    
       circexp.c    66            if (car(p1) == symbol(COSH)) {
    00000242 8448                   MOV.B       @(8,R4),R0
    00000244 2008                   TST         R0,R0
    00000246 8B01                   BF          L1179
    00000248 A002                   BRA         L1180
    0000024A 6342                   MOV.L       @R4,R3
    0000024C              L1179:                            
    0000024C 9346                   MOV.W       L1217,R3   ; H'0570
    0000024E 335C                   ADD         R5,R3
    00000250              L1180:                            
    00000250 9145                   MOV.W       L1217+2,R1 ; H'012C
    00000252 315C                   ADD         R5,R1
    00000254 3310                   CMP/EQ      R1,R3
    00000256 8B2F                   BF          L1178
       circexp.c    67                    p1 = cadr(p1);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000258 62E2                   MOV.L       @R14,R2
    0000025A 8428                   MOV.B       @(8,R2),R0
    0000025C 2008                   TST         R0,R0
    0000025E 8B02                   BF          L1182
    00000260 62E2                   MOV.L       @R14,R2
    00000262 A004                   BRA         L1184
    00000264 5321                   MOV.L       @(4,R2),R3
    00000266              L1182:                            
    00000266 9239                   MOV.W       L1217,R2   ; H'0570
    00000268 D11E                   MOV.L       L1217+8,R1 ; _symtab
    0000026A 6312                   MOV.L       @R1,R3
    0000026C 332C                   ADD         R2,R3
    0000026E              L1184:                            
    0000026E 8438                   MOV.B       @(8,R3),R0
    00000270 2008                   TST         R0,R0
    00000272 8B0C                   BF          L1181
    00000274 63E2                   MOV.L       @R14,R3
    00000276 8438                   MOV.B       @(8,R3),R0
    00000278 2008                   TST         R0,R0
    0000027A 8B02                   BF          L1183
    0000027C 62E2                   MOV.L       @R14,R2
    0000027E A004                   BRA         L1185
    00000280 5221                   MOV.L       @(4,R2),R2
    00000282              L1183:                            
    00000282 932B                   MOV.W       L1217,R3   ; H'0570
    00000284 D117                   MOV.L       L1217+8,R1 ; _symtab
    00000286 6212                   MOV.L       @R1,R2
    00000288 323C                   ADD         R3,R2
    0000028A              L1185:                            
    0000028A A004                   BRA         L1186
    0000028C 6222                   MOV.L       @R2,R2
    0000028E              L1181:                            
    0000028E 9325                   MOV.W       L1217,R3   ; H'0570
    00000290 D114                   MOV.L       L1217+8,R1 ; _symtab
    00000292 6212                   MOV.L       @R1,R2
    00000294 323C                   ADD         R3,R2
    00000296              L1186:                            
    00000296 2E22                   MOV.L       R2,@R14
       circexp.c    68                    push(p1);
    00000298 4D0B                   JSR         @R13
    0000029A 6423                   MOV         R2,R4
       circexp.c    69                    exponential();
    0000029C 4B0B                   JSR         @R11
    0000029E 0009                   NOP
       circexp.c    70                    push(p1);
    000002A0 4D0B                   JSR         @R13
    000002A2 64E2                   MOV.L       @R14,R4
       circexp.c    71                    negate();
    000002A4 D312                   MOV.L       L1217+20,R3; _negate
    000002A6 430B                   JSR         @R3
    000002A8 0009                   NOP
       circexp.c    72                    exponential();
    000002AA 4B0B                   JSR         @R11
    000002AC 0009                   NOP
       circexp.c    73                    add();
    000002AE D212                   MOV.L       L1217+28,R2; _add
    000002B0 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002B2 0009                   NOP
    000002B4 A048                   BRA         L1087
    000002B6 0009                   NOP
    000002B8              L1178:                            
       circexp.c    74                    push_rational(1, 2);
       circexp.c    75                    multiply();
       circexp.c    76                    restore();
       circexp.c    77                    return;
       circexp.c    78            }
       circexp.c    79    
       circexp.c    80            if (car(p1) == symbol(SINH)) {
    000002B8 8448                   MOV.B       @(8,R4),R0
    000002BA 2008                   TST         R0,R0
    000002BC 8B01                   BF          L1188
    000002BE A002                   BRA         L1189
    000002C0 6242                   MOV.L       @R4,R2
    000002C2              L1188:                            
    000002C2 920B                   MOV.W       L1217,R2   ; H'0570
    000002C4 325C                   ADD         R5,R2
    000002C6              L1189:                            
    000002C6 930B                   MOV.W       L1217+4,R3 ; H'04A4
    000002C8 335C                   ADD         R5,R3
    000002CA 3230                   CMP/EQ      R3,R2
    000002CC 8B44                   BF          L1187
       circexp.c    81                    p1 = cadr(p1);
    000002CE 63E2                   MOV.L       @R14,R3
    000002D0 8438                   MOV.B       @(8,R3),R0
    000002D2 2008                   TST         R0,R0
    000002D4 8B12                   BF          L1191
    000002D6 62E2                   MOV.L       @R14,R2
    000002D8 A014                   BRA         L1193
    000002DA 5221                   MOV.L       @(4,R2),R2
    000002DC              L1217:                            
    000002DC 0570                   .DATA.W     H'0570
    000002DE 012C                   .DATA.W     H'012C
    000002E0 04A4                   .DATA.W     H'04A4
    000002E2 0000                   .DATA.W     0
    000002E4 <00000000>             .DATA.L     _symtab
    000002E8 <00000000>             .DATA.L     _imaginaryunit
    000002EC <00000000>             .DATA.L     _p2
    000002F0 <00000000>             .DATA.L     _negate
    000002F4 <00000000>             .DATA.L     _p3
    000002F8 <00000000>             .DATA.L     _add
    000002FC              L1191:                            
    000002FC 9375                   MOV.W       L1218,R3   ; H'0570
    000002FE D13C                   MOV.L       L1218+6,R1 ; _symtab
    00000300 6212                   MOV.L       @R1,R2
    00000302 323C                   ADD         R3,R2
    00000304              L1193:                            
    00000304 8428                   MOV.B       @(8,R2),R0
    00000306 2008                   TST         R0,R0
    00000308 8B0C                   BF          L1190
    0000030A 63E2                   MOV.L       @R14,R3
    0000030C 8438                   MOV.B       @(8,R3),R0
    0000030E 2008                   TST         R0,R0
    00000310 8B02                   BF          L1192
    00000312 62E2                   MOV.L       @R14,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000314 A004                   BRA         L1194
    00000316 5221                   MOV.L       @(4,R2),R2
    00000318              L1192:                            
    00000318 9367                   MOV.W       L1218,R3   ; H'0570
    0000031A D135                   MOV.L       L1218+6,R1 ; _symtab
    0000031C 6212                   MOV.L       @R1,R2
    0000031E 323C                   ADD         R3,R2
    00000320              L1194:                            
    00000320 A004                   BRA         L1195
    00000322 6322                   MOV.L       @R2,R3
    00000324              L1190:                            
    00000324 9261                   MOV.W       L1218,R2   ; H'0570
    00000326 D132                   MOV.L       L1218+6,R1 ; _symtab
    00000328 6312                   MOV.L       @R1,R3
    0000032A 332C                   ADD         R2,R3
    0000032C              L1195:                            
    0000032C 2E32                   MOV.L       R3,@R14
       circexp.c    82                    push(p1);
    0000032E 4D0B                   JSR         @R13
    00000330 6433                   MOV         R3,R4
       circexp.c    83                    exponential();
    00000332 4B0B                   JSR         @R11
    00000334 0009                   NOP
       circexp.c    84                    push(p1);
    00000336 4D0B                   JSR         @R13
    00000338 64E2                   MOV.L       @R14,R4
       circexp.c    85                    negate();
    0000033A D32E                   MOV.L       L1218+10,R3; _negate
    0000033C 430B                   JSR         @R3
    0000033E 0009                   NOP
       circexp.c    86                    exponential();
    00000340 4B0B                   JSR         @R11
    00000342 0009                   NOP
       circexp.c    87                    subtract();
    00000344 490B                   JSR         @R9
    00000346 0009                   NOP
    00000348              L1087:
       circexp.c    88                    push_rational(1, 2);
    00000348 D22B                   MOV.L       L1218+14,R2; _push_rational
    0000034A E502                   MOV         #2,R5
    0000034C 420B                   JSR         @R2
    0000034E E401                   MOV         #1,R4
       circexp.c    89                    multiply();
    00000350 4A0B                   JSR         @R10
    00000352 0009                   NOP
    00000354 A0AC                   BRA         L1094
    00000356 0009                   NOP
    00000358              L1187:                            
       circexp.c    90                    restore();
       circexp.c    91                    return;
       circexp.c    92            }
       circexp.c    93    
       circexp.c    94            if (car(p1) == symbol(TANH)) {
    00000358 8448                   MOV.B       @(8,R4),R0
    0000035A 2008                   TST         R0,R0
    0000035C 8B01                   BF          L1197
    0000035E A002                   BRA         L1198




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000360 6342                   MOV.L       @R4,R3
    00000362              L1197:                            
    00000362 9342                   MOV.W       L1218,R3   ; H'0570
    00000364 335C                   ADD         R5,R3
    00000366              L1198:                            
    00000366 9141                   MOV.W       L1218+2,R1 ; H'04EC
    00000368 315C                   ADD         R5,R1
    0000036A 3310                   CMP/EQ      R1,R3
    0000036C 8B4C                   BF          L1196
       circexp.c    95                    p1 = cadr(p1);
    0000036E 62E2                   MOV.L       @R14,R2
    00000370 8428                   MOV.B       @(8,R2),R0
    00000372 2008                   TST         R0,R0
    00000374 8B02                   BF          L1200
    00000376 62E2                   MOV.L       @R14,R2
    00000378 A004                   BRA         L1202
    0000037A 5321                   MOV.L       @(4,R2),R3
    0000037C              L1200:                            
    0000037C 9235                   MOV.W       L1218,R2   ; H'0570
    0000037E D11C                   MOV.L       L1218+6,R1 ; _symtab
    00000380 6312                   MOV.L       @R1,R3
    00000382 332C                   ADD         R2,R3
    00000384              L1202:                            
    00000384 8438                   MOV.B       @(8,R3),R0
    00000386 2008                   TST         R0,R0
    00000388 8B0C                   BF          L1199
    0000038A 63E2                   MOV.L       @R14,R3
    0000038C 8438                   MOV.B       @(8,R3),R0
    0000038E 2008                   TST         R0,R0
    00000390 8B02                   BF          L1201
    00000392 62E2                   MOV.L       @R14,R2
    00000394 A004                   BRA         L1203
    00000396 5221                   MOV.L       @(4,R2),R2
    00000398              L1201:                            
    00000398 9327                   MOV.W       L1218,R3   ; H'0570
    0000039A D115                   MOV.L       L1218+6,R1 ; _symtab
    0000039C 6212                   MOV.L       @R1,R2
    0000039E 323C                   ADD         R3,R2
    000003A0              L1203:                            
    000003A0 A004                   BRA         L1204
    000003A2 6222                   MOV.L       @R2,R2
    000003A4              L1199:                            
    000003A4 9321                   MOV.W       L1218,R3   ; H'0570
    000003A6 D112                   MOV.L       L1218+6,R1 ; _symtab
    000003A8 6212                   MOV.L       @R1,R2
    000003AA 323C                   ADD         R3,R2
    000003AC              L1204:                            
    000003AC 2E22                   MOV.L       R2,@R14
       circexp.c    96                    push(p1);
    000003AE 4D0B                   JSR         @R13
    000003B0 6423                   MOV         R2,R4
       circexp.c    97                    push_integer(2);
    000003B2 D812                   MOV.L       L1218+18,R8; _push_integer
    000003B4 480B                   JSR         @R8
    000003B6 E402                   MOV         #2,R4
       circexp.c    98                    multiply();
    000003B8 4A0B                   JSR         @R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003BA 0009                   NOP
       circexp.c    99                    exponential();
    000003BC 4B0B                   JSR         @R11
    000003BE 0009                   NOP
       circexp.c   100                    p1 = pop();
    000003C0 4C0B                   JSR         @R12
    000003C2 0009                   NOP
    000003C4 2E02                   MOV.L       R0,@R14
       circexp.c   101                    push(p1);
    000003C6 4D0B                   JSR         @R13
    000003C8 6403                   MOV         R0,R4
       circexp.c   102                    push_integer(1);
    000003CA 480B                   JSR         @R8
    000003CC E401                   MOV         #1,R4
       circexp.c   103                    subtract();
    000003CE 490B                   JSR         @R9
    000003D0 0009                   NOP
       circexp.c   104                    push(p1);
    000003D2 4D0B                   JSR         @R13
    000003D4 64E2                   MOV.L       @R14,R4
       circexp.c   105                    push_integer(1);
    000003D6 480B                   JSR         @R8
    000003D8 E401                   MOV         #1,R4
    000003DA              L1105:
       circexp.c   106                    add();
    000003DA D309                   MOV.L       L1218+22,R3; _add
    000003DC 430B                   JSR         @R3
    000003DE 0009                   NOP
       circexp.c   107                    divide();
    000003E0 D208                   MOV.L       L1218+26,R2; _divide
    000003E2 420B                   JSR         @R2
    000003E4 0009                   NOP
    000003E6 A063                   BRA         L1094
    000003E8 0009                   NOP
    000003EA              L1218:                            
    000003EA 0570                   .DATA.W     H'0570
    000003EC 04EC                   .DATA.W     H'04EC
    000003EE 0000                   .DATA.W     0
    000003F0 <00000000>             .DATA.L     _symtab
    000003F4 <00000000>             .DATA.L     _negate
    000003F8 <00000000>             .DATA.L     _push_rational
    000003FC <00000000>             .DATA.L     _push_integer
    00000400 <00000000>             .DATA.L     _add
    00000404 <00000000>             .DATA.L     _divide
    00000408              L1196:                            
       circexp.c   108                    restore();
       circexp.c   109                    return;
       circexp.c   110            }
       circexp.c   111    
       circexp.c   112            if (iscons(p1)) {
    00000408 8448                   MOV.B       @(8,R4),R0
    0000040A 2008                   TST         R0,R0
    0000040C 8B2A                   BF          L1205
       circexp.c   113                    h = tos;
    0000040E D335                   MOV.L       L1219+4,R3 ; _tos
    00000410 6232                   MOV.L       @R3,R2
       circexp.c   114                    while (iscons(p1)) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000412 A01B                   BRA         L1206
    00000414 2F22                   MOV.L       R2,@R15
    00000416              L1207:                            
       circexp.c   115                            push(car(p1));
    00000416 64E2                   MOV.L       @R14,R4
    00000418 8448                   MOV.B       @(8,R4),R0
    0000041A 2008                   TST         R0,R0
    0000041C 8B02                   BF          L1208
    0000041E 64E2                   MOV.L       @R14,R4
    00000420 A004                   BRA         L1209
    00000422 6442                   MOV.L       @R4,R4
    00000424              L1208:                            
    00000424 935C                   MOV.W       L1219,R3   ; H'0570
    00000426 D230                   MOV.L       L1219+8,R2 ; _symtab
    00000428 6422                   MOV.L       @R2,R4
    0000042A 343C                   ADD         R3,R4
    0000042C              L1209:                            
    0000042C 4D0B                   JSR         @R13
    0000042E 0009                   NOP
       circexp.c   116                            circexp();
    00000430 BE14                   BSR         _circexp
    00000432 0009                   NOP
       circexp.c   117                            p1 = cdr(p1);
    00000434 63E2                   MOV.L       @R14,R3
    00000436 8438                   MOV.B       @(8,R3),R0
    00000438 2008                   TST         R0,R0
    0000043A 8B02                   BF          L1210
    0000043C 62E2                   MOV.L       @R14,R2
    0000043E A004                   BRA         L1211
    00000440 5221                   MOV.L       @(4,R2),R2
    00000442              L1210:                            
    00000442 934D                   MOV.W       L1219,R3   ; H'0570
    00000444 D128                   MOV.L       L1219+8,R1 ; _symtab
    00000446 6212                   MOV.L       @R1,R2
    00000448 323C                   ADD         R3,R2
    0000044A              L1211:                            
    0000044A 2E22                   MOV.L       R2,@R14
    0000044C              L1206:                            
    0000044C 63E2                   MOV.L       @R14,R3
    0000044E 8438                   MOV.B       @(8,R3),R0
    00000450 2008                   TST         R0,R0
    00000452 89E0                   BT          L1207
       circexp.c   118                    }
       circexp.c   119                    list(tos - h);
    00000454 63F2                   MOV.L       @R15,R3
    00000456 D223                   MOV.L       L1219+4,R2 ; _tos
    00000458 D124                   MOV.L       L1219+12,R1; _list
    0000045A 6422                   MOV.L       @R2,R4
    0000045C 410B                   JSR         @R1
    0000045E 3438                   SUB         R3,R4
    00000460 A026                   BRA         L1094
    00000462 0009                   NOP
    00000464              L1205:                            
       circexp.c   120                    restore();
       circexp.c   121                    return;
       circexp.c   122            }
       circexp.c   123    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

       circexp.c   124            if (p1->k == TENSOR) {
    00000464 600C                   EXTU.B      R0,R0
    00000466 8804                   CMP/EQ      #4,R0
    00000468 8B2D                   BF          L1102
       circexp.c   125                    push(p1);
    0000046A 4D0B                   JSR         @R13
    0000046C 0009                   NOP
       circexp.c   126                    copy_tensor();
    0000046E D220                   MOV.L       L1219+16,R2; _copy_tensor
    00000470 420B                   JSR         @R2
    00000472 0009                   NOP
       circexp.c   127                    p1 = pop();
    00000474 4C0B                   JSR         @R12
    00000476 0009                   NOP
    00000478 2E02                   MOV.L       R0,@R14
       circexp.c   128                    for (i = 0; i < p1->u.tensor->nelem; i++) {
    0000047A A011                   BRA         L1213
    0000047C EB00                   MOV         #0,R11
    0000047E              L1214:                            
       circexp.c   129                            push(p1->u.tensor->elem[i]);
    0000047E 6AB3                   MOV         R11,R10
    00000480 60E2                   MOV.L       @R14,R0
    00000482 4A08                   SHLL2       R10
    00000484 6402                   MOV.L       @R0,R4
    00000486 7468                   ADD         #104,R4
    00000488 34AC                   ADD         R10,R4
    0000048A 4D0B                   JSR         @R13
    0000048C 6442                   MOV.L       @R4,R4
       circexp.c   130                            circexp();
    0000048E BDE5                   BSR         _circexp
    00000490 0009                   NOP
       circexp.c   131                            p1->u.tensor->elem[i] = pop();
    00000492 62E2                   MOV.L       @R14,R2
    00000494 6122                   MOV.L       @R2,R1
    00000496 7168                   ADD         #104,R1
    00000498 4C0B                   JSR         @R12
    0000049A 3A1C                   ADD         R1,R10
    0000049C 2A02                   MOV.L       R0,@R10
    0000049E 7B01                   ADD         #1,R11
    000004A0              L1213:                            
    000004A0 63E2                   MOV.L       @R14,R3
    000004A2 E064                   MOV         #100,R0
    000004A4 6232                   MOV.L       @R3,R2
    000004A6 012E                   MOV.L       @(R0,R2),R1
    000004A8 3B13                   CMP/GE      R1,R11
    000004AA 8BE8                   BF          L1214
    000004AC A00B                   BRA         L1102
    000004AE 0009                   NOP
    000004B0              L1094:
       circexp.c   132                    }
       circexp.c   133                    push(p1);
       circexp.c   134                    restore();
    000004B0 D310                   MOV.L       L1219+20,R3; _restore
    000004B2 7F04                   ADD         #4,R15
    000004B4 4F26                   LDS.L       @R15+,PR
    000004B6 68F6                   MOV.L       @R15+,R8
    000004B8 69F6                   MOV.L       @R15+,R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004BA 6AF6                   MOV.L       @R15+,R10
    000004BC 6BF6                   MOV.L       @R15+,R11
    000004BE 6CF6                   MOV.L       @R15+,R12
    000004C0 6DF6                   MOV.L       @R15+,R13
    000004C2 432B                   JMP         @R3
    000004C4 6EF6                   MOV.L       @R15+,R14
    000004C6              L1102:
       circexp.c   135                    return;
       circexp.c   136            }
       circexp.c   137    
       circexp.c   138            push(p1);
    000004C6 4D0B                   JSR         @R13
    000004C8 64E2                   MOV.L       @R14,R4
       circexp.c   139            restore();
    000004CA 7F04                   ADD         #4,R15
    000004CC D209                   MOV.L       L1219+20,R2; _restore
    000004CE 4F26                   LDS.L       @R15+,PR
    000004D0 68F6                   MOV.L       @R15+,R8
    000004D2 69F6                   MOV.L       @R15+,R9
    000004D4 6AF6                   MOV.L       @R15+,R10
    000004D6 6BF6                   MOV.L       @R15+,R11
    000004D8 6CF6                   MOV.L       @R15+,R12
    000004DA 6DF6                   MOV.L       @R15+,R13
    000004DC 422B                   JMP         @R2
    000004DE 6EF6                   MOV.L       @R15+,R14
    000004E0              L1219:                            
    000004E0 0570                   .DATA.W     H'0570
    000004E2 0000                   .DATA.W     0
    000004E4 <00000000>             .DATA.L     _tos
    000004E8 <00000000>             .DATA.L     _symtab
    000004EC <00000000>             .DATA.L     _list
    000004F0 <00000000>             .DATA.L     _copy_tensor
    000004F4 <00000000>             .DATA.L     _restore
       circexp.c   140    }
       circexp.c   141    
       circexp.c   142    

























SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:48  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      142



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000004F8 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000004F8 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           23
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           2
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           103






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk3B9B.tmp 

