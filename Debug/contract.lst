SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\contract.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      contract.c     1    // Contract across tensor indices
      contract.c     2    
      contract.c     3    #include "stdafx.h"
      contract.c     4    #include "defs.h"
      contract.c     5    
      contract.c     6    void
      contract.c     7    eval_contract(void)
P   00000000              _eval_contract:                  ; function: eval_contract
                                                           ; frame size=16
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 4F22                   STS.L       PR,@-R15
      contract.c     8    {
      contract.c     9            push(cadr(p1));
    00000008 DD33                   MOV.L       L1173+2,R13; _push
    0000000A DE34                   MOV.L       L1173+6,R14; _p1
    0000000C 64E2                   MOV.L       @R14,R4
    0000000E 8448                   MOV.B       @(8,R4),R0
    00000010 2008                   TST         R0,R0
    00000012 8B02                   BF          L1086
    00000014 64E2                   MOV.L       @R14,R4
    00000016 A004                   BRA         L1088
    00000018 5441                   MOV.L       @(4,R4),R4
    0000001A              L1086:                            
    0000001A 935C                   MOV.W       L1173,R3   ; H'0570
    0000001C D230                   MOV.L       L1173+10,R2; _symtab
    0000001E 6422                   MOV.L       @R2,R4
    00000020 343C                   ADD         R3,R4
    00000022              L1088:                            
    00000022 8448                   MOV.B       @(8,R4),R0
    00000024 2008                   TST         R0,R0
    00000026 8B0C                   BF          L1085
    00000028 64E2                   MOV.L       @R14,R4
    0000002A 8448                   MOV.B       @(8,R4),R0
    0000002C 2008                   TST         R0,R0
    0000002E 8B02                   BF          L1087
    00000030 64E2                   MOV.L       @R14,R4
    00000032 A004                   BRA         L1089
    00000034 5441                   MOV.L       @(4,R4),R4
    00000036              L1087:                            
    00000036 934E                   MOV.W       L1173,R3   ; H'0570
    00000038 D229                   MOV.L       L1173+10,R2; _symtab
    0000003A 6422                   MOV.L       @R2,R4
    0000003C 343C                   ADD         R3,R4
    0000003E              L1089:                            
    0000003E A004                   BRA         L1090
    00000040 6442                   MOV.L       @R4,R4
    00000042              L1085:                            
    00000042 9348                   MOV.W       L1173,R3   ; H'0570
    00000044 D226                   MOV.L       L1173+10,R2; _symtab
    00000046 6422                   MOV.L       @R2,R4
    00000048 343C                   ADD         R3,R4
    0000004A              L1090:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000004A 4D0B                   JSR         @R13
    0000004C 0009                   NOP
      contract.c    10            eval();
    0000004E DC25                   MOV.L       L1173+14,R12; _eval
    00000050 4C0B                   JSR         @R12
    00000052 0009                   NOP
      contract.c    11            if (cddr(p1) == symbol(NIL)) {
    00000054 63E2                   MOV.L       @R14,R3
    00000056 8438                   MOV.B       @(8,R3),R0
    00000058 2008                   TST         R0,R0
    0000005A 8B02                   BF          L1093
    0000005C 62E2                   MOV.L       @R14,R2
    0000005E A004                   BRA         L1095
    00000060 5221                   MOV.L       @(4,R2),R2
    00000062              L1093:                            
    00000062 9338                   MOV.W       L1173,R3   ; H'0570
    00000064 D11E                   MOV.L       L1173+10,R1; _symtab
    00000066 6212                   MOV.L       @R1,R2
    00000068 323C                   ADD         R3,R2
    0000006A              L1095:                            
    0000006A 8428                   MOV.B       @(8,R2),R0
    0000006C 2008                   TST         R0,R0
    0000006E 8B0C                   BF          L1092
    00000070 63E2                   MOV.L       @R14,R3
    00000072 8438                   MOV.B       @(8,R3),R0
    00000074 2008                   TST         R0,R0
    00000076 8B02                   BF          L1094
    00000078 62E2                   MOV.L       @R14,R2
    0000007A A004                   BRA         L1096
    0000007C 5221                   MOV.L       @(4,R2),R2
    0000007E              L1094:                            
    0000007E 932A                   MOV.W       L1173,R3   ; H'0570
    00000080 D117                   MOV.L       L1173+10,R1; _symtab
    00000082 6212                   MOV.L       @R1,R2
    00000084 323C                   ADD         R3,R2
    00000086              L1096:                            
    00000086 A004                   BRA         L1097
    00000088 5321                   MOV.L       @(4,R2),R3
    0000008A              L1092:                            
    0000008A 9224                   MOV.W       L1173,R2   ; H'0570
    0000008C D114                   MOV.L       L1173+10,R1; _symtab
    0000008E 6312                   MOV.L       @R1,R3
    00000090 332C                   ADD         R2,R3
    00000092              L1097:                            
    00000092 9220                   MOV.W       L1173,R2   ; H'0570
    00000094 D112                   MOV.L       L1173+10,R1; _symtab
    00000096 6012                   MOV.L       @R1,R0
    00000098 302C                   ADD         R2,R0
    0000009A 3300                   CMP/EQ      R0,R3
    0000009C 8B07                   BF          L1091
      contract.c    12                    push_integer(1);
    0000009E D112                   MOV.L       L1173+18,R1; _push_integer
    000000A0 410B                   JSR         @R1
    000000A2 E401                   MOV         #1,R4
      contract.c    13                    push_integer(2);
    000000A4 D310                   MOV.L       L1173+18,R3; _push_integer
    000000A6 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000A8 E402                   MOV         #2,R4
    000000AA A0F7                   BRA         L1098
    000000AC 0009                   NOP
    000000AE              L1091:                            
      contract.c    14            } else {
      contract.c    15                    push(caddr(p1));
    000000AE 64E2                   MOV.L       @R14,R4
    000000B0 8448                   MOV.B       @(8,R4),R0
    000000B2 2008                   TST         R0,R0
    000000B4 8B02                   BF          L1101
    000000B6 64E2                   MOV.L       @R14,R4
    000000B8 A003                   BRA         L1106
    000000BA 5441                   MOV.L       @(4,R4),R4
    000000BC              L1101:                            
    000000BC D308                   MOV.L       L1173+10,R3; _symtab
    000000BE 6432                   MOV.L       @R3,R4
    000000C0 342C                   ADD         R2,R4
    000000C2              L1106:                            
    000000C2 8448                   MOV.B       @(8,R4),R0
    000000C4 2008                   TST         R0,R0
    000000C6 8B17                   BF          L1100
    000000C8 64E2                   MOV.L       @R14,R4
    000000CA 8448                   MOV.B       @(8,R4),R0
    000000CC 2008                   TST         R0,R0
    000000CE 8B0D                   BF          L1102
    000000D0 64E2                   MOV.L       @R14,R4
    000000D2 A00F                   BRA         L1107
    000000D4 5441                   MOV.L       @(4,R4),R4
    000000D6              L1173:                            
    000000D6 0570                   .DATA.W     H'0570
    000000D8 <00000000>             .DATA.L     _push
    000000DC <00000000>             .DATA.L     _p1
    000000E0 <00000000>             .DATA.L     _symtab
    000000E4 <00000000>             .DATA.L     _eval
    000000E8 <00000000>             .DATA.L     _push_integer
    000000EC              L1102:                            
    000000EC 935D                   MOV.W       L1174,R3   ; H'0570
    000000EE D22F                   MOV.L       L1174+2,R2 ; _symtab
    000000F0 6422                   MOV.L       @R2,R4
    000000F2 343C                   ADD         R3,R4
    000000F4              L1107:                            
    000000F4 A004                   BRA         L1108
    000000F6 5441                   MOV.L       @(4,R4),R4
    000000F8              L1100:                            
    000000F8 9357                   MOV.W       L1174,R3   ; H'0570
    000000FA D22C                   MOV.L       L1174+2,R2 ; _symtab
    000000FC 6422                   MOV.L       @R2,R4
    000000FE 343C                   ADD         R3,R4
    00000100              L1108:                            
    00000100 8448                   MOV.B       @(8,R4),R0
    00000102 2008                   TST         R0,R0
    00000104 8B20                   BF          L1099
    00000106 64E2                   MOV.L       @R14,R4
    00000108 8448                   MOV.B       @(8,R4),R0
    0000010A 2008                   TST         R0,R0
    0000010C 8B02                   BF          L1104
    0000010E 64E2                   MOV.L       @R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000110 A004                   BRA         L1109
    00000112 5441                   MOV.L       @(4,R4),R4
    00000114              L1104:                            
    00000114 9349                   MOV.W       L1174,R3   ; H'0570
    00000116 D225                   MOV.L       L1174+2,R2 ; _symtab
    00000118 6422                   MOV.L       @R2,R4
    0000011A 343C                   ADD         R3,R4
    0000011C              L1109:                            
    0000011C 8448                   MOV.B       @(8,R4),R0
    0000011E 2008                   TST         R0,R0
    00000120 8B0C                   BF          L1103
    00000122 64E2                   MOV.L       @R14,R4
    00000124 8448                   MOV.B       @(8,R4),R0
    00000126 2008                   TST         R0,R0
    00000128 8B02                   BF          L1105
    0000012A 64E2                   MOV.L       @R14,R4
    0000012C A004                   BRA         L1110
    0000012E 5441                   MOV.L       @(4,R4),R4
    00000130              L1105:                            
    00000130 933B                   MOV.W       L1174,R3   ; H'0570
    00000132 D21E                   MOV.L       L1174+2,R2 ; _symtab
    00000134 6422                   MOV.L       @R2,R4
    00000136 343C                   ADD         R3,R4
    00000138              L1110:                            
    00000138 A004                   BRA         L1111
    0000013A 5441                   MOV.L       @(4,R4),R4
    0000013C              L1103:                            
    0000013C 9335                   MOV.W       L1174,R3   ; H'0570
    0000013E D21B                   MOV.L       L1174+2,R2 ; _symtab
    00000140 6422                   MOV.L       @R2,R4
    00000142 343C                   ADD         R3,R4
    00000144              L1111:                            
    00000144 A004                   BRA         L1112
    00000146 6442                   MOV.L       @R4,R4
    00000148              L1099:                            
    00000148 932F                   MOV.W       L1174,R3   ; H'0570
    0000014A D218                   MOV.L       L1174+2,R2 ; _symtab
    0000014C 6422                   MOV.L       @R2,R4
    0000014E 343C                   ADD         R3,R4
    00000150              L1112:                            
    00000150 4D0B                   JSR         @R13
    00000152 0009                   NOP
      contract.c    16                    eval();
    00000154 4C0B                   JSR         @R12
    00000156 0009                   NOP
      contract.c    17                    push(cadddr(p1));
    00000158 64E2                   MOV.L       @R14,R4
    0000015A 8448                   MOV.B       @(8,R4),R0
    0000015C 2008                   TST         R0,R0
    0000015E 8B02                   BF          L1116
    00000160 64E2                   MOV.L       @R14,R4
    00000162 A004                   BRA         L1128
    00000164 5441                   MOV.L       @(4,R4),R4
    00000166              L1116:                            
    00000166 9320                   MOV.W       L1174,R3   ; H'0570
    00000168 D210                   MOV.L       L1174+2,R2 ; _symtab
    0000016A 6422                   MOV.L       @R2,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000016C 343C                   ADD         R3,R4
    0000016E              L1128:                            
    0000016E 8448                   MOV.B       @(8,R4),R0
    00000170 2008                   TST         R0,R0
    00000172 8B0C                   BF          L1115
    00000174 64E2                   MOV.L       @R14,R4
    00000176 8448                   MOV.B       @(8,R4),R0
    00000178 2008                   TST         R0,R0
    0000017A 8B02                   BF          L1117
    0000017C 64E2                   MOV.L       @R14,R4
    0000017E A004                   BRA         L1129
    00000180 5441                   MOV.L       @(4,R4),R4
    00000182              L1117:                            
    00000182 9312                   MOV.W       L1174,R3   ; H'0570
    00000184 D209                   MOV.L       L1174+2,R2 ; _symtab
    00000186 6422                   MOV.L       @R2,R4
    00000188 343C                   ADD         R3,R4
    0000018A              L1129:                            
    0000018A A004                   BRA         L1130
    0000018C 5441                   MOV.L       @(4,R4),R4
    0000018E              L1115:                            
    0000018E 930C                   MOV.W       L1174,R3   ; H'0570
    00000190 D206                   MOV.L       L1174+2,R2 ; _symtab
    00000192 6422                   MOV.L       @R2,R4
    00000194 343C                   ADD         R3,R4
    00000196              L1130:                            
    00000196 8448                   MOV.B       @(8,R4),R0
    00000198 2008                   TST         R0,R0
    0000019A 8B23                   BF          L1114
    0000019C 64E2                   MOV.L       @R14,R4
    0000019E 8448                   MOV.B       @(8,R4),R0
    000001A0 2008                   TST         R0,R0
    000001A2 8B05                   BF          L1119
    000001A4 64E2                   MOV.L       @R14,R4
    000001A6 A007                   BRA         L1131
    000001A8 5441                   MOV.L       @(4,R4),R4
    000001AA              L1174:                            
    000001AA 0570                   .DATA.W     H'0570
    000001AC <00000000>             .DATA.L     _symtab
    000001B0              L1119:                            
    000001B0 9362                   MOV.W       L1175,R3   ; H'0570
    000001B2 D232                   MOV.L       L1175+4,R2 ; _symtab
    000001B4 6422                   MOV.L       @R2,R4
    000001B6 343C                   ADD         R3,R4
    000001B8              L1131:                            
    000001B8 8448                   MOV.B       @(8,R4),R0
    000001BA 2008                   TST         R0,R0
    000001BC 8B0C                   BF          L1118
    000001BE 64E2                   MOV.L       @R14,R4
    000001C0 8448                   MOV.B       @(8,R4),R0
    000001C2 2008                   TST         R0,R0
    000001C4 8B02                   BF          L1120
    000001C6 64E2                   MOV.L       @R14,R4
    000001C8 A004                   BRA         L1132
    000001CA 5441                   MOV.L       @(4,R4),R4
    000001CC              L1120:                            
    000001CC 9354                   MOV.W       L1175,R3   ; H'0570




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001CE D22B                   MOV.L       L1175+4,R2 ; _symtab
    000001D0 6422                   MOV.L       @R2,R4
    000001D2 343C                   ADD         R3,R4
    000001D4              L1132:                            
    000001D4 A004                   BRA         L1133
    000001D6 5441                   MOV.L       @(4,R4),R4
    000001D8              L1118:                            
    000001D8 934E                   MOV.W       L1175,R3   ; H'0570
    000001DA D228                   MOV.L       L1175+4,R2 ; _symtab
    000001DC 6422                   MOV.L       @R2,R4
    000001DE 343C                   ADD         R3,R4
    000001E0              L1133:                            
    000001E0 A004                   BRA         L1134
    000001E2 5441                   MOV.L       @(4,R4),R4
    000001E4              L1114:                            
    000001E4 9348                   MOV.W       L1175,R3   ; H'0570
    000001E6 D225                   MOV.L       L1175+4,R2 ; _symtab
    000001E8 6422                   MOV.L       @R2,R4
    000001EA 343C                   ADD         R3,R4
    000001EC              L1134:                            
    000001EC 8448                   MOV.B       @(8,R4),R0
    000001EE 2008                   TST         R0,R0
    000001F0 8B4C                   BF          L1113
    000001F2 64E2                   MOV.L       @R14,R4
    000001F4 8448                   MOV.B       @(8,R4),R0
    000001F6 2008                   TST         R0,R0
    000001F8 8B02                   BF          L1123
    000001FA 64E2                   MOV.L       @R14,R4
    000001FC A004                   BRA         L1135
    000001FE 5441                   MOV.L       @(4,R4),R4
    00000200              L1123:                            
    00000200 933A                   MOV.W       L1175,R3   ; H'0570
    00000202 D21E                   MOV.L       L1175+4,R2 ; _symtab
    00000204 6422                   MOV.L       @R2,R4
    00000206 343C                   ADD         R3,R4
    00000208              L1135:                            
    00000208 8448                   MOV.B       @(8,R4),R0
    0000020A 2008                   TST         R0,R0
    0000020C 8B0C                   BF          L1122
    0000020E 64E2                   MOV.L       @R14,R4
    00000210 8448                   MOV.B       @(8,R4),R0
    00000212 2008                   TST         R0,R0
    00000214 8B02                   BF          L1124
    00000216 64E2                   MOV.L       @R14,R4
    00000218 A004                   BRA         L1136
    0000021A 5441                   MOV.L       @(4,R4),R4
    0000021C              L1124:                            
    0000021C 932C                   MOV.W       L1175,R3   ; H'0570
    0000021E D217                   MOV.L       L1175+4,R2 ; _symtab
    00000220 6422                   MOV.L       @R2,R4
    00000222 343C                   ADD         R3,R4
    00000224              L1136:                            
    00000224 A004                   BRA         L1137
    00000226 5441                   MOV.L       @(4,R4),R4
    00000228              L1122:                            
    00000228 9326                   MOV.W       L1175,R3   ; H'0570
    0000022A D214                   MOV.L       L1175+4,R2 ; _symtab




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000022C 6422                   MOV.L       @R2,R4
    0000022E 343C                   ADD         R3,R4
    00000230              L1137:                            
    00000230 8448                   MOV.B       @(8,R4),R0
    00000232 2008                   TST         R0,R0
    00000234 8B24                   BF          L1121
    00000236 64E2                   MOV.L       @R14,R4
    00000238 8448                   MOV.B       @(8,R4),R0
    0000023A 2008                   TST         R0,R0
    0000023C 8B02                   BF          L1126
    0000023E 64E2                   MOV.L       @R14,R4
    00000240 A004                   BRA         L1138
    00000242 5441                   MOV.L       @(4,R4),R4
    00000244              L1126:                            
    00000244 9318                   MOV.W       L1175,R3   ; H'0570
    00000246 D20D                   MOV.L       L1175+4,R2 ; _symtab
    00000248 6422                   MOV.L       @R2,R4
    0000024A 343C                   ADD         R3,R4
    0000024C              L1138:                            
    0000024C 8448                   MOV.B       @(8,R4),R0
    0000024E 2008                   TST         R0,R0
    00000250 8B0C                   BF          L1125
    00000252 64E2                   MOV.L       @R14,R4
    00000254 8448                   MOV.B       @(8,R4),R0
    00000256 2008                   TST         R0,R0
    00000258 8B02                   BF          L1127
    0000025A 64E2                   MOV.L       @R14,R4
    0000025C A004                   BRA         L1139
    0000025E 5441                   MOV.L       @(4,R4),R4
    00000260              L1127:                            
    00000260 930A                   MOV.W       L1175,R3   ; H'0570
    00000262 D206                   MOV.L       L1175+4,R2 ; _symtab
    00000264 6422                   MOV.L       @R2,R4
    00000266 343C                   ADD         R3,R4
    00000268              L1139:                            
    00000268 A004                   BRA         L1140
    0000026A 5441                   MOV.L       @(4,R4),R4
    0000026C              L1125:                            
    0000026C 9304                   MOV.W       L1175,R3   ; H'0570
    0000026E D203                   MOV.L       L1175+4,R2 ; _symtab
    00000270 6422                   MOV.L       @R2,R4
    00000272 343C                   ADD         R3,R4
    00000274              L1140:                            
    00000274 A008                   BRA         L1141
    00000276 5441                   MOV.L       @(4,R4),R4
    00000278              L1175:                            
    00000278 0570                   .DATA.W     H'0570
    0000027A 0000                   .DATA.W     0
    0000027C <00000000>             .DATA.L     _symtab
    00000280              L1121:                            
    00000280 9345                   MOV.W       L1176,R3   ; H'0570
    00000282 D224                   MOV.L       L1176+6,R2 ; _symtab
    00000284 6422                   MOV.L       @R2,R4
    00000286 343C                   ADD         R3,R4
    00000288              L1141:                            
    00000288 A004                   BRA         L1142
    0000028A 6442                   MOV.L       @R4,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000028C              L1113:                            
    0000028C 933F                   MOV.W       L1176,R3   ; H'0570
    0000028E D221                   MOV.L       L1176+6,R2 ; _symtab
    00000290 6422                   MOV.L       @R2,R4
    00000292 343C                   ADD         R3,R4
    00000294              L1142:                            
    00000294 4D0B                   JSR         @R13
    00000296 0009                   NOP
      contract.c    18                    eval();
    00000298 4C0B                   JSR         @R12
    0000029A 0009                   NOP
    0000029C              L1098:                            
      contract.c    19            }
      contract.c    20            contract();
    0000029C 4F26                   LDS.L       @R15+,PR
    0000029E 6CF6                   MOV.L       @R15+,R12
    000002A0 6DF6                   MOV.L       @R15+,R13
    000002A2 6EF6                   MOV.L       @R15+,R14
      contract.c    21    }
      contract.c    22    
      contract.c    23    void
      contract.c    24    contract(void)
    000002A4              _contract:                       ; function: contract
                                                           ; frame size=4
    000002A4 4F22                   STS.L       PR,@-R15
      contract.c    25    {
      contract.c    26            save();
    000002A6 D31C                   MOV.L       L1176+10,R3; _save
    000002A8 430B                   JSR         @R3
    000002AA 0009                   NOP
      contract.c    27            yycontract();
    000002AC B003                   BSR         _yycontract
    000002AE 0009                   NOP
      contract.c    28            restore();
    000002B0 D31A                   MOV.L       L1176+14,R3; _restore
    000002B2 432B                   JMP         @R3
    000002B4 4F26                   LDS.L       @R15+,PR
      contract.c    29    }
      contract.c    30    
      contract.c    31    void
      contract.c    32    yycontract(void)
    000002B6              _yycontract:                     ; function: yycontract
                                                           ; frame size=272
    000002B6 2FE6                   MOV.L       R14,@-R15
    000002B8 2FD6                   MOV.L       R13,@-R15
    000002BA 2FC6                   MOV.L       R12,@-R15
    000002BC 2FB6                   MOV.L       R11,@-R15
    000002BE 2FA6                   MOV.L       R10,@-R15
    000002C0 2F96                   MOV.L       R9,@-R15
    000002C2 2F86                   MOV.L       R8,@-R15
    000002C4 4F22                   STS.L       PR,@-R15
    000002C6 4F12                   STS.L       MACL,@-R15
    000002C8 9022                   MOV.W       L1176+2,R0 ; H'FF18
    000002CA 3F0C                   ADD         R0,R15
      contract.c    33    {
      contract.c    34            int h, i, j, k, l, m, n, ndim, nelem;
      contract.c    35            int ai[MAXDIM], an[MAXDIM];




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      contract.c    36            U **a, **b;
      contract.c    37    
      contract.c    38            p3 = pop();
    000002CC D314                   MOV.L       L1176+18,R3; _pop
    000002CE 430B                   JSR         @R3
    000002D0 0009                   NOP
    000002D2 D214                   MOV.L       L1176+22,R2; _p3
      contract.c    39            p2 = pop();
    000002D4 D312                   MOV.L       L1176+18,R3; _pop
    000002D6 430B                   JSR         @R3
    000002D8 2202                   MOV.L       R0,@R2
    000002DA D113                   MOV.L       L1176+26,R1; _p2
      contract.c    40            p1 = pop();
    000002DC D913                   MOV.L       L1176+30,R9; _p1
    000002DE D310                   MOV.L       L1176+18,R3; _pop
    000002E0 430B                   JSR         @R3
    000002E2 2102                   MOV.L       R0,@R1
    000002E4 2902                   MOV.L       R0,@R9
    000002E6 6403                   MOV         R0,R4
    000002E8 D811                   MOV.L       L1176+34,R8; _push
    000002EA 8448                   MOV.B       @(8,R4),R0
    000002EC 600C                   EXTU.B      R0,R0
    000002EE 8804                   CMP/EQ      #4,R0
    000002F0 8928                   BT          L1143
      contract.c    41    
      contract.c    42            if (!istensor(p1)) {
      contract.c    43                    if (!iszero(p1))
    000002F2 D210                   MOV.L       L1176+38,R2; _iszero
    000002F4 420B                   JSR         @R2
    000002F6 0009                   NOP
    000002F8 2008                   TST         R0,R0
    000002FA 8B03                   BF          L1144
      contract.c    44                            stop("contract: tensor expected, 1st arg is not a tensor");
    000002FC D40E                   MOV.L       L1176+42,R4; L1077
    000002FE D20F                   MOV.L       L1176+46,R2; _stop
    00000300 420B                   JSR         @R2
    00000302 0009                   NOP
    00000304              L1144:                            
      contract.c    45                    push(zero);
    00000304 D30E                   MOV.L       L1176+50,R3; _zero
    00000306 480B                   JSR         @R8
    00000308 6432                   MOV.L       @R3,R4
      contract.c    46                    return;
    0000030A A12C                   BRA         L1145
    0000030C 0009                   NOP
    0000030E              L1176:                            
    0000030E 0570                   .DATA.W     H'0570
    00000310 FF18                   .DATA.W     H'FF18
    00000312 0000                   .DATA.W     0
    00000314 <00000000>             .DATA.L     _symtab
    00000318 <00000000>             .DATA.L     _save
    0000031C <00000000>             .DATA.L     _restore
    00000320 <00000000>             .DATA.L     _pop
    00000324 <00000000>             .DATA.L     _p3
    00000328 <00000000>             .DATA.L     _p2
    0000032C <00000000>             .DATA.L     _p1
    00000330 <00000000>             .DATA.L     _push




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000334 <00000000>             .DATA.L     _iszero
    00000338 <00000000>             .DATA.L     L1077
    0000033C <00000000>             .DATA.L     _stop
    00000340 <00000000>             .DATA.L     _zero
    00000344              L1143:                            
      contract.c    47            }
      contract.c    48    
      contract.c    49            push(p2);
    00000344 D249                   MOV.L       L1177+4,R2 ; _p2
    00000346 480B                   JSR         @R8
    00000348 6422                   MOV.L       @R2,R4
      contract.c    50            l = pop_integer();
    0000034A D349                   MOV.L       L1177+8,R3 ; _pop_integer
    0000034C 430B                   JSR         @R3
    0000034E 0009                   NOP
      contract.c    51    
      contract.c    52            push(p3);
    00000350 D248                   MOV.L       L1177+12,R2; _p3
    00000352 6B03                   MOV         R0,R11
    00000354 480B                   JSR         @R8
    00000356 6422                   MOV.L       @R2,R4
      contract.c    53            m = pop_integer();
    00000358 D345                   MOV.L       L1177+8,R3 ; _pop_integer
    0000035A 430B                   JSR         @R3
    0000035C 0009                   NOP
    0000035E 6A03                   MOV         R0,R10
      contract.c    54    
      contract.c    55            ndim = p1->u.tensor->ndim;
    00000360 6492                   MOV.L       @R9,R4
      contract.c    56    
      contract.c    57            if (l < 1 || l > ndim || m < 1 || m > ndim || l == m
      contract.c    58            || p1->u.tensor->dim[l - 1] != p1->u.tensor->dim[m - 1])
    00000362 EE01                   MOV         #1,R14
    00000364 6442                   MOV.L       @R4,R4
    00000366 3BE3                   CMP/GE      R14,R11
    00000368 8F18                   BF/S        L1147
    0000036A 6D42                   MOV.L       @R4,R13
    0000036C 3BD7                   CMP/GT      R13,R11
    0000036E 8915                   BT          L1147
    00000370 3AE3                   CMP/GE      R14,R10
    00000372 8B13                   BF          L1147
    00000374 3AD7                   CMP/GT      R13,R10
    00000376 8911                   BT          L1147
    00000378 3BA0                   CMP/EQ      R10,R11
    0000037A 890F                   BT          L1147
    0000037C 62B3                   MOV         R11,R2
    0000037E 72FF                   ADD         #-1,R2
    00000380 4208                   SHLL2       R2
    00000382 6343                   MOV         R4,R3
    00000384 7304                   ADD         #4,R3
    00000386 323C                   ADD         R3,R2
    00000388 6222                   MOV.L       @R2,R2
    0000038A 61A3                   MOV         R10,R1
    0000038C 71FF                   ADD         #-1,R1
    0000038E 4108                   SHLL2       R1
    00000390 6343                   MOV         R4,R3
    00000392 7304                   ADD         #4,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000394 313C                   ADD         R3,R1
    00000396 6012                   MOV.L       @R1,R0
    00000398 3200                   CMP/EQ      R0,R2
    0000039A 8903                   BT          L1146
    0000039C              L1147:                            
      contract.c    59                    stop("contract: index out of range");
    0000039C D436                   MOV.L       L1177+16,R4; L1078
    0000039E D237                   MOV.L       L1177+20,R2; _stop
    000003A0 420B                   JSR         @R2
    000003A2 0009                   NOP
    000003A4              L1146:                            
      contract.c    60    
      contract.c    61            l--;
      contract.c    62            m--;
      contract.c    63    
      contract.c    64            n = p1->u.tensor->dim[l];
    000003A4 6592                   MOV.L       @R9,R5
      contract.c    65    
      contract.c    66            // nelem is the number of elements in "b"
      contract.c    67    
      contract.c    68            nelem = 1;
      contract.c    69            for (i = 0; i < ndim; i++)
    000003A6 4D15                   CMP/PL      R13
    000003A8 6052                   MOV.L       @R5,R0
    000003AA 7BFF                   ADD         #-1,R11
    000003AC 7AFF                   ADD         #-1,R10
    000003AE 63B3                   MOV         R11,R3
    000003B0 4308                   SHLL2       R3
    000003B2 6203                   MOV         R0,R2
    000003B4 2F32                   MOV.L       R3,@R15
    000003B6 7204                   ADD         #4,R2
    000003B8 332C                   ADD         R2,R3
    000003BA 6132                   MOV.L       @R3,R1
    000003BC 1F17                   MOV.L       R1,@(28,R15)
    000003BE 1FE1                   MOV.L       R14,@(4,R15)
    000003C0 EE00                   MOV         #0,R14
    000003C2 8F12                   BF/S        L1148
    000003C4 64E3                   MOV         R14,R4
    000003C6              L1149:                            
      contract.c    70                    if (i != l && i != m)
    000003C6 34B0                   CMP/EQ      R11,R4
    000003C8 890C                   BT          L1150
    000003CA 34A0                   CMP/EQ      R10,R4
    000003CC 890A                   BT          L1150
      contract.c    71                            nelem *= p1->u.tensor->dim[i];
    000003CE 6343                   MOV         R4,R3
    000003D0 51F1                   MOV.L       @(4,R15),R1
    000003D2 4308                   SHLL2       R3
    000003D4 6052                   MOV.L       @R5,R0
    000003D6 6203                   MOV         R0,R2
    000003D8 7204                   ADD         #4,R2
    000003DA 332C                   ADD         R2,R3
    000003DC 6332                   MOV.L       @R3,R3
    000003DE 0137                   MUL.L       R3,R1
    000003E0 011A                   STS         MACL,R1
    000003E2 1F11                   MOV.L       R1,@(4,R15)
    000003E4              L1150:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003E4 7401                   ADD         #1,R4
    000003E6 34D3                   CMP/GE      R13,R4
    000003E8 8BED                   BF          L1149
    000003EA              L1148:                            
      contract.c    72    
      contract.c    73            p2 = alloc_tensor(nelem);
    000003EA D325                   MOV.L       L1177+24,R3; _alloc_tensor
    000003EC 430B                   JSR         @R3
    000003EE 54F1                   MOV.L       @(4,R15),R4
    000003F0 D21E                   MOV.L       L1177+4,R2 ; _p2
      contract.c    74    
      contract.c    75            p2->u.tensor->ndim = ndim - 2;
    000003F2 61D3                   MOV         R13,R1
    000003F4 2202                   MOV.L       R0,@R2
      contract.c    76    
      contract.c    77            j = 0;
    000003F6 65E3                   MOV         R14,R5
    000003F8 6302                   MOV.L       @R0,R3
    000003FA 71FE                   ADD         #-2,R1
    000003FC 2312                   MOV.L       R1,@R3
      contract.c    78            for (i = 0; i < ndim; i++)
    000003FE 4D15                   CMP/PL      R13
    00000400 8F16                   BF/S        L1151
    00000402 64E3                   MOV         R14,R4
    00000404              L1152:                            
      contract.c    79                    if (i != l && i != m)
    00000404 34B0                   CMP/EQ      R11,R4
    00000406 8910                   BT          L1153
    00000408 34A0                   CMP/EQ      R10,R4
    0000040A 890E                   BT          L1153
      contract.c    80                            p2->u.tensor->dim[j++] = p1->u.tensor->dim[i];
    0000040C D317                   MOV.L       L1177+4,R3 ; _p2
    0000040E 6253                   MOV         R5,R2
    00000410 6032                   MOV.L       @R3,R0
    00000412 7501                   ADD         #1,R5
    00000414 6102                   MOV.L       @R0,R1
    00000416 4208                   SHLL2       R2
    00000418 6092                   MOV.L       @R9,R0
    0000041A 7104                   ADD         #4,R1
    0000041C 6002                   MOV.L       @R0,R0
    0000041E 321C                   ADD         R1,R2
    00000420 6143                   MOV         R4,R1
    00000422 4108                   SHLL2       R1
    00000424 7004                   ADD         #4,R0
    00000426 011E                   MOV.L       @(R0,R1),R1
    00000428 2212                   MOV.L       R1,@R2
    0000042A              L1153:                            
    0000042A 7401                   ADD         #1,R4
    0000042C 34D3                   CMP/GE      R13,R4
    0000042E 8BE9                   BF          L1152
    00000430              L1151:                            
      contract.c    81    
      contract.c    82            a = p1->u.tensor->elem;
    00000430 6292                   MOV.L       @R9,R2
      contract.c    83            b = p2->u.tensor->elem;
      contract.c    84    
      contract.c    85            for (i = 0; i < ndim; i++) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000432 65E3                   MOV         R14,R5
    00000434 9C18                   MOV.W       L1177,R12  ; H'0088
    00000436 4D15                   CMP/PL      R13
    00000438 6122                   MOV.L       @R2,R1
    0000043A 64E3                   MOV         R14,R4
    0000043C D20B                   MOV.L       L1177+4,R2 ; _p2
    0000043E 7168                   ADD         #104,R1
    00000440 1F16                   MOV.L       R1,@(24,R15)
    00000442 6322                   MOV.L       @R2,R3
    00000444 6132                   MOV.L       @R3,R1
    00000446 6013                   MOV         R1,R0
    00000448 7068                   ADD         #104,R0
    0000044A 1F08                   MOV.L       R0,@(32,R15)
    0000044C 8F1F                   BF/S        L1154
    0000044E 3CFC                   ADD         R15,R12
    00000450              L1155:                            
      contract.c    86                    ai[i] = 0;
    00000450 6043                   MOV         R4,R0
      contract.c    87                    an[i] = p1->u.tensor->dim[i];
    00000452 63F3                   MOV         R15,R3
    00000454 0CE6                   MOV.L       R14,@(R0,R12)
    00000456 7328                   ADD         #40,R3
    00000458 6292                   MOV.L       @R9,R2
    0000045A 334C                   ADD         R4,R3
    0000045C 6222                   MOV.L       @R2,R2
    0000045E 7204                   ADD         #4,R2
    00000460 324C                   ADD         R4,R2
    00000462 6222                   MOV.L       @R2,R2
    00000464 A00E                   BRA         L1172
    00000466 0009                   NOP
    00000468              L1177:                            
    00000468 0088                   .DATA.W     H'0088
    0000046A 0000                   .DATA.W     0
    0000046C <00000000>             .DATA.L     _p2
    00000470 <00000000>             .DATA.L     _pop_integer
    00000474 <00000000>             .DATA.L     _p3
    00000478 <00000000>             .DATA.L     L1078
    0000047C <00000000>             .DATA.L     _stop
    00000480 <00000000>             .DATA.L     _alloc_tensor
    00000484              L1172:                            
    00000484 2322                   MOV.L       R2,@R3
    00000486 7501                   ADD         #1,R5
    00000488 35D3                   CMP/GE      R13,R5
    0000048A 8FE1                   BF/S        L1155
    0000048C 7404                   ADD         #4,R4
    0000048E              L1154:                            
    0000048E 61A3                   MOV         R10,R1
      contract.c    88            }
      contract.c    89    
      contract.c    90            for (i = 0; i < nelem; i++) {
    00000490 1FE2                   MOV.L       R14,@(8,R15)
    00000492 4108                   SHLL2       R1
    00000494 53F8                   MOV.L       @(32,R15),R3
    00000496 31CC                   ADD         R12,R1
    00000498 1F33                   MOV.L       R3,@(12,R15)
    0000049A 63D3                   MOV         R13,R3
    0000049C 62F2                   MOV.L       @R15,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000049E 73FF                   ADD         #-1,R3
    000004A0 32CC                   ADD         R12,R2
    000004A2 1F24                   MOV.L       R2,@(16,R15)
    000004A4 1F15                   MOV.L       R1,@(20,R15)
    000004A6 A050                   BRA         L1156
    000004A8 1F39                   MOV.L       R3,@(36,R15)
    000004AA              L1157:                            
      contract.c    91                    push(zero);
    000004AA D135                   MOV.L       L1178+2,R1 ; _zero
    000004AC 480B                   JSR         @R8
    000004AE 6412                   MOV.L       @R1,R4
      contract.c    92                    for (j = 0; j < n; j++) {
    000004B0 A024                   BRA         L1158
    000004B2 2FE2                   MOV.L       R14,@R15
    000004B4              L1159:                            
      contract.c    93                            ai[l] = j;
    000004B4 52F4                   MOV.L       @(16,R15),R2
      contract.c    94                            ai[m] = j;
      contract.c    95                            h = 0;
    000004B6 69E3                   MOV         R14,R9
    000004B8 63F2                   MOV.L       @R15,R3
      contract.c    96                            for (k = 0; k < ndim; k++)
    000004BA 65E3                   MOV         R14,R5
    000004BC 2232                   MOV.L       R3,@R2
    000004BE 4D15                   CMP/PL      R13
    000004C0 52F5                   MOV.L       @(20,R15),R2
    000004C2 63F2                   MOV.L       @R15,R3
    000004C4 2232                   MOV.L       R3,@R2
    000004C6 8F0E                   BF/S        L1160
    000004C8 64E3                   MOV         R14,R4
    000004CA              L1161:                            
      contract.c    97                                    h = (h * an[k]) + ai[k];
    000004CA 63F3                   MOV         R15,R3
    000004CC 7328                   ADD         #40,R3
    000004CE 334C                   ADD         R4,R3
    000004D0 6332                   MOV.L       @R3,R3
    000004D2 6043                   MOV         R4,R0
    000004D4 0397                   MUL.L       R9,R3
    000004D6 7501                   ADD         #1,R5
    000004D8 02CE                   MOV.L       @(R0,R12),R2
    000004DA 031A                   STS         MACL,R3
    000004DC 332C                   ADD         R2,R3
    000004DE 6933                   MOV         R3,R9
    000004E0 35D3                   CMP/GE      R13,R5
    000004E2 8FF2                   BF/S        L1161
    000004E4 7404                   ADD         #4,R4
    000004E6              L1160:                            
      contract.c    98                            push(a[h]);
    000004E6 6493                   MOV         R9,R4
    000004E8 50F6                   MOV.L       @(24,R15),R0
    000004EA 4408                   SHLL2       R4
    000004EC 480B                   JSR         @R8
    000004EE 044E                   MOV.L       @(R0,R4),R4
      contract.c    99                            add();
    000004F0 D324                   MOV.L       L1178+6,R3 ; _add
    000004F2 430B                   JSR         @R3
    000004F4 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004F6 62F2                   MOV.L       @R15,R2
    000004F8 7201                   ADD         #1,R2
    000004FA 2F22                   MOV.L       R2,@R15
    000004FC              L1158:                            
    000004FC 53F7                   MOV.L       @(28,R15),R3
    000004FE 61F2                   MOV.L       @R15,R1
    00000500 3133                   CMP/GE      R3,R1
    00000502 8BD7                   BF          L1159
      contract.c   100                    }
      contract.c   101                    b[i] = pop();
    00000504 53F3                   MOV.L       @(12,R15),R3
    00000506 D220                   MOV.L       L1178+10,R2; _pop
    00000508 420B                   JSR         @R2
    0000050A 2F36                   MOV.L       R3,@-R15
    0000050C 61F6                   MOV.L       @R15+,R1
    0000050E 2102                   MOV.L       R0,@R1
      contract.c   102                    for (j = ndim - 1; j >= 0; j--) {
    00000510 A013                   BRA         L1162
    00000512 54F9                   MOV.L       @(36,R15),R4
    00000514              L1163:                            
      contract.c   103                            if (j == l || j == m)
    00000514 34B0                   CMP/EQ      R11,R4
    00000516 890F                   BT          L1166
    00000518 34A0                   CMP/EQ      R10,R4
    0000051A 890D                   BT          L1166
    0000051C 6943                   MOV         R4,R9
    0000051E 4908                   SHLL2       R9
    00000520 6093                   MOV         R9,R0
    00000522 62F3                   MOV         R15,R2
    00000524 03CE                   MOV.L       @(R0,R12),R3
    00000526 7228                   ADD         #40,R2
    00000528 7301                   ADD         #1,R3
    0000052A 329C                   ADD         R9,R2
    0000052C 0C36                   MOV.L       R3,@(R0,R12)
    0000052E 6222                   MOV.L       @R2,R2
    00000530 3323                   CMP/GE      R2,R3
    00000532 8B04                   BF          L1168
      contract.c   104                                    continue;
      contract.c   105                            if (++ai[j] < an[j])
      contract.c   106                                    break;
      contract.c   107                            ai[j] = 0;
    00000534 6093                   MOV         R9,R0
    00000536 0CE6                   MOV.L       R14,@(R0,R12)
    00000538              L1166:                            
    00000538 74FF                   ADD         #-1,R4
    0000053A              L1162:                            
    0000053A 4411                   CMP/PZ      R4
    0000053C 89EA                   BT          L1163
    0000053E              L1168:                            
    0000053E 53F2                   MOV.L       @(8,R15),R3
    00000540 7301                   ADD         #1,R3
    00000542 1F32                   MOV.L       R3,@(8,R15)
    00000544 52F3                   MOV.L       @(12,R15),R2
    00000546 7204                   ADD         #4,R2
    00000548 1F23                   MOV.L       R2,@(12,R15)
    0000054A              L1156:                            
    0000054A 53F1                   MOV.L       @(4,R15),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000054C 51F2                   MOV.L       @(8,R15),R1
    0000054E 3133                   CMP/GE      R3,R1
    00000550 8BAB                   BF          L1157
      contract.c   108                    }
      contract.c   109            }
      contract.c   110    
      contract.c   111            if (nelem == 1)
    00000552 50F1                   MOV.L       @(4,R15),R0
    00000554 8801                   CMP/EQ      #1,R0
    00000556 8B02                   BF          L1169
      contract.c   112                    push(b[0]);
    00000558 54F8                   MOV.L       @(32,R15),R4
    0000055A A002                   BRA         L1171
    0000055C 6442                   MOV.L       @R4,R4
    0000055E              L1169:                            
      contract.c   113            else
      contract.c   114                    push(p2);
    0000055E D20B                   MOV.L       L1178+14,R2; _p2
    00000560 6422                   MOV.L       @R2,R4
    00000562              L1171:                            
    00000562 480B                   JSR         @R8
    00000564 0009                   NOP
      contract.c   115    }
    00000566              L1145:                            
    00000566 910A                   MOV.W       L1178,R1   ; H'00E8
    00000568 3F1C                   ADD         R1,R15
    0000056A 4F16                   LDS.L       @R15+,MACL
    0000056C 4F26                   LDS.L       @R15+,PR
    0000056E 68F6                   MOV.L       @R15+,R8
    00000570 69F6                   MOV.L       @R15+,R9
    00000572 6AF6                   MOV.L       @R15+,R10
    00000574 6BF6                   MOV.L       @R15+,R11
    00000576 6CF6                   MOV.L       @R15+,R12
    00000578 6DF6                   MOV.L       @R15+,R13
    0000057A 000B                   RTS
    0000057C 6EF6                   MOV.L       @R15+,R14
    0000057E              L1178:                            
    0000057E 00E8                   .DATA.W     H'00E8
    00000580 <00000000>             .DATA.L     _zero
    00000584 <00000000>             .DATA.L     _add
    00000588 <00000000>             .DATA.L     _pop
    0000058C <00000000>             .DATA.L     _p2
      contract.c   116    
C   00000000              L1077:
    00000000 636F6E7472             .SDATA      "contract: tensor expected, 1st arg is not a tensor"
             6163743A20   
             74656E736F   
             7220657870   
             6563746564   
             2C20317374   
             2061726720   
             6973206E6F   
             7420612074   
             656E736F72   
    00000032 00                     .DATA.B     H'00
    00000033 00000001               .RES.B      1
    00000034              L1078:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000034 636F6E7472             .SDATA      "contract: index out of range"
             6163743A20   
             696E646578   
             206F757420   
             6F66207261   
             6E6765       
    00000050 00                     .DATA.B     H'00






















































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:50  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      116



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000590 Byte(s)
CONSTANT SECTION (C):                               00000051 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000005E1 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           16
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           3
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           111






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk44C7.tmp 

