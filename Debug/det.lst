SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\det.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           det.c     1    //-----------------------------------------------------------------------------
           det.c     2    //
           det.c     3    //      Input:          Matrix on stack
           det.c     4    //
           det.c     5    //      Output:         Determinant on stack
           det.c     6    //
           det.c     7    //      Example:
           det.c     8    //
           det.c     9    //      > det(((1,2),(3,4)))
           det.c    10    //      -2
           det.c    11    //
           det.c    12    //      Note:
           det.c    13    //
           det.c    14    //      Uses Gaussian elimination for numerical matrices.
           det.c    15    //
           det.c    16    //-----------------------------------------------------------------------------
           det.c    17    
           det.c    18    #include "stdafx.h"
           det.c    19    #include "defs.h"
           det.c    20    
           det.c    21    static int
           det.c    22    check_arg(void)
P   00000000              __$check_arg:                    ; function: check_arg
                                                           ; frame size=4
    00000000 D38B                   MOV.L       L1166+2,R3 ; _p1
    00000002 7FFC                   ADD         #-4,R15
    00000004 6432                   MOV.L       @R3,R4
    00000006 8448                   MOV.B       @(8,R4),R0
    00000008 600C                   EXTU.B      R0,R0
    0000000A 8804                   CMP/EQ      #4,R0
    0000000C 8B0A                   BF          L1104
           det.c    23    {
           det.c    24            if (!istensor(p1))
           det.c    25                    return 0;
           det.c    26            else if (p1->u.tensor->ndim != 2)
    0000000E 6042                   MOV.L       @R4,R0
    00000010 6002                   MOV.L       @R0,R0
    00000012 8802                   CMP/EQ      #2,R0
    00000014 8B06                   BF          L1104
           det.c    27                    return 0;
           det.c    28            else if (p1->u.tensor->dim[0] != p1->u.tensor->dim[1])
    00000016 6542                   MOV.L       @R4,R5
    00000018 2F52                   MOV.L       R5,@R15
    0000001A 7504                   ADD         #4,R5
    0000001C 5251                   MOV.L       @(4,R5),R2
    0000001E 6152                   MOV.L       @R5,R1
    00000020 3120                   CMP/EQ      R2,R1
    00000022 8902                   BT          L1121
    00000024              L1104:
           det.c    29                    return 0;
    00000024 E000                   MOV         #0,R0
    00000026 000B                   RTS
    00000028 7F04                   ADD         #4,R15
    0000002A              L1121:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           det.c    30            else
           det.c    31                    return 1;
    0000002A E001                   MOV         #1,R0
           det.c    32    }
    0000002C              L1117:                            
    0000002C 000B                   RTS
    0000002E 7F04                   ADD         #4,R15
           det.c    33    
           det.c    34    void
           det.c    35    det(void)
    00000030              _det:                            ; function: det
                                                           ; frame size=16
    00000030 2FE6                   MOV.L       R14,@-R15
    00000032 2FD6                   MOV.L       R13,@-R15
    00000034 2FC6                   MOV.L       R12,@-R15
    00000036 4F22                   STS.L       PR,@-R15
           det.c    36    {
           det.c    37            int i, n;
           det.c    38            U **a;
           det.c    39    
           det.c    40            save();
    00000038 D37E                   MOV.L       L1166+6,R3 ; _save
    0000003A 430B                   JSR         @R3
    0000003C 0009                   NOP
           det.c    41    
           det.c    42            p1 = pop();
    0000003E DE7C                   MOV.L       L1166+2,R14; _p1
    00000040 D27D                   MOV.L       L1166+10,R2; _pop
    00000042 420B                   JSR         @R2
    00000044 0009                   NOP
           det.c    43    
           det.c    44            if (check_arg() == 0) {
    00000046 DC7D                   MOV.L       L1166+14,R12; _push
    00000048 BFDA                   BSR         __$check_arg
    0000004A 2E02                   MOV.L       R0,@R14
    0000004C 2008                   TST         R0,R0
    0000004E 8B09                   BF          L1123
           det.c    45                    push_symbol(DET);
    00000050 D37B                   MOV.L       L1166+18,R3; _push_symbol
    00000052 430B                   JSR         @R3
    00000054 E41F                   MOV         #31,R4
           det.c    46                    push(p1);
    00000056 4C0B                   JSR         @R12
    00000058 64E2                   MOV.L       @R14,R4
           det.c    47                    list(2);
    0000005A D27A                   MOV.L       L1166+22,R2; _list
    0000005C 420B                   JSR         @R2
    0000005E E402                   MOV         #2,R4
    00000060 A032                   BRA         L1105
    00000062 0009                   NOP
    00000064              L1123:                            
           det.c    48                    restore();
           det.c    49                    return;
           det.c    50            }
           det.c    51    
           det.c    52            n = p1->u.tensor->nelem;
    00000064 64E2                   MOV.L       @R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000066 E064                   MOV         #100,R0
    00000068 6442                   MOV.L       @R4,R4
    0000006A 054E                   MOV.L       @(R0,R4),R5
           det.c    53    
           det.c    54            a = p1->u.tensor->elem;
    0000006C 6743                   MOV         R4,R7
    0000006E 7768                   ADD         #104,R7
           det.c    55    
           det.c    56            for (i = 0; i < n; i++)
    00000070 4515                   CMP/PL      R5
    00000072 8F0E                   BF/S        L1125
    00000074 E400                   MOV         #0,R4
    00000076              L1126:                            
           det.c    57                    if (!isnum(a[i]))
    00000076 6043                   MOV         R4,R0
    00000078 4008                   SHLL2       R0
    0000007A 067E                   MOV.L       @(R0,R7),R6
    0000007C 8468                   MOV.B       @(8,R6),R0
    0000007E 600C                   EXTU.B      R0,R0
    00000080 8801                   CMP/EQ      #1,R0
    00000082 8D03                   BT/S        L1127
    00000084 6603                   MOV         R0,R6
    00000086 6063                   MOV         R6,R0
    00000088 8802                   CMP/EQ      #2,R0
    0000008A 8B02                   BF          L1125
    0000008C              L1127:                            
    0000008C 7401                   ADD         #1,R4
    0000008E 3453                   CMP/GE      R5,R4
    00000090 8BF1                   BF          L1126
    00000092              L1125:                            
           det.c    58                            break;
           det.c    59    
           det.c    60            if (i == n)
    00000092 3450                   CMP/EQ      R5,R4
    00000094 8B03                   BF          L1129
           det.c    61                    yydetg();
    00000096 B108                   BSR         _yydetg
    00000098 0009                   NOP
    0000009A A015                   BRA         L1105
    0000009C 0009                   NOP
    0000009E              L1129:                            
           det.c    62            else {
           det.c    63                    for (i = 0; i < p1->u.tensor->nelem; i++)
    0000009E A009                   BRA         L1131
    000000A0 ED00                   MOV         #0,R13
    000000A2              L1132:                            
           det.c    64                            push(p1->u.tensor->elem[i]);
    000000A2 64D3                   MOV         R13,R4
    000000A4 60E2                   MOV.L       @R14,R0
    000000A6 4408                   SHLL2       R4
    000000A8 6302                   MOV.L       @R0,R3
    000000AA 7368                   ADD         #104,R3
    000000AC 343C                   ADD         R3,R4
    000000AE 4C0B                   JSR         @R12
    000000B0 6442                   MOV.L       @R4,R4
    000000B2 7D01                   ADD         #1,R13
    000000B4              L1131:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000B4 62E2                   MOV.L       @R14,R2
    000000B6 E064                   MOV         #100,R0
    000000B8 6322                   MOV.L       @R2,R3
    000000BA 013E                   MOV.L       @(R0,R3),R1
    000000BC 3D13                   CMP/GE      R1,R13
    000000BE 8BF0                   BF          L1132
           det.c    65                    determinant(p1->u.tensor->dim[0]);
    000000C0 64E2                   MOV.L       @R14,R4
    000000C2 6442                   MOV.L       @R4,R4
    000000C4 B006                   BSR         _determinant
    000000C6 5441                   MOV.L       @(4,R4),R4
    000000C8              L1105:
           det.c    66            }
           det.c    67    
           det.c    68            restore();
    000000C8 4F26                   LDS.L       @R15+,PR
    000000CA 6CF6                   MOV.L       @R15+,R12
    000000CC D25E                   MOV.L       L1166+26,R2; _restore
    000000CE 6DF6                   MOV.L       @R15+,R13
    000000D0 422B                   JMP         @R2
    000000D2 6EF6                   MOV.L       @R15+,R14
           det.c    69    }
           det.c    70    
           det.c    71    // determinant of n * n matrix elements on the stack
           det.c    72    
           det.c    73    void
           det.c    74    determinant(int n)
    000000D4              _determinant:                    ; function: determinant
                                                           ; frame size=48
    000000D4 2FE6                   MOV.L       R14,@-R15
    000000D6 6E43                   MOV         R4,R14
           det.c    75    {
           det.c    76            int h, i, j, k, q, s, sign, t;
           det.c    77            int *a, *c, *d;
           det.c    78    
           det.c    79            h = tos - n * n;
    000000D8 D15C                   MOV.L       L1166+30,R1; _tos
           det.c    80    
           det.c    81            a = (int *) malloc(3 * n * sizeof (int));
    000000DA 64E3                   MOV         R14,R4
    000000DC 2FD6                   MOV.L       R13,@-R15
    000000DE 4400                   SHLL        R4
    000000E0 2FC6                   MOV.L       R12,@-R15
    000000E2 2FB6                   MOV.L       R11,@-R15
    000000E4 2FA6                   MOV.L       R10,@-R15
    000000E6 EB00                   MOV         #0,R11
    000000E8 2F96                   MOV.L       R9,@-R15
    000000EA 2F86                   MOV.L       R8,@-R15
    000000EC 4F22                   STS.L       PR,@-R15
    000000EE 4F12                   STS.L       MACL,@-R15
    000000F0 0EE7                   MUL.L       R14,R14
    000000F2 7FF4                   ADD         #-12,R15
    000000F4 6212                   MOV.L       @R1,R2
    000000F6 031A                   STS         MACL,R3
    000000F8 3238                   SUB         R3,R2
    000000FA 63E3                   MOV         R14,R3
    000000FC 2F22                   MOV.L       R2,@R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000FE 343C                   ADD         R3,R4
    00000100 D353                   MOV.L       L1166+34,R3; _malloc
    00000102 430B                   JSR         @R3
    00000104 4408                   SHLL2       R4
    00000106 6D03                   MOV         R0,R13
           det.c    82    
           det.c    83            if (a == NULL)
    00000108 2DD8                   TST         R13,R13
    0000010A 8B02                   BF          L1133
           det.c    84                    out_of_memory();
    0000010C D351                   MOV.L       L1166+38,R3; _out_of_memory
    0000010E 430B                   JSR         @R3
    00000110 0009                   NOP
    00000112              L1133:                            
           det.c    85    
           det.c    86            c = a + n;
    00000112 64E3                   MOV         R14,R4
    00000114 4408                   SHLL2       R4
    00000116 6943                   MOV         R4,R9
    00000118 39DC                   ADD         R13,R9
           det.c    87    
           det.c    88            d = c + n;
    0000011A 6A43                   MOV         R4,R10
    0000011C 3A9C                   ADD         R9,R10
           det.c    89    
           det.c    90            for (i = 0; i < n; i++) {
    0000011E 64B3                   MOV         R11,R4
    00000120 4E15                   CMP/PL      R14
    00000122 8F09                   BF/S        L1134
    00000124 E601                   MOV         #1,R6
    00000126              L1135:                            
           det.c    91                    a[i] = i;
    00000126 6543                   MOV         R4,R5
    00000128 4508                   SHLL2       R5
    0000012A 6053                   MOV         R5,R0
    0000012C 0D46                   MOV.L       R4,@(R0,R13)
    0000012E 7401                   ADD         #1,R4
           det.c    92                    c[i] = 0;
    00000130 09B6                   MOV.L       R11,@(R0,R9)
    00000132 34E3                   CMP/GE      R14,R4
    00000134 8FF7                   BF/S        L1135
           det.c    93                    d[i] = 1;
    00000136 0A66                   MOV.L       R6,@(R0,R10)
    00000138              L1134:                            
           det.c    94            }
           det.c    95    
           det.c    96            sign = 1;
           det.c    97    
           det.c    98            push(zero);
    00000138 D247                   MOV.L       L1166+42,R2; _zero
    0000013A 6863                   MOV         R6,R8
    0000013C D33F                   MOV.L       L1166+14,R3; _push
    0000013E 430B                   JSR         @R3
    00000140 6422                   MOV.L       @R2,R4
           det.c    99    
           det.c   100            for (;;) {
    00000142              L1137:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           det.c   101    
           det.c   102                    if (sign == 1)
    00000142 6083                   MOV         R8,R0
    00000144 DC45                   MOV.L       L1166+46,R12; _push_integer
    00000146 8801                   CMP/EQ      #1,R0
    00000148 8B01                   BF          L1138
           det.c   103                            push_integer(1);
    0000014A A001                   BRA         L1165
    0000014C E401                   MOV         #1,R4
    0000014E              L1138:                            
           det.c   104                    else
           det.c   105                            push_integer(-1);
    0000014E E4FF                   MOV         #-1,R4
    00000150              L1165:                            
    00000150 4C0B                   JSR         @R12
    00000152 0009                   NOP
           det.c   106    
           det.c   107                    for (i = 0; i < n; i++) {
    00000154 A013                   BRA         L1140
    00000156 6CB3                   MOV         R11,R12
    00000158              L1141:                            
           det.c   108                            k = n * a[i] + i;
           det.c   109                            push(stack[h + k]);
    00000158 D241                   MOV.L       L1166+50,R2; _stack
    0000015A 60C3                   MOV         R12,R0
    0000015C D137                   MOV.L       L1166+14,R1; _push
    0000015E 4008                   SHLL2       R0
    00000160 03DE                   MOV.L       @(R0,R13),R3
    00000162 03E7                   MUL.L       R14,R3
    00000164 031A                   STS         MACL,R3
    00000166 33CC                   ADD         R12,R3
    00000168 1F31                   MOV.L       R3,@(4,R15)
    0000016A 64F2                   MOV.L       @R15,R4
    0000016C 6022                   MOV.L       @R2,R0
    0000016E 343C                   ADD         R3,R4
    00000170 4408                   SHLL2       R4
    00000172 410B                   JSR         @R1
    00000174 044E                   MOV.L       @(R0,R4),R4
           det.c   110                            multiply(); // FIXME -- problem here
    00000176 D33B                   MOV.L       L1166+54,R3; _multiply
    00000178 430B                   JSR         @R3
    0000017A 0009                   NOP
    0000017C 7C01                   ADD         #1,R12
    0000017E              L1140:                            
    0000017E 3CE3                   CMP/GE      R14,R12
    00000180 8BEA                   BF          L1141
           det.c   111                    }
           det.c   112    
           det.c   113                    add();
    00000182 DC39                   MOV.L       L1166+58,R12; _add
    00000184 4C0B                   JSR         @R12
    00000186 0009                   NOP
           det.c   114    
           det.c   115                    /* next permutation (Knuth's algorithm P) */
           det.c   116    
           det.c   117                    j = n - 1;
    00000188 64E3                   MOV         R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000018A 74FF                   ADD         #-1,R4
           det.c   118                    s = 0;
    0000018C 66B3                   MOV         R11,R6
           det.c   119            P4:     q = c[j] + d[j];
    0000018E              __$P4$1082:                      ; label: P4
    0000018E 6C43                   MOV         R4,R12
    00000190 4C08                   SHLL2       R12
    00000192 60C3                   MOV         R12,R0
    00000194 059E                   MOV.L       @(R0,R9),R5
    00000196 03AE                   MOV.L       @(R0,R10),R3
    00000198 353C                   ADD         R3,R5
           det.c   120                    if (q < 0) {
    0000019A 4511                   CMP/PZ      R5
    0000019C 8905                   BT          L1142
           det.c   121                            d[j] = -d[j];
    0000019E 65C3                   MOV         R12,R5
    000001A0 35AC                   ADD         R10,R5
    000001A2 6352                   MOV.L       @R5,R3
    000001A4 633B                   NEG         R3,R3
    000001A6 A00C                   BRA         L1106
    000001A8 2532                   MOV.L       R3,@R5
    000001AA              L1142:                            
           det.c   122                            j--;
           det.c   123                            goto P4;
           det.c   124                    }
           det.c   125                    if (q == j + 1) {
    000001AA 6243                   MOV         R4,R2
    000001AC 7201                   ADD         #1,R2
    000001AE 3520                   CMP/EQ      R2,R5
    000001B0 8B09                   BF          L1143
           det.c   126                            if (j == 0)
    000001B2 2448                   TST         R4,R4
    000001B4 891E                   BT          L1145
           det.c   127                                    break;
           det.c   128                            s++;
    000001B6 7601                   ADD         #1,R6
           det.c   129                            d[j] = -d[j];
    000001B8 65C3                   MOV         R12,R5
    000001BA 35AC                   ADD         R10,R5
    000001BC 6252                   MOV.L       @R5,R2
    000001BE 622B                   NEG         R2,R2
    000001C0 2522                   MOV.L       R2,@R5
    000001C2              L1106:
           det.c   130                            j--;
           det.c   131                            goto P4;
    000001C2 AFE4                   BRA         __$P4$1082
    000001C4 74FF                   ADD         #-1,R4
    000001C6              L1143:                            
           det.c   132                    }
           det.c   133    
           det.c   134                    t = a[j - c[j] + s];
    000001C6 62C3                   MOV         R12,R2
    000001C8 329C                   ADD         R9,R2
    000001CA 6143                   MOV         R4,R1
    000001CC 1F21                   MOV.L       R2,@(4,R15)
           det.c   135                    a[j - c[j] + s] = a[j - q + s];
    000001CE 3458                   SUB         R5,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001D0 6322                   MOV.L       @R2,R3
    000001D2 6743                   MOV         R4,R7
    000001D4 3138                   SUB         R3,R1
    000001D6 316C                   ADD         R6,R1
    000001D8 4108                   SHLL2       R1
    000001DA 31DC                   ADD         R13,R1
    000001DC 1F12                   MOV.L       R1,@(8,R15)
    000001DE 376C                   ADD         R6,R7
    000001E0 6C12                   MOV.L       @R1,R12
    000001E2 4708                   SHLL2       R7
    000001E4 37DC                   ADD         R13,R7
    000001E6 6372                   MOV.L       @R7,R3
    000001E8 2132                   MOV.L       R3,@R1
           det.c   136                    a[j - q + s] = t;
    000001EA 27C2                   MOV.L       R12,@R7
           det.c   137                    c[j] = q;
    000001EC 52F1                   MOV.L       @(4,R15),R2
    000001EE 2252                   MOV.L       R5,@R2
           det.c   138    
           det.c   139                    sign = -sign;
    000001F0 AFA7                   BRA         L1137
    000001F2 688B                   NEG         R8,R8
    000001F4              L1145:                            
           det.c   140            }
           det.c   141    
           det.c   142            free(a);
    000001F4 D21D                   MOV.L       L1166+62,R2; _free
    000001F6 420B                   JSR         @R2
    000001F8 64D3                   MOV         R13,R4
           det.c   143    
           det.c   144            stack[h] = stack[tos - 1];
    000001FA 63F2                   MOV.L       @R15,R3
    000001FC D218                   MOV.L       L1166+50,R2; _stack
    000001FE 4308                   SHLL2       R3
    00000200 6022                   MOV.L       @R2,R0
    00000202 330C                   ADD         R0,R3
    00000204 D211                   MOV.L       L1166+30,R2; _tos
    00000206 6122                   MOV.L       @R2,R1
    00000208 71FF                   ADD         #-1,R1
    0000020A 4108                   SHLL2       R1
    0000020C 011E                   MOV.L       @(R0,R1),R1
    0000020E 2312                   MOV.L       R1,@R3
           det.c   145    
           det.c   146            tos = h + 1;
    00000210 60F2                   MOV.L       @R15,R0
    00000212 6323                   MOV         R2,R3
    00000214 7001                   ADD         #1,R0
    00000216 2302                   MOV.L       R0,@R3
           det.c   147    }
    00000218 7F0C                   ADD         #12,R15
    0000021A 4F16                   LDS.L       @R15+,MACL
    0000021C 4F26                   LDS.L       @R15+,PR
    0000021E 68F6                   MOV.L       @R15+,R8
    00000220 69F6                   MOV.L       @R15+,R9
    00000222 6AF6                   MOV.L       @R15+,R10
    00000224 6BF6                   MOV.L       @R15+,R11
    00000226 6CF6                   MOV.L       @R15+,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000228 6DF6                   MOV.L       @R15+,R13
    0000022A 000B                   RTS
    0000022C 6EF6                   MOV.L       @R15+,R14
    0000022E              L1166:                            
    0000022E 0000                   .DATA.W     0
    00000230 <00000000>             .DATA.L     _p1
    00000234 <00000000>             .DATA.L     _save
    00000238 <00000000>             .DATA.L     _pop
    0000023C <00000000>             .DATA.L     _push
    00000240 <00000000>             .DATA.L     _push_symbol
    00000244 <00000000>             .DATA.L     _list
    00000248 <00000000>             .DATA.L     _restore
    0000024C <00000000>             .DATA.L     _tos
    00000250 <00000000>             .DATA.L     _malloc
    00000254 <00000000>             .DATA.L     _out_of_memory
    00000258 <00000000>             .DATA.L     _zero
    0000025C <00000000>             .DATA.L     _push_integer
    00000260 <00000000>             .DATA.L     _stack
    00000264 <00000000>             .DATA.L     _multiply
    00000268 <00000000>             .DATA.L     _add
    0000026C <00000000>             .DATA.L     _free
           det.c   148    
           det.c   149    //-----------------------------------------------------------------------------
           det.c   150    //
           det.c   151    //      Input:          Matrix on stack
           det.c   152    //
           det.c   153    //      Output:         Determinant on stack
           det.c   154    //
           det.c   155    //      Note:
           det.c   156    //
           det.c   157    //      Uses Gaussian elimination which is faster for numerical matrices.
           det.c   158    //
           det.c   159    //      Gaussian Elimination works by walking down the diagonal and clearing
           det.c   160    //      out the columns below it.
           det.c   161    //
           det.c   162    //-----------------------------------------------------------------------------
           det.c   163    
           det.c   164    void
           det.c   165    detg(void)
    00000270              _detg:                           ; function: detg
                                                           ; frame size=4
    00000270 4F22                   STS.L       PR,@-R15
           det.c   166    {
           det.c   167            save();
    00000272 D271                   MOV.L       L1167+2,R2 ; _save
    00000274 420B                   JSR         @R2
    00000276 0009                   NOP
           det.c   168    
           det.c   169            p1 = pop();
    00000278 D170                   MOV.L       L1167+6,R1 ; _pop
    0000027A 410B                   JSR         @R1
    0000027C 0009                   NOP
    0000027E D270                   MOV.L       L1167+10,R2; _p1
           det.c   170    
           det.c   171            if (check_arg() == 0) {
    00000280 BEBE                   BSR         __$check_arg
    00000282 2202                   MOV.L       R0,@R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000284 2008                   TST         R0,R0
    00000286 8B0B                   BF          L1146
           det.c   172                    push_symbol(DET);
    00000288 D36E                   MOV.L       L1167+14,R3; _push_symbol
    0000028A 430B                   JSR         @R3
    0000028C E41F                   MOV         #31,R4
           det.c   173                    push(p1);
    0000028E D26C                   MOV.L       L1167+10,R2; _p1
    00000290 D36D                   MOV.L       L1167+18,R3; _push
    00000292 430B                   JSR         @R3
    00000294 6422                   MOV.L       @R2,R4
           det.c   174                    list(2);
    00000296 D26D                   MOV.L       L1167+22,R2; _list
    00000298 420B                   JSR         @R2
    0000029A E402                   MOV         #2,R4
    0000029C A002                   BRA         L1107
    0000029E 0009                   NOP
    000002A0              L1146:                            
           det.c   175                    restore();
           det.c   176                    return;
           det.c   177            }
           det.c   178    
           det.c   179            yydetg();
    000002A0 B003                   BSR         _yydetg
    000002A2 0009                   NOP
    000002A4              L1107:
           det.c   180    
           det.c   181            restore();
    000002A4 D36A                   MOV.L       L1167+26,R3; _restore
    000002A6 432B                   JMP         @R3
    000002A8 4F26                   LDS.L       @R15+,PR
           det.c   182    }
           det.c   183    
           det.c   184    void
           det.c   185    yydetg(void)
    000002AA              _yydetg:                         ; function: yydetg
                                                           ; frame size=32
           det.c   186    {
           det.c   187            int i, n;
           det.c   188    
           det.c   189            n = p1->u.tensor->dim[0];
           det.c   190    
           det.c   191            for (i = 0; i < n * n; i++)
    000002AA E400                   MOV         #0,R4
    000002AC 2FE6                   MOV.L       R14,@-R15
    000002AE 2FD6                   MOV.L       R13,@-R15
    000002B0 2FC6                   MOV.L       R12,@-R15
    000002B2 6C43                   MOV         R4,R12
    000002B4 2FB6                   MOV.L       R11,@-R15
    000002B6 2FA6                   MOV.L       R10,@-R15
    000002B8 2F96                   MOV.L       R9,@-R15
    000002BA 4F22                   STS.L       PR,@-R15
    000002BC 4F12                   STS.L       MACL,@-R15
    000002BE DD60                   MOV.L       L1167+10,R13; _p1
    000002C0 DA61                   MOV.L       L1167+18,R10; _push
    000002C2 6BD2                   MOV.L       @R13,R11
    000002C4 6BB2                   MOV.L       @R11,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002C6 5BB1                   MOV.L       @(4,R11),R11
    000002C8 0BB7                   MUL.L       R11,R11
    000002CA 091A                   STS         MACL,R9
    000002CC 4915                   CMP/PL      R9
    000002CE 8F0A                   BF/S        L1148
    000002D0 6E43                   MOV         R4,R14
    000002D2              L1149:                            
           det.c   192                    push(p1->u.tensor->elem[i]);
    000002D2 60D2                   MOV.L       @R13,R0
    000002D4 6402                   MOV.L       @R0,R4
    000002D6 7468                   ADD         #104,R4
    000002D8 34EC                   ADD         R14,R4
    000002DA 4A0B                   JSR         @R10
    000002DC 6442                   MOV.L       @R4,R4
    000002DE 7C01                   ADD         #1,R12
    000002E0 3C93                   CMP/GE      R9,R12
    000002E2 8FF6                   BF/S        L1149
    000002E4 7E04                   ADD         #4,R14
    000002E6              L1148:                            
           det.c   193    
           det.c   194            lu_decomp(n);
    000002E6 B00F                   BSR         _lu_decomp
    000002E8 64B3                   MOV         R11,R4
           det.c   195    
           det.c   196            tos -= n * n;
    000002EA D45A                   MOV.L       L1167+30,R4; _tos
    000002EC 6342                   MOV.L       @R4,R3
    000002EE 3398                   SUB         R9,R3
    000002F0 2432                   MOV.L       R3,@R4
           det.c   197    
           det.c   198            push(p1);
    000002F2 4A0B                   JSR         @R10
    000002F4 64D2                   MOV.L       @R13,R4
           det.c   199    }
    000002F6 4F16                   LDS.L       @R15+,MACL
    000002F8 4F26                   LDS.L       @R15+,PR
    000002FA 69F6                   MOV.L       @R15+,R9
    000002FC 6AF6                   MOV.L       @R15+,R10
    000002FE 6BF6                   MOV.L       @R15+,R11
    00000300 6CF6                   MOV.L       @R15+,R12
    00000302 6DF6                   MOV.L       @R15+,R13
    00000304 000B                   RTS
    00000306 6EF6                   MOV.L       @R15+,R14
           det.c   200    
           det.c   201    //-----------------------------------------------------------------------------
           det.c   202    //
           det.c   203    //      Input:          n * n matrix elements on stack
           det.c   204    //
           det.c   205    //      Output:         p1      determinant
           det.c   206    //
           det.c   207    //                      p2      mangled
           det.c   208    //
           det.c   209    //                      upper diagonal matrix on stack
           det.c   210    //
           det.c   211    //-----------------------------------------------------------------------------
           det.c   212    
           det.c   213    #define M(i, j) stack[h + n * (i) + (j)]




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           det.c   214    
           det.c   215    void
           det.c   216    lu_decomp(int n)
    00000308              _lu_decomp:                      ; function: lu_decomp
                                                           ; frame size=76
    00000308 2FE6                   MOV.L       R14,@-R15
    0000030A 2FD6                   MOV.L       R13,@-R15
    0000030C 2FC6                   MOV.L       R12,@-R15
    0000030E 6D43                   MOV         R4,R13
           det.c   217    {
           det.c   218            int d, h, i, j;
           det.c   219    
           det.c   220            h = tos - n * n;
    00000310 D250                   MOV.L       L1167+30,R2; _tos
    00000312 2FB6                   MOV.L       R11,@-R15
    00000314 2FA6                   MOV.L       R10,@-R15
           det.c   221    
           det.c   222            p1 = one;
           det.c   223    
           det.c   224            for (d = 0; d < n - 1; d++) {
    00000316 EB00                   MOV         #0,R11
    00000318 DC4B                   MOV.L       L1167+18,R12; _push
    0000031A 2F96                   MOV.L       R9,@-R15
    0000031C 2F86                   MOV.L       R8,@-R15
    0000031E 4F22                   STS.L       PR,@-R15
    00000320 4F12                   STS.L       MACL,@-R15
    00000322 7FDC                   ADD         #-36,R15
    00000324 0DD7                   MUL.L       R13,R13
    00000326 031A                   STS         MACL,R3
    00000328 6A22                   MOV.L       @R2,R10
    0000032A 62D3                   MOV         R13,R2
    0000032C D14A                   MOV.L       L1167+34,R1; _one
    0000032E 3A38                   SUB         R3,R10
    00000330 D043                   MOV.L       L1167+10,R0; _p1
    00000332 72FF                   ADD         #-1,R2
    00000334 DE49                   MOV.L       L1167+38,R14; _stack
    00000336 6312                   MOV.L       @R1,R3
    00000338 2032                   MOV.L       R3,@R0
    0000033A 63D3                   MOV         R13,R3
    0000033C 4308                   SHLL2       R3
    0000033E 1F38                   MOV.L       R3,@(32,R15)
    00000340 A0E6                   BRA         L1150
    00000342 1F25                   MOV.L       R2,@(20,R15)
    00000344              L1151:                            
    00000344 0DB7                   MUL.L       R11,R13
    00000346 63B3                   MOV         R11,R3
    00000348 D245                   MOV.L       L1167+42,R2; _zero
    0000034A 081A                   STS         MACL,R8
    0000034C 7301                   ADD         #1,R3
    0000034E 6083                   MOV         R8,R0
    00000350 2F32                   MOV.L       R3,@R15
    00000352 30BC                   ADD         R11,R0
    00000354 61E2                   MOV.L       @R14,R1
    00000356 30AC                   ADD         R10,R0
    00000358 4008                   SHLL2       R0
    0000035A 041E                   MOV.L       @(R0,R1),R4
    0000035C D141                   MOV.L       L1167+46,R1; _equal




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000035E 410B                   JSR         @R1
    00000360 6522                   MOV.L       @R2,R5
    00000362 2008                   TST         R0,R0
    00000364 8940                   BT          L1152
           det.c   225    
           det.c   226                    // diagonal element zero?
           det.c   227    
           det.c   228                    if (equal(M(d, d), zero)) {
           det.c   229    
           det.c   230                            // find a new row
           det.c   231    
           det.c   232                            for (i = d + 1; i < n; i++)
    00000366 69F2                   MOV.L       @R15,R9
    00000368 39D3                   CMP/GE      R13,R9
    0000036A 890F                   BT          L1153
    0000036C              L1154:                            
           det.c   233                                    if (!equal(M(i, d), zero))
    0000036C D23C                   MOV.L       L1167+42,R2; _zero
    0000036E 6522                   MOV.L       @R2,R5
    00000370 0D97                   MUL.L       R9,R13
    00000372 001A                   STS         MACL,R0
    00000374 63E2                   MOV.L       @R14,R3
    00000376 30BC                   ADD         R11,R0
    00000378 D13A                   MOV.L       L1167+46,R1; _equal
    0000037A 30AC                   ADD         R10,R0
    0000037C 4008                   SHLL2       R0
    0000037E 410B                   JSR         @R1
    00000380 043E                   MOV.L       @(R0,R3),R4
    00000382 2008                   TST         R0,R0
    00000384 8902                   BT          L1153
    00000386 7901                   ADD         #1,R9
    00000388 39D3                   CMP/GE      R13,R9
    0000038A 8BEF                   BF          L1154
    0000038C              L1153:                            
           det.c   234                                            break;
           det.c   235    
           det.c   236                            if (i == n) {
    0000038C 39D0                   CMP/EQ      R13,R9
    0000038E 8B04                   BF          L1157
           det.c   237                                    p1 = zero;
    00000390 D233                   MOV.L       L1167+42,R2; _zero
    00000392 6322                   MOV.L       @R2,R3
    00000394 D12A                   MOV.L       L1167+10,R1; _p1
           det.c   238                                    break;
    00000396 A0C0                   BRA         L1158
    00000398 2132                   MOV.L       R3,@R1
    0000039A              L1157:                            
           det.c   239                            }
           det.c   240    
           det.c   241                            // exchange rows
           det.c   242    
           det.c   243                            for (j = d; j < n; j++) {
    0000039A 65B3                   MOV         R11,R5
    0000039C 0D97                   MUL.L       R9,R13
    0000039E 6683                   MOV         R8,R6
    000003A0 041A                   STS         MACL,R4
    000003A2 34AC                   ADD         R10,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003A4 345C                   ADD         R5,R4
    000003A6 4408                   SHLL2       R4
    000003A8 36AC                   ADD         R10,R6
    000003AA 365C                   ADD         R5,R6
    000003AC 35D3                   CMP/GE      R13,R5
    000003AE 8D10                   BT/S        L1159
    000003B0 4608                   SHLL2       R6
    000003B2              L1160:                            
    000003B2 7501                   ADD         #1,R5
           det.c   244                                    p2 = M(d, j);
    000003B4 67E2                   MOV.L       @R14,R7
    000003B6 35D3                   CMP/GE      R13,R5
    000003B8 D32B                   MOV.L       L1167+50,R3; _p2
    000003BA 376C                   ADD         R6,R7
    000003BC 6272                   MOV.L       @R7,R2
    000003BE 2322                   MOV.L       R2,@R3
           det.c   245                                    M(d, j) = M(i, j);
    000003C0 60E2                   MOV.L       @R14,R0
    000003C2 024E                   MOV.L       @(R0,R4),R2
    000003C4 2722                   MOV.L       R2,@R7
           det.c   246                                    M(i, j) = p2;
    000003C6 60E2                   MOV.L       @R14,R0
    000003C8 6132                   MOV.L       @R3,R1
    000003CA 0416                   MOV.L       R1,@(R0,R4)
    000003CC 7404                   ADD         #4,R4
    000003CE 8FF0                   BF/S        L1160
    000003D0 7604                   ADD         #4,R6
    000003D2              L1159:                            
           det.c   247                            }
           det.c   248    
           det.c   249                            // negate det
           det.c   250    
           det.c   251                            push(p1);
    000003D2 D31B                   MOV.L       L1167+10,R3; _p1
    000003D4 4C0B                   JSR         @R12
    000003D6 6432                   MOV.L       @R3,R4
           det.c   252                            negate();
    000003D8 D224                   MOV.L       L1167+54,R2; _negate
    000003DA 420B                   JSR         @R2
    000003DC 0009                   NOP
           det.c   253                            p1 = pop();
    000003DE D117                   MOV.L       L1167+6,R1 ; _pop
    000003E0 410B                   JSR         @R1
    000003E2 0009                   NOP
    000003E4 D216                   MOV.L       L1167+10,R2; _p1
    000003E6 2202                   MOV.L       R0,@R2
    000003E8              L1152:                            
           det.c   254                    }
           det.c   255    
           det.c   256                    // update det
           det.c   257    
           det.c   258                    push(p1);
    000003E8 D315                   MOV.L       L1167+10,R3; _p1
    000003EA 4C0B                   JSR         @R12
    000003EC 6432                   MOV.L       @R3,R4
           det.c   259                    push(M(d, d));
    000003EE 6083                   MOV         R8,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003F0 63E2                   MOV.L       @R14,R3
    000003F2 30BC                   ADD         R11,R0
    000003F4 30AC                   ADD         R10,R0
    000003F6 4008                   SHLL2       R0
    000003F8 4C0B                   JSR         @R12
    000003FA 043E                   MOV.L       @(R0,R3),R4
           det.c   260                    multiply();
    000003FC D21C                   MOV.L       L1167+58,R2; _multiply
    000003FE 420B                   JSR         @R2
    00000400 0009                   NOP
           det.c   261                    p1 = pop();
    00000402 D30E                   MOV.L       L1167+6,R3 ; _pop
    00000404 430B                   JSR         @R3
    00000406 0009                   NOP
    00000408 D20D                   MOV.L       L1167+10,R2; _p1
    0000040A 6183                   MOV         R8,R1
    0000040C 2202                   MOV.L       R0,@R2
    0000040E 31BC                   ADD         R11,R1
           det.c   262    
           det.c   263                    // update lower diagonal matrix
           det.c   264    
           det.c   265                    for (i = d + 1; i < n; i++) {
    00000410 63F2                   MOV.L       @R15,R3
    00000412 6283                   MOV         R8,R2
    00000414 1F32                   MOV.L       R3,@(8,R15)
    00000416 6433                   MOV         R3,R4
    00000418 0D47                   MUL.L       R4,R13
    0000041A 31AC                   ADD         R10,R1
    0000041C 041A                   STS         MACL,R4
    0000041E 6343                   MOV         R4,R3
    00000420 33AC                   ADD         R10,R3
    00000422 34BC                   ADD         R11,R4
    00000424 1F34                   MOV.L       R3,@(16,R15)
    00000426 4108                   SHLL2       R1
    00000428 34AC                   ADD         R10,R4
    0000042A 4408                   SHLL2       R4
    0000042C 1F41                   MOV.L       R4,@(4,R15)
    0000042E 32AC                   ADD         R10,R2
    00000430 1F16                   MOV.L       R1,@(24,R15)
    00000432 A069                   BRA         L1161
    00000434 1F27                   MOV.L       R2,@(28,R15)
    00000436              L1167:                            
    00000436 0000                   .DATA.W     0
    00000438 <00000000>             .DATA.L     _save
    0000043C <00000000>             .DATA.L     _pop
    00000440 <00000000>             .DATA.L     _p1
    00000444 <00000000>             .DATA.L     _push_symbol
    00000448 <00000000>             .DATA.L     _push
    0000044C <00000000>             .DATA.L     _list
    00000450 <00000000>             .DATA.L     _restore
    00000454 <00000000>             .DATA.L     _tos
    00000458 <00000000>             .DATA.L     _one
    0000045C <00000000>             .DATA.L     _stack
    00000460 <00000000>             .DATA.L     _zero
    00000464 <00000000>             .DATA.L     _equal
    00000468 <00000000>             .DATA.L     _p2
    0000046C <00000000>             .DATA.L     _negate




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000470 <00000000>             .DATA.L     _multiply
    00000474              L1162:                            
           det.c   266    
           det.c   267                            // multiplier
           det.c   268    
           det.c   269                            push(M(i, d));
    00000474 61E2                   MOV.L       @R14,R1
    00000476 50F1                   MOV.L       @(4,R15),R0
    00000478 4C0B                   JSR         @R12
    0000047A 041E                   MOV.L       @(R0,R1),R4
           det.c   270                            push(M(d, d));
    0000047C 63E2                   MOV.L       @R14,R3
    0000047E 50F6                   MOV.L       @(24,R15),R0
    00000480 4C0B                   JSR         @R12
    00000482 043E                   MOV.L       @(R0,R3),R4
           det.c   271                            divide();
    00000484 D335                   MOV.L       L1168+2,R3 ; _divide
    00000486 430B                   JSR         @R3
    00000488 0009                   NOP
           det.c   272                            negate();
    0000048A D235                   MOV.L       L1168+6,R2 ; _negate
    0000048C 420B                   JSR         @R2
    0000048E 0009                   NOP
           det.c   273    
           det.c   274                            p2 = pop();
    00000490 D334                   MOV.L       L1168+10,R3; _pop
    00000492 430B                   JSR         @R3
    00000494 0009                   NOP
    00000496 D234                   MOV.L       L1168+14,R2; _p2
    00000498 2202                   MOV.L       R0,@R2
           det.c   275    
           det.c   276                            // update one row
           det.c   277    
           det.c   278                            M(i, d) = zero; // clear column below pivot d
    0000049A 63E2                   MOV.L       @R14,R3
    0000049C 50F1                   MOV.L       @(4,R15),R0
    0000049E D233                   MOV.L       L1168+18,R2; _zero
    000004A0 6122                   MOV.L       @R2,R1
    000004A2 0316                   MOV.L       R1,@(R0,R3)
           det.c   279    
           det.c   280                            for (j = d + 1; j < n; j++) {
    000004A4 69F2                   MOV.L       @R15,R9
    000004A6 58F4                   MOV.L       @(16,R15),R8
    000004A8 53F7                   MOV.L       @(28,R15),R3
    000004AA 39D3                   CMP/GE      R13,R9
    000004AC 389C                   ADD         R9,R8
    000004AE 4808                   SHLL2       R8
    000004B0 339C                   ADD         R9,R3
    000004B2 4308                   SHLL2       R3
    000004B4 8D1E                   BT/S        L1163
    000004B6 1F33                   MOV.L       R3,@(12,R15)
    000004B8              L1164:                            
           det.c   281                                    push(M(d, j));
    000004B8 63E2                   MOV.L       @R14,R3
    000004BA 50F3                   MOV.L       @(12,R15),R0
    000004BC 4C0B                   JSR         @R12
    000004BE 043E                   MOV.L       @(R0,R3),R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           det.c   282                                    push(p2);
    000004C0 D329                   MOV.L       L1168+14,R3; _p2
    000004C2 4C0B                   JSR         @R12
    000004C4 6432                   MOV.L       @R3,R4
           det.c   283                                    multiply();
    000004C6 D22A                   MOV.L       L1168+22,R2; _multiply
    000004C8 420B                   JSR         @R2
    000004CA 0009                   NOP
           det.c   284                                    push(M(i, j));
    000004CC 60E2                   MOV.L       @R14,R0
    000004CE 4C0B                   JSR         @R12
    000004D0 048E                   MOV.L       @(R0,R8),R4
           det.c   285                                    add();
    000004D2 D328                   MOV.L       L1168+26,R3; _add
    000004D4 430B                   JSR         @R3
    000004D6 0009                   NOP
           det.c   286                                    M(i, j) = pop();
    000004D8 60E2                   MOV.L       @R14,R0
    000004DA 308C                   ADD         R8,R0
    000004DC D221                   MOV.L       L1168+10,R2; _pop
    000004DE 420B                   JSR         @R2
    000004E0 2F06                   MOV.L       R0,@-R15
    000004E2 7901                   ADD         #1,R9
    000004E4 63F6                   MOV.L       @R15+,R3
    000004E6 7804                   ADD         #4,R8
    000004E8 2302                   MOV.L       R0,@R3
    000004EA 39D3                   CMP/GE      R13,R9
    000004EC 52F3                   MOV.L       @(12,R15),R2
    000004EE 7204                   ADD         #4,R2
    000004F0 8FE2                   BF/S        L1164
    000004F2 1F23                   MOV.L       R2,@(12,R15)
    000004F4              L1163:                            
    000004F4 52F2                   MOV.L       @(8,R15),R2
    000004F6 7201                   ADD         #1,R2
    000004F8 1F22                   MOV.L       R2,@(8,R15)
    000004FA 53F4                   MOV.L       @(16,R15),R3
    000004FC 33DC                   ADD         R13,R3
    000004FE 1F34                   MOV.L       R3,@(16,R15)
    00000500 51F1                   MOV.L       @(4,R15),R1
    00000502 50F8                   MOV.L       @(32,R15),R0
    00000504 301C                   ADD         R1,R0
    00000506 1F01                   MOV.L       R0,@(4,R15)
    00000508              L1161:                            
    00000508 52F2                   MOV.L       @(8,R15),R2
    0000050A 32D3                   CMP/GE      R13,R2
    0000050C 8BB2                   BF          L1162
    0000050E 7B01                   ADD         #1,R11
    00000510              L1150:                            
    00000510 52F5                   MOV.L       @(20,R15),R2
    00000512 3B23                   CMP/GE      R2,R11
    00000514 8901                   BT          L1169
    00000516 AF15                   BRA         L1151
    00000518 0009                   NOP
    0000051A              L1169:                            
    0000051A              L1158:                            
           det.c   287                            }
           det.c   288                    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           det.c   289            }
           det.c   290    
           det.c   291            // last diagonal element
           det.c   292    
           det.c   293            push(p1);
    0000051A D117                   MOV.L       L1168+30,R1; _p1
    0000051C 4C0B                   JSR         @R12
    0000051E 6412                   MOV.L       @R1,R4
           det.c   294            push(M(n - 1, n - 1));
    00000520 50F5                   MOV.L       @(20,R15),R0
    00000522 00D7                   MUL.L       R13,R0
    00000524 63E2                   MOV.L       @R14,R3
    00000526 001A                   STS         MACL,R0
    00000528 30DC                   ADD         R13,R0
    0000052A 30AC                   ADD         R10,R0
    0000052C 70FF                   ADD         #-1,R0
    0000052E 4008                   SHLL2       R0
    00000530 4C0B                   JSR         @R12
    00000532 043E                   MOV.L       @(R0,R3),R4
           det.c   295            multiply();
    00000534 D20E                   MOV.L       L1168+22,R2; _multiply
    00000536 420B                   JSR         @R2
    00000538 0009                   NOP
           det.c   296            p1 = pop();
    0000053A D30A                   MOV.L       L1168+10,R3; _pop
    0000053C 430B                   JSR         @R3
    0000053E 0009                   NOP
    00000540 D20D                   MOV.L       L1168+30,R2; _p1
    00000542 2202                   MOV.L       R0,@R2
           det.c   297    }
    00000544 7F24                   ADD         #36,R15
    00000546 4F16                   LDS.L       @R15+,MACL
    00000548 4F26                   LDS.L       @R15+,PR
    0000054A 68F6                   MOV.L       @R15+,R8
    0000054C 69F6                   MOV.L       @R15+,R9
    0000054E 6AF6                   MOV.L       @R15+,R10
    00000550 6BF6                   MOV.L       @R15+,R11
    00000552 6CF6                   MOV.L       @R15+,R12
    00000554 6DF6                   MOV.L       @R15+,R13
    00000556 000B                   RTS
    00000558 6EF6                   MOV.L       @R15+,R14
    0000055A              L1168:                            
    0000055A 0000                   .DATA.W     0
    0000055C <00000000>             .DATA.L     _divide
    00000560 <00000000>             .DATA.L     _negate
    00000564 <00000000>             .DATA.L     _pop
    00000568 <00000000>             .DATA.L     _p2
    0000056C <00000000>             .DATA.L     _zero
    00000570 <00000000>             .DATA.L     _multiply
    00000574 <00000000>             .DATA.L     _add
    00000578 <00000000>             .DATA.L     _p1










SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:53  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      297



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               0000057C Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 0000057C Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           21
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           5
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            70






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk5094.tmp 

