SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\divisors.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      divisors.c     1    #include "stdafx.h"
      divisors.c     2    
      divisors.c     3    //-----------------------------------------------------------------------------
      divisors.c     4    //
      divisors.c     5    //      Generate all divisors of a term
      divisors.c     6    //
      divisors.c     7    //      Input:          Term on stack (factor * factor * ...)
      divisors.c     8    //
      divisors.c     9    //      Output:         Divisors on stack
      divisors.c    10    //
      divisors.c    11    //-----------------------------------------------------------------------------
      divisors.c    12    
      divisors.c    13    #include "defs.h"
      divisors.c    14    
      divisors.c    15    static void gen(int, int);
      divisors.c    16    static void __factor_add(void);
      divisors.c    17    static int __cmp(const void *, const void *);
      divisors.c    18    
      divisors.c    19    void
      divisors.c    20    divisors(void)
P   00000000              _divisors:                       ; function: divisors
                                                           ; frame size=24
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 2FB6                   MOV.L       R11,@-R15
    00000008 2FA6                   MOV.L       R10,@-R15
    0000000A 4F22                   STS.L       PR,@-R15
      divisors.c    21    {
      divisors.c    22            int i, h, n;
      divisors.c    23            save();
    0000000C D33F                   MOV.L       L1245+6,R3 ; _save
    0000000E 430B                   JSR         @R3
    00000010 0009                   NOP
      divisors.c    24            h = tos - 1;
    00000012 DA3F                   MOV.L       L1245+10,R10; _tos
    00000014 6CA2                   MOV.L       @R10,R12
      divisors.c    25            divisors_onstack();
    00000016 B038                   BSR         _divisors_onstack
    00000018 7CFF                   ADD         #-1,R12
      divisors.c    26            n = tos - h;
      divisors.c    27            qsort(stack + h, n, sizeof (U *), __cmp);
    0000001A E604                   MOV         #4,R6
    0000001C D23F                   MOV.L       L1245+22,R2; _qsort
    0000001E 64C3                   MOV         R12,R4
    00000020 6DA2                   MOV.L       @R10,R13
    00000022 4408                   SHLL2       R4
    00000024 DB3B                   MOV.L       L1245+14,R11; _stack
    00000026 3DC8                   SUB         R12,R13
    00000028 D73B                   MOV.L       L1245+18,R7; __$__cmp
    0000002A 65D3                   MOV         R13,R5
    0000002C 63B2                   MOV.L       @R11,R3
    0000002E 420B                   JSR         @R2
    00000030 343C                   ADD         R3,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      divisors.c    28            p1 = alloc_tensor(n);
    00000032 DE3B                   MOV.L       L1245+26,R14; _p1
    00000034 D33B                   MOV.L       L1245+30,R3; _alloc_tensor
    00000036 430B                   JSR         @R3
    00000038 64D3                   MOV         R13,R4
      divisors.c    29            p1->u.tensor->ndim = 1;
    0000003A 6203                   MOV         R0,R2
    0000003C 2E02                   MOV.L       R0,@R14
    0000003E E101                   MOV         #1,R1
    00000040 6322                   MOV.L       @R2,R3
      divisors.c    30            p1->u.tensor->dim[0] = n;
      divisors.c    31            for (i = 0; i < n; i++)
    00000042 E700                   MOV         #0,R7
    00000044 2312                   MOV.L       R1,@R3
    00000046 E500                   MOV         #0,R5
    00000048 63E2                   MOV.L       @R14,R3
    0000004A 6673                   MOV         R7,R6
    0000004C 6232                   MOV.L       @R3,R2
    0000004E 35CC                   ADD         R12,R5
    00000050 12D1                   MOV.L       R13,@(4,R2)
    00000052 4D15                   CMP/PL      R13
    00000054 4508                   SHLL2       R5
    00000056 8F0C                   BF/S        L1106
    00000058 6473                   MOV         R7,R4
    0000005A              L1107:                            
    0000005A 7601                   ADD         #1,R6
      divisors.c    32                    p1->u.tensor->elem[i] = stack[h + i];
    0000005C 60E2                   MOV.L       @R14,R0
    0000005E 36D3                   CMP/GE      R13,R6
    00000060 6302                   MOV.L       @R0,R3
    00000062 7368                   ADD         #104,R3
    00000064 60B2                   MOV.L       @R11,R0
    00000066 334C                   ADD         R4,R3
    00000068 025E                   MOV.L       @(R0,R5),R2
    0000006A 7504                   ADD         #4,R5
    0000006C 2322                   MOV.L       R2,@R3
    0000006E 8FF4                   BF/S        L1107
    00000070 7404                   ADD         #4,R4
    00000072              L1106:                            
      divisors.c    33            tos = h;
    00000072 2AC2                   MOV.L       R12,@R10
      divisors.c    34            push(p1);
    00000074 D22C                   MOV.L       L1245+34,R2; _push
    00000076 420B                   JSR         @R2
    00000078 64E2                   MOV.L       @R14,R4
      divisors.c    35            restore();
    0000007A 4F26                   LDS.L       @R15+,PR
    0000007C D32B                   MOV.L       L1245+38,R3; _restore
    0000007E 6AF6                   MOV.L       @R15+,R10
    00000080 6BF6                   MOV.L       @R15+,R11
    00000082 6CF6                   MOV.L       @R15+,R12
    00000084 6DF6                   MOV.L       @R15+,R13
    00000086 432B                   JMP         @R3
    00000088 6EF6                   MOV.L       @R15+,R14
      divisors.c    36    }
      divisors.c    37    
      divisors.c    38    void




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      divisors.c    39    divisors_onstack(void)
    0000008A              _divisors_onstack:               ; function: divisors_onstack
                                                           ; frame size=32
    0000008A 2FE6                   MOV.L       R14,@-R15
    0000008C 2FD6                   MOV.L       R13,@-R15
    0000008E 2FC6                   MOV.L       R12,@-R15
    00000090 2FB6                   MOV.L       R11,@-R15
    00000092 2FA6                   MOV.L       R10,@-R15
    00000094 2F96                   MOV.L       R9,@-R15
    00000096 2F86                   MOV.L       R8,@-R15
    00000098 4F22                   STS.L       PR,@-R15
      divisors.c    40    {
      divisors.c    41            int h, i, k, n;
      divisors.c    42    
      divisors.c    43            save();
    0000009A D31C                   MOV.L       L1245+6,R3 ; _save
    0000009C 430B                   JSR         @R3
    0000009E 0009                   NOP
      divisors.c    44    
      divisors.c    45            p1 = pop();
    000000A0 DE1F                   MOV.L       L1245+26,R14; _p1
    000000A2 D223                   MOV.L       L1245+42,R2; _pop
    000000A4 420B                   JSR         @R2
    000000A6 0009                   NOP
    000000A8 2E02                   MOV.L       R0,@R14
    000000AA 6403                   MOV         R0,R4
      divisors.c    46    
      divisors.c    47            h = tos;
    000000AC DA18                   MOV.L       L1245+10,R10; _tos
    000000AE 6BA2                   MOV.L       @R10,R11
    000000B0 D920                   MOV.L       L1245+46,R9; _one
    000000B2 DC1D                   MOV.L       L1245+34,R12; _push
    000000B4 8448                   MOV.B       @(8,R4),R0
    000000B6 600C                   EXTU.B      R0,R0
    000000B8 8801                   CMP/EQ      #1,R0
    000000BA 8D03                   BT/S        L1109
    000000BC 6503                   MOV         R0,R5
    000000BE 6053                   MOV         R5,R0
    000000C0 8802                   CMP/EQ      #2,R0
    000000C2 8B06                   BF          L1108
    000000C4              L1109:                            
      divisors.c    48    
      divisors.c    49            // push all of the term's factors
      divisors.c    50    
      divisors.c    51            if (isnum(p1)) {
      divisors.c    52                    push(p1);
    000000C4 4C0B                   JSR         @R12
    000000C6 0009                   NOP
      divisors.c    53                    factor_small_number();
    000000C8 D31B                   MOV.L       L1245+50,R3; _factor_small_number
    000000CA 430B                   JSR         @R3
    000000CC 0009                   NOP
    000000CE A1AE                   BRA         L1110
    000000D0 0009                   NOP
    000000D2              L1108:                            
    000000D2 D31A                   MOV.L       L1245+54,R3; _symtab
    000000D4 8448                   MOV.B       @(8,R4),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000D6 2008                   TST         R0,R0
    000000D8 8F02                   BF/S        L1112
    000000DA 6532                   MOV.L       @R3,R5
    000000DC A003                   BRA         L1113
    000000DE 6242                   MOV.L       @R4,R2
    000000E0              L1112:                            
    000000E0 9111                   MOV.W       L1245,R1   ; H'0570
    000000E2 6232                   MOV.L       @R3,R2
    000000E4 321C                   ADD         R1,R2
    000000E6              L1113:                            
    000000E6 6053                   MOV         R5,R0
    000000E8 700C                   ADD         #12,R0
    000000EA 3200                   CMP/EQ      R0,R2
    000000EC 8B05                   BF          L1111
      divisors.c    54            } else if (car(p1) == symbol(ADD)) {
      divisors.c    55                    push(p1);
    000000EE 4C0B                   JSR         @R12
    000000F0 0009                   NOP
      divisors.c    56                    __factor_add();
    000000F2 B228                   BSR         __$__factor_add
    000000F4 0009                   NOP
    000000F6 A19A                   BRA         L1110
    000000F8 0009                   NOP
    000000FA              L1111:                            
      divisors.c    57    //printf(">>>\n");
      divisors.c    58    //for (i = h; i < tos; i++)
      divisors.c    59    //print(stdout, stack[i]);
      divisors.c    60    //printf("<<<\n");
      divisors.c    61            } else if (car(p1) == symbol(MULTIPLY)) {
    000000FA 9805                   MOV.W       L1245+2,R8 ; H'03F0
    000000FC 8448                   MOV.B       @(8,R4),R0
    000000FE 2008                   TST         R0,R0
    00000100 8B1E                   BF          L1116
    00000102 A01F                   BRA         L1117
    00000104 6242                   MOV.L       @R4,R2
    00000106              L1245:                            
    00000106 0570                   .DATA.W     H'0570
    00000108 03F0                   .DATA.W     H'03F0
    0000010A 0000                   .DATA.W     0
    0000010C <00000000>             .DATA.L     _save
    00000110 <00000000>             .DATA.L     _tos
    00000114 <00000000>             .DATA.L     _stack
    00000118 <00000000>             .DATA.L     __$__cmp
    0000011C <00000000>             .DATA.L     _qsort
    00000120 <00000000>             .DATA.L     _p1
    00000124 <00000000>             .DATA.L     _alloc_tensor
    00000128 <00000000>             .DATA.L     _push
    0000012C <00000000>             .DATA.L     _restore
    00000130 <00000000>             .DATA.L     _pop
    00000134 <00000000>             .DATA.L     _one
    00000138 <00000000>             .DATA.L     _factor_small_number
    0000013C <00000000>             .DATA.L     _symtab
    00000140              L1116:                            
    00000140 9262                   MOV.W       L1246,R2   ; H'0570
    00000142 325C                   ADD         R5,R2
    00000144              L1117:                            
    00000144 9361                   MOV.W       L1246+2,R3 ; H'0384




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000146 335C                   ADD         R5,R3
    00000148 3230                   CMP/EQ      R3,R2
    0000014A 8901                   BT          L1247
    0000014C A0F3                   BRA         L1115
    0000014E 0009                   NOP
    00000150              L1247:                            
      divisors.c    62                    p1 = cdr(p1);
    00000150 62E2                   MOV.L       @R14,R2
    00000152 8428                   MOV.B       @(8,R2),R0
    00000154 2008                   TST         R0,R0
    00000156 8B02                   BF          L1118
    00000158 62E2                   MOV.L       @R14,R2
    0000015A A004                   BRA         L1119
    0000015C 5321                   MOV.L       @(4,R2),R3
    0000015E              L1118:                            
    0000015E 9253                   MOV.W       L1246,R2   ; H'0570
    00000160 D12A                   MOV.L       L1246+4,R1 ; _symtab
    00000162 6312                   MOV.L       @R1,R3
    00000164 332C                   ADD         R2,R3
    00000166              L1119:                            
      divisors.c    63                    if (isnum(car(p1))) {
    00000166 6033                   MOV         R3,R0
    00000168 2E32                   MOV.L       R3,@R14
    0000016A 8408                   MOV.B       @(8,R0),R0
    0000016C 2008                   TST         R0,R0
    0000016E 8B02                   BF          L1122
    00000170 60E2                   MOV.L       @R14,R0
    00000172 A004                   BRA         L1124
    00000174 6002                   MOV.L       @R0,R0
    00000176              L1122:                            
    00000176 9347                   MOV.W       L1246,R3   ; H'0570
    00000178 D224                   MOV.L       L1246+4,R2 ; _symtab
    0000017A 6022                   MOV.L       @R2,R0
    0000017C 303C                   ADD         R3,R0
    0000017E              L1124:                            
    0000017E 8408                   MOV.B       @(8,R0),R0
    00000180 600C                   EXTU.B      R0,R0
    00000182 8801                   CMP/EQ      #1,R0
    00000184 890E                   BT          L1121
    00000186 60E2                   MOV.L       @R14,R0
    00000188 8408                   MOV.B       @(8,R0),R0
    0000018A 2008                   TST         R0,R0
    0000018C 8B02                   BF          L1123
    0000018E 60E2                   MOV.L       @R14,R0
    00000190 A004                   BRA         L1125
    00000192 6002                   MOV.L       @R0,R0
    00000194              L1123:                            
    00000194 9338                   MOV.W       L1246,R3   ; H'0570
    00000196 D21D                   MOV.L       L1246+4,R2 ; _symtab
    00000198 6022                   MOV.L       @R2,R0
    0000019A 303C                   ADD         R3,R0
    0000019C              L1125:                            
    0000019C 8408                   MOV.B       @(8,R0),R0
    0000019E 600C                   EXTU.B      R0,R0
    000001A0 8802                   CMP/EQ      #2,R0
    000001A2 8B1B                   BF          L1120
    000001A4              L1121:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      divisors.c    64                            push(car(p1));
    000001A4 64E2                   MOV.L       @R14,R4
    000001A6 8448                   MOV.B       @(8,R4),R0
    000001A8 2008                   TST         R0,R0
    000001AA 8B02                   BF          L1126
    000001AC 64E2                   MOV.L       @R14,R4
    000001AE A004                   BRA         L1127
    000001B0 6442                   MOV.L       @R4,R4
    000001B2              L1126:                            
    000001B2 9329                   MOV.W       L1246,R3   ; H'0570
    000001B4 D215                   MOV.L       L1246+4,R2 ; _symtab
    000001B6 6422                   MOV.L       @R2,R4
    000001B8 343C                   ADD         R3,R4
    000001BA              L1127:                            
    000001BA 4C0B                   JSR         @R12
    000001BC 0009                   NOP
      divisors.c    65                            factor_small_number();
    000001BE D314                   MOV.L       L1246+8,R3 ; _factor_small_number
    000001C0 430B                   JSR         @R3
    000001C2 0009                   NOP
      divisors.c    66                            p1 = cdr(p1);
    000001C4 63E2                   MOV.L       @R14,R3
    000001C6 8438                   MOV.B       @(8,R3),R0
    000001C8 2008                   TST         R0,R0
    000001CA 8B02                   BF          L1128
    000001CC 62E2                   MOV.L       @R14,R2
    000001CE A004                   BRA         L1129
    000001D0 5221                   MOV.L       @(4,R2),R2
    000001D2              L1128:                            
    000001D2 9319                   MOV.W       L1246,R3   ; H'0570
    000001D4 D10D                   MOV.L       L1246+4,R1 ; _symtab
    000001D6 6212                   MOV.L       @R1,R2
    000001D8 323C                   ADD         R3,R2
    000001DA              L1129:                            
    000001DA 2E22                   MOV.L       R2,@R14
    000001DC              L1120:                            
    000001DC DD0D                   MOV.L       L1246+12,R13; _p2
      divisors.c    67                    }
      divisors.c    68                    while (iscons(p1)) {
    000001DE A0A2                   BRA         L1130
    000001E0 0009                   NOP
    000001E2              L1131:                            
      divisors.c    69                            p2 = car(p1);
    000001E2 63E2                   MOV.L       @R14,R3
    000001E4 8438                   MOV.B       @(8,R3),R0
    000001E6 2008                   TST         R0,R0
    000001E8 8B02                   BF          L1132
    000001EA 62E2                   MOV.L       @R14,R2
    000001EC A004                   BRA         L1133
    000001EE 6222                   MOV.L       @R2,R2
    000001F0              L1132:                            
    000001F0 930A                   MOV.W       L1246,R3   ; H'0570
    000001F2 D106                   MOV.L       L1246+4,R1 ; _symtab
    000001F4 6212                   MOV.L       @R1,R2
    000001F6 323C                   ADD         R3,R2
    000001F8              L1133:                            
    000001F8 2D22                   MOV.L       R2,@R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001FA 6423                   MOV         R2,R4
    000001FC 8448                   MOV.B       @(8,R4),R0
    000001FE 2008                   TST         R0,R0
    00000200 8B0A                   BF          L1135
    00000202 62D2                   MOV.L       @R13,R2
    00000204 A00C                   BRA         L1136
    00000206 6322                   MOV.L       @R2,R3
    00000208              L1246:                            
    00000208 0570                   .DATA.W     H'0570
    0000020A 0384                   .DATA.W     H'0384
    0000020C <00000000>             .DATA.L     _symtab
    00000210 <00000000>             .DATA.L     _factor_small_number
    00000214 <00000000>             .DATA.L     _p2
    00000218              L1135:                            
    00000218 9265                   MOV.W       L1248,R2   ; H'0570
    0000021A D133                   MOV.L       L1248+2,R1 ; _symtab
    0000021C 6312                   MOV.L       @R1,R3
    0000021E 332C                   ADD         R2,R3
    00000220              L1136:                            
    00000220 D031                   MOV.L       L1248+2,R0 ; _symtab
    00000222 6202                   MOV.L       @R0,R2
    00000224 328C                   ADD         R8,R2
    00000226 3320                   CMP/EQ      R2,R3
    00000228 8B6C                   BF          L1134
      divisors.c    70                            if (car(p2) == symbol(POWER)) {
      divisors.c    71                                    push(cadr(p2));
    0000022A 64D2                   MOV.L       @R13,R4
    0000022C 8448                   MOV.B       @(8,R4),R0
    0000022E 2008                   TST         R0,R0
    00000230 8B02                   BF          L1138
    00000232 64D2                   MOV.L       @R13,R4
    00000234 A004                   BRA         L1140
    00000236 5441                   MOV.L       @(4,R4),R4
    00000238              L1138:                            
    00000238 9355                   MOV.W       L1248,R3   ; H'0570
    0000023A D22B                   MOV.L       L1248+2,R2 ; _symtab
    0000023C 6422                   MOV.L       @R2,R4
    0000023E 343C                   ADD         R3,R4
    00000240              L1140:                            
    00000240 8448                   MOV.B       @(8,R4),R0
    00000242 2008                   TST         R0,R0
    00000244 8B0C                   BF          L1137
    00000246 64D2                   MOV.L       @R13,R4
    00000248 8448                   MOV.B       @(8,R4),R0
    0000024A 2008                   TST         R0,R0
    0000024C 8B02                   BF          L1139
    0000024E 64D2                   MOV.L       @R13,R4
    00000250 A004                   BRA         L1141
    00000252 5441                   MOV.L       @(4,R4),R4
    00000254              L1139:                            
    00000254 9347                   MOV.W       L1248,R3   ; H'0570
    00000256 D224                   MOV.L       L1248+2,R2 ; _symtab
    00000258 6422                   MOV.L       @R2,R4
    0000025A 343C                   ADD         R3,R4
    0000025C              L1141:                            
    0000025C A004                   BRA         L1142
    0000025E 6442                   MOV.L       @R4,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000260              L1137:                            
    00000260 9341                   MOV.W       L1248,R3   ; H'0570
    00000262 D221                   MOV.L       L1248+2,R2 ; _symtab
    00000264 6422                   MOV.L       @R2,R4
    00000266 343C                   ADD         R3,R4
    00000268              L1142:                            
    00000268 4C0B                   JSR         @R12
    0000026A 0009                   NOP
      divisors.c    72                                    push(caddr(p2));
    0000026C 64D2                   MOV.L       @R13,R4
    0000026E 8448                   MOV.B       @(8,R4),R0
    00000270 2008                   TST         R0,R0
    00000272 8B02                   BF          L1145
    00000274 64D2                   MOV.L       @R13,R4
    00000276 A004                   BRA         L1150
    00000278 5441                   MOV.L       @(4,R4),R4
    0000027A              L1145:                            
    0000027A 9334                   MOV.W       L1248,R3   ; H'0570
    0000027C D21A                   MOV.L       L1248+2,R2 ; _symtab
    0000027E 6422                   MOV.L       @R2,R4
    00000280 343C                   ADD         R3,R4
    00000282              L1150:                            
    00000282 8448                   MOV.B       @(8,R4),R0
    00000284 2008                   TST         R0,R0
    00000286 8B0C                   BF          L1144
    00000288 64D2                   MOV.L       @R13,R4
    0000028A 8448                   MOV.B       @(8,R4),R0
    0000028C 2008                   TST         R0,R0
    0000028E 8B02                   BF          L1146
    00000290 64D2                   MOV.L       @R13,R4
    00000292 A004                   BRA         L1151
    00000294 5441                   MOV.L       @(4,R4),R4
    00000296              L1146:                            
    00000296 9326                   MOV.W       L1248,R3   ; H'0570
    00000298 D213                   MOV.L       L1248+2,R2 ; _symtab
    0000029A 6422                   MOV.L       @R2,R4
    0000029C 343C                   ADD         R3,R4
    0000029E              L1151:                            
    0000029E A004                   BRA         L1152
    000002A0 5441                   MOV.L       @(4,R4),R4
    000002A2              L1144:                            
    000002A2 9320                   MOV.W       L1248,R3   ; H'0570
    000002A4 D210                   MOV.L       L1248+2,R2 ; _symtab
    000002A6 6422                   MOV.L       @R2,R4
    000002A8 343C                   ADD         R3,R4
    000002AA              L1152:                            
    000002AA 8448                   MOV.B       @(8,R4),R0
    000002AC 2008                   TST         R0,R0
    000002AE 8B23                   BF          L1143
    000002B0 64D2                   MOV.L       @R13,R4
    000002B2 8448                   MOV.B       @(8,R4),R0
    000002B4 2008                   TST         R0,R0
    000002B6 8B02                   BF          L1148
    000002B8 64D2                   MOV.L       @R13,R4
    000002BA A004                   BRA         L1153
    000002BC 5441                   MOV.L       @(4,R4),R4
    000002BE              L1148:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002BE 9312                   MOV.W       L1248,R3   ; H'0570
    000002C0 D209                   MOV.L       L1248+2,R2 ; _symtab
    000002C2 6422                   MOV.L       @R2,R4
    000002C4 343C                   ADD         R3,R4
    000002C6              L1153:                            
    000002C6 8448                   MOV.B       @(8,R4),R0
    000002C8 2008                   TST         R0,R0
    000002CA 8B0F                   BF          L1147
    000002CC 64D2                   MOV.L       @R13,R4
    000002CE 8448                   MOV.B       @(8,R4),R0
    000002D0 2008                   TST         R0,R0
    000002D2 8B02                   BF          L1149
    000002D4 64D2                   MOV.L       @R13,R4
    000002D6 A004                   BRA         L1154
    000002D8 5441                   MOV.L       @(4,R4),R4
    000002DA              L1149:                            
    000002DA 9304                   MOV.W       L1248,R3   ; H'0570
    000002DC D202                   MOV.L       L1248+2,R2 ; _symtab
    000002DE 6422                   MOV.L       @R2,R4
    000002E0 343C                   ADD         R3,R4
    000002E2              L1154:                            
    000002E2 A007                   BRA         L1155
    000002E4 5441                   MOV.L       @(4,R4),R4
    000002E6              L1248:                            
    000002E6 0570                   .DATA.W     H'0570
    000002E8 <00000000>             .DATA.L     _symtab
    000002EC              L1147:                            
    000002EC 9369                   MOV.W       L1249,R3   ; H'0570
    000002EE D235                   MOV.L       L1249+2,R2 ; _symtab
    000002F0 6422                   MOV.L       @R2,R4
    000002F2 343C                   ADD         R3,R4
    000002F4              L1155:                            
    000002F4 A009                   BRA         L1242
    000002F6 6442                   MOV.L       @R4,R4
    000002F8              L1143:                            
    000002F8 9363                   MOV.W       L1249,R3   ; H'0570
    000002FA D232                   MOV.L       L1249+2,R2 ; _symtab
    000002FC 6422                   MOV.L       @R2,R4
    000002FE 343C                   ADD         R3,R4
    00000300 A003                   BRA         L1242
    00000302 0009                   NOP
    00000304              L1134:                            
      divisors.c    73                            } else {
      divisors.c    74                                    push(p2);
    00000304 4C0B                   JSR         @R12
    00000306 0009                   NOP
      divisors.c    75                                    push(one);
    00000308 6492                   MOV.L       @R9,R4
    0000030A              L1242:                            
    0000030A 4C0B                   JSR         @R12
    0000030C 0009                   NOP
      divisors.c    76                            }
      divisors.c    77                            p1 = cdr(p1);
    0000030E 63E2                   MOV.L       @R14,R3
    00000310 8438                   MOV.B       @(8,R3),R0
    00000312 2008                   TST         R0,R0
    00000314 8B02                   BF          L1158




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000316 62E2                   MOV.L       @R14,R2
    00000318 A004                   BRA         L1159
    0000031A 5221                   MOV.L       @(4,R2),R2
    0000031C              L1158:                            
    0000031C 9351                   MOV.W       L1249,R3   ; H'0570
    0000031E D129                   MOV.L       L1249+2,R1 ; _symtab
    00000320 6212                   MOV.L       @R1,R2
    00000322 323C                   ADD         R3,R2
    00000324              L1159:                            
    00000324 2E22                   MOV.L       R2,@R14
    00000326              L1130:                            
    00000326 63E2                   MOV.L       @R14,R3
    00000328 8438                   MOV.B       @(8,R3),R0
    0000032A 2008                   TST         R0,R0
    0000032C 8B01                   BF          L1250
    0000032E AF58                   BRA         L1131
    00000330 0009                   NOP
    00000332              L1250:                            
    00000332 A07C                   BRA         L1110
    00000334 0009                   NOP
    00000336              L1115:                            
      divisors.c    78                    }
      divisors.c    79            } else if (car(p1) == symbol(POWER)) {
    00000336 8448                   MOV.B       @(8,R4),R0
    00000338 2008                   TST         R0,R0
    0000033A 8F02                   BF/S        L1162
    0000033C 385C                   ADD         R5,R8
    0000033E A002                   BRA         L1163
    00000340 6342                   MOV.L       @R4,R3
    00000342              L1162:                            
    00000342 933E                   MOV.W       L1249,R3   ; H'0570
    00000344 335C                   ADD         R5,R3
    00000346              L1163:                            
    00000346 3380                   CMP/EQ      R8,R3
    00000348 8B6C                   BF          L1161
      divisors.c    80                    push(cadr(p1));
    0000034A 64E2                   MOV.L       @R14,R4
    0000034C 8448                   MOV.B       @(8,R4),R0
    0000034E 2008                   TST         R0,R0
    00000350 8B02                   BF          L1165
    00000352 64E2                   MOV.L       @R14,R4
    00000354 A004                   BRA         L1167
    00000356 5441                   MOV.L       @(4,R4),R4
    00000358              L1165:                            
    00000358 9333                   MOV.W       L1249,R3   ; H'0570
    0000035A D21A                   MOV.L       L1249+2,R2 ; _symtab
    0000035C 6422                   MOV.L       @R2,R4
    0000035E 343C                   ADD         R3,R4
    00000360              L1167:                            
    00000360 8448                   MOV.B       @(8,R4),R0
    00000362 2008                   TST         R0,R0
    00000364 8B0C                   BF          L1164
    00000366 64E2                   MOV.L       @R14,R4
    00000368 8448                   MOV.B       @(8,R4),R0
    0000036A 2008                   TST         R0,R0
    0000036C 8B02                   BF          L1166
    0000036E 64E2                   MOV.L       @R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000370 A004                   BRA         L1168
    00000372 5441                   MOV.L       @(4,R4),R4
    00000374              L1166:                            
    00000374 9325                   MOV.W       L1249,R3   ; H'0570
    00000376 D213                   MOV.L       L1249+2,R2 ; _symtab
    00000378 6422                   MOV.L       @R2,R4
    0000037A 343C                   ADD         R3,R4
    0000037C              L1168:                            
    0000037C A004                   BRA         L1169
    0000037E 6442                   MOV.L       @R4,R4
    00000380              L1164:                            
    00000380 931F                   MOV.W       L1249,R3   ; H'0570
    00000382 D210                   MOV.L       L1249+2,R2 ; _symtab
    00000384 6422                   MOV.L       @R2,R4
    00000386 343C                   ADD         R3,R4
    00000388              L1169:                            
    00000388 4C0B                   JSR         @R12
    0000038A 0009                   NOP
      divisors.c    81                    push(caddr(p1));
    0000038C 64E2                   MOV.L       @R14,R4
    0000038E 8448                   MOV.B       @(8,R4),R0
    00000390 2008                   TST         R0,R0
    00000392 8B02                   BF          L1172
    00000394 64E2                   MOV.L       @R14,R4
    00000396 A004                   BRA         L1177
    00000398 5441                   MOV.L       @(4,R4),R4
    0000039A              L1172:                            
    0000039A 9312                   MOV.W       L1249,R3   ; H'0570
    0000039C D209                   MOV.L       L1249+2,R2 ; _symtab
    0000039E 6422                   MOV.L       @R2,R4
    000003A0 343C                   ADD         R3,R4
    000003A2              L1177:                            
    000003A2 8448                   MOV.B       @(8,R4),R0
    000003A4 2008                   TST         R0,R0
    000003A6 8B0F                   BF          L1171
    000003A8 64E2                   MOV.L       @R14,R4
    000003AA 8448                   MOV.B       @(8,R4),R0
    000003AC 2008                   TST         R0,R0
    000003AE 8B02                   BF          L1173
    000003B0 64E2                   MOV.L       @R14,R4
    000003B2 A004                   BRA         L1178
    000003B4 5441                   MOV.L       @(4,R4),R4
    000003B6              L1173:                            
    000003B6 9304                   MOV.W       L1249,R3   ; H'0570
    000003B8 D202                   MOV.L       L1249+2,R2 ; _symtab
    000003BA 6422                   MOV.L       @R2,R4
    000003BC 343C                   ADD         R3,R4
    000003BE              L1178:                            
    000003BE A007                   BRA         L1179
    000003C0 5441                   MOV.L       @(4,R4),R4
    000003C2              L1249:                            
    000003C2 0570                   .DATA.W     H'0570
    000003C4 <00000000>             .DATA.L     _symtab
    000003C8              L1171:                            
    000003C8 9372                   MOV.W       L1251,R3   ; H'0570
    000003CA D23A                   MOV.L       L1251+4,R2 ; _symtab
    000003CC 6422                   MOV.L       @R2,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003CE 343C                   ADD         R3,R4
    000003D0              L1179:                            
    000003D0 8448                   MOV.B       @(8,R4),R0
    000003D2 2008                   TST         R0,R0
    000003D4 8B20                   BF          L1170
    000003D6 64E2                   MOV.L       @R14,R4
    000003D8 8448                   MOV.B       @(8,R4),R0
    000003DA 2008                   TST         R0,R0
    000003DC 8B02                   BF          L1175
    000003DE 64E2                   MOV.L       @R14,R4
    000003E0 A004                   BRA         L1180
    000003E2 5441                   MOV.L       @(4,R4),R4
    000003E4              L1175:                            
    000003E4 9364                   MOV.W       L1251,R3   ; H'0570
    000003E6 D233                   MOV.L       L1251+4,R2 ; _symtab
    000003E8 6422                   MOV.L       @R2,R4
    000003EA 343C                   ADD         R3,R4
    000003EC              L1180:                            
    000003EC 8448                   MOV.B       @(8,R4),R0
    000003EE 2008                   TST         R0,R0
    000003F0 8B0C                   BF          L1174
    000003F2 64E2                   MOV.L       @R14,R4
    000003F4 8448                   MOV.B       @(8,R4),R0
    000003F6 2008                   TST         R0,R0
    000003F8 8B02                   BF          L1176
    000003FA 64E2                   MOV.L       @R14,R4
    000003FC A004                   BRA         L1181
    000003FE 5441                   MOV.L       @(4,R4),R4
    00000400              L1176:                            
    00000400 9356                   MOV.W       L1251,R3   ; H'0570
    00000402 D22C                   MOV.L       L1251+4,R2 ; _symtab
    00000404 6422                   MOV.L       @R2,R4
    00000406 343C                   ADD         R3,R4
    00000408              L1181:                            
    00000408 A004                   BRA         L1182
    0000040A 5441                   MOV.L       @(4,R4),R4
    0000040C              L1174:                            
    0000040C 9350                   MOV.W       L1251,R3   ; H'0570
    0000040E D229                   MOV.L       L1251+4,R2 ; _symtab
    00000410 6422                   MOV.L       @R2,R4
    00000412 343C                   ADD         R3,R4
    00000414              L1182:                            
    00000414 A009                   BRA         L1243
    00000416 6442                   MOV.L       @R4,R4
    00000418              L1170:                            
    00000418 934A                   MOV.W       L1251,R3   ; H'0570
    0000041A D226                   MOV.L       L1251+4,R2 ; _symtab
    0000041C 6422                   MOV.L       @R2,R4
    0000041E 343C                   ADD         R3,R4
    00000420 A003                   BRA         L1243
    00000422 0009                   NOP
    00000424              L1161:                            
      divisors.c    82            } else {
      divisors.c    83                    push(p1);
    00000424 4C0B                   JSR         @R12
    00000426 0009                   NOP
      divisors.c    84                    push(one);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000428 6492                   MOV.L       @R9,R4
    0000042A              L1243:                            
    0000042A 4C0B                   JSR         @R12
    0000042C 0009                   NOP
    0000042E              L1110:                            
      divisors.c    85            }
      divisors.c    86    
      divisors.c    87            k = tos;
    0000042E 6DA2                   MOV.L       @R10,R13
      divisors.c    88    
      divisors.c    89            // contruct divisors by recursive descent
      divisors.c    90    
      divisors.c    91            push(one);
    00000430 4C0B                   JSR         @R12
    00000432 6492                   MOV.L       @R9,R4
      divisors.c    92    
      divisors.c    93            gen(h, k);
    00000434 65D3                   MOV         R13,R5
    00000436 B021                   BSR         __$gen
    00000438 64B3                   MOV         R11,R4
      divisors.c    94    
      divisors.c    95            // move
      divisors.c    96    
      divisors.c    97            n = tos - k;
      divisors.c    98    
      divisors.c    99            for (i = 0; i < n; i++)
    0000043A E700                   MOV         #0,R7
    0000043C D61E                   MOV.L       L1251+8,R6 ; _stack
    0000043E E500                   MOV         #0,R5
    00000440 6EA2                   MOV.L       @R10,R14
    00000442 64B3                   MOV         R11,R4
    00000444 3ED8                   SUB         R13,R14
    00000446 35DC                   ADD         R13,R5
    00000448 4508                   SHLL2       R5
    0000044A 4E15                   CMP/PL      R14
    0000044C 8F0A                   BF/S        L1185
    0000044E 4408                   SHLL2       R4
    00000450              L1186:                            
      divisors.c   100                    stack[h + i] = stack[k + i];
    00000450 6362                   MOV.L       @R6,R3
    00000452 7701                   ADD         #1,R7
    00000454 6062                   MOV.L       @R6,R0
    00000456 334C                   ADD         R4,R3
    00000458 025E                   MOV.L       @(R0,R5),R2
    0000045A 37E3                   CMP/GE      R14,R7
    0000045C 2322                   MOV.L       R2,@R3
    0000045E 7504                   ADD         #4,R5
    00000460 8FF6                   BF/S        L1186
    00000462 7404                   ADD         #4,R4
    00000464              L1185:                            
      divisors.c   101    
      divisors.c   102            tos = h + n;
      divisors.c   103    
      divisors.c   104            restore();
    00000464 D315                   MOV.L       L1251+12,R3; _restore
    00000466 3BEC                   ADD         R14,R11
    00000468 2AB2                   MOV.L       R11,@R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000046A 4F26                   LDS.L       @R15+,PR
    0000046C 68F6                   MOV.L       @R15+,R8
    0000046E 69F6                   MOV.L       @R15+,R9
    00000470 6AF6                   MOV.L       @R15+,R10
    00000472 6BF6                   MOV.L       @R15+,R11
    00000474 6CF6                   MOV.L       @R15+,R12
    00000476 6DF6                   MOV.L       @R15+,R13
    00000478 432B                   JMP         @R3
    0000047A 6EF6                   MOV.L       @R15+,R14
      divisors.c   105    }
      divisors.c   106    
      divisors.c   107    //-----------------------------------------------------------------------------
      divisors.c   108    //
      divisors.c   109    //      Generate divisors
      divisors.c   110    //
      divisors.c   111    //      Input:          Base-exponent pairs on stack
      divisors.c   112    //
      divisors.c   113    //                      h       first pair
      divisors.c   114    //
      divisors.c   115    //                      k       just past last pair
      divisors.c   116    //
      divisors.c   117    //      Output:         Divisors on stack
      divisors.c   118    //
      divisors.c   119    //      For example, factor list 2 2 3 1 results in 6 divisors,
      divisors.c   120    //
      divisors.c   121    //              1
      divisors.c   122    //              3
      divisors.c   123    //              2
      divisors.c   124    //              6
      divisors.c   125    //              4
      divisors.c   126    //              12
      divisors.c   127    //
      divisors.c   128    //-----------------------------------------------------------------------------
      divisors.c   129    
      divisors.c   130    #define ACCUM p1
      divisors.c   131    #define BASE p2
      divisors.c   132    #define EXPO p3
      divisors.c   133    
      divisors.c   134    static void
      divisors.c   135    gen(int h, int k)
    0000047C              __$gen:                          ; function: gen
                                                           ; frame size=40
    0000047C 2FE6                   MOV.L       R14,@-R15
    0000047E 2FD6                   MOV.L       R13,@-R15
    00000480 2FC6                   MOV.L       R12,@-R15
    00000482 2FB6                   MOV.L       R11,@-R15
    00000484 2FA6                   MOV.L       R10,@-R15
    00000486 2F96                   MOV.L       R9,@-R15
    00000488 2F86                   MOV.L       R8,@-R15
    0000048A 6843                   MOV         R4,R8
      divisors.c   136    {
      divisors.c   137            int expo, i;
      divisors.c   138    
      divisors.c   139            save();
    0000048C D30C                   MOV.L       L1251+16,R3; _save
    0000048E 4F22                   STS.L       PR,@-R15
    00000490 4F12                   STS.L       MACL,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000492 7FFC                   ADD         #-4,R15
    00000494 430B                   JSR         @R3
    00000496 6953                   MOV         R5,R9
      divisors.c   140    
      divisors.c   141            ACCUM = pop();
    00000498 DC0A                   MOV.L       L1251+20,R12; _p1
    0000049A D20B                   MOV.L       L1251+24,R2; _pop
    0000049C 420B                   JSR         @R2
    0000049E 0009                   NOP
      divisors.c   142    
      divisors.c   143            if (h == k) {
    000004A0 DE0A                   MOV.L       L1251+28,R14; _push
    000004A2 3890                   CMP/EQ      R9,R8
    000004A4 8F14                   BF/S        L1187
    000004A6 2C02                   MOV.L       R0,@R12
      divisors.c   144                    push(ACCUM);
    000004A8 4E0B                   JSR         @R14
    000004AA 64C2                   MOV.L       @R12,R4
    000004AC A03F                   BRA         L1099
    000004AE 0009                   NOP
    000004B0              L1251:                            
    000004B0 0570                   .DATA.W     H'0570
    000004B2 0000                   .DATA.W     0
    000004B4 <00000000>             .DATA.L     _symtab
    000004B8 <00000000>             .DATA.L     _stack
    000004BC <00000000>             .DATA.L     _restore
    000004C0 <00000000>             .DATA.L     _save
    000004C4 <00000000>             .DATA.L     _p1
    000004C8 <00000000>             .DATA.L     _pop
    000004CC <00000000>             .DATA.L     _push
    000004D0              L1187:                            
      divisors.c   145                    restore();
      divisors.c   146                    return;
      divisors.c   147            }
      divisors.c   148    
      divisors.c   149            BASE = stack[h + 0];
    000004D0 DB3D                   MOV.L       L1252+2,R11; _p2
    000004D2 6483                   MOV         R8,R4
    000004D4 D23D                   MOV.L       L1252+6,R2 ; _stack
    000004D6 4408                   SHLL2       R4
      divisors.c   150            EXPO = stack[h + 1];
    000004D8 D03D                   MOV.L       L1252+10,R0; _p3
    000004DA 6322                   MOV.L       @R2,R3
    000004DC 343C                   ADD         R3,R4
    000004DE 6142                   MOV.L       @R4,R1
    000004E0 2B12                   MOV.L       R1,@R11
    000004E2 5341                   MOV.L       @(4,R4),R3
    000004E4 2032                   MOV.L       R3,@R0
      divisors.c   151    
      divisors.c   152            push(EXPO);
    000004E6 4E0B                   JSR         @R14
    000004E8 6433                   MOV         R3,R4
      divisors.c   153            expo = pop_integer();
    000004EA D33A                   MOV.L       L1252+14,R3; _pop_integer
    000004EC 430B                   JSR         @R3
    000004EE 0009                   NOP
    000004F0 6A03                   MOV         R0,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004F2 7802                   ADD         #2,R8
    000004F4 2F82                   MOV.L       R8,@R15
    000004F6 D838                   MOV.L       L1252+18,R8; _multiply
      divisors.c   154    
      divisors.c   155            for (i = 0; i <= abs(expo); i++) {
    000004F8 A014                   BRA         L1189
    000004FA ED00                   MOV         #0,R13
    000004FC              L1190:                            
      divisors.c   156                    push(ACCUM);
    000004FC 4E0B                   JSR         @R14
    000004FE 64C2                   MOV.L       @R12,R4
      divisors.c   157                    push(BASE);
    00000500 4E0B                   JSR         @R14
    00000502 64B2                   MOV.L       @R11,R4
      divisors.c   158                    push_integer(sign(expo) * i);
    00000504 D235                   MOV.L       L1252+22,R2; _sign
    00000506 420B                   JSR         @R2
    00000508 64A3                   MOV         R10,R4
    0000050A 00D7                   MUL.L       R13,R0
    0000050C D334                   MOV.L       L1252+26,R3; _push_integer
    0000050E 430B                   JSR         @R3
    00000510 041A                   STS         MACL,R4
      divisors.c   159                    power();
    00000512 D234                   MOV.L       L1252+30,R2; _power
    00000514 420B                   JSR         @R2
    00000516 0009                   NOP
      divisors.c   160                    multiply();
    00000518 480B                   JSR         @R8
    0000051A 0009                   NOP
      divisors.c   161                    gen(h + 2, k);
    0000051C 6593                   MOV         R9,R5
    0000051E BFAD                   BSR         __$gen
    00000520 64F2                   MOV.L       @R15,R4
    00000522 7D01                   ADD         #1,R13
    00000524              L1189:                            
    00000524 D230                   MOV.L       L1252+34,R2; _abs
    00000526 420B                   JSR         @R2
    00000528 64A3                   MOV         R10,R4
    0000052A 3D07                   CMP/GT      R0,R13
    0000052C 8BE6                   BF          L1190
    0000052E              L1099:
      divisors.c   162            }
      divisors.c   163    
      divisors.c   164            restore();
    0000052E 7F04                   ADD         #4,R15
    00000530 D22E                   MOV.L       L1252+38,R2; _restore
    00000532 4F16                   LDS.L       @R15+,MACL
    00000534 4F26                   LDS.L       @R15+,PR
    00000536 68F6                   MOV.L       @R15+,R8
    00000538 69F6                   MOV.L       @R15+,R9
    0000053A 6AF6                   MOV.L       @R15+,R10
    0000053C 6BF6                   MOV.L       @R15+,R11
    0000053E 6CF6                   MOV.L       @R15+,R12
    00000540 6DF6                   MOV.L       @R15+,R13
    00000542 422B                   JMP         @R2
    00000544 6EF6                   MOV.L       @R15+,R14
      divisors.c   165    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      divisors.c   166    
      divisors.c   167    //-----------------------------------------------------------------------------
      divisors.c   168    //
      divisors.c   169    //      Factor ADD expression
      divisors.c   170    //
      divisors.c   171    //      Input:          Expression on stack
      divisors.c   172    //
      divisors.c   173    //      Output:         Factors on stack
      divisors.c   174    //
      divisors.c   175    //      Each factor consists of two expressions, the factor itself followed
      divisors.c   176    //      by the exponent.
      divisors.c   177    //
      divisors.c   178    //-----------------------------------------------------------------------------
      divisors.c   179    
      divisors.c   180    static void
      divisors.c   181    __factor_add(void)
    00000546              __$__factor_add:                 ; function: __factor_add
                                                           ; frame size=28
    00000546 2FE6                   MOV.L       R14,@-R15
    00000548 2FD6                   MOV.L       R13,@-R15
    0000054A 2FC6                   MOV.L       R12,@-R15
    0000054C 2FB6                   MOV.L       R11,@-R15
    0000054E 2FA6                   MOV.L       R10,@-R15
    00000550 2F96                   MOV.L       R9,@-R15
    00000552 4F22                   STS.L       PR,@-R15
      divisors.c   182    {
      divisors.c   183            save();
    00000554 D326                   MOV.L       L1252+42,R3; _save
    00000556 430B                   JSR         @R3
    00000558 0009                   NOP
      divisors.c   184    
      divisors.c   185            p1 = pop();
    0000055A D926                   MOV.L       L1252+46,R9; _pop
    0000055C DA26                   MOV.L       L1252+50,R10; _p1
    0000055E 490B                   JSR         @R9
    00000560 0009                   NOP
      divisors.c   186    
      divisors.c   187            // get gcd of all terms
      divisors.c   188    
      divisors.c   189            p3 = cdr(p1);
    00000562 6303                   MOV         R0,R3
    00000564 2A02                   MOV.L       R0,@R10
    00000566 DE1A                   MOV.L       L1252+10,R14; _p3
    00000568 8438                   MOV.B       @(8,R3),R0
    0000056A 2008                   TST         R0,R0
    0000056C 8B02                   BF          L1191
    0000056E 62A2                   MOV.L       @R10,R2
    00000570 A004                   BRA         L1192
    00000572 5221                   MOV.L       @(4,R2),R2
    00000574              L1191:                            
    00000574 9327                   MOV.W       L1252,R3   ; H'0570
    00000576 D121                   MOV.L       L1252+54,R1; _symtab
    00000578 6212                   MOV.L       @R1,R2
    0000057A 323C                   ADD         R3,R2
    0000057C              L1192:                            
    0000057C 2E22                   MOV.L       R2,@R14
      divisors.c   190            push(car(p3));




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000057E 6423                   MOV         R2,R4
    00000580 DD1F                   MOV.L       L1252+58,R13; _push
    00000582 8448                   MOV.B       @(8,R4),R0
    00000584 2008                   TST         R0,R0
    00000586 8B02                   BF          L1193
    00000588 64E2                   MOV.L       @R14,R4
    0000058A A004                   BRA         L1194
    0000058C 6442                   MOV.L       @R4,R4
    0000058E              L1193:                            
    0000058E 931A                   MOV.W       L1252,R3   ; H'0570
    00000590 D21A                   MOV.L       L1252+54,R2; _symtab
    00000592 6422                   MOV.L       @R2,R4
    00000594 343C                   ADD         R3,R4
    00000596              L1194:                            
    00000596 4D0B                   JSR         @R13
    00000598 0009                   NOP
      divisors.c   191            p3 = cdr(p3);
    0000059A 62E2                   MOV.L       @R14,R2
    0000059C 8428                   MOV.B       @(8,R2),R0
    0000059E 2008                   TST         R0,R0
    000005A0 8B02                   BF          L1195
    000005A2 62E2                   MOV.L       @R14,R2
    000005A4 A004                   BRA         L1196
    000005A6 5321                   MOV.L       @(4,R2),R3
    000005A8              L1195:                            
    000005A8 920D                   MOV.W       L1252,R2   ; H'0570
    000005AA D114                   MOV.L       L1252+54,R1; _symtab
    000005AC 6312                   MOV.L       @R1,R3
    000005AE 332C                   ADD         R2,R3
    000005B0              L1196:                            
    000005B0 2E32                   MOV.L       R3,@R14
    000005B2 DC14                   MOV.L       L1252+62,R12; _gcd
      divisors.c   192            while (iscons(p3)) {
    000005B4 A03C                   BRA         L1197
    000005B6 0009                   NOP
    000005B8              L1198:                            
      divisors.c   193                    push(car(p3));
    000005B8 64E2                   MOV.L       @R14,R4
    000005BA 8448                   MOV.B       @(8,R4),R0
    000005BC 2008                   TST         R0,R0
    000005BE 8B23                   BF          L1199
    000005C0 64E2                   MOV.L       @R14,R4
    000005C2 A025                   BRA         L1200
    000005C4 6442                   MOV.L       @R4,R4
    000005C6              L1252:                            
    000005C6 0570                   .DATA.W     H'0570
    000005C8 <00000000>             .DATA.L     _p2
    000005CC <00000000>             .DATA.L     _stack
    000005D0 <00000000>             .DATA.L     _p3
    000005D4 <00000000>             .DATA.L     _pop_integer
    000005D8 <00000000>             .DATA.L     _multiply
    000005DC <00000000>             .DATA.L     _sign
    000005E0 <00000000>             .DATA.L     _push_integer
    000005E4 <00000000>             .DATA.L     _power
    000005E8 <00000000>             .DATA.L     _abs
    000005EC <00000000>             .DATA.L     _restore
    000005F0 <00000000>             .DATA.L     _save




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005F4 <00000000>             .DATA.L     _pop
    000005F8 <00000000>             .DATA.L     _p1
    000005FC <00000000>             .DATA.L     _symtab
    00000600 <00000000>             .DATA.L     _push
    00000604 <00000000>             .DATA.L     _gcd
    00000608              L1199:                            
    00000608 9367                   MOV.W       L1253,R3   ; H'0570
    0000060A D235                   MOV.L       L1253+6,R2 ; _symtab
    0000060C 6422                   MOV.L       @R2,R4
    0000060E 343C                   ADD         R3,R4
    00000610              L1200:                            
    00000610 4D0B                   JSR         @R13
    00000612 0009                   NOP
      divisors.c   194                    gcd();
    00000614 4C0B                   JSR         @R12
    00000616 0009                   NOP
      divisors.c   195                    p3 = cdr(p3);
    00000618 62E2                   MOV.L       @R14,R2
    0000061A 8428                   MOV.B       @(8,R2),R0
    0000061C 2008                   TST         R0,R0
    0000061E 8B02                   BF          L1201
    00000620 62E2                   MOV.L       @R14,R2
    00000622 A004                   BRA         L1202
    00000624 5321                   MOV.L       @(4,R2),R3
    00000626              L1201:                            
    00000626 9258                   MOV.W       L1253,R2   ; H'0570
    00000628 D12D                   MOV.L       L1253+6,R1 ; _symtab
    0000062A 6312                   MOV.L       @R1,R3
    0000062C 332C                   ADD         R2,R3
    0000062E              L1202:                            
    0000062E 2E32                   MOV.L       R3,@R14
    00000630              L1197:                            
    00000630 62E2                   MOV.L       @R14,R2
    00000632 8428                   MOV.B       @(8,R2),R0
    00000634 2008                   TST         R0,R0
    00000636 89BF                   BT          L1198
      divisors.c   196            }
      divisors.c   197    
      divisors.c   198            // check gcd
      divisors.c   199    
      divisors.c   200            p2 = pop();
    00000638 DC2A                   MOV.L       L1253+10,R12; _p2
    0000063A 490B                   JSR         @R9
    0000063C 0009                   NOP
    0000063E 2C02                   MOV.L       R0,@R12
      divisors.c   201            if (isplusone(p2)) {
    00000640 DB29                   MOV.L       L1253+14,R11; _one
    00000642 D22A                   MOV.L       L1253+18,R2; _isplusone
    00000644 420B                   JSR         @R2
    00000646 6403                   MOV         R0,R4
    00000648 2008                   TST         R0,R0
    0000064A 8903                   BT          L1203
      divisors.c   202                    push(p1);
    0000064C 4D0B                   JSR         @R13
    0000064E 64A2                   MOV.L       @R10,R4
    00000650 A0F7                   BRA         L1100
    00000652 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000654              L1203:                            
    00000654 64C2                   MOV.L       @R12,R4
    00000656 8448                   MOV.B       @(8,R4),R0
    00000658 600C                   EXTU.B      R0,R0
    0000065A 8801                   CMP/EQ      #1,R0
    0000065C 8D03                   BT/S        L1206
    0000065E 6503                   MOV         R0,R5
    00000660 6053                   MOV         R5,R0
    00000662 8802                   CMP/EQ      #2,R0
    00000664 8B06                   BF          L1205
    00000666              L1206:                            
      divisors.c   203                    push(one);
      divisors.c   204                    restore();
      divisors.c   205                    return;
      divisors.c   206            }
      divisors.c   207    
      divisors.c   208            // push factored gcd
      divisors.c   209    
      divisors.c   210            if (isnum(p2)) {
      divisors.c   211                    push(p2);
    00000666 4D0B                   JSR         @R13
    00000668 0009                   NOP
      divisors.c   212                    factor_small_number();
    0000066A D321                   MOV.L       L1253+22,R3; _factor_small_number
    0000066C 430B                   JSR         @R3
    0000066E 0009                   NOP
    00000670 A09B                   BRA         L1207
    00000672 0009                   NOP
    00000674              L1205:                            
      divisors.c   213            } else if (car(p2) == symbol(MULTIPLY)) {
    00000674 8448                   MOV.B       @(8,R4),R0
    00000676 2008                   TST         R0,R0
    00000678 8B01                   BF          L1209
    0000067A A004                   BRA         L1210
    0000067C 6342                   MOV.L       @R4,R3
    0000067E              L1209:                            
    0000067E 922C                   MOV.W       L1253,R2   ; H'0570
    00000680 D117                   MOV.L       L1253+6,R1 ; _symtab
    00000682 6312                   MOV.L       @R1,R3
    00000684 332C                   ADD         R2,R3
    00000686              L1210:                            
    00000686 9229                   MOV.W       L1253+2,R2 ; H'0384
    00000688 D115                   MOV.L       L1253+6,R1 ; _symtab
    0000068A 6012                   MOV.L       @R1,R0
    0000068C 302C                   ADD         R2,R0
    0000068E 3300                   CMP/EQ      R0,R3
    00000690 8901                   BT          L1254
    00000692 A086                   BRA         L1208
    00000694 0009                   NOP
    00000696              L1254:                            
      divisors.c   214                    p3 = cdr(p2);
    00000696 63C2                   MOV.L       @R12,R3
    00000698 8438                   MOV.B       @(8,R3),R0
    0000069A 2008                   TST         R0,R0
    0000069C 8B02                   BF          L1211
    0000069E 61C2                   MOV.L       @R12,R1
    000006A0 A004                   BRA         L1212




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006A2 5111                   MOV.L       @(4,R1),R1
    000006A4              L1211:                            
    000006A4 9319                   MOV.W       L1253,R3   ; H'0570
    000006A6 D00E                   MOV.L       L1253+6,R0 ; _symtab
    000006A8 6102                   MOV.L       @R0,R1
    000006AA 313C                   ADD         R3,R1
    000006AC              L1212:                            
    000006AC 2E12                   MOV.L       R1,@R14
      divisors.c   215                    if (isnum(car(p3))) {
    000006AE 6013                   MOV         R1,R0
    000006B0 8408                   MOV.B       @(8,R0),R0
    000006B2 2008                   TST         R0,R0
    000006B4 8B02                   BF          L1215
    000006B6 60E2                   MOV.L       @R14,R0
    000006B8 A004                   BRA         L1217
    000006BA 6002                   MOV.L       @R0,R0
    000006BC              L1215:                            
    000006BC 930D                   MOV.W       L1253,R3   ; H'0570
    000006BE D208                   MOV.L       L1253+6,R2 ; _symtab
    000006C0 6022                   MOV.L       @R2,R0
    000006C2 303C                   ADD         R3,R0
    000006C4              L1217:                            
    000006C4 8408                   MOV.B       @(8,R0),R0
    000006C6 600C                   EXTU.B      R0,R0
    000006C8 8801                   CMP/EQ      #1,R0
    000006CA 891B                   BT          L1214
    000006CC 60E2                   MOV.L       @R14,R0
    000006CE 8408                   MOV.B       @(8,R0),R0
    000006D0 2008                   TST         R0,R0
    000006D2 8B0F                   BF          L1216
    000006D4 60E2                   MOV.L       @R14,R0
    000006D6 A011                   BRA         L1218
    000006D8 6002                   MOV.L       @R0,R0
    000006DA              L1253:                            
    000006DA 0570                   .DATA.W     H'0570
    000006DC 0384                   .DATA.W     H'0384
    000006DE 0000                   .DATA.W     0
    000006E0 <00000000>             .DATA.L     _symtab
    000006E4 <00000000>             .DATA.L     _p2
    000006E8 <00000000>             .DATA.L     _one
    000006EC <00000000>             .DATA.L     _isplusone
    000006F0 <00000000>             .DATA.L     _factor_small_number
    000006F4              L1216:                            
    000006F4 9374                   MOV.W       L1255,R3   ; H'0570
    000006F6 D23B                   MOV.L       L1255+4,R2 ; _symtab
    000006F8 6022                   MOV.L       @R2,R0
    000006FA 303C                   ADD         R3,R0
    000006FC              L1218:                            
    000006FC 8408                   MOV.B       @(8,R0),R0
    000006FE 600C                   EXTU.B      R0,R0
    00000700 8802                   CMP/EQ      #2,R0
    00000702 8B11                   BF          L1213
    00000704              L1214:                            
      divisors.c   216                            push(car(p3));
    00000704 64E2                   MOV.L       @R14,R4
    00000706 8448                   MOV.B       @(8,R4),R0
    00000708 2008                   TST         R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000070A 8B02                   BF          L1219
    0000070C 64E2                   MOV.L       @R14,R4
    0000070E A004                   BRA         L1220
    00000710 6442                   MOV.L       @R4,R4
    00000712              L1219:                            
    00000712 9365                   MOV.W       L1255,R3   ; H'0570
    00000714 D233                   MOV.L       L1255+4,R2 ; _symtab
    00000716 6422                   MOV.L       @R2,R4
    00000718 343C                   ADD         R3,R4
    0000071A              L1220:                            
    0000071A 4D0B                   JSR         @R13
    0000071C 0009                   NOP
      divisors.c   217                            factor_small_number();
    0000071E D332                   MOV.L       L1255+8,R3 ; _factor_small_number
    00000720 430B                   JSR         @R3
    00000722 0009                   NOP
    00000724 A00F                   BRA         L1221
    00000726 0009                   NOP
    00000728              L1213:                            
      divisors.c   218                    } else {
      divisors.c   219                            push(car(p3));
    00000728 64E2                   MOV.L       @R14,R4
    0000072A 8448                   MOV.B       @(8,R4),R0
    0000072C 2008                   TST         R0,R0
    0000072E 8B02                   BF          L1222
    00000730 64E2                   MOV.L       @R14,R4
    00000732 A004                   BRA         L1223
    00000734 6442                   MOV.L       @R4,R4
    00000736              L1222:                            
    00000736 9353                   MOV.W       L1255,R3   ; H'0570
    00000738 D22A                   MOV.L       L1255+4,R2 ; _symtab
    0000073A 6422                   MOV.L       @R2,R4
    0000073C 343C                   ADD         R3,R4
    0000073E              L1223:                            
    0000073E 4D0B                   JSR         @R13
    00000740 0009                   NOP
      divisors.c   220                            push(one);
    00000742 4D0B                   JSR         @R13
    00000744 64B2                   MOV.L       @R11,R4
    00000746              L1221:                            
      divisors.c   221                    }
      divisors.c   222                    p3 = cdr(p3);
    00000746 62E2                   MOV.L       @R14,R2
    00000748 8428                   MOV.B       @(8,R2),R0
    0000074A 2008                   TST         R0,R0
    0000074C 8B02                   BF          L1224
    0000074E 62E2                   MOV.L       @R14,R2
    00000750 A020                   BRA         L1244
    00000752 5321                   MOV.L       @(4,R2),R3
    00000754              L1224:                            
    00000754 9244                   MOV.W       L1255,R2   ; H'0570
    00000756 D123                   MOV.L       L1255+4,R1 ; _symtab
    00000758 6312                   MOV.L       @R1,R3
    0000075A 332C                   ADD         R2,R3
      divisors.c   223                    while (iscons(p3)) {
    0000075C A01A                   BRA         L1244
    0000075E 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000760              L1227:                            
      divisors.c   224                            push(car(p3));
    00000760 64E2                   MOV.L       @R14,R4
    00000762 8448                   MOV.B       @(8,R4),R0
    00000764 2008                   TST         R0,R0
    00000766 8B02                   BF          L1228
    00000768 64E2                   MOV.L       @R14,R4
    0000076A A004                   BRA         L1229
    0000076C 6442                   MOV.L       @R4,R4
    0000076E              L1228:                            
    0000076E 9337                   MOV.W       L1255,R3   ; H'0570
    00000770 D21C                   MOV.L       L1255+4,R2 ; _symtab
    00000772 6422                   MOV.L       @R2,R4
    00000774 343C                   ADD         R3,R4
    00000776              L1229:                            
    00000776 4D0B                   JSR         @R13
    00000778 0009                   NOP
      divisors.c   225                            push(one);
    0000077A 4D0B                   JSR         @R13
    0000077C 64B2                   MOV.L       @R11,R4
      divisors.c   226                            p3 = cdr(p3);
    0000077E 62E2                   MOV.L       @R14,R2
    00000780 8428                   MOV.B       @(8,R2),R0
    00000782 2008                   TST         R0,R0
    00000784 8B02                   BF          L1230
    00000786 62E2                   MOV.L       @R14,R2
    00000788 A004                   BRA         L1244
    0000078A 5321                   MOV.L       @(4,R2),R3
    0000078C              L1230:                            
    0000078C 9228                   MOV.W       L1255,R2   ; H'0570
    0000078E D115                   MOV.L       L1255+4,R1 ; _symtab
    00000790 6312                   MOV.L       @R1,R3
    00000792 332C                   ADD         R2,R3
    00000794              L1244:                            
    00000794 2E32                   MOV.L       R3,@R14
    00000796 6233                   MOV         R3,R2
    00000798 8428                   MOV.B       @(8,R2),R0
    0000079A 2008                   TST         R0,R0
    0000079C 89E0                   BT          L1227
    0000079E A004                   BRA         L1207
    000007A0 0009                   NOP
    000007A2              L1208:                            
      divisors.c   227                    }
      divisors.c   228            } else {
      divisors.c   229                    push(p2);
    000007A2 4D0B                   JSR         @R13
    000007A4 0009                   NOP
      divisors.c   230                    push(one);
    000007A6 4D0B                   JSR         @R13
    000007A8 64B2                   MOV.L       @R11,R4
    000007AA              L1207:                            
      divisors.c   231            }
      divisors.c   232    
      divisors.c   233            // divide each term by gcd
      divisors.c   234    
      divisors.c   235            push(p2);
    000007AA 4D0B                   JSR         @R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007AC 64C2                   MOV.L       @R12,R4
      divisors.c   236            inverse();
    000007AE D30F                   MOV.L       L1255+12,R3; _inverse
    000007B0 430B                   JSR         @R3
    000007B2 0009                   NOP
      divisors.c   237            p2 = pop();
    000007B4 490B                   JSR         @R9
    000007B6 0009                   NOP
    000007B8 2C02                   MOV.L       R0,@R12
      divisors.c   238    
      divisors.c   239            push(zero);
    000007BA D20D                   MOV.L       L1255+16,R2; _zero
    000007BC 4D0B                   JSR         @R13
    000007BE 6422                   MOV.L       @R2,R4
      divisors.c   240            p3 = cdr(p1);
    000007C0 61A2                   MOV.L       @R10,R1
    000007C2 8418                   MOV.B       @(8,R1),R0
    000007C4 2008                   TST         R0,R0
    000007C6 8B02                   BF          L1233
    000007C8 62A2                   MOV.L       @R10,R2
    000007CA A004                   BRA         L1234
    000007CC 5321                   MOV.L       @(4,R2),R3
    000007CE              L1233:                            
    000007CE 9207                   MOV.W       L1255,R2   ; H'0570
    000007D0 D104                   MOV.L       L1255+4,R1 ; _symtab
    000007D2 6312                   MOV.L       @R1,R3
    000007D4 332C                   ADD         R2,R3
    000007D6              L1234:                            
    000007D6 2E32                   MOV.L       R3,@R14
    000007D8 D906                   MOV.L       L1255+20,R9; _multiply
    000007DA DA07                   MOV.L       L1255+24,R10; _add
      divisors.c   241            while (iscons(p3)) {
    000007DC A02D                   BRA         L1235
    000007DE 0009                   NOP
    000007E0              L1255:                            
    000007E0 0570                   .DATA.W     H'0570
    000007E2 0000                   .DATA.W     0
    000007E4 <00000000>             .DATA.L     _symtab
    000007E8 <00000000>             .DATA.L     _factor_small_number
    000007EC <00000000>             .DATA.L     _inverse
    000007F0 <00000000>             .DATA.L     _zero
    000007F4 <00000000>             .DATA.L     _multiply
    000007F8 <00000000>             .DATA.L     _add
    000007FC              L1236:                            
      divisors.c   242                    push(p2);
    000007FC 4D0B                   JSR         @R13
    000007FE 64C2                   MOV.L       @R12,R4
      divisors.c   243                    push(car(p3));
    00000800 64E2                   MOV.L       @R14,R4
    00000802 8448                   MOV.B       @(8,R4),R0
    00000804 2008                   TST         R0,R0
    00000806 8B02                   BF          L1237
    00000808 64E2                   MOV.L       @R14,R4
    0000080A A004                   BRA         L1238
    0000080C 6442                   MOV.L       @R4,R4
    0000080E              L1237:                            
    0000080E 932C                   MOV.W       L1256,R3   ; H'0570




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000810 D216                   MOV.L       L1256+2,R2 ; _symtab
    00000812 6422                   MOV.L       @R2,R4
    00000814 343C                   ADD         R3,R4
    00000816              L1238:                            
    00000816 4D0B                   JSR         @R13
    00000818 0009                   NOP
      divisors.c   244                    multiply();
    0000081A 490B                   JSR         @R9
    0000081C 0009                   NOP
      divisors.c   245                    add();
    0000081E 4A0B                   JSR         @R10
    00000820 0009                   NOP
      divisors.c   246                    p3 = cdr(p3);
    00000822 62E2                   MOV.L       @R14,R2
    00000824 8428                   MOV.B       @(8,R2),R0
    00000826 2008                   TST         R0,R0
    00000828 8B02                   BF          L1239
    0000082A 62E2                   MOV.L       @R14,R2
    0000082C A004                   BRA         L1240
    0000082E 5321                   MOV.L       @(4,R2),R3
    00000830              L1239:                            
    00000830 921B                   MOV.W       L1256,R2   ; H'0570
    00000832 D10E                   MOV.L       L1256+2,R1 ; _symtab
    00000834 6312                   MOV.L       @R1,R3
    00000836 332C                   ADD         R2,R3
    00000838              L1240:                            
    00000838 2E32                   MOV.L       R3,@R14
    0000083A              L1235:                            
    0000083A 62E2                   MOV.L       @R14,R2
    0000083C 8428                   MOV.B       @(8,R2),R0
    0000083E 2008                   TST         R0,R0
    00000840 89DC                   BT          L1236
    00000842              L1100:
      divisors.c   247            }
      divisors.c   248    
      divisors.c   249            push(one);
    00000842 4D0B                   JSR         @R13
    00000844 64B2                   MOV.L       @R11,R4
      divisors.c   250    
      divisors.c   251            restore();
    00000846 4F26                   LDS.L       @R15+,PR
    00000848 D209                   MOV.L       L1256+6,R2 ; _restore
    0000084A 69F6                   MOV.L       @R15+,R9
    0000084C 6AF6                   MOV.L       @R15+,R10
    0000084E 6BF6                   MOV.L       @R15+,R11
    00000850 6CF6                   MOV.L       @R15+,R12
    00000852 6DF6                   MOV.L       @R15+,R13
    00000854 422B                   JMP         @R2
    00000856 6EF6                   MOV.L       @R15+,R14
      divisors.c   252    }
      divisors.c   253    
      divisors.c   254    static int
      divisors.c   255    __cmp(const void *p1, const void *p2)
    00000858              __$__cmp:                        ; function: __cmp
                                                           ; frame size=8
      divisors.c   256    {
      divisors.c   257            return cmp_expr(*((U **) p1), *((U **) p2));




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000858 D306                   MOV.L       L1256+10,R3; _cmp_expr
    0000085A 7FF8                   ADD         #-8,R15
    0000085C 2F42                   MOV.L       R4,@R15
    0000085E 1F51                   MOV.L       R5,@(4,R15)
    00000860 6552                   MOV.L       @R5,R5
    00000862 64F2                   MOV.L       @R15,R4
    00000864 6442                   MOV.L       @R4,R4
    00000866 432B                   JMP         @R3
    00000868 7F08                   ADD         #8,R15
    0000086A              L1256:                            
    0000086A 0570                   .DATA.W     H'0570
    0000086C <00000000>             .DATA.L     _symtab
    00000870 <00000000>             .DATA.L     _restore
    00000874 <00000000>             .DATA.L     _cmp_expr
      divisors.c   258    }














































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:55  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      258



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000878 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000878 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           26
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           2
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           168






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk5605.tmp 

