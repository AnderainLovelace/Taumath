SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:56  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\erf.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           erf.c     1    //-----------------------------------------------------------------------------
           erf.c     2    //
           erf.c     3    //      Author : philippe.billet@noos.fr
           erf.c     4    //
           erf.c     5    //      Error function erf(x)
           erf.c     6    //      erf(-x)=erf(x)
           erf.c     7    //  
           erf.c     8    //-----------------------------------------------------------------------------
           erf.c     9    
           erf.c    10    #include "stdafx.h"
           erf.c    11    #include "defs.h"
           erf.c    12    static void yyerf(void);
           erf.c    13    
           erf.c    14    void
           erf.c    15    eval_erf(void)
P   00000000              _eval_erf:                       ; function: eval_erf
                                                           ; frame size=8
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 4F22                   STS.L       PR,@-R15
           erf.c    16    {
           erf.c    17            push(cadr(p1));
    00000004 DE42                   MOV.L       L1075+2,R14; _p1
    00000006 64E2                   MOV.L       @R14,R4
    00000008 8448                   MOV.B       @(8,R4),R0
    0000000A 2008                   TST         R0,R0
    0000000C 8B02                   BF          L1067
    0000000E 64E2                   MOV.L       @R14,R4
    00000010 A004                   BRA         L1069
    00000012 5441                   MOV.L       @(4,R4),R4
    00000014              L1067:                            
    00000014 937B                   MOV.W       L1075,R3   ; H'0570
    00000016 D23F                   MOV.L       L1075+6,R2 ; _symtab
    00000018 6422                   MOV.L       @R2,R4
    0000001A 343C                   ADD         R3,R4
    0000001C              L1069:                            
    0000001C 8448                   MOV.B       @(8,R4),R0
    0000001E 2008                   TST         R0,R0
    00000020 8B0C                   BF          L1066
    00000022 64E2                   MOV.L       @R14,R4
    00000024 8448                   MOV.B       @(8,R4),R0
    00000026 2008                   TST         R0,R0
    00000028 8B02                   BF          L1068
    0000002A 64E2                   MOV.L       @R14,R4
    0000002C A004                   BRA         L1070
    0000002E 5441                   MOV.L       @(4,R4),R4
    00000030              L1068:                            
    00000030 936D                   MOV.W       L1075,R3   ; H'0570
    00000032 D238                   MOV.L       L1075+6,R2 ; _symtab
    00000034 6422                   MOV.L       @R2,R4
    00000036 343C                   ADD         R3,R4
    00000038              L1070:                            
    00000038 A004                   BRA         L1071
    0000003A 6442                   MOV.L       @R4,R4
    0000003C              L1066:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:56  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000003C 9367                   MOV.W       L1075,R3   ; H'0570
    0000003E D235                   MOV.L       L1075+6,R2 ; _symtab
    00000040 6422                   MOV.L       @R2,R4
    00000042 343C                   ADD         R3,R4
    00000044              L1071:                            
    00000044 D334                   MOV.L       L1075+10,R3; _push
    00000046 430B                   JSR         @R3
    00000048 0009                   NOP
           erf.c    18            eval();
    0000004A D234                   MOV.L       L1075+14,R2; _eval
    0000004C 420B                   JSR         @R2
    0000004E 0009                   NOP
           erf.c    19            yerf();
    00000050 4F26                   LDS.L       @R15+,PR
    00000052 6EF6                   MOV.L       @R15+,R14
           erf.c    20    }
           erf.c    21    
           erf.c    22    void
           erf.c    23    yerf(void)
    00000054              _yerf:                           ; function: yerf
                                                           ; frame size=4
    00000054 4F22                   STS.L       PR,@-R15
           erf.c    24    {
           erf.c    25            save();
    00000056 D332                   MOV.L       L1075+18,R3; _save
    00000058 430B                   JSR         @R3
    0000005A 0009                   NOP
           erf.c    26            yyerf();
    0000005C B003                   BSR         __$yyerf
    0000005E 0009                   NOP
           erf.c    27            restore();
    00000060 D330                   MOV.L       L1075+22,R3; _restore
    00000062 432B                   JMP         @R3
    00000064 4F26                   LDS.L       @R15+,PR
           erf.c    28    }
           erf.c    29    
           erf.c    30    static void
           erf.c    31    yyerf(void)
    00000066              __$yyerf:                        ; function: yyerf
                                                           ; frame size=48
                                                           ; used runtime library name:
                                                           ; __addd, __negd
    00000066 2FE6                   MOV.L       R14,@-R15
    00000068 2FD6                   MOV.L       R13,@-R15
    0000006A 4F22                   STS.L       PR,@-R15
           erf.c    32    {
           erf.c    33            double d;
           erf.c    34    
           erf.c    35            p1 = pop();
    0000006C DD28                   MOV.L       L1075+2,R13; _p1
    0000006E 7FF8                   ADD         #-8,R15
    00000070 D32D                   MOV.L       L1075+26,R3; _pop
    00000072 430B                   JSR         @R3
    00000074 0009                   NOP
    00000076 6E03                   MOV         R0,R14
    00000078 2D02                   MOV.L       R0,@R13
    0000007A 84E8                   MOV.B       @(8,R14),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:56  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000007C 600C                   EXTU.B      R0,R0
    0000007E 8802                   CMP/EQ      #2,R0
    00000080 8B21                   BF          L1072
           erf.c    36    
           erf.c    37            if (isdouble(p1)) {
           erf.c    38                    d = 1.0 - erfc(p1->u.d);
    00000082 7FF0                   ADD         #-16,R15
    00000084 D129                   MOV.L       L1075+30,R1; _erfc
    00000086 E308                   MOV         #8,R3
    00000088 52E1                   MOV.L       @(4,R14),R2
    0000008A 2F26                   MOV.L       R2,@-R15
    0000008C 62E2                   MOV.L       @R14,R2
    0000008E 2F26                   MOV.L       R2,@-R15
    00000090 33FC                   ADD         R15,R3
    00000092 410B                   JSR         @R1
    00000094 2F36                   MOV.L       R3,@-R15
    00000096 7F0C                   ADD         #12,R15
    00000098 E308                   MOV         #8,R3
    0000009A 33FC                   ADD         R15,R3
    0000009C 2F36                   MOV.L       R3,@-R15
    0000009E D324                   MOV.L       L1075+34,R3; __negd
    000000A0 430B                   JSR         @R3
    000000A2 0009                   NOP
    000000A4 D324                   MOV.L       L1075+42,R3; __addd
    000000A6 E200                   MOV         #0,R2
    000000A8 2F26                   MOV.L       R2,@-R15
    000000AA D222                   MOV.L       L1075+38,R2; H'3FF00000
    000000AC 2F26                   MOV.L       R2,@-R15
    000000AE 61F3                   MOV         R15,R1
    000000B0 7110                   ADD         #16,R1
    000000B2 430B                   JSR         @R3
    000000B4 2F16                   MOV.L       R1,@-R15
           erf.c    39                    push_double(d);
    000000B6 52F1                   MOV.L       @(4,R15),R2
    000000B8 D320                   MOV.L       L1075+46,R3; _push_double
    000000BA 2F26                   MOV.L       R2,@-R15
    000000BC 52F1                   MOV.L       @(4,R15),R2
    000000BE 430B                   JSR         @R3
    000000C0 2F26                   MOV.L       R2,@-R15
           erf.c    40                    return;
    000000C2 A045                   BRA         L1073
    000000C4 7F08                   ADD         #8,R15
    000000C6              L1072:                            
           erf.c    41            }
           erf.c    42    
           erf.c    43            if (isnegativeterm(p1)) {
    000000C6 D21E                   MOV.L       L1075+50,R2; _isnegativeterm
    000000C8 420B                   JSR         @R2
    000000CA 64E3                   MOV         R14,R4
    000000CC 2008                   TST         R0,R0
    000000CE 8911                   BT          L1074
           erf.c    44                    push_symbol(ERF);
    000000D0 D21C                   MOV.L       L1075+54,R2; _push_symbol
    000000D2 420B                   JSR         @R2
    000000D4 E42A                   MOV         #42,R4
           erf.c    45                    push(p1);
    000000D6 D310                   MOV.L       L1075+10,R3; _push




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:56  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000D8 430B                   JSR         @R3
    000000DA 64D2                   MOV.L       @R13,R4
           erf.c    46                    negate();
    000000DC D21A                   MOV.L       L1075+58,R2; _negate
    000000DE 420B                   JSR         @R2
    000000E0 0009                   NOP
           erf.c    47                    list(2);
    000000E2 D31A                   MOV.L       L1075+62,R3; _list
    000000E4 430B                   JSR         @R3
    000000E6 E402                   MOV         #2,R4
           erf.c    48                    negate();
    000000E8 D217                   MOV.L       L1075+58,R2; _negate
    000000EA 7F08                   ADD         #8,R15
    000000EC 4F26                   LDS.L       @R15+,PR
    000000EE 6DF6                   MOV.L       @R15+,R13
    000000F0 422B                   JMP         @R2
    000000F2 6EF6                   MOV.L       @R15+,R14
    000000F4              L1074:                            
           erf.c    49                    return;
           erf.c    50            }
           erf.c    51            
           erf.c    52            push_symbol(ERF);
    000000F4 D313                   MOV.L       L1075+54,R3; _push_symbol
    000000F6 430B                   JSR         @R3
    000000F8 E42A                   MOV         #42,R4
           erf.c    53            push(p1);
    000000FA D207                   MOV.L       L1075+10,R2; _push
    000000FC 420B                   JSR         @R2
    000000FE 64D2                   MOV.L       @R13,R4
           erf.c    54            list(2);
    00000100 D312                   MOV.L       L1075+62,R3; _list
    00000102 E402                   MOV         #2,R4
    00000104 7F08                   ADD         #8,R15
    00000106 4F26                   LDS.L       @R15+,PR
    00000108 6DF6                   MOV.L       @R15+,R13
    0000010A 432B                   JMP         @R3
    0000010C 6EF6                   MOV.L       @R15+,R14
    0000010E              L1075:                            
    0000010E 0570                   .DATA.W     H'0570
    00000110 <00000000>             .DATA.L     _p1
    00000114 <00000000>             .DATA.L     _symtab
    00000118 <00000000>             .DATA.L     _push
    0000011C <00000000>             .DATA.L     _eval
    00000120 <00000000>             .DATA.L     _save
    00000124 <00000000>             .DATA.L     _restore
    00000128 <00000000>             .DATA.L     _pop
    0000012C <00000000>             .DATA.L     _erfc
    00000130 <00000000>             .DATA.L     __negd
    00000134 3FF00000               .DATA.L     H'3FF00000
    00000138 <00000000>             .DATA.L     __addd
    0000013C <00000000>             .DATA.L     _push_double
    00000140 <00000000>             .DATA.L     _isnegativeterm
    00000144 <00000000>             .DATA.L     _push_symbol
    00000148 <00000000>             .DATA.L     _negate
    0000014C <00000000>             .DATA.L     _list
    00000150              L1073:                            
           erf.c    55            return;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:56  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           erf.c    56    }
    00000150 7F08                   ADD         #8,R15
    00000152 4F26                   LDS.L       @R15+,PR
    00000154 6DF6                   MOV.L       @R15+,R13
    00000156 000B                   RTS
    00000158 6EF6                   MOV.L       @R15+,R14























































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:56  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:       56



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               0000015A Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 0000015A Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           15
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           2
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            27






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk5AF8.tmp 

