SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:58  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\expsin.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        expsin.c     1    // Do the exponential sine function.
        expsin.c     2    
        expsin.c     3    #include "stdafx.h"
        expsin.c     4    #include "defs.h"
        expsin.c     5    
        expsin.c     6    void
        expsin.c     7    eval_expsin(void)
P   00000000              _eval_expsin:                    ; function: eval_expsin
                                                           ; frame size=8
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 4F22                   STS.L       PR,@-R15
        expsin.c     8    {
        expsin.c     9            push(cadr(p1));
    00000004 DE36                   MOV.L       L1066+2,R14; _p1
    00000006 64E2                   MOV.L       @R14,R4
    00000008 8448                   MOV.B       @(8,R4),R0
    0000000A 2008                   TST         R0,R0
    0000000C 8B02                   BF          L1061
    0000000E 64E2                   MOV.L       @R14,R4
    00000010 A004                   BRA         L1063
    00000012 5441                   MOV.L       @(4,R4),R4
    00000014              L1061:                            
    00000014 9363                   MOV.W       L1066,R3   ; H'0570
    00000016 D233                   MOV.L       L1066+6,R2 ; _symtab
    00000018 6422                   MOV.L       @R2,R4
    0000001A 343C                   ADD         R3,R4
    0000001C              L1063:                            
    0000001C 8448                   MOV.B       @(8,R4),R0
    0000001E 2008                   TST         R0,R0
    00000020 8B0C                   BF          L1060
    00000022 64E2                   MOV.L       @R14,R4
    00000024 8448                   MOV.B       @(8,R4),R0
    00000026 2008                   TST         R0,R0
    00000028 8B02                   BF          L1062
    0000002A 64E2                   MOV.L       @R14,R4
    0000002C A004                   BRA         L1064
    0000002E 5441                   MOV.L       @(4,R4),R4
    00000030              L1062:                            
    00000030 9355                   MOV.W       L1066,R3   ; H'0570
    00000032 D22C                   MOV.L       L1066+6,R2 ; _symtab
    00000034 6422                   MOV.L       @R2,R4
    00000036 343C                   ADD         R3,R4
    00000038              L1064:                            
    00000038 A004                   BRA         L1065
    0000003A 6442                   MOV.L       @R4,R4
    0000003C              L1060:                            
    0000003C 934F                   MOV.W       L1066,R3   ; H'0570
    0000003E D229                   MOV.L       L1066+6,R2 ; _symtab
    00000040 6422                   MOV.L       @R2,R4
    00000042 343C                   ADD         R3,R4
    00000044              L1065:                            
    00000044 D328                   MOV.L       L1066+10,R3; _push
    00000046 430B                   JSR         @R3
    00000048 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:58  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        expsin.c    10            eval();
    0000004A D228                   MOV.L       L1066+14,R2; _eval
    0000004C 420B                   JSR         @R2
    0000004E 0009                   NOP
        expsin.c    11            expsin();
    00000050 4F26                   LDS.L       @R15+,PR
    00000052 6EF6                   MOV.L       @R15+,R14
        expsin.c    12    }
        expsin.c    13    
        expsin.c    14    void
        expsin.c    15    expsin(void)
    00000054              _expsin:                         ; function: expsin
                                                           ; frame size=20
    00000054 2FE6                   MOV.L       R14,@-R15
    00000056 2FD6                   MOV.L       R13,@-R15
    00000058 2FC6                   MOV.L       R12,@-R15
    0000005A 2FB6                   MOV.L       R11,@-R15
    0000005C 4F22                   STS.L       PR,@-R15
        expsin.c    16    {
        expsin.c    17            save();
    0000005E D324                   MOV.L       L1066+18,R3; _save
    00000060 430B                   JSR         @R3
    00000062 0009                   NOP
        expsin.c    18    
        expsin.c    19            p1 = pop();
    00000064 DB1E                   MOV.L       L1066+2,R11; _p1
    00000066 D223                   MOV.L       L1066+22,R2; _pop
    00000068 420B                   JSR         @R2
    0000006A 0009                   NOP
    0000006C 2B02                   MOV.L       R0,@R11
        expsin.c    20    
        expsin.c    21            push(imaginaryunit);
    0000006E DC22                   MOV.L       L1066+26,R12; _imaginaryunit
    00000070 DE1D                   MOV.L       L1066+10,R14; _push
    00000072 4E0B                   JSR         @R14
    00000074 64C2                   MOV.L       @R12,R4
        expsin.c    22            push(p1);
    00000076 4E0B                   JSR         @R14
    00000078 64B2                   MOV.L       @R11,R4
        expsin.c    23            multiply();
    0000007A DD20                   MOV.L       L1066+30,R13; _multiply
    0000007C 4D0B                   JSR         @R13
    0000007E 0009                   NOP
        expsin.c    24            exponential();
    00000080 D31F                   MOV.L       L1066+34,R3; _exponential
    00000082 430B                   JSR         @R3
    00000084 0009                   NOP
        expsin.c    25            push(imaginaryunit);
    00000086 4E0B                   JSR         @R14
    00000088 64C2                   MOV.L       @R12,R4
        expsin.c    26            divide();
    0000008A D21E                   MOV.L       L1066+38,R2; _divide
    0000008C 420B                   JSR         @R2
    0000008E 0009                   NOP
        expsin.c    27            push_rational(1, 2);
    00000090 D31D                   MOV.L       L1066+42,R3; _push_rational
    00000092 E502                   MOV         #2,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:58  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000094 430B                   JSR         @R3
    00000096 E401                   MOV         #1,R4
        expsin.c    28            multiply();
    00000098 4D0B                   JSR         @R13
    0000009A 0009                   NOP
        expsin.c    29    
        expsin.c    30            push(imaginaryunit);
    0000009C 4E0B                   JSR         @R14
    0000009E 64C2                   MOV.L       @R12,R4
        expsin.c    31            negate();
    000000A0 D21A                   MOV.L       L1066+46,R2; _negate
    000000A2 420B                   JSR         @R2
    000000A4 0009                   NOP
        expsin.c    32            push(p1);
    000000A6 4E0B                   JSR         @R14
    000000A8 64B2                   MOV.L       @R11,R4
        expsin.c    33            multiply();
    000000AA 4D0B                   JSR         @R13
    000000AC 0009                   NOP
        expsin.c    34            exponential();
    000000AE D314                   MOV.L       L1066+34,R3; _exponential
    000000B0 430B                   JSR         @R3
    000000B2 0009                   NOP
        expsin.c    35            push(imaginaryunit);
    000000B4 4E0B                   JSR         @R14
    000000B6 64C2                   MOV.L       @R12,R4
        expsin.c    36            divide();
    000000B8 D212                   MOV.L       L1066+38,R2; _divide
    000000BA 420B                   JSR         @R2
    000000BC 0009                   NOP
        expsin.c    37            push_rational(1, 2);
    000000BE E502                   MOV         #2,R5
    000000C0 D311                   MOV.L       L1066+42,R3; _push_rational
    000000C2 430B                   JSR         @R3
    000000C4 E401                   MOV         #1,R4
        expsin.c    38            multiply();
    000000C6 4D0B                   JSR         @R13
    000000C8 0009                   NOP
        expsin.c    39    
        expsin.c    40            subtract();
    000000CA D211                   MOV.L       L1066+50,R2; _subtract
    000000CC 420B                   JSR         @R2
    000000CE 0009                   NOP
        expsin.c    41    
        expsin.c    42            restore();
    000000D0 4F26                   LDS.L       @R15+,PR
    000000D2 6BF6                   MOV.L       @R15+,R11
    000000D4 D30F                   MOV.L       L1066+54,R3; _restore
    000000D6 6CF6                   MOV.L       @R15+,R12
    000000D8 6DF6                   MOV.L       @R15+,R13
    000000DA 432B                   JMP         @R3
    000000DC 6EF6                   MOV.L       @R15+,R14
    000000DE              L1066:                            
    000000DE 0570                   .DATA.W     H'0570
    000000E0 <00000000>             .DATA.L     _p1
    000000E4 <00000000>             .DATA.L     _symtab
    000000E8 <00000000>             .DATA.L     _push




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:58  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000EC <00000000>             .DATA.L     _eval
    000000F0 <00000000>             .DATA.L     _save
    000000F4 <00000000>             .DATA.L     _pop
    000000F8 <00000000>             .DATA.L     _imaginaryunit
    000000FC <00000000>             .DATA.L     _multiply
    00000100 <00000000>             .DATA.L     _exponential
    00000104 <00000000>             .DATA.L     _divide
    00000108 <00000000>             .DATA.L     _push_rational
    0000010C <00000000>             .DATA.L     _negate
    00000110 <00000000>             .DATA.L     _subtract
    00000114 <00000000>             .DATA.L     _restore
        expsin.c    43    }

















































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:58  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:       43



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000118 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000118 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           14
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           2
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            23






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk6115.tmp 

