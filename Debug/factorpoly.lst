SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\factorpoly.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      factorpoly     1    // Factor a polynomial
      factorpoly     2    
      factorpoly     3    #include "stdafx.h"
      factorpoly     4    #include "defs.h"
      factorpoly     5    
      factorpoly     6    static void rationalize_coefficients(int);
      factorpoly     7    static int get_factor(void);
      factorpoly     8    static void evalpoly(void);
      factorpoly     9    static void yydivpoly(void);
      factorpoly    10    
      factorpoly    11    static int expo;
      factorpoly    12    static U **polycoeff;
      factorpoly    13    
      factorpoly    14    #define POLY p1
      factorpoly    15    #define X p2
      factorpoly    16    #define Z p3
      factorpoly    17    #define A p4
      factorpoly    18    #define B p5
      factorpoly    19    #define Q p6
      factorpoly    20    #define RESULT p7
      factorpoly    21    #define FACTOR p8
      factorpoly    22    
      factorpoly    23    void
      factorpoly    24    factorpoly(void)
P   00000000              _factorpoly:                     ; function: factorpoly
                                                           ; frame size=16
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 4F22                   STS.L       PR,@-R15
      factorpoly    25    {
      factorpoly    26            save();
    00000008 D360                   MOV.L       L1177,R3   ; _save
    0000000A 430B                   JSR         @R3
    0000000C 0009                   NOP
      factorpoly    27    
      factorpoly    28            p2 = pop();
    0000000E DE60                   MOV.L       L1177+4,R14; _p2
    00000010 D260                   MOV.L       L1177+8,R2 ; _pop
    00000012 420B                   JSR         @R2
    00000014 0009                   NOP
      factorpoly    29            p1 = pop();
    00000016 DD60                   MOV.L       L1177+12,R13; _p1
    00000018 D35E                   MOV.L       L1177+8,R3 ; _pop
    0000001A 430B                   JSR         @R3
    0000001C 2E02                   MOV.L       R0,@R14
    0000001E 2D02                   MOV.L       R0,@R13
      factorpoly    30    
      factorpoly    31            if (!find(p1, p2)) {
    00000020 DC5E                   MOV.L       L1177+16,R12; _push
    00000022 65E2                   MOV.L       @R14,R5
    00000024 D25E                   MOV.L       L1177+20,R2; _find
    00000026 420B                   JSR         @R2
    00000028 6403                   MOV         R0,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000002A 2008                   TST         R0,R0
    0000002C 890A                   BT          L1112
      factorpoly    32                    push(p1);
      factorpoly    33                    restore();
      factorpoly    34                    return;
      factorpoly    35            }
      factorpoly    36    
      factorpoly    37            if (!ispoly(p1, p2)) {
    0000002E 65E2                   MOV.L       @R14,R5
    00000030 D35C                   MOV.L       L1177+24,R3; _ispoly
    00000032 430B                   JSR         @R3
    00000034 64D2                   MOV.L       @R13,R4
    00000036 2008                   TST         R0,R0
    00000038 8904                   BT          L1112
      factorpoly    38                    push(p1);
      factorpoly    39                    restore();
      factorpoly    40                    return;
      factorpoly    41            }
      factorpoly    42    
      factorpoly    43            if (!issymbol(p2)) {
    0000003A 60E2                   MOV.L       @R14,R0
    0000003C 8408                   MOV.B       @(8,R0),R0
    0000003E 600C                   EXTU.B      R0,R0
    00000040 8805                   CMP/EQ      #5,R0
    00000042 8903                   BT          L1134
    00000044              L1112:
      factorpoly    44                    push(p1);
    00000044 4C0B                   JSR         @R12
    00000046 64D2                   MOV.L       @R13,R4
    00000048 A006                   BRA         L1115
    0000004A 0009                   NOP
    0000004C              L1134:                            
      factorpoly    45                    restore();
      factorpoly    46                    return;
      factorpoly    47            }
      factorpoly    48    
      factorpoly    49            push(p1);
    0000004C 4C0B                   JSR         @R12
    0000004E 64D2                   MOV.L       @R13,R4
      factorpoly    50            push(p2);
    00000050 4C0B                   JSR         @R12
    00000052 64E2                   MOV.L       @R14,R4
      factorpoly    51            yyfactorpoly();
    00000054 B006                   BSR         _yyfactorpoly
    00000056 0009                   NOP
    00000058              L1115:
      factorpoly    52    
      factorpoly    53            restore();
    00000058 4F26                   LDS.L       @R15+,PR
    0000005A 6CF6                   MOV.L       @R15+,R12
    0000005C D252                   MOV.L       L1177+28,R2; _restore
    0000005E 6DF6                   MOV.L       @R15+,R13
    00000060 422B                   JMP         @R2
    00000062 6EF6                   MOV.L       @R15+,R14
      factorpoly    54    }
      factorpoly    55    
      factorpoly    56    //-----------------------------------------------------------------------------




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      factorpoly    57    //
      factorpoly    58    //      Input:          tos-2           true polynomial
      factorpoly    59    //
      factorpoly    60    //                      tos-1           free variable
      factorpoly    61    //
      factorpoly    62    //      Output:         factored polynomial on stack
      factorpoly    63    //
      factorpoly    64    //-----------------------------------------------------------------------------
      factorpoly    65    
      factorpoly    66    void
      factorpoly    67    yyfactorpoly(void)
    00000064              _yyfactorpoly:                   ; function: yyfactorpoly
                                                           ; frame size=36
    00000064 2FE6                   MOV.L       R14,@-R15
    00000066 2FD6                   MOV.L       R13,@-R15
    00000068 2FC6                   MOV.L       R12,@-R15
    0000006A 2FB6                   MOV.L       R11,@-R15
    0000006C 2FA6                   MOV.L       R10,@-R15
    0000006E 2F96                   MOV.L       R9,@-R15
    00000070 2F86                   MOV.L       R8,@-R15
    00000072 4F22                   STS.L       PR,@-R15
      factorpoly    68    {
      factorpoly    69            int h, i;
      factorpoly    70    
      factorpoly    71            save();
    00000074 D345                   MOV.L       L1177,R3   ; _save
    00000076 7FFC                   ADD         #-4,R15
    00000078 430B                   JSR         @R3
    0000007A 0009                   NOP
      factorpoly    72    
      factorpoly    73            X = pop();
    0000007C DC45                   MOV.L       L1177+8,R12; _pop
    0000007E 4C0B                   JSR         @R12
    00000080 0009                   NOP
    00000082 D243                   MOV.L       L1177+4,R2 ; _p2
      factorpoly    74            POLY = pop();
    00000084 D844                   MOV.L       L1177+12,R8; _p1
    00000086 4C0B                   JSR         @R12
    00000088 2202                   MOV.L       R0,@R2
    0000008A 2802                   MOV.L       R0,@R8
      factorpoly    75    
      factorpoly    76            h = tos;
    0000008C D247                   MOV.L       L1177+32,R2; _tos
    0000008E 6322                   MOV.L       @R2,R3
    00000090 2F32                   MOV.L       R3,@R15
      factorpoly    77    
      factorpoly    78            if (isfloating(POLY))
    00000092 D347                   MOV.L       L1177+36,R3; _isfloating
    00000094 430B                   JSR         @R3
    00000096 6482                   MOV.L       @R8,R4
    00000098 2008                   TST         R0,R0
    0000009A 8903                   BT          L1135
      factorpoly    79                    stop("floating point numbers in polynomial");
    0000009C D445                   MOV.L       L1177+40,R4; L1071
    0000009E D346                   MOV.L       L1177+44,R3; _stop
    000000A0 430B                   JSR         @R3
    000000A2 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000A4              L1135:                            
      factorpoly    80    
      factorpoly    81            polycoeff = stack + tos;
    000000A4 D341                   MOV.L       L1177+32,R3; _tos
    000000A6 6232                   MOV.L       @R3,R2
    000000A8 D044                   MOV.L       L1177+48,R0; _stack
    000000AA 4208                   SHLL2       R2
    000000AC D344                   MOV.L       L1177+52,R3; __$polycoeff
    000000AE 6102                   MOV.L       @R0,R1
      factorpoly    82    
      factorpoly    83            push(POLY);
    000000B0 DE3A                   MOV.L       L1177+16,R14; _push
    000000B2 321C                   ADD         R1,R2
    000000B4 2322                   MOV.L       R2,@R3
    000000B6 4E0B                   JSR         @R14
    000000B8 6482                   MOV.L       @R8,R4
      factorpoly    84            push(X);
    000000BA D235                   MOV.L       L1177+4,R2 ; _p2
    000000BC 4E0B                   JSR         @R14
    000000BE 6422                   MOV.L       @R2,R4
      factorpoly    85            expo = coeff() - 1;
    000000C0 DD40                   MOV.L       L1177+56,R13; __$expo
    000000C2 D341                   MOV.L       L1177+60,R3; _coeff
    000000C4 430B                   JSR         @R3
    000000C6 0009                   NOP
    000000C8 70FF                   ADD         #-1,R0
    000000CA 2D02                   MOV.L       R0,@R13
      factorpoly    86    
      factorpoly    87            rationalize_coefficients(h);
    000000CC B0FA                   BSR         __$rationalize_coefficients
    000000CE 64F2                   MOV.L       @R15,R4
    000000D0 D93E                   MOV.L       L1177+64,R9; _p8
    000000D2 DA3F                   MOV.L       L1177+68,R10; _push_integer
    000000D4 DB3F                   MOV.L       L1177+72,R11; _p7
      factorpoly    88    
      factorpoly    89            // for univariate polynomials we could do expo > 1
      factorpoly    90    
      factorpoly    91            while (expo > 0) {
    000000D6 A051                   BRA         L1136
    000000D8 0009                   NOP
    000000DA              L1137:                            
      factorpoly    92    
      factorpoly    93                    if (iszero(polycoeff[0])) {
    000000DA D339                   MOV.L       L1177+52,R3; __$polycoeff
    000000DC D23E                   MOV.L       L1177+76,R2; _iszero
    000000DE 6432                   MOV.L       @R3,R4
    000000E0 420B                   JSR         @R2
    000000E2 6442                   MOV.L       @R4,R4
    000000E4 2008                   TST         R0,R0
    000000E6 890C                   BT          L1138
      factorpoly    94                            push_integer(1);
    000000E8 4A0B                   JSR         @R10
    000000EA E401                   MOV         #1,R4
      factorpoly    95                            A = pop();
    000000EC 4C0B                   JSR         @R12
    000000EE 0009                   NOP
    000000F0 D23A                   MOV.L       L1177+80,R2; _p4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000F2 2202                   MOV.L       R0,@R2
      factorpoly    96                            push_integer(0);
    000000F4 4A0B                   JSR         @R10
    000000F6 E400                   MOV         #0,R4
      factorpoly    97                            B = pop();
    000000F8 4C0B                   JSR         @R12
    000000FA 0009                   NOP
    000000FC D338                   MOV.L       L1177+84,R3; _p5
    000000FE A008                   BRA         L1139
    00000100 2302                   MOV.L       R0,@R3
    00000102              L1138:                            
      factorpoly    98                    } else if (get_factor() == 0) {
    00000102 B131                   BSR         __$get_factor
    00000104 0009                   NOP
    00000106 2008                   TST         R0,R0
    00000108 8B03                   BF          L1139
      factorpoly    99                            if (verbosing)
    0000010A D236                   MOV.L       L1177+88,R2; _verbosing
    0000010C 6122                   MOV.L       @R2,R1
    0000010E 2118                   TST         R1,R1
    00000110 8B37                   BF          L1142
    00000112              L1139:                            
      factorpoly   100                                    //!!!////printf("no factor found\n");
      factorpoly   101                            break;
      factorpoly   102                    }
      factorpoly   103    
      factorpoly   104                    push(A);
    00000112 D232                   MOV.L       L1177+80,R2; _p4
    00000114 4E0B                   JSR         @R14
    00000116 6422                   MOV.L       @R2,R4
      factorpoly   105                    push(X);
    00000118 D31D                   MOV.L       L1177+4,R3 ; _p2
    0000011A 4E0B                   JSR         @R14
    0000011C 6432                   MOV.L       @R3,R4
      factorpoly   106                    multiply();
    0000011E D232                   MOV.L       L1177+92,R2; _multiply
    00000120 420B                   JSR         @R2
    00000122 0009                   NOP
      factorpoly   107                    push(B);
    00000124 D12E                   MOV.L       L1177+84,R1; _p5
    00000126 4E0B                   JSR         @R14
    00000128 6412                   MOV.L       @R1,R4
      factorpoly   108                    add();
    0000012A D330                   MOV.L       L1177+96,R3; _add
    0000012C 430B                   JSR         @R3
    0000012E 0009                   NOP
      factorpoly   109                    FACTOR = pop();
    00000130 4C0B                   JSR         @R12
    00000132 0009                   NOP
    00000134 2902                   MOV.L       R0,@R9
      factorpoly   110    
      factorpoly   111                    if (verbosing) {
    00000136 D32B                   MOV.L       L1177+88,R3; _verbosing
    00000138 6232                   MOV.L       @R3,R2
    0000013A 2228                   TST         R2,R2
    0000013C 8902                   BT          L1143
      factorpoly   112                            //////printf("success\nFACTOR=");




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      factorpoly   113                            print(FACTOR);
    0000013E D22C                   MOV.L       L1177+100,R2; _print
    00000140 420B                   JSR         @R2
    00000142 6492                   MOV.L       @R9,R4
    00000144              L1143:                            
      factorpoly   114                            //////printf("\n");
      factorpoly   115                    }
      factorpoly   116    
      factorpoly   117                    // factor out negative sign (not req'd because A > 1)
      factorpoly   118    #if 0
      factorpoly   119                    if (isnegativeterm(A)) {
      factorpoly   120                            push(FACTOR);
      factorpoly   121                            negate();
      factorpoly   122                            FACTOR = pop();
      factorpoly   123                            push(RESULT);
      factorpoly   124                            negate_noexpand();
      factorpoly   125                            RESULT = pop();
      factorpoly   126                    }
      factorpoly   127    #endif
      factorpoly   128                    push(RESULT);
    00000144 4E0B                   JSR         @R14
    00000146 64B2                   MOV.L       @R11,R4
      factorpoly   129                    push(FACTOR);
    00000148 4E0B                   JSR         @R14
    0000014A 6492                   MOV.L       @R9,R4
      factorpoly   130                    multiply_noexpand();
    0000014C D329                   MOV.L       L1177+104,R3; _multiply_noexpand
    0000014E 430B                   JSR         @R3
    00000150 0009                   NOP
      factorpoly   131                    RESULT = pop();
    00000152 4C0B                   JSR         @R12
    00000154 0009                   NOP
      factorpoly   132    
      factorpoly   133                    yydivpoly();
    00000156 B23A                   BSR         __$yydivpoly
    00000158 2B02                   MOV.L       R0,@R11
      factorpoly   134    
      factorpoly   135                    while (expo && iszero(polycoeff[expo]))
    0000015A A003                   BRA         L1144
    0000015C 0009                   NOP
    0000015E              L1145:                            
      factorpoly   136                            expo--;
    0000015E 62D2                   MOV.L       @R13,R2
    00000160 72FF                   ADD         #-1,R2
    00000162 2D22                   MOV.L       R2,@R13
    00000164              L1144:                            
    00000164 63D2                   MOV.L       @R13,R3
    00000166 2338                   TST         R3,R3
    00000168 8908                   BT          L1136
    0000016A 64D2                   MOV.L       @R13,R4
    0000016C D314                   MOV.L       L1177+52,R3; __$polycoeff
    0000016E 4408                   SHLL2       R4
    00000170 D219                   MOV.L       L1177+76,R2; _iszero
    00000172 6032                   MOV.L       @R3,R0
    00000174 420B                   JSR         @R2
    00000176 044E                   MOV.L       @(R0,R4),R4
    00000178 2008                   TST         R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000017A 8BF0                   BF          L1145
    0000017C              L1136:                            
    0000017C 62D2                   MOV.L       @R13,R2
    0000017E 4215                   CMP/PL      R2
    00000180 89AB                   BT          L1137
    00000182              L1142:                            
      factorpoly   137            }
      factorpoly   138    
      factorpoly   139            // unfactored polynomial
      factorpoly   140    
      factorpoly   141            push(zero);
    00000182 D11D                   MOV.L       L1177+108,R1; _zero
    00000184 4E0B                   JSR         @R14
    00000186 6412                   MOV.L       @R1,R4
      factorpoly   142            for (i = 0; i <= expo; i++) {
    00000188 A04D                   BRA         L1147
    0000018A E900                   MOV         #0,R9
    0000018C              L1177:                            
    0000018C <00000000>             .DATA.L     _save
    00000190 <00000000>             .DATA.L     _p2
    00000194 <00000000>             .DATA.L     _pop
    00000198 <00000000>             .DATA.L     _p1
    0000019C <00000000>             .DATA.L     _push
    000001A0 <00000000>             .DATA.L     _find
    000001A4 <00000000>             .DATA.L     _ispoly
    000001A8 <00000000>             .DATA.L     _restore
    000001AC <00000000>             .DATA.L     _tos
    000001B0 <00000000>             .DATA.L     _isfloating
    000001B4 <00000000>             .DATA.L     L1071
    000001B8 <00000000>             .DATA.L     _stop
    000001BC <00000000>             .DATA.L     _stack
    000001C0 <00000000>             .DATA.L     __$polycoeff
    000001C4 <00000000>             .DATA.L     __$expo
    000001C8 <00000000>             .DATA.L     _coeff
    000001CC <00000000>             .DATA.L     _p8
    000001D0 <00000000>             .DATA.L     _push_integer
    000001D4 <00000000>             .DATA.L     _p7
    000001D8 <00000000>             .DATA.L     _iszero
    000001DC <00000000>             .DATA.L     _p4
    000001E0 <00000000>             .DATA.L     _p5
    000001E4 <00000000>             .DATA.L     _verbosing
    000001E8 <00000000>             .DATA.L     _multiply
    000001EC <00000000>             .DATA.L     _add
    000001F0 <00000000>             .DATA.L     _print
    000001F4 <00000000>             .DATA.L     _multiply_noexpand
    000001F8 <00000000>             .DATA.L     _zero
    000001FC              L1148:                            
      factorpoly   143                    push(polycoeff[i]);
    000001FC D396                   MOV.L       L1178+2,R3 ; __$polycoeff
    000001FE 6493                   MOV         R9,R4
    00000200 6032                   MOV.L       @R3,R0
    00000202 4408                   SHLL2       R4
    00000204 4E0B                   JSR         @R14
    00000206 044E                   MOV.L       @(R0,R4),R4
      factorpoly   144                    push(X);
    00000208 D294                   MOV.L       L1178+6,R2 ; _p2
    0000020A 4E0B                   JSR         @R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000020C 6422                   MOV.L       @R2,R4
      factorpoly   145                    push_integer(i);
    0000020E 4A0B                   JSR         @R10
    00000210 6493                   MOV         R9,R4
      factorpoly   146                    power();
    00000212 D393                   MOV.L       L1178+10,R3; _power
    00000214 430B                   JSR         @R3
    00000216 0009                   NOP
      factorpoly   147                    multiply();
    00000218 D292                   MOV.L       L1178+14,R2; _multiply
    0000021A 420B                   JSR         @R2
    0000021C 0009                   NOP
      factorpoly   148                    add();
    0000021E D392                   MOV.L       L1178+18,R3; _add
    00000220 430B                   JSR         @R3
    00000222 0009                   NOP
    00000224 7901                   ADD         #1,R9
    00000226              L1147:                            
    00000226 62D2                   MOV.L       @R13,R2
    00000228 3927                   CMP/GT      R2,R9
    0000022A 8BE7                   BF          L1148
      factorpoly   149            }
      factorpoly   150            POLY = pop();
    0000022C 4C0B                   JSR         @R12
    0000022E 0009                   NOP
    00000230 2802                   MOV.L       R0,@R8
      factorpoly   151    
      factorpoly   152            if (verbosing) {
    00000232 D38E                   MOV.L       L1178+22,R3; _verbosing
    00000234 6232                   MOV.L       @R3,R2
    00000236 2228                   TST         R2,R2
    00000238 8902                   BT          L1149
      factorpoly   153                    //////printf("POLY=");
      factorpoly   154                    print(POLY);
    0000023A D28D                   MOV.L       L1178+26,R2; _print
    0000023C 420B                   JSR         @R2
    0000023E 6482                   MOV.L       @R8,R4
    00000240              L1149:                            
      factorpoly   155                    //////printf("\n");
      factorpoly   156            }
      factorpoly   157    
      factorpoly   158            // factor out negative sign
      factorpoly   159    
      factorpoly   160            if (expo > 0 && isnegativeterm(polycoeff[expo])) {
    00000240 63D2                   MOV.L       @R13,R3
    00000242 4315                   CMP/PL      R3
    00000244 8B18                   BF          L1150
    00000246 64D2                   MOV.L       @R13,R4
    00000248 D383                   MOV.L       L1178+2,R3 ; __$polycoeff
    0000024A 4408                   SHLL2       R4
    0000024C D289                   MOV.L       L1178+30,R2; _isnegativeterm
    0000024E 6032                   MOV.L       @R3,R0
    00000250 420B                   JSR         @R2
    00000252 044E                   MOV.L       @(R0,R4),R4
    00000254 2008                   TST         R0,R0
    00000256 890F                   BT          L1150
      factorpoly   161                    push(POLY);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000258 4E0B                   JSR         @R14
    0000025A 6482                   MOV.L       @R8,R4
      factorpoly   162                    negate();
    0000025C D286                   MOV.L       L1178+34,R2; _negate
    0000025E 420B                   JSR         @R2
    00000260 0009                   NOP
      factorpoly   163                    POLY = pop();
    00000262 4C0B                   JSR         @R12
    00000264 0009                   NOP
    00000266 2802                   MOV.L       R0,@R8
      factorpoly   164                    push(RESULT);
    00000268 4E0B                   JSR         @R14
    0000026A 64B2                   MOV.L       @R11,R4
      factorpoly   165                    negate_noexpand();
    0000026C D383                   MOV.L       L1178+38,R3; _negate_noexpand
    0000026E 430B                   JSR         @R3
    00000270 0009                   NOP
      factorpoly   166                    RESULT = pop();
    00000272 4C0B                   JSR         @R12
    00000274 0009                   NOP
    00000276 2B02                   MOV.L       R0,@R11
    00000278              L1150:                            
      factorpoly   167            }
      factorpoly   168    
      factorpoly   169            push(RESULT);
    00000278 4E0B                   JSR         @R14
    0000027A 64B2                   MOV.L       @R11,R4
      factorpoly   170            push(POLY);
    0000027C 4E0B                   JSR         @R14
    0000027E 6482                   MOV.L       @R8,R4
      factorpoly   171            multiply_noexpand();
    00000280 D27F                   MOV.L       L1178+42,R2; _multiply_noexpand
    00000282 420B                   JSR         @R2
    00000284 0009                   NOP
      factorpoly   172            RESULT = pop();
    00000286 4C0B                   JSR         @R12
    00000288 0009                   NOP
    0000028A 2B02                   MOV.L       R0,@R11
      factorpoly   173    
      factorpoly   174            if (verbosing) {
    0000028C D277                   MOV.L       L1178+22,R2; _verbosing
    0000028E 6322                   MOV.L       @R2,R3
    00000290 2338                   TST         R3,R3
    00000292 8902                   BT          L1151
      factorpoly   175                    //////printf("RESULT=");
      factorpoly   176                    print(RESULT);
    00000294 D376                   MOV.L       L1178+26,R3; _print
    00000296 430B                   JSR         @R3
    00000298 64B2                   MOV.L       @R11,R4
    0000029A              L1151:                            
      factorpoly   177                    //////printf("\n");
      factorpoly   178            }
      factorpoly   179    
      factorpoly   180            stack[h] = RESULT;
    0000029A 62F2                   MOV.L       @R15,R2
    0000029C D379                   MOV.L       L1178+46,R3; _stack
    0000029E 4208                   SHLL2       R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002A0 61B2                   MOV.L       @R11,R1
    000002A2 6032                   MOV.L       @R3,R0
      factorpoly   181    
      factorpoly   182            tos = h + 1;
      factorpoly   183    
      factorpoly   184            restore();
    000002A4 D379                   MOV.L       L1178+54,R3; _restore
    000002A6 0216                   MOV.L       R1,@(R0,R2)
    000002A8 62F2                   MOV.L       @R15,R2
    000002AA 7201                   ADD         #1,R2
    000002AC D176                   MOV.L       L1178+50,R1; _tos
    000002AE 2122                   MOV.L       R2,@R1
    000002B0 7F04                   ADD         #4,R15
    000002B2 4F26                   LDS.L       @R15+,PR
    000002B4 68F6                   MOV.L       @R15+,R8
    000002B6 69F6                   MOV.L       @R15+,R9
    000002B8 6AF6                   MOV.L       @R15+,R10
    000002BA 6BF6                   MOV.L       @R15+,R11
    000002BC 6CF6                   MOV.L       @R15+,R12
    000002BE 6DF6                   MOV.L       @R15+,R13
    000002C0 432B                   JMP         @R3
    000002C2 6EF6                   MOV.L       @R15+,R14
      factorpoly   185    }
      factorpoly   186    
      factorpoly   187    static void
      factorpoly   188    rationalize_coefficients(int h)
    000002C4              __$rationalize_coefficients:     ; function: rationalize_coefficients
                                                           ; frame size=40
    000002C4 2FE6                   MOV.L       R14,@-R15
    000002C6 2FD6                   MOV.L       R13,@-R15
    000002C8 2FC6                   MOV.L       R12,@-R15
    000002CA 2FB6                   MOV.L       R11,@-R15
    000002CC 2FA6                   MOV.L       R10,@-R15
    000002CE 2F96                   MOV.L       R9,@-R15
    000002D0 2F86                   MOV.L       R8,@-R15
    000002D2 4F22                   STS.L       PR,@-R15
      factorpoly   189    {
      factorpoly   190            int i;
      factorpoly   191    
      factorpoly   192            // LCM of all polynomial coefficients
      factorpoly   193    
      factorpoly   194            RESULT = one;
    000002D4 DD6E                   MOV.L       L1178+58,R13; _p7
    000002D6 7FFC                   ADD         #-4,R15
    000002D8 D26E                   MOV.L       L1178+62,R2; _one
    000002DA 2F42                   MOV.L       R4,@R15
    000002DC 6322                   MOV.L       @R2,R3
    000002DE 2D32                   MOV.L       R3,@R13
      factorpoly   195            for (i = h; i < tos; i++) {
    000002E0 68F2                   MOV.L       @R15,R8
    000002E2 D969                   MOV.L       L1178+50,R9; _tos
    000002E4 DB6C                   MOV.L       L1178+66,R11; _pop
    000002E6 6A83                   MOV         R8,R10
    000002E8 DC66                   MOV.L       L1178+46,R12; _stack
    000002EA DE6C                   MOV.L       L1178+70,R14; _push
    000002EC A010                   BRA         L1152
    000002EE 4A08                   SHLL2       R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002F0              L1153:                            
      factorpoly   196                    push(stack[i]);
    000002F0 60C2                   MOV.L       @R12,R0
    000002F2 4E0B                   JSR         @R14
    000002F4 04AE                   MOV.L       @(R0,R10),R4
      factorpoly   197                    denominator();
    000002F6 D26A                   MOV.L       L1178+74,R2; _denominator
    000002F8 420B                   JSR         @R2
    000002FA 0009                   NOP
      factorpoly   198                    push(RESULT);
    000002FC 4E0B                   JSR         @R14
    000002FE 64D2                   MOV.L       @R13,R4
      factorpoly   199                    lcm();
    00000300 D368                   MOV.L       L1178+78,R3; _lcm
    00000302 430B                   JSR         @R3
    00000304 0009                   NOP
      factorpoly   200                    RESULT = pop();
    00000306 4B0B                   JSR         @R11
    00000308 0009                   NOP
    0000030A 7801                   ADD         #1,R8
    0000030C 2D02                   MOV.L       R0,@R13
    0000030E 7A04                   ADD         #4,R10
    00000310              L1152:                            
    00000310 6292                   MOV.L       @R9,R2
    00000312 3823                   CMP/GE      R2,R8
    00000314 8BEC                   BF          L1153
      factorpoly   201            }
      factorpoly   202    
      factorpoly   203            // multiply each coefficient by RESULT
      factorpoly   204    
      factorpoly   205            for (i = h; i < tos; i++) {
    00000316 68F2                   MOV.L       @R15,R8
    00000318 6A83                   MOV         R8,R10
    0000031A A010                   BRA         L1154
    0000031C 4A08                   SHLL2       R10
    0000031E              L1155:                            
      factorpoly   206                    push(RESULT);
    0000031E 4E0B                   JSR         @R14
    00000320 64D2                   MOV.L       @R13,R4
      factorpoly   207                    push(stack[i]);
    00000322 60C2                   MOV.L       @R12,R0
    00000324 4E0B                   JSR         @R14
    00000326 04AE                   MOV.L       @(R0,R10),R4
      factorpoly   208                    multiply();
    00000328 D24E                   MOV.L       L1178+14,R2; _multiply
    0000032A 420B                   JSR         @R2
    0000032C 0009                   NOP
      factorpoly   209                    stack[i] = pop();
    0000032E 60C2                   MOV.L       @R12,R0
    00000330 30AC                   ADD         R10,R0
    00000332 4B0B                   JSR         @R11
    00000334 2F06                   MOV.L       R0,@-R15
    00000336 7801                   ADD         #1,R8
    00000338 63F6                   MOV.L       @R15+,R3
    0000033A 7A04                   ADD         #4,R10
    0000033C 2302                   MOV.L       R0,@R3
    0000033E              L1154:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000033E 6292                   MOV.L       @R9,R2
    00000340 3823                   CMP/GE      R2,R8
    00000342 8BEC                   BF          L1155
      factorpoly   210            }
      factorpoly   211    
      factorpoly   212            // reciprocate RESULT
      factorpoly   213    
      factorpoly   214            push(RESULT);
    00000344 4E0B                   JSR         @R14
    00000346 64D2                   MOV.L       @R13,R4
      factorpoly   215            reciprocate();
    00000348 D257                   MOV.L       L1178+82,R2; _reciprocate
    0000034A 420B                   JSR         @R2
    0000034C 0009                   NOP
      factorpoly   216            RESULT = pop();
    0000034E 4B0B                   JSR         @R11
    00000350 0009                   NOP
    00000352 2D02                   MOV.L       R0,@R13
      factorpoly   217    }
    00000354 7F04                   ADD         #4,R15
    00000356 4F26                   LDS.L       @R15+,PR
    00000358 68F6                   MOV.L       @R15+,R8
    0000035A 69F6                   MOV.L       @R15+,R9
    0000035C 6AF6                   MOV.L       @R15+,R10
    0000035E 6BF6                   MOV.L       @R15+,R11
    00000360 6CF6                   MOV.L       @R15+,R12
    00000362 6DF6                   MOV.L       @R15+,R13
    00000364 000B                   RTS
    00000366 6EF6                   MOV.L       @R15+,R14
      factorpoly   218    
      factorpoly   219    static int
      factorpoly   220    get_factor(void)
    00000368              __$get_factor:                   ; function: get_factor
                                                           ; frame size=68
    00000368 2FE6                   MOV.L       R14,@-R15
    0000036A 2FD6                   MOV.L       R13,@-R15
    0000036C 2FC6                   MOV.L       R12,@-R15
    0000036E 2FB6                   MOV.L       R11,@-R15
    00000370 2FA6                   MOV.L       R10,@-R15
    00000372 2F96                   MOV.L       R9,@-R15
    00000374 2F86                   MOV.L       R8,@-R15
    00000376 4F22                   STS.L       PR,@-R15
      factorpoly   221    {
      factorpoly   222            int i, j, h;
      factorpoly   223            int a0, an, na0, nan;
      factorpoly   224    
      factorpoly   225            if (verbosing) {
    00000378 D94C                   MOV.L       L1178+86,R9; __$expo
    0000037A 7FDC                   ADD         #-36,R15
    0000037C DB36                   MOV.L       L1178+2,R11; __$polycoeff
    0000037E DA46                   MOV.L       L1178+66,R10; _pop
    00000380 DD46                   MOV.L       L1178+70,R13; _push
    00000382 DE3B                   MOV.L       L1178+26,R14; _print
    00000384 D239                   MOV.L       L1178+22,R2; _verbosing
    00000386 6322                   MOV.L       @R2,R3
    00000388 2338                   TST         R3,R3
    0000038A 8922                   BT          L1156




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      factorpoly   226                    push(zero);
    0000038C D348                   MOV.L       L1178+90,R3; _zero
    0000038E 4D0B                   JSR         @R13
    00000390 6432                   MOV.L       @R3,R4
    00000392 D835                   MOV.L       L1178+18,R8; _add
      factorpoly   227                    for (i = 0; i <= expo; i++) {
    00000394 A014                   BRA         L1157
    00000396 EC00                   MOV         #0,R12
    00000398              L1158:                            
      factorpoly   228                            push(polycoeff[i]);
    00000398 63B2                   MOV.L       @R11,R3
    0000039A 60C3                   MOV         R12,R0
    0000039C 4008                   SHLL2       R0
    0000039E 4D0B                   JSR         @R13
    000003A0 043E                   MOV.L       @(R0,R3),R4
      factorpoly   229                            push(X);
    000003A2 D22E                   MOV.L       L1178+6,R2 ; _p2
    000003A4 4D0B                   JSR         @R13
    000003A6 6422                   MOV.L       @R2,R4
      factorpoly   230                            push_integer(i);
    000003A8 D342                   MOV.L       L1178+94,R3; _push_integer
    000003AA 430B                   JSR         @R3
    000003AC 64C3                   MOV         R12,R4
      factorpoly   231                            power();
    000003AE D22C                   MOV.L       L1178+10,R2; _power
    000003B0 420B                   JSR         @R2
    000003B2 0009                   NOP
      factorpoly   232                            multiply();
    000003B4 D32B                   MOV.L       L1178+14,R3; _multiply
    000003B6 430B                   JSR         @R3
    000003B8 0009                   NOP
      factorpoly   233                            add();
    000003BA 480B                   JSR         @R8
    000003BC 0009                   NOP
    000003BE 7C01                   ADD         #1,R12
    000003C0              L1157:                            
    000003C0 6292                   MOV.L       @R9,R2
    000003C2 3C27                   CMP/GT      R2,R12
    000003C4 8BE8                   BF          L1158
      factorpoly   234                    }
      factorpoly   235                    POLY = pop();
    000003C6 4A0B                   JSR         @R10
    000003C8 0009                   NOP
    000003CA D13B                   MOV.L       L1178+98,R1; _p1
    000003CC 2102                   MOV.L       R0,@R1
      factorpoly   236                    //////printf("POLY=");
      factorpoly   237                    print(POLY);
    000003CE 4E0B                   JSR         @R14
    000003D0 6403                   MOV         R0,R4
    000003D2              L1156:                            
      factorpoly   238                    //////printf("\n");
      factorpoly   239            }
      factorpoly   240    
      factorpoly   241            h = tos;
    000003D2 D22D                   MOV.L       L1178+50,R2; _tos
    000003D4 6322                   MOV.L       @R2,R3
    000003D6 1F35                   MOV.L       R3,@(20,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      factorpoly   242    
      factorpoly   243            an = tos;
    000003D8 6122                   MOV.L       @R2,R1
    000003DA 1F12                   MOV.L       R1,@(8,R15)
      factorpoly   244            push(polycoeff[expo]);
    000003DC 6092                   MOV.L       @R9,R0
    000003DE 4008                   SHLL2       R0
    000003E0 63B2                   MOV.L       @R11,R3
    000003E2 4D0B                   JSR         @R13
    000003E4 043E                   MOV.L       @(R0,R3),R4
      factorpoly   245    
      factorpoly   246            divisors_onstack();
    000003E6 D235                   MOV.L       L1178+102,R2; _divisors_onstack
    000003E8 420B                   JSR         @R2
    000003EA 0009                   NOP
      factorpoly   247    
      factorpoly   248            nan = tos - an;
    000003EC 53F2                   MOV.L       @(8,R15),R3
    000003EE D126                   MOV.L       L1178+50,R1; _tos
    000003F0 6212                   MOV.L       @R1,R2
    000003F2 3238                   SUB         R3,R2
    000003F4 1F21                   MOV.L       R2,@(4,R15)
      factorpoly   249    
      factorpoly   250            a0 = tos;
    000003F6 6C12                   MOV.L       @R1,R12
      factorpoly   251            push(polycoeff[0]);
    000003F8 64B2                   MOV.L       @R11,R4
    000003FA 4D0B                   JSR         @R13
    000003FC 6442                   MOV.L       @R4,R4
      factorpoly   252            divisors_onstack();
    000003FE D32F                   MOV.L       L1178+102,R3; _divisors_onstack
    00000400 430B                   JSR         @R3
    00000402 0009                   NOP
      factorpoly   253            na0 = tos - a0;
    00000404 D320                   MOV.L       L1178+50,R3; _tos
    00000406 6232                   MOV.L       @R3,R2
    00000408 D018                   MOV.L       L1178+22,R0; _verbosing
    0000040A 32C8                   SUB         R12,R2
    0000040C 2F22                   MOV.L       R2,@R15
    0000040E 4C08                   SHLL2       R12
    00000410 1FC4                   MOV.L       R12,@(16,R15)
    00000412 6102                   MOV.L       @R0,R1
    00000414 2118                   TST         R1,R1
    00000416 891B                   BT          L1159
      factorpoly   254    
      factorpoly   255            if (verbosing) {
      factorpoly   256                    ////printf("divisors of base term");
      factorpoly   257                    for (i = 0; i < na0; i++) {
    00000418 EB00                   MOV         #0,R11
    0000041A 4215                   CMP/PL      R2
    0000041C 8F09                   BF/S        L1160
    0000041E 5CF4                   MOV.L       @(16,R15),R12
    00000420              L1161:                            
      factorpoly   258                            ////printf(", ");
      factorpoly   259                            print(stack[a0 + i]);
    00000420 D318                   MOV.L       L1178+46,R3; _stack
    00000422 6032                   MOV.L       @R3,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000424 4E0B                   JSR         @R14
    00000426 04CE                   MOV.L       @(R0,R12),R4
    00000428 62F2                   MOV.L       @R15,R2
    0000042A 7B01                   ADD         #1,R11
    0000042C 3B23                   CMP/GE      R2,R11
    0000042E 8FF7                   BF/S        L1161
    00000430 7C04                   ADD         #4,R12
    00000432              L1160:                            
      factorpoly   260                    }
      factorpoly   261                    ////printf("\n");
      factorpoly   262                    ////printf("divisors of leading term");
      factorpoly   263                    for (i = 0; i < nan; i++) {
    00000432 EB00                   MOV         #0,R11
    00000434 5CF2                   MOV.L       @(8,R15),R12
    00000436 53F1                   MOV.L       @(4,R15),R3
    00000438 4315                   CMP/PL      R3
    0000043A 8F09                   BF/S        L1159
    0000043C 4C08                   SHLL2       R12
    0000043E              L1163:                            
      factorpoly   264                            ////printf(", ");
      factorpoly   265                            print(stack[an + i]);
    0000043E D311                   MOV.L       L1178+46,R3; _stack
    00000440 6032                   MOV.L       @R3,R0
    00000442 4E0B                   JSR         @R14
    00000444 04CE                   MOV.L       @(R0,R12),R4
    00000446 7B01                   ADD         #1,R11
    00000448 52F1                   MOV.L       @(4,R15),R2
    0000044A 3B23                   CMP/GE      R2,R11
    0000044C 8FF7                   BF/S        L1163
    0000044E 7C04                   ADD         #4,R12
    00000450              L1159:                            
      factorpoly   266                    }
      factorpoly   267                    ////printf("\n");
      factorpoly   268            }
      factorpoly   269    
      factorpoly   270            // try roots
      factorpoly   271    
      factorpoly   272            for (i = 0; i < nan; i++) {
    00000450 E100                   MOV         #0,R1
    00000452 A0AA                   BRA         L1164
    00000454 1F13                   MOV.L       R1,@(12,R15)
    00000456              L1178:                            
    00000456 0000                   .DATA.W     0
    00000458 <00000000>             .DATA.L     __$polycoeff
    0000045C <00000000>             .DATA.L     _p2
    00000460 <00000000>             .DATA.L     _power
    00000464 <00000000>             .DATA.L     _multiply
    00000468 <00000000>             .DATA.L     _add
    0000046C <00000000>             .DATA.L     _verbosing
    00000470 <00000000>             .DATA.L     _print
    00000474 <00000000>             .DATA.L     _isnegativeterm
    00000478 <00000000>             .DATA.L     _negate
    0000047C <00000000>             .DATA.L     _negate_noexpand
    00000480 <00000000>             .DATA.L     _multiply_noexpand
    00000484 <00000000>             .DATA.L     _stack
    00000488 <00000000>             .DATA.L     _tos
    0000048C <00000000>             .DATA.L     _restore




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000490 <00000000>             .DATA.L     _p7
    00000494 <00000000>             .DATA.L     _one
    00000498 <00000000>             .DATA.L     _pop
    0000049C <00000000>             .DATA.L     _push
    000004A0 <00000000>             .DATA.L     _denominator
    000004A4 <00000000>             .DATA.L     _lcm
    000004A8 <00000000>             .DATA.L     _reciprocate
    000004AC <00000000>             .DATA.L     __$expo
    000004B0 <00000000>             .DATA.L     _zero
    000004B4 <00000000>             .DATA.L     _push_integer
    000004B8 <00000000>             .DATA.L     _p1
    000004BC <00000000>             .DATA.L     _divisors_onstack
    000004C0              L1165:                            
      factorpoly   273                    for (j = 0; j < na0; j++) {
    000004C0 E200                   MOV         #0,R2
    000004C2 1F26                   MOV.L       R2,@(24,R15)
    000004C4 53F4                   MOV.L       @(16,R15),R3
    000004C6 1F37                   MOV.L       R3,@(28,R15)
    000004C8 53F2                   MOV.L       @(8,R15),R3
    000004CA 52F3                   MOV.L       @(12,R15),R2
    000004CC 323C                   ADD         R3,R2
    000004CE 4208                   SHLL2       R2
    000004D0 1F28                   MOV.L       R2,@(32,R15)
    000004D2 61F2                   MOV.L       @R15,R1
    000004D4 4115                   CMP/PL      R1
    000004D6 8B65                   BF          L1166
    000004D8              L1167:                            
      factorpoly   274    
      factorpoly   275                            A = stack[an + i];
    000004D8 D97B                   MOV.L       L1179,R9   ; _p4
    000004DA D27C                   MOV.L       L1179+4,R2 ; _stack
    000004DC 50F8                   MOV.L       @(32,R15),R0
    000004DE 6322                   MOV.L       @R2,R3
      factorpoly   276                            B = stack[a0 + j];
    000004E0 DB7B                   MOV.L       L1179+8,R11; _p5
    000004E2 033E                   MOV.L       @(R0,R3),R3
    000004E4 2932                   MOV.L       R3,@R9
    000004E6 6122                   MOV.L       @R2,R1
    000004E8 50F7                   MOV.L       @(28,R15),R0
    000004EA 031E                   MOV.L       @(R0,R1),R3
    000004EC 2B32                   MOV.L       R3,@R11
      factorpoly   277    
      factorpoly   278                            push(B);
    000004EE 4D0B                   JSR         @R13
    000004F0 6433                   MOV         R3,R4
      factorpoly   279                            push(A);
    000004F2 4D0B                   JSR         @R13
    000004F4 6492                   MOV.L       @R9,R4
      factorpoly   280                            divide();
    000004F6 DC77                   MOV.L       L1179+12,R12; _divide
    000004F8 4C0B                   JSR         @R12
    000004FA 0009                   NOP
      factorpoly   281                            negate();
    000004FC D276                   MOV.L       L1179+16,R2; _negate
    000004FE 420B                   JSR         @R2
    00000500 0009                   NOP
      factorpoly   282                            Z = pop();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000502 DC76                   MOV.L       L1179+20,R12; _p3
    00000504 4A0B                   JSR         @R10
    00000506 0009                   NOP
      factorpoly   283    
      factorpoly   284                            evalpoly();
    00000508 B0AD                   BSR         __$evalpoly
    0000050A 2C02                   MOV.L       R0,@R12
      factorpoly   285    
      factorpoly   286                            if (verbosing) {
    0000050C D874                   MOV.L       L1179+24,R8; _p6
    0000050E D375                   MOV.L       L1179+28,R3; _verbosing
    00000510 6232                   MOV.L       @R3,R2
    00000512 2228                   TST         R2,R2
    00000514 890C                   BT          L1168
      factorpoly   287                                    ////printf("try A=");
      factorpoly   288                                    print(A);
    00000516 4E0B                   JSR         @R14
    00000518 6492                   MOV.L       @R9,R4
      factorpoly   289                                    ////printf(", B=");
      factorpoly   290                                    print(B);
    0000051A 4E0B                   JSR         @R14
    0000051C 64B2                   MOV.L       @R11,R4
      factorpoly   291                                    ////printf(", root ");
      factorpoly   292                                    print(X);
    0000051E D272                   MOV.L       L1179+32,R2; _p2
    00000520 4E0B                   JSR         @R14
    00000522 6422                   MOV.L       @R2,R4
      factorpoly   293                                    ////printf("=-B/A=");
      factorpoly   294                                    print(Z);
    00000524 4E0B                   JSR         @R14
    00000526 64C2                   MOV.L       @R12,R4
      factorpoly   295                                    ////printf(", POLY(");
      factorpoly   296                                    print(Z);
    00000528 4E0B                   JSR         @R14
    0000052A 64C2                   MOV.L       @R12,R4
      factorpoly   297                                    ////printf(")=");
      factorpoly   298                                    print(Q);
    0000052C 4E0B                   JSR         @R14
    0000052E 6482                   MOV.L       @R8,R4
    00000530              L1168:                            
      factorpoly   299                                    ////printf("\n");
      factorpoly   300                            }
      factorpoly   301    
      factorpoly   302                            if (iszero(Q)) {
    00000530 D36E                   MOV.L       L1179+36,R3; _iszero
    00000532 430B                   JSR         @R3
    00000534 6482                   MOV.L       @R8,R4
    00000536 2008                   TST         R0,R0
    00000538 8B26                   BF          L1116
      factorpoly   303                                    tos = h;
      factorpoly   304                                    return 1;
      factorpoly   305                            }
      factorpoly   306    
      factorpoly   307                            push(B);
    0000053A 4D0B                   JSR         @R13
    0000053C 64B2                   MOV.L       @R11,R4
      factorpoly   308                            negate();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000053E D266                   MOV.L       L1179+16,R2; _negate
    00000540 420B                   JSR         @R2
    00000542 0009                   NOP
      factorpoly   309                            B = pop();
    00000544 4A0B                   JSR         @R10
    00000546 0009                   NOP
    00000548 2B02                   MOV.L       R0,@R11
      factorpoly   310    
      factorpoly   311                            push(Z);
    0000054A 4D0B                   JSR         @R13
    0000054C 64C2                   MOV.L       @R12,R4
      factorpoly   312                            negate();
    0000054E D362                   MOV.L       L1179+16,R3; _negate
    00000550 430B                   JSR         @R3
    00000552 0009                   NOP
      factorpoly   313                            Z = pop();
    00000554 4A0B                   JSR         @R10
    00000556 0009                   NOP
      factorpoly   314    
      factorpoly   315                            evalpoly();
    00000558 B085                   BSR         __$evalpoly
    0000055A 2C02                   MOV.L       R0,@R12
      factorpoly   316    
      factorpoly   317                            if (verbosing) {
    0000055C D261                   MOV.L       L1179+28,R2; _verbosing
    0000055E 6322                   MOV.L       @R2,R3
    00000560 2338                   TST         R3,R3
    00000562 890C                   BT          L1171
      factorpoly   318                                    ////printf("try A=");
      factorpoly   319                                    print(A);
    00000564 4E0B                   JSR         @R14
    00000566 6492                   MOV.L       @R9,R4
      factorpoly   320                                    ////printf(", B=");
      factorpoly   321                                    print(B);
    00000568 4E0B                   JSR         @R14
    0000056A 64B2                   MOV.L       @R11,R4
      factorpoly   322                                    ////printf(", root ");
      factorpoly   323                                    print(X);
    0000056C D35E                   MOV.L       L1179+32,R3; _p2
    0000056E 4E0B                   JSR         @R14
    00000570 6432                   MOV.L       @R3,R4
      factorpoly   324                                    ////printf("=-B/A=");
      factorpoly   325                                    print(Z);
    00000572 4E0B                   JSR         @R14
    00000574 64C2                   MOV.L       @R12,R4
      factorpoly   326                                    ////printf(", POLY(");
      factorpoly   327                                    print(Z);
    00000576 4E0B                   JSR         @R14
    00000578 64C2                   MOV.L       @R12,R4
      factorpoly   328                                    ////printf(")=");
      factorpoly   329                                    print(Q);
    0000057A 4E0B                   JSR         @R14
    0000057C 6482                   MOV.L       @R8,R4
    0000057E              L1171:                            
      factorpoly   330                                    ////printf("\n");
      factorpoly   331                            }
      factorpoly   332    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      factorpoly   333                            if (iszero(Q)) {
    0000057E D25B                   MOV.L       L1179+36,R2; _iszero
    00000580 420B                   JSR         @R2
    00000582 6482                   MOV.L       @R8,R4
    00000584 2008                   TST         R0,R0
    00000586 8904                   BT          L1172
    00000588              L1116:
      factorpoly   334                                    tos = h;
    00000588 52F5                   MOV.L       @(20,R15),R2
    0000058A D359                   MOV.L       L1179+40,R3; _tos
    0000058C 2322                   MOV.L       R2,@R3
      factorpoly   335                                    return 1;
    0000058E A014                   BRA         L1170
    00000590 E001                   MOV         #1,R0
    00000592              L1172:                            
    00000592 52F6                   MOV.L       @(24,R15),R2
    00000594 7201                   ADD         #1,R2
    00000596 1F26                   MOV.L       R2,@(24,R15)
    00000598 53F7                   MOV.L       @(28,R15),R3
    0000059A 7304                   ADD         #4,R3
    0000059C 1F37                   MOV.L       R3,@(28,R15)
    0000059E 61F2                   MOV.L       @R15,R1
    000005A0 3213                   CMP/GE      R1,R2
    000005A2 8B99                   BF          L1167
    000005A4              L1166:                            
    000005A4 53F3                   MOV.L       @(12,R15),R3
    000005A6 7301                   ADD         #1,R3
    000005A8 1F33                   MOV.L       R3,@(12,R15)
    000005AA              L1164:                            
    000005AA 52F1                   MOV.L       @(4,R15),R2
    000005AC 51F3                   MOV.L       @(12,R15),R1
    000005AE 3123                   CMP/GE      R2,R1
    000005B0 8B86                   BF          L1165
      factorpoly   336                            }
      factorpoly   337                    }
      factorpoly   338            }
      factorpoly   339    
      factorpoly   340            tos = h;
      factorpoly   341    
      factorpoly   342            return 0;
    000005B2 E000                   MOV         #0,R0
    000005B4 53F5                   MOV.L       @(20,R15),R3
    000005B6 D24E                   MOV.L       L1179+40,R2; _tos
    000005B8 2232                   MOV.L       R3,@R2
      factorpoly   343    }
    000005BA              L1170:                            
    000005BA 7F24                   ADD         #36,R15
    000005BC 4F26                   LDS.L       @R15+,PR
    000005BE 68F6                   MOV.L       @R15+,R8
    000005C0 69F6                   MOV.L       @R15+,R9
    000005C2 6AF6                   MOV.L       @R15+,R10
    000005C4 6BF6                   MOV.L       @R15+,R11
    000005C6 6CF6                   MOV.L       @R15+,R12
    000005C8 6DF6                   MOV.L       @R15+,R13
    000005CA 000B                   RTS
    000005CC 6EF6                   MOV.L       @R15+,R14
      factorpoly   344    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      factorpoly   345    //-----------------------------------------------------------------------------
      factorpoly   346    //
      factorpoly   347    //      Divide a polynomial by Ax+B
      factorpoly   348    //
      factorpoly   349    //      Input:          polycoeff       Dividend coefficients
      factorpoly   350    //
      factorpoly   351    //                      expo            Degree of dividend
      factorpoly   352    //
      factorpoly   353    //                      A               As above
      factorpoly   354    //
      factorpoly   355    //                      B               As above
      factorpoly   356    //
      factorpoly   357    //      Output:         polycoeff       Contains quotient coefficients
      factorpoly   358    //
      factorpoly   359    //-----------------------------------------------------------------------------
      factorpoly   360    
      factorpoly   361    static void
      factorpoly   362    yydivpoly(void)
    000005CE              __$yydivpoly:                    ; function: yydivpoly
                                                           ; frame size=36
    000005CE 2FE6                   MOV.L       R14,@-R15
    000005D0 2FD6                   MOV.L       R13,@-R15
    000005D2 2FC6                   MOV.L       R12,@-R15
    000005D4 2FB6                   MOV.L       R11,@-R15
    000005D6 2FA6                   MOV.L       R10,@-R15
    000005D8 2F96                   MOV.L       R9,@-R15
    000005DA 2F86                   MOV.L       R8,@-R15
    000005DC 4F22                   STS.L       PR,@-R15
      factorpoly   363    {
      factorpoly   364            int i;
      factorpoly   365            Q = zero;
    000005DE DC40                   MOV.L       L1179+24,R12; _p6
    000005E0 D244                   MOV.L       L1179+44,R2; _zero
    000005E2 6322                   MOV.L       @R2,R3
      factorpoly   366            for (i = expo; i > 0; i--) {
    000005E4 D144                   MOV.L       L1179+48,R1; __$expo
    000005E6 2C32                   MOV.L       R3,@R12
    000005E8 6912                   MOV.L       @R1,R9
    000005EA 6B93                   MOV         R9,R11
    000005EC D843                   MOV.L       L1179+52,R8; _pop
    000005EE 4915                   CMP/PL      R9
    000005F0 DD43                   MOV.L       L1179+56,R13; __$polycoeff
    000005F2 7BFF                   ADD         #-1,R11
    000005F4 DE43                   MOV.L       L1179+60,R14; _push
    000005F6 6A93                   MOV         R9,R10
    000005F8 4B08                   SHLL2       R11
    000005FA 8F28                   BF/S        L1173
    000005FC 4A08                   SHLL2       R10
    000005FE              L1174:                            
      factorpoly   367                    push(polycoeff[i]);
    000005FE 60D2                   MOV.L       @R13,R0
    00000600 4E0B                   JSR         @R14
    00000602 04AE                   MOV.L       @(R0,R10),R4
      factorpoly   368                    polycoeff[i] = Q;
    00000604 60D2                   MOV.L       @R13,R0
    00000606 62C2                   MOV.L       @R12,R2
      factorpoly   369                    push(A);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000608 D32F                   MOV.L       L1179,R3   ; _p4
    0000060A 0A26                   MOV.L       R2,@(R0,R10)
    0000060C 4E0B                   JSR         @R14
    0000060E 6432                   MOV.L       @R3,R4
      factorpoly   370                    divide();
    00000610 D230                   MOV.L       L1179+12,R2; _divide
    00000612 420B                   JSR         @R2
    00000614 0009                   NOP
      factorpoly   371                    Q = pop();
    00000616 480B                   JSR         @R8
    00000618 0009                   NOP
    0000061A 2C02                   MOV.L       R0,@R12
      factorpoly   372                    push(polycoeff[i - 1]);
    0000061C 60D2                   MOV.L       @R13,R0
    0000061E 4E0B                   JSR         @R14
    00000620 04BE                   MOV.L       @(R0,R11),R4
      factorpoly   373                    push(Q);
    00000622 4E0B                   JSR         @R14
    00000624 64C2                   MOV.L       @R12,R4
      factorpoly   374                    push(B);
    00000626 D32A                   MOV.L       L1179+8,R3 ; _p5
    00000628 4E0B                   JSR         @R14
    0000062A 6432                   MOV.L       @R3,R4
      factorpoly   375                    multiply();
    0000062C D236                   MOV.L       L1179+64,R2; _multiply
    0000062E 420B                   JSR         @R2
    00000630 0009                   NOP
      factorpoly   376                    subtract();
    00000632 D136                   MOV.L       L1179+68,R1; _subtract
    00000634 410B                   JSR         @R1
    00000636 0009                   NOP
      factorpoly   377                    polycoeff[i - 1] = pop();
    00000638 60D2                   MOV.L       @R13,R0
    0000063A 30BC                   ADD         R11,R0
    0000063C 480B                   JSR         @R8
    0000063E 2F06                   MOV.L       R0,@-R15
    00000640 63F6                   MOV.L       @R15+,R3
    00000642 79FF                   ADD         #-1,R9
    00000644 2302                   MOV.L       R0,@R3
    00000646 7BFC                   ADD         #-4,R11
    00000648 4915                   CMP/PL      R9
    0000064A 8DD8                   BT/S        L1174
    0000064C 7AFC                   ADD         #-4,R10
    0000064E              L1173:                            
      factorpoly   378            }
      factorpoly   379            polycoeff[0] = Q;
    0000064E 63D2                   MOV.L       @R13,R3
    00000650 62C2                   MOV.L       @R12,R2
    00000652 2322                   MOV.L       R2,@R3
      factorpoly   380    }
    00000654 4F26                   LDS.L       @R15+,PR
    00000656 68F6                   MOV.L       @R15+,R8
    00000658 69F6                   MOV.L       @R15+,R9
    0000065A 6AF6                   MOV.L       @R15+,R10
    0000065C 6BF6                   MOV.L       @R15+,R11
    0000065E 6CF6                   MOV.L       @R15+,R12
    00000660 6DF6                   MOV.L       @R15+,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000662 000B                   RTS
    00000664 6EF6                   MOV.L       @R15+,R14
      factorpoly   381    
      factorpoly   382    static void
      factorpoly   383    evalpoly(void)
    00000666              __$evalpoly:                     ; function: evalpoly
                                                           ; frame size=32
    00000666 2FE6                   MOV.L       R14,@-R15
    00000668 2FD6                   MOV.L       R13,@-R15
    0000066A 2FC6                   MOV.L       R12,@-R15
    0000066C 2FB6                   MOV.L       R11,@-R15
    0000066E 2FA6                   MOV.L       R10,@-R15
    00000670 2F96                   MOV.L       R9,@-R15
    00000672 2F86                   MOV.L       R8,@-R15
    00000674 4F22                   STS.L       PR,@-R15
      factorpoly   384    {
      factorpoly   385            int i;
      factorpoly   386            push(zero);
    00000676 DC23                   MOV.L       L1179+60,R12; _push
    00000678 D31E                   MOV.L       L1179+44,R3; _zero
    0000067A 4C0B                   JSR         @R12
    0000067C 6432                   MOV.L       @R3,R4
      factorpoly   387            for (i = expo; i >= 0; i--) {
    0000067E D21E                   MOV.L       L1179+48,R2; __$expo
    00000680 D823                   MOV.L       L1179+72,R8; _add
    00000682 6E22                   MOV.L       @R2,R14
    00000684 D91E                   MOV.L       L1179+56,R9; __$polycoeff
    00000686 4E11                   CMP/PZ      R14
    00000688 DA1F                   MOV.L       L1179+64,R10; _multiply
    0000068A 6DE3                   MOV         R14,R13
    0000068C DB13                   MOV.L       L1179+20,R11; _p3
    0000068E 8F0D                   BF/S        L1175
    00000690 4D08                   SHLL2       R13
    00000692              L1176:                            
      factorpoly   388                    push(Z);
    00000692 4C0B                   JSR         @R12
    00000694 64B2                   MOV.L       @R11,R4
      factorpoly   389                    multiply();
    00000696 4A0B                   JSR         @R10
    00000698 0009                   NOP
      factorpoly   390                    push(polycoeff[i]);
    0000069A 6092                   MOV.L       @R9,R0
    0000069C 4C0B                   JSR         @R12
    0000069E 04DE                   MOV.L       @(R0,R13),R4
      factorpoly   391                    add();
    000006A0 480B                   JSR         @R8
    000006A2 0009                   NOP
    000006A4 7EFF                   ADD         #-1,R14
    000006A6 4E11                   CMP/PZ      R14
    000006A8 8DF3                   BT/S        L1176
    000006AA 7DFC                   ADD         #-4,R13
    000006AC              L1175:                            
      factorpoly   392            }
      factorpoly   393            Q = pop();
    000006AC D313                   MOV.L       L1179+52,R3; _pop
    000006AE 430B                   JSR         @R3
    000006B0 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006B2 D20B                   MOV.L       L1179+24,R2; _p6
    000006B4 2202                   MOV.L       R0,@R2
      factorpoly   394    }
    000006B6 4F26                   LDS.L       @R15+,PR
    000006B8 68F6                   MOV.L       @R15+,R8
    000006BA 69F6                   MOV.L       @R15+,R9
    000006BC 6AF6                   MOV.L       @R15+,R10
    000006BE 6BF6                   MOV.L       @R15+,R11
    000006C0 6CF6                   MOV.L       @R15+,R12
    000006C2 6DF6                   MOV.L       @R15+,R13
    000006C4 000B                   RTS
    000006C6 6EF6                   MOV.L       @R15+,R14
    000006C8              L1179:                            
    000006C8 <00000000>             .DATA.L     _p4
    000006CC <00000000>             .DATA.L     _stack
    000006D0 <00000000>             .DATA.L     _p5
    000006D4 <00000000>             .DATA.L     _divide
    000006D8 <00000000>             .DATA.L     _negate
    000006DC <00000000>             .DATA.L     _p3
    000006E0 <00000000>             .DATA.L     _p6
    000006E4 <00000000>             .DATA.L     _verbosing
    000006E8 <00000000>             .DATA.L     _p2
    000006EC <00000000>             .DATA.L     _iszero
    000006F0 <00000000>             .DATA.L     _tos
    000006F4 <00000000>             .DATA.L     _zero
    000006F8 <00000000>             .DATA.L     __$expo
    000006FC <00000000>             .DATA.L     _pop
    00000700 <00000000>             .DATA.L     __$polycoeff
    00000704 <00000000>             .DATA.L     _push
    00000708 <00000000>             .DATA.L     _multiply
    0000070C <00000000>             .DATA.L     _subtract
    00000710 <00000000>             .DATA.L     _add
C   00000000              L1071:
    00000000 666C6F6174             .SDATA      "floating point numbers in polynomial"
             696E672070   
             6F696E7420   
             6E756D6265   
             727320696E   
             20706F6C79   
             6E6F6D6961   
             6C           
    00000024 00                     .DATA.B     H'00
B   00000000              __$expo:                         ; static: expo
    00000000 00000004               .RES.L      1
    00000004              __$polycoeff:                    ; static: polycoeff
    00000004 00000004               .RES.L      1















SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      394



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000714 Byte(s)
CONSTANT SECTION (C):                               00000025 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000008 Byte(s)

 TOTAL PROGRAM SIZE: 00000741 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           38
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           2
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            85






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk64DF.tmp 

