SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\filter.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        filter.c     1    /* Remove terms that involve a given symbol or expression. For example...
        filter.c     2    
        filter.c     3            filter(x^2 + x + 1, x)          =>      1
        filter.c     4    
        filter.c     5            filter(x^2 + x + 1, x^2)        =>      x + 1
        filter.c     6    */
        filter.c     7    
        filter.c     8    #include "stdafx.h"
        filter.c     9    #include "defs.h"
        filter.c    10    
        filter.c    11    void
        filter.c    12    eval_filter(void)
P   00000000              _eval_filter:                    ; function: eval_filter
                                                           ; frame size=16
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 4F22                   STS.L       PR,@-R15
        filter.c    13    {
        filter.c    14            p1 = cdr(p1);
    00000008 DE35                   MOV.L       L1100+4,R14; _p1
    0000000A 62E2                   MOV.L       @R14,R2
    0000000C 8428                   MOV.B       @(8,R2),R0
    0000000E 2008                   TST         R0,R0
    00000010 8B02                   BF          L1068
    00000012 62E2                   MOV.L       @R14,R2
    00000014 A004                   BRA         L1069
    00000016 5321                   MOV.L       @(4,R2),R3
    00000018              L1068:                            
    00000018 9260                   MOV.W       L1100,R2   ; H'0570
    0000001A D132                   MOV.L       L1100+8,R1 ; _symtab
    0000001C 6312                   MOV.L       @R1,R3
    0000001E 332C                   ADD         R2,R3
    00000020              L1069:                            
    00000020 2E32                   MOV.L       R3,@R14
        filter.c    15            push(car(p1));
    00000022 6433                   MOV         R3,R4
    00000024 DD30                   MOV.L       L1100+12,R13; _push
    00000026 8448                   MOV.B       @(8,R4),R0
    00000028 2008                   TST         R0,R0
    0000002A 8B02                   BF          L1070
    0000002C 64E2                   MOV.L       @R14,R4
    0000002E A004                   BRA         L1071
    00000030 6442                   MOV.L       @R4,R4
    00000032              L1070:                            
    00000032 9353                   MOV.W       L1100,R3   ; H'0570
    00000034 D22B                   MOV.L       L1100+8,R2 ; _symtab
    00000036 6422                   MOV.L       @R2,R4
    00000038 343C                   ADD         R3,R4
    0000003A              L1071:                            
    0000003A 4D0B                   JSR         @R13
    0000003C 0009                   NOP
        filter.c    16            eval();
    0000003E DC2B                   MOV.L       L1100+16,R12; _eval




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000040 4C0B                   JSR         @R12
    00000042 0009                   NOP
        filter.c    17            p1 = cdr(p1);
    00000044 62E2                   MOV.L       @R14,R2
    00000046 8428                   MOV.B       @(8,R2),R0
    00000048 2008                   TST         R0,R0
    0000004A 8B02                   BF          L1072
    0000004C 62E2                   MOV.L       @R14,R2
    0000004E A004                   BRA         L1073
    00000050 5321                   MOV.L       @(4,R2),R3
    00000052              L1072:                            
    00000052 9243                   MOV.W       L1100,R2   ; H'0570
    00000054 D123                   MOV.L       L1100+8,R1 ; _symtab
    00000056 6312                   MOV.L       @R1,R3
    00000058 332C                   ADD         R2,R3
    0000005A              L1073:                            
        filter.c    18            while (iscons(p1)) {
    0000005A A01D                   BRA         L1074
    0000005C 2E32                   MOV.L       R3,@R14
    0000005E              L1075:                            
        filter.c    19                    push(car(p1));
    0000005E 64E2                   MOV.L       @R14,R4
    00000060 8448                   MOV.B       @(8,R4),R0
    00000062 2008                   TST         R0,R0
    00000064 8B02                   BF          L1076
    00000066 64E2                   MOV.L       @R14,R4
    00000068 A004                   BRA         L1077
    0000006A 6442                   MOV.L       @R4,R4
    0000006C              L1076:                            
    0000006C 9336                   MOV.W       L1100,R3   ; H'0570
    0000006E D21D                   MOV.L       L1100+8,R2 ; _symtab
    00000070 6422                   MOV.L       @R2,R4
    00000072 343C                   ADD         R3,R4
    00000074              L1077:                            
    00000074 4D0B                   JSR         @R13
    00000076 0009                   NOP
        filter.c    20                    eval();
    00000078 4C0B                   JSR         @R12
    0000007A 0009                   NOP
        filter.c    21                    filter();
    0000007C B015                   BSR         _filter
    0000007E 0009                   NOP
        filter.c    22                    p1 = cdr(p1);
    00000080 63E2                   MOV.L       @R14,R3
    00000082 8438                   MOV.B       @(8,R3),R0
    00000084 2008                   TST         R0,R0
    00000086 8B02                   BF          L1078
    00000088 62E2                   MOV.L       @R14,R2
    0000008A A004                   BRA         L1079
    0000008C 5221                   MOV.L       @(4,R2),R2
    0000008E              L1078:                            
    0000008E 9325                   MOV.W       L1100,R3   ; H'0570
    00000090 D114                   MOV.L       L1100+8,R1 ; _symtab
    00000092 6212                   MOV.L       @R1,R2
    00000094 323C                   ADD         R3,R2
    00000096              L1079:                            
    00000096 2E22                   MOV.L       R2,@R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000098              L1074:                            
    00000098 63E2                   MOV.L       @R14,R3
    0000009A 8438                   MOV.B       @(8,R3),R0
    0000009C 2008                   TST         R0,R0
    0000009E 89DE                   BT          L1075
        filter.c    23            }
        filter.c    24    }
    000000A0 4F26                   LDS.L       @R15+,PR
    000000A2 6CF6                   MOV.L       @R15+,R12
    000000A4 6DF6                   MOV.L       @R15+,R13
    000000A6 000B                   RTS
    000000A8 6EF6                   MOV.L       @R15+,R14
        filter.c    25    
        filter.c    26    /* For example...
        filter.c    27    
        filter.c    28            push(F)
        filter.c    29            push(X)
        filter.c    30            filter()
        filter.c    31            F = pop()
        filter.c    32    */
        filter.c    33    
        filter.c    34    void
        filter.c    35    filter(void)
    000000AA              _filter:                         ; function: filter
                                                           ; frame size=4
    000000AA 4F22                   STS.L       PR,@-R15
        filter.c    36    {
        filter.c    37            save();
    000000AC D310                   MOV.L       L1100+20,R3; _save
    000000AE 430B                   JSR         @R3
    000000B0 0009                   NOP
        filter.c    38            p2 = pop();
    000000B2 D210                   MOV.L       L1100+24,R2; _pop
    000000B4 420B                   JSR         @R2
    000000B6 0009                   NOP
    000000B8 D30F                   MOV.L       L1100+28,R3; _p2
        filter.c    39            p1 = pop();
    000000BA D20E                   MOV.L       L1100+24,R2; _pop
    000000BC 420B                   JSR         @R2
    000000BE 2302                   MOV.L       R0,@R3
    000000C0 D107                   MOV.L       L1100+4,R1 ; _p1
        filter.c    40            filter_main();
    000000C2 B003                   BSR         _filter_main
    000000C4 2102                   MOV.L       R0,@R1
        filter.c    41            restore();
    000000C6 D20D                   MOV.L       L1100+32,R2; _restore
    000000C8 422B                   JMP         @R2
    000000CA 4F26                   LDS.L       @R15+,PR
        filter.c    42    }
        filter.c    43    
        filter.c    44    void
        filter.c    45    filter_main(void)
    000000CC              _filter_main:                    ; function: filter_main
                                                           ; frame size=4
    000000CC 4F22                   STS.L       PR,@-R15
    000000CE D304                   MOV.L       L1100+4,R3 ; _p1
    000000D0 6432                   MOV.L       @R3,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000D2 8448                   MOV.B       @(8,R4),R0
    000000D4 2008                   TST         R0,R0
    000000D6 8B13                   BF          L1081
    000000D8 A016                   BRA         L1082
    000000DA 6242                   MOV.L       @R4,R2
    000000DC              L1100:                            
    000000DC 0570                   .DATA.W     H'0570
    000000DE 0000                   .DATA.W     0
    000000E0 <00000000>             .DATA.L     _p1
    000000E4 <00000000>             .DATA.L     _symtab
    000000E8 <00000000>             .DATA.L     _push
    000000EC <00000000>             .DATA.L     _eval
    000000F0 <00000000>             .DATA.L     _save
    000000F4 <00000000>             .DATA.L     _pop
    000000F8 <00000000>             .DATA.L     _p2
    000000FC <00000000>             .DATA.L     _restore
    00000100              L1081:                            
    00000100 917B                   MOV.W       L1101,R1   ; H'0570
    00000102 D03E                   MOV.L       L1101+2,R0 ; _symtab
    00000104 6202                   MOV.L       @R0,R2
    00000106 321C                   ADD         R1,R2
    00000108              L1082:                            
    00000108 D13C                   MOV.L       L1101+2,R1 ; _symtab
    0000010A 6312                   MOV.L       @R1,R3
    0000010C 730C                   ADD         #12,R3
    0000010E 3230                   CMP/EQ      R3,R2
    00000110 8B01                   BF          L1080
        filter.c    46    {
        filter.c    47            if (car(p1) == symbol(ADD))
        filter.c    48                    filter_sum();
    00000112 A015                   BRA         _filter_sum
    00000114 4F26                   LDS.L       @R15+,PR
    00000116              L1080:                            
        filter.c    49            else if (istensor(p1))
    00000116 8448                   MOV.B       @(8,R4),R0
    00000118 600C                   EXTU.B      R0,R0
    0000011A 8804                   CMP/EQ      #4,R0
    0000011C 8B01                   BF          L1084
        filter.c    50                    filter_tensor();
    0000011E A051                   BRA         _filter_tensor
    00000120 4F26                   LDS.L       @R15+,PR
    00000122              L1084:                            
        filter.c    51            else if (find(p1, p2))
    00000122 D237                   MOV.L       L1101+6,R2 ; _p2
    00000124 D337                   MOV.L       L1101+10,R3; _find
    00000126 430B                   JSR         @R3
    00000128 6522                   MOV.L       @R2,R5
    0000012A 2008                   TST         R0,R0
    0000012C 8903                   BT          L1086
        filter.c    52                    push_integer(0);
    0000012E E400                   MOV         #0,R4
    00000130 D335                   MOV.L       L1101+14,R3; _push_integer
    00000132 432B                   JMP         @R3
    00000134 4F26                   LDS.L       @R15+,PR
    00000136              L1086:                            
        filter.c    53            else
        filter.c    54                    push(p1);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000136 D335                   MOV.L       L1101+18,R3; _p1
    00000138 D235                   MOV.L       L1101+22,R2; _push
    0000013A 6432                   MOV.L       @R3,R4
    0000013C 422B                   JMP         @R2
    0000013E 4F26                   LDS.L       @R15+,PR
        filter.c    55    }
        filter.c    56    
        filter.c    57    void
        filter.c    58    filter_sum(void)
    00000140              _filter_sum:                     ; function: filter_sum
                                                           ; frame size=20
    00000140 2FE6                   MOV.L       R14,@-R15
    00000142 2FD6                   MOV.L       R13,@-R15
    00000144 2FC6                   MOV.L       R12,@-R15
    00000146 2FB6                   MOV.L       R11,@-R15
    00000148 4F22                   STS.L       PR,@-R15
        filter.c    59    {
        filter.c    60            push_integer(0);
    0000014A D32F                   MOV.L       L1101+14,R3; _push_integer
    0000014C 430B                   JSR         @R3
    0000014E E400                   MOV         #0,R4
        filter.c    61            p1 = cdr(p1);
    00000150 DE2E                   MOV.L       L1101+18,R14; _p1
    00000152 63E2                   MOV.L       @R14,R3
    00000154 8438                   MOV.B       @(8,R3),R0
    00000156 2008                   TST         R0,R0
    00000158 8B02                   BF          L1088
    0000015A 62E2                   MOV.L       @R14,R2
    0000015C A004                   BRA         L1089
    0000015E 5221                   MOV.L       @(4,R2),R2
    00000160              L1088:                            
    00000160 934B                   MOV.W       L1101,R3   ; H'0570
    00000162 D126                   MOV.L       L1101+2,R1 ; _symtab
    00000164 6212                   MOV.L       @R1,R2
    00000166 323C                   ADD         R3,R2
    00000168              L1089:                            
    00000168 DB2A                   MOV.L       L1101+26,R11; _add
    0000016A DC25                   MOV.L       L1101+6,R12; _p2
    0000016C DD28                   MOV.L       L1101+22,R13; _push
        filter.c    62            while (iscons(p1)) {
    0000016E A01F                   BRA         L1090
    00000170 2E22                   MOV.L       R2,@R14
    00000172              L1091:                            
        filter.c    63                    push(car(p1));
    00000172 64E2                   MOV.L       @R14,R4
    00000174 8448                   MOV.B       @(8,R4),R0
    00000176 2008                   TST         R0,R0
    00000178 8B02                   BF          L1092
    0000017A 64E2                   MOV.L       @R14,R4
    0000017C A004                   BRA         L1093
    0000017E 6442                   MOV.L       @R4,R4
    00000180              L1092:                            
    00000180 933B                   MOV.W       L1101,R3   ; H'0570
    00000182 D21E                   MOV.L       L1101+2,R2 ; _symtab
    00000184 6422                   MOV.L       @R2,R4
    00000186 343C                   ADD         R3,R4
    00000188              L1093:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000188 4D0B                   JSR         @R13
    0000018A 0009                   NOP
        filter.c    64                    push(p2);
    0000018C 4D0B                   JSR         @R13
    0000018E 64C2                   MOV.L       @R12,R4
        filter.c    65                    filter();
    00000190 BF8B                   BSR         _filter
    00000192 0009                   NOP
        filter.c    66                    add();
    00000194 4B0B                   JSR         @R11
    00000196 0009                   NOP
        filter.c    67                    p1 = cdr(p1);
    00000198 63E2                   MOV.L       @R14,R3
    0000019A 8438                   MOV.B       @(8,R3),R0
    0000019C 2008                   TST         R0,R0
    0000019E 8B02                   BF          L1094
    000001A0 62E2                   MOV.L       @R14,R2
    000001A2 A004                   BRA         L1095
    000001A4 5221                   MOV.L       @(4,R2),R2
    000001A6              L1094:                            
    000001A6 9328                   MOV.W       L1101,R3   ; H'0570
    000001A8 D114                   MOV.L       L1101+2,R1 ; _symtab
    000001AA 6212                   MOV.L       @R1,R2
    000001AC 323C                   ADD         R3,R2
    000001AE              L1095:                            
    000001AE 2E22                   MOV.L       R2,@R14
    000001B0              L1090:                            
    000001B0 63E2                   MOV.L       @R14,R3
    000001B2 8438                   MOV.B       @(8,R3),R0
    000001B4 2008                   TST         R0,R0
    000001B6 89DC                   BT          L1091
        filter.c    68            }
        filter.c    69    }
    000001B8 4F26                   LDS.L       @R15+,PR
    000001BA 6BF6                   MOV.L       @R15+,R11
    000001BC 6CF6                   MOV.L       @R15+,R12
    000001BE 6DF6                   MOV.L       @R15+,R13
    000001C0 000B                   RTS
    000001C2 6EF6                   MOV.L       @R15+,R14
        filter.c    70    
        filter.c    71    void
        filter.c    72    filter_tensor(void)
    000001C4              _filter_tensor:                  ; function: filter_tensor
                                                           ; frame size=36
    000001C4 2FE6                   MOV.L       R14,@-R15
        filter.c    73    {
        filter.c    74            int i, n;
        filter.c    75            n = p1->u.tensor->nelem;
    000001C6 E064                   MOV         #100,R0
        filter.c    76            p3 = alloc_tensor(n);
    000001C8 D314                   MOV.L       L1101+34,R3; _alloc_tensor
    000001CA 2FD6                   MOV.L       R13,@-R15
    000001CC 2FC6                   MOV.L       R12,@-R15
    000001CE 2FB6                   MOV.L       R11,@-R15
    000001D0 2FA6                   MOV.L       R10,@-R15
    000001D2 2F96                   MOV.L       R9,@-R15
    000001D4 2F86                   MOV.L       R8,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001D6 4F22                   STS.L       PR,@-R15
    000001D8 DE0C                   MOV.L       L1101+18,R14; _p1
    000001DA 6AE2                   MOV.L       @R14,R10
    000001DC DC0E                   MOV.L       L1101+30,R12; _p3
    000001DE 6AA2                   MOV.L       @R10,R10
    000001E0 0AAE                   MOV.L       @(R0,R10),R10
    000001E2 430B                   JSR         @R3
    000001E4 64A3                   MOV         R10,R4
        filter.c    77            p3->u.tensor->ndim = p1->u.tensor->ndim;
    000001E6 6203                   MOV         R0,R2
    000001E8 2C02                   MOV.L       R0,@R12
        filter.c    78            for (i = 0; i < p1->u.tensor->ndim; i++)
    000001EA E500                   MOV         #0,R5
    000001EC 6322                   MOV.L       @R2,R3
    000001EE 61E2                   MOV.L       @R14,R1
    000001F0 6212                   MOV.L       @R1,R2
    000001F2 6022                   MOV.L       @R2,R0
    000001F4 2302                   MOV.L       R0,@R3
    000001F6 A021                   BRA         L1096
    000001F8 6453                   MOV         R5,R4
    000001FA              L1101:                            
    000001FA 0570                   .DATA.W     H'0570
    000001FC <00000000>             .DATA.L     _symtab
    00000200 <00000000>             .DATA.L     _p2
    00000204 <00000000>             .DATA.L     _find
    00000208 <00000000>             .DATA.L     _push_integer
    0000020C <00000000>             .DATA.L     _p1
    00000210 <00000000>             .DATA.L     _push
    00000214 <00000000>             .DATA.L     _add
    00000218 <00000000>             .DATA.L     _p3
    0000021C <00000000>             .DATA.L     _alloc_tensor
    00000220              L1097:                            
        filter.c    79                    p3->u.tensor->dim[i] = p1->u.tensor->dim[i];
    00000220 60C2                   MOV.L       @R12,R0
    00000222 6643                   MOV         R4,R6
    00000224 6302                   MOV.L       @R0,R3
    00000226 4608                   SHLL2       R6
    00000228 60E2                   MOV.L       @R14,R0
    0000022A 7401                   ADD         #1,R4
    0000022C 6002                   MOV.L       @R0,R0
    0000022E 7304                   ADD         #4,R3
    00000230 336C                   ADD         R6,R3
    00000232 6203                   MOV         R0,R2
    00000234 7204                   ADD         #4,R2
    00000236 326C                   ADD         R6,R2
    00000238 6122                   MOV.L       @R2,R1
    0000023A 2312                   MOV.L       R1,@R3
    0000023C              L1096:                            
    0000023C 63E2                   MOV.L       @R14,R3
    0000023E 6232                   MOV.L       @R3,R2
    00000240 6122                   MOV.L       @R2,R1
    00000242 3413                   CMP/GE      R1,R4
    00000244 8BEC                   BF          L1097
        filter.c    80            for (i = 0; i < n; i++) {
    00000246 6953                   MOV         R5,R9
    00000248 D813                   MOV.L       L1102+2,R8 ; _p2
    0000024A 4A15                   CMP/PL      R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000024C DB13                   MOV.L       L1102+6,R11; _push
    0000024E 8F17                   BF/S        L1098
    00000250 6D53                   MOV         R5,R13
    00000252              L1099:                            
        filter.c    81                    push(p1->u.tensor->elem[i]);
    00000252 60E2                   MOV.L       @R14,R0
    00000254 6402                   MOV.L       @R0,R4
    00000256 7468                   ADD         #104,R4
    00000258 34DC                   ADD         R13,R4
    0000025A 4B0B                   JSR         @R11
    0000025C 6442                   MOV.L       @R4,R4
        filter.c    82                    push(p2);
    0000025E 4B0B                   JSR         @R11
    00000260 6482                   MOV.L       @R8,R4
        filter.c    83                    filter();
    00000262 BF22                   BSR         _filter
    00000264 0009                   NOP
        filter.c    84                    p3->u.tensor->elem[i] = pop();
    00000266 62C2                   MOV.L       @R12,R2
    00000268 D30D                   MOV.L       L1102+10,R3; _pop
    0000026A 6122                   MOV.L       @R2,R1
    0000026C 7168                   ADD         #104,R1
    0000026E 31DC                   ADD         R13,R1
    00000270 430B                   JSR         @R3
    00000272 2F16                   MOV.L       R1,@-R15
    00000274 62F6                   MOV.L       @R15+,R2
    00000276 7901                   ADD         #1,R9
    00000278 2202                   MOV.L       R0,@R2
    0000027A 39A3                   CMP/GE      R10,R9
    0000027C 8FE9                   BF/S        L1099
    0000027E 7D04                   ADD         #4,R13
    00000280              L1098:                            
        filter.c    85            }
        filter.c    86            push(p3);
    00000280 4B0B                   JSR         @R11
    00000282 64C2                   MOV.L       @R12,R4
        filter.c    87    }
    00000284 4F26                   LDS.L       @R15+,PR
    00000286 68F6                   MOV.L       @R15+,R8
    00000288 69F6                   MOV.L       @R15+,R9
    0000028A 6AF6                   MOV.L       @R15+,R10
    0000028C 6BF6                   MOV.L       @R15+,R11
    0000028E 6CF6                   MOV.L       @R15+,R12
    00000290 6DF6                   MOV.L       @R15+,R13
    00000292 000B                   RTS
    00000294 6EF6                   MOV.L       @R15+,R14
    00000296              L1102:                            
    00000296 0000                   .DATA.W     0
    00000298 <00000000>             .DATA.L     _p2
    0000029C <00000000>             .DATA.L     _push
    000002A0 <00000000>             .DATA.L     _pop










SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:36:59  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:       87



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000002A4 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000002A4 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           13
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           5
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            50






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk679F.tmp 

