SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:00  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\float.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         float.c     1    #include "stdafx.h"
         float.c     2    #include "defs.h"
         float.c     3    
         float.c     4    void
         float.c     5    eval_float(void)
P   00000000              _eval_float:                     ; function: eval_float
                                                           ; frame size=8
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 4F22                   STS.L       PR,@-R15
         float.c     6    {
         float.c     7            push(cadr(p1));
    00000004 DE35                   MOV.L       L1094+2,R14; _p1
    00000006 64E2                   MOV.L       @R14,R4
    00000008 8448                   MOV.B       @(8,R4),R0
    0000000A 2008                   TST         R0,R0
    0000000C 8B02                   BF          L1070
    0000000E 64E2                   MOV.L       @R14,R4
    00000010 A004                   BRA         L1072
    00000012 5441                   MOV.L       @(4,R4),R4
    00000014              L1070:                            
    00000014 9361                   MOV.W       L1094,R3   ; H'0570
    00000016 D232                   MOV.L       L1094+6,R2 ; _symtab
    00000018 6422                   MOV.L       @R2,R4
    0000001A 343C                   ADD         R3,R4
    0000001C              L1072:                            
    0000001C 8448                   MOV.B       @(8,R4),R0
    0000001E 2008                   TST         R0,R0
    00000020 8B0C                   BF          L1069
    00000022 64E2                   MOV.L       @R14,R4
    00000024 8448                   MOV.B       @(8,R4),R0
    00000026 2008                   TST         R0,R0
    00000028 8B02                   BF          L1071
    0000002A 64E2                   MOV.L       @R14,R4
    0000002C A004                   BRA         L1073
    0000002E 5441                   MOV.L       @(4,R4),R4
    00000030              L1071:                            
    00000030 9353                   MOV.W       L1094,R3   ; H'0570
    00000032 D22B                   MOV.L       L1094+6,R2 ; _symtab
    00000034 6422                   MOV.L       @R2,R4
    00000036 343C                   ADD         R3,R4
    00000038              L1073:                            
    00000038 A004                   BRA         L1074
    0000003A 6442                   MOV.L       @R4,R4
    0000003C              L1069:                            
    0000003C 934D                   MOV.W       L1094,R3   ; H'0570
    0000003E D228                   MOV.L       L1094+6,R2 ; _symtab
    00000040 6422                   MOV.L       @R2,R4
    00000042 343C                   ADD         R3,R4
    00000044              L1074:                            
    00000044 D327                   MOV.L       L1094+10,R3; _push
    00000046 430B                   JSR         @R3
    00000048 0009                   NOP
         float.c     8            eval();
    0000004A D227                   MOV.L       L1094+14,R2; _eval




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:00  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000004C 420B                   JSR         @R2
    0000004E 0009                   NOP
         float.c     9            yyfloat();
    00000050 B004                   BSR         _yyfloat
    00000052 0009                   NOP
         float.c    10            eval(); // normalize
    00000054 4F26                   LDS.L       @R15+,PR
    00000056 D224                   MOV.L       L1094+14,R2; _eval
    00000058 422B                   JMP         @R2
    0000005A 6EF6                   MOV.L       @R15+,R14
         float.c    11    }
         float.c    12    
         float.c    13    void
         float.c    14    yyfloat(void)
    0000005C              _yyfloat:                        ; function: yyfloat
                                                           ; frame size=36
    0000005C 2FE6                   MOV.L       R14,@-R15
    0000005E 2FD6                   MOV.L       R13,@-R15
    00000060 2FC6                   MOV.L       R12,@-R15
    00000062 2FB6                   MOV.L       R11,@-R15
    00000064 2FA6                   MOV.L       R10,@-R15
    00000066 4F22                   STS.L       PR,@-R15
         float.c    15    {
         float.c    16            int i, h;
         float.c    17            save();
    00000068 D320                   MOV.L       L1094+18,R3; _save
    0000006A 7FFC                   ADD         #-4,R15
    0000006C 430B                   JSR         @R3
    0000006E 0009                   NOP
         float.c    18            p1 = pop();
    00000070 DB1F                   MOV.L       L1094+22,R11; _pop
    00000072 DE1A                   MOV.L       L1094+2,R14; _p1
    00000074 4B0B                   JSR         @R11
    00000076 0009                   NOP
    00000078 2E02                   MOV.L       R0,@R14
    0000007A 6403                   MOV         R0,R4
    0000007C DD19                   MOV.L       L1094+10,R13; _push
    0000007E 8448                   MOV.B       @(8,R4),R0
    00000080 2008                   TST         R0,R0
    00000082 8B3B                   BF          L1075
         float.c    19            if (iscons(p1)) {
         float.c    20                    h = tos;
    00000084 D31B                   MOV.L       L1094+26,R3; _tos
    00000086 6232                   MOV.L       @R3,R2
         float.c    21                    while (iscons(p1)) {
    00000088 A01B                   BRA         L1076
    0000008A 2F22                   MOV.L       R2,@R15
    0000008C              L1077:                            
         float.c    22                            push(car(p1));
    0000008C 64E2                   MOV.L       @R14,R4
    0000008E 8448                   MOV.B       @(8,R4),R0
    00000090 2008                   TST         R0,R0
    00000092 8B02                   BF          L1078
    00000094 64E2                   MOV.L       @R14,R4
    00000096 A004                   BRA         L1079
    00000098 6442                   MOV.L       @R4,R4
    0000009A              L1078:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:00  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000009A 931E                   MOV.W       L1094,R3   ; H'0570
    0000009C D210                   MOV.L       L1094+6,R2 ; _symtab
    0000009E 6422                   MOV.L       @R2,R4
    000000A0 343C                   ADD         R3,R4
    000000A2              L1079:                            
    000000A2 4D0B                   JSR         @R13
    000000A4 0009                   NOP
         float.c    23                            yyfloat();
    000000A6 BFD9                   BSR         _yyfloat
    000000A8 0009                   NOP
         float.c    24                            p1 = cdr(p1);
    000000AA 63E2                   MOV.L       @R14,R3
    000000AC 8438                   MOV.B       @(8,R3),R0
    000000AE 2008                   TST         R0,R0
    000000B0 8B02                   BF          L1080
    000000B2 62E2                   MOV.L       @R14,R2
    000000B4 A004                   BRA         L1081
    000000B6 5221                   MOV.L       @(4,R2),R2
    000000B8              L1080:                            
    000000B8 930F                   MOV.W       L1094,R3   ; H'0570
    000000BA D109                   MOV.L       L1094+6,R1 ; _symtab
    000000BC 6212                   MOV.L       @R1,R2
    000000BE 323C                   ADD         R3,R2
    000000C0              L1081:                            
    000000C0 2E22                   MOV.L       R2,@R14
    000000C2              L1076:                            
    000000C2 63E2                   MOV.L       @R14,R3
    000000C4 8438                   MOV.B       @(8,R3),R0
    000000C6 2008                   TST         R0,R0
    000000C8 89E0                   BT          L1077
         float.c    25                    }
         float.c    26                    list(tos - h);
    000000CA 63F2                   MOV.L       @R15,R3
    000000CC D209                   MOV.L       L1094+26,R2; _tos
    000000CE 6422                   MOV.L       @R2,R4
    000000D0 D109                   MOV.L       L1094+30,R1; _list
    000000D2 410B                   JSR         @R1
    000000D4 3438                   SUB         R3,R4
    000000D6 A05E                   BRA         L1082
    000000D8 0009                   NOP
    000000DA              L1094:                            
    000000DA 0570                   .DATA.W     H'0570
    000000DC <00000000>             .DATA.L     _p1
    000000E0 <00000000>             .DATA.L     _symtab
    000000E4 <00000000>             .DATA.L     _push
    000000E8 <00000000>             .DATA.L     _eval
    000000EC <00000000>             .DATA.L     _save
    000000F0 <00000000>             .DATA.L     _pop
    000000F4 <00000000>             .DATA.L     _tos
    000000F8 <00000000>             .DATA.L     _list
    000000FC              L1075:                            
         float.c    27            } else if (p1->k == TENSOR) {
    000000FC 600C                   EXTU.B      R0,R0
    000000FE 8804                   CMP/EQ      #4,R0
    00000100 8B22                   BF          L1083
         float.c    28                    push(p1);
    00000102 4D0B                   JSR         @R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:00  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000104 0009                   NOP
         float.c    29                    copy_tensor();
    00000106 D229                   MOV.L       L1095+4,R2 ; _copy_tensor
    00000108 420B                   JSR         @R2
    0000010A 0009                   NOP
         float.c    30                    p1 = pop();
    0000010C 4B0B                   JSR         @R11
    0000010E 0009                   NOP
    00000110 2E02                   MOV.L       R0,@R14
         float.c    31                    for (i = 0; i < p1->u.tensor->nelem; i++) {
    00000112 A011                   BRA         L1084
    00000114 EC00                   MOV         #0,R12
    00000116              L1085:                            
         float.c    32                            push(p1->u.tensor->elem[i]);
    00000116 6AC3                   MOV         R12,R10
    00000118 60E2                   MOV.L       @R14,R0
    0000011A 4A08                   SHLL2       R10
    0000011C 6402                   MOV.L       @R0,R4
    0000011E 7468                   ADD         #104,R4
    00000120 34AC                   ADD         R10,R4
    00000122 4D0B                   JSR         @R13
    00000124 6442                   MOV.L       @R4,R4
         float.c    33                            yyfloat();
    00000126 BF99                   BSR         _yyfloat
    00000128 0009                   NOP
         float.c    34                            p1->u.tensor->elem[i] = pop();
    0000012A 62E2                   MOV.L       @R14,R2
    0000012C 6122                   MOV.L       @R2,R1
    0000012E 7168                   ADD         #104,R1
    00000130 4B0B                   JSR         @R11
    00000132 3A1C                   ADD         R1,R10
    00000134 2A02                   MOV.L       R0,@R10
    00000136 7C01                   ADD         #1,R12
    00000138              L1084:                            
    00000138 63E2                   MOV.L       @R14,R3
    0000013A E064                   MOV         #100,R0
    0000013C 6232                   MOV.L       @R3,R2
    0000013E 012E                   MOV.L       @(R0,R2),R1
    00000140 3C13                   CMP/GE      R1,R12
    00000142 8BE8                   BF          L1085
    00000144 A025                   BRA         L1067
    00000146 0009                   NOP
    00000148              L1083:                            
         float.c    35                    }
         float.c    36                    push(p1);
         float.c    37            } else if (p1->k == NUM) {
    00000148 8448                   MOV.B       @(8,R4),R0
    0000014A 600C                   EXTU.B      R0,R0
    0000014C 8801                   CMP/EQ      #1,R0
    0000014E 8B06                   BF          L1087
         float.c    38                    push(p1);
    00000150 4D0B                   JSR         @R13
    00000152 0009                   NOP
         float.c    39                    bignum_float();
    00000154 D216                   MOV.L       L1095+8,R2 ; _bignum_float
    00000156 420B                   JSR         @R2
    00000158 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:00  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000015A A01C                   BRA         L1082
    0000015C 0009                   NOP
    0000015E              L1087:                            
    0000015E D215                   MOV.L       L1095+12,R2; _symtab
    00000160 9322                   MOV.W       L1095,R3   ; H'05F4
    00000162 6522                   MOV.L       @R2,R5
    00000164 335C                   ADD         R5,R3
    00000166 3430                   CMP/EQ      R3,R4
    00000168 8B07                   BF          L1089
         float.c    40            } else if (p1 == symbol(PI))
         float.c    41                    push_double(M_PI);
    0000016A D313                   MOV.L       L1095+16,R3; H'54442D18
    0000016C D114                   MOV.L       L1095+24,R1; _push_double
    0000016E 2F36                   MOV.L       R3,@-R15
    00000170 D312                   MOV.L       L1095+20,R3; H'400921FB
    00000172 410B                   JSR         @R1
    00000174 2F36                   MOV.L       R3,@-R15
    00000176 A00A                   BRA         L1093
    00000178 0009                   NOP
    0000017A              L1089:                            
         float.c    42            else if (p1 == symbol(E))
    0000017A 9116                   MOV.W       L1095+2,R1 ; H'05AC
    0000017C 351C                   ADD         R1,R5
    0000017E 3450                   CMP/EQ      R5,R4
    00000180 8B07                   BF          L1067
         float.c    43                    push_double(M_E);
    00000182 D010                   MOV.L       L1095+28,R0; H'8B145769
    00000184 D30E                   MOV.L       L1095+24,R3; _push_double
    00000186 2F06                   MOV.L       R0,@-R15
    00000188 D00F                   MOV.L       L1095+32,R0; H'4005BF0A
    0000018A 430B                   JSR         @R3
    0000018C 2F06                   MOV.L       R0,@-R15
    0000018E              L1093:                            
    0000018E A002                   BRA         L1082
    00000190 7F08                   ADD         #8,R15
    00000192              L1067:
         float.c    44            else
         float.c    45                    push(p1);
    00000192 4D0B                   JSR         @R13
    00000194 64E2                   MOV.L       @R14,R4
    00000196              L1082:                            
         float.c    46            restore();
    00000196 7F04                   ADD         #4,R15
    00000198 D30C                   MOV.L       L1095+36,R3; _restore
    0000019A 4F26                   LDS.L       @R15+,PR
    0000019C 6AF6                   MOV.L       @R15+,R10
    0000019E 6BF6                   MOV.L       @R15+,R11
    000001A0 6CF6                   MOV.L       @R15+,R12
    000001A2 6DF6                   MOV.L       @R15+,R13
    000001A4 432B                   JMP         @R3
    000001A6 6EF6                   MOV.L       @R15+,R14
    000001A8              L1095:                            
    000001A8 05F4                   .DATA.W     H'05F4
    000001AA 05AC                   .DATA.W     H'05AC
    000001AC <00000000>             .DATA.L     _copy_tensor
    000001B0 <00000000>             .DATA.L     _bignum_float
    000001B4 <00000000>             .DATA.L     _symtab




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:00  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001B8 54442D18               .DATA.L     H'54442D18
    000001BC 400921FB               .DATA.L     H'400921FB
    000001C0 <00000000>             .DATA.L     _push_double
    000001C4 8B145769               .DATA.L     H'8B145769
    000001C8 4005BF0A               .DATA.L     H'4005BF0A
    000001CC <00000000>             .DATA.L     _restore
         float.c    47    }






















































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:00  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         2




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:       47



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000001D0 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000001D0 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           12
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           2
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            37






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk6A11.tmp 

