SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:02  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\hilbert.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

       hilbert.c     1    #include "stdafx.h"
       hilbert.c     2    
       hilbert.c     3    //-----------------------------------------------------------------------------
       hilbert.c     4    //
       hilbert.c     5    //      Create a Hilbert matrix
       hilbert.c     6    //
       hilbert.c     7    //      Input:          Dimension on stack
       hilbert.c     8    //
       hilbert.c     9    //      Output:         Hilbert matrix on stack
       hilbert.c    10    //
       hilbert.c    11    //      Example:
       hilbert.c    12    //
       hilbert.c    13    //      > hilbert(5)
       hilbert.c    14    //      ((1,1/2,1/3,1/4),(1/2,1/3,1/4,1/5),(1/3,1/4,1/5,1/6),(1/4,1/5,1/6,1/7))
       hilbert.c    15    //
       hilbert.c    16    //-----------------------------------------------------------------------------
       hilbert.c    17    
       hilbert.c    18    #include "defs.h"
       hilbert.c    19    
       hilbert.c    20    #define A p1
       hilbert.c    21    #define N p2
       hilbert.c    22    
       hilbert.c    23    #define AELEM(i, j) A->u.tensor->elem[i * n + j]
       hilbert.c    24    
       hilbert.c    25    void
       hilbert.c    26    hilbert(void)
P   00000000              _hilbert:                        ; function: hilbert
                                                           ; frame size=40
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 2FB6                   MOV.L       R11,@-R15
    00000008 2FA6                   MOV.L       R10,@-R15
    0000000A 2F96                   MOV.L       R9,@-R15
    0000000C 2F86                   MOV.L       R8,@-R15
    0000000E 4F22                   STS.L       PR,@-R15
    00000010 4F12                   STS.L       MACL,@-R15
       hilbert.c    27    {
       hilbert.c    28            int i, j, n;
       hilbert.c    29            save();
    00000012 D329                   MOV.L       L1073,R3   ; _save
    00000014 430B                   JSR         @R3
    00000016 0009                   NOP
       hilbert.c    30            N = pop();
    00000018 DD28                   MOV.L       L1073+4,R13; _p2
    0000001A D929                   MOV.L       L1073+8,R9 ; _pop
    0000001C 490B                   JSR         @R9
    0000001E 0009                   NOP
    00000020 2D02                   MOV.L       R0,@R13
       hilbert.c    31            push(N);
    00000022 D228                   MOV.L       L1073+12,R2; _push
    00000024 420B                   JSR         @R2
    00000026 6403                   MOV         R0,R4
       hilbert.c    32            n = pop_integer();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:02  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000028 D327                   MOV.L       L1073+16,R3; _pop_integer
    0000002A 430B                   JSR         @R3
    0000002C 0009                   NOP
    0000002E 6E03                   MOV         R0,R14
       hilbert.c    33            if (n < 2) {
    00000030 E202                   MOV         #2,R2
    00000032 3E23                   CMP/GE      R2,R14
    00000034 890A                   BT          L1067
       hilbert.c    34                    push_symbol(HILBERT);
    00000036 D125                   MOV.L       L1073+20,R1; _push_symbol
    00000038 410B                   JSR         @R1
    0000003A E43B                   MOV         #59,R4
       hilbert.c    35                    push(N);
    0000003C D321                   MOV.L       L1073+12,R3; _push
    0000003E 430B                   JSR         @R3
    00000040 64D2                   MOV.L       @R13,R4
       hilbert.c    36                    list(2);
    00000042 D223                   MOV.L       L1073+24,R2; _list
    00000044 420B                   JSR         @R2
    00000046 E402                   MOV         #2,R4
    00000048 A02B                   BRA         L1065
    0000004A 0009                   NOP
    0000004C              L1067:                            
       hilbert.c    37                    restore();
       hilbert.c    38                    return;
       hilbert.c    39            }
       hilbert.c    40            push_zero_matrix(n, n);
    0000004C D221                   MOV.L       L1073+28,R2; _push_zero_matrix
    0000004E 65E3                   MOV         R14,R5
    00000050 420B                   JSR         @R2
    00000052 64E3                   MOV         R14,R4
       hilbert.c    41            A = pop();
    00000054 D820                   MOV.L       L1073+32,R8; _p1
    00000056 490B                   JSR         @R9
    00000058 0009                   NOP
    0000005A 2802                   MOV.L       R0,@R8
       hilbert.c    42            for (i = 0; i < n; i++) {
    0000005C A01C                   BRA         L1069
    0000005E EB00                   MOV         #0,R11
    00000060              L1070:                            
    00000060 0BE7                   MUL.L       R14,R11
    00000062 6CB3                   MOV         R11,R12
       hilbert.c    43                    for (j = 0; j < n; j++) {
    00000064 EA00                   MOV         #0,R10
    00000066 0D1A                   STS         MACL,R13
    00000068 4D08                   SHLL2       R13
    0000006A 4E15                   CMP/PL      R14
    0000006C 8F13                   BF/S        L1071
    0000006E 7C01                   ADD         #1,R12
    00000070              L1072:                            
       hilbert.c    44                            push_integer(i + j + 1);
    00000070 D21A                   MOV.L       L1073+36,R2; _push_integer
    00000072 420B                   JSR         @R2
    00000074 64C3                   MOV         R12,R4
       hilbert.c    45                            inverse();
    00000076 D31A                   MOV.L       L1073+40,R3; _inverse
    00000078 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:02  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000007A 0009                   NOP
       hilbert.c    46                            AELEM(i, j) = pop();
    0000007C 6282                   MOV.L       @R8,R2
    0000007E 6122                   MOV.L       @R2,R1
    00000080 7168                   ADD         #104,R1
    00000082 31DC                   ADD         R13,R1
    00000084 490B                   JSR         @R9
    00000086 2F16                   MOV.L       R1,@-R15
    00000088 63F6                   MOV.L       @R15+,R3
    0000008A 7A01                   ADD         #1,R10
    0000008C 2302                   MOV.L       R0,@R3
    0000008E 7D04                   ADD         #4,R13
    00000090 3AE3                   CMP/GE      R14,R10
    00000092 8FED                   BF/S        L1072
    00000094 7C01                   ADD         #1,R12
    00000096              L1071:                            
    00000096 7B01                   ADD         #1,R11
    00000098              L1069:                            
    00000098 3BE3                   CMP/GE      R14,R11
    0000009A 8BE1                   BF          L1070
       hilbert.c    47                    }
       hilbert.c    48            }
       hilbert.c    49            push(A);
    0000009C D209                   MOV.L       L1073+12,R2; _push
    0000009E 420B                   JSR         @R2
    000000A0 6482                   MOV.L       @R8,R4
    000000A2              L1065:
       hilbert.c    50            restore();
    000000A2 4F16                   LDS.L       @R15+,MACL
    000000A4 D30F                   MOV.L       L1073+44,R3; _restore
    000000A6 4F26                   LDS.L       @R15+,PR
    000000A8 68F6                   MOV.L       @R15+,R8
    000000AA 69F6                   MOV.L       @R15+,R9
    000000AC 6AF6                   MOV.L       @R15+,R10
    000000AE 6BF6                   MOV.L       @R15+,R11
    000000B0 6CF6                   MOV.L       @R15+,R12
    000000B2 6DF6                   MOV.L       @R15+,R13
    000000B4 432B                   JMP         @R3
    000000B6 6EF6                   MOV.L       @R15+,R14
    000000B8              L1073:                            
    000000B8 <00000000>             .DATA.L     _save
    000000BC <00000000>             .DATA.L     _p2
    000000C0 <00000000>             .DATA.L     _pop
    000000C4 <00000000>             .DATA.L     _push
    000000C8 <00000000>             .DATA.L     _pop_integer
    000000CC <00000000>             .DATA.L     _push_symbol
    000000D0 <00000000>             .DATA.L     _list
    000000D4 <00000000>             .DATA.L     _push_zero_matrix
    000000D8 <00000000>             .DATA.L     _p1
    000000DC <00000000>             .DATA.L     _push_integer
    000000E0 <00000000>             .DATA.L     _inverse
    000000E4 <00000000>             .DATA.L     _restore
       hilbert.c    51    }








SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:02  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:       51



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000000E8 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000000E8 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           12
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           1
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            20






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk72B0.tmp 

