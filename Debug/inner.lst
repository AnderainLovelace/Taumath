SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:03  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\inner.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         inner.c     1    // Do the inner product of tensors.
         inner.c     2    
         inner.c     3    #include "stdafx.h"
         inner.c     4    #include "defs.h"
         inner.c     5    
         inner.c     6    static void inner_f(void);
         inner.c     7    
         inner.c     8    void
         inner.c     9    eval_inner(void)
P   00000000              _eval_inner:                     ; function: eval_inner
                                                           ; frame size=16
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 4F22                   STS.L       PR,@-R15
         inner.c    10    {
         inner.c    11            p1 = cdr(p1);
    00000008 DE37                   MOV.L       L1122+2,R14; _p1
    0000000A 62E2                   MOV.L       @R14,R2
    0000000C 8428                   MOV.B       @(8,R2),R0
    0000000E 2008                   TST         R0,R0
    00000010 8B02                   BF          L1083
    00000012 62E2                   MOV.L       @R14,R2
    00000014 A004                   BRA         L1084
    00000016 5321                   MOV.L       @(4,R2),R3
    00000018              L1083:                            
    00000018 9265                   MOV.W       L1122,R2   ; H'0570
    0000001A D134                   MOV.L       L1122+6,R1 ; _symtab
    0000001C 6312                   MOV.L       @R1,R3
    0000001E 332C                   ADD         R2,R3
    00000020              L1084:                            
    00000020 2E32                   MOV.L       R3,@R14
         inner.c    12            push(car(p1));
    00000022 6433                   MOV         R3,R4
    00000024 DD32                   MOV.L       L1122+10,R13; _push
    00000026 8448                   MOV.B       @(8,R4),R0
    00000028 2008                   TST         R0,R0
    0000002A 8B02                   BF          L1085
    0000002C 64E2                   MOV.L       @R14,R4
    0000002E A004                   BRA         L1086
    00000030 6442                   MOV.L       @R4,R4
    00000032              L1085:                            
    00000032 9358                   MOV.W       L1122,R3   ; H'0570
    00000034 D22D                   MOV.L       L1122+6,R2 ; _symtab
    00000036 6422                   MOV.L       @R2,R4
    00000038 343C                   ADD         R3,R4
    0000003A              L1086:                            
    0000003A 4D0B                   JSR         @R13
    0000003C 0009                   NOP
         inner.c    13            eval();
    0000003E DC2D                   MOV.L       L1122+14,R12; _eval
    00000040 4C0B                   JSR         @R12
    00000042 0009                   NOP
         inner.c    14            p1 = cdr(p1);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:03  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000044 62E2                   MOV.L       @R14,R2
    00000046 8428                   MOV.B       @(8,R2),R0
    00000048 2008                   TST         R0,R0
    0000004A 8B02                   BF          L1087
    0000004C 62E2                   MOV.L       @R14,R2
    0000004E A004                   BRA         L1088
    00000050 5321                   MOV.L       @(4,R2),R3
    00000052              L1087:                            
    00000052 9248                   MOV.W       L1122,R2   ; H'0570
    00000054 D125                   MOV.L       L1122+6,R1 ; _symtab
    00000056 6312                   MOV.L       @R1,R3
    00000058 332C                   ADD         R2,R3
    0000005A              L1088:                            
         inner.c    15            while (iscons(p1)) {
    0000005A A01D                   BRA         L1089
    0000005C 2E32                   MOV.L       R3,@R14
    0000005E              L1090:                            
         inner.c    16                    push(car(p1));
    0000005E 64E2                   MOV.L       @R14,R4
    00000060 8448                   MOV.B       @(8,R4),R0
    00000062 2008                   TST         R0,R0
    00000064 8B02                   BF          L1091
    00000066 64E2                   MOV.L       @R14,R4
    00000068 A004                   BRA         L1092
    0000006A 6442                   MOV.L       @R4,R4
    0000006C              L1091:                            
    0000006C 933B                   MOV.W       L1122,R3   ; H'0570
    0000006E D21F                   MOV.L       L1122+6,R2 ; _symtab
    00000070 6422                   MOV.L       @R2,R4
    00000072 343C                   ADD         R3,R4
    00000074              L1092:                            
    00000074 4D0B                   JSR         @R13
    00000076 0009                   NOP
         inner.c    17                    eval();
    00000078 4C0B                   JSR         @R12
    0000007A 0009                   NOP
         inner.c    18                    inner();
    0000007C B015                   BSR         _inner
    0000007E 0009                   NOP
         inner.c    19                    p1 = cdr(p1);
    00000080 63E2                   MOV.L       @R14,R3
    00000082 8438                   MOV.B       @(8,R3),R0
    00000084 2008                   TST         R0,R0
    00000086 8B02                   BF          L1093
    00000088 62E2                   MOV.L       @R14,R2
    0000008A A004                   BRA         L1094
    0000008C 5221                   MOV.L       @(4,R2),R2
    0000008E              L1093:                            
    0000008E 932A                   MOV.W       L1122,R3   ; H'0570
    00000090 D116                   MOV.L       L1122+6,R1 ; _symtab
    00000092 6212                   MOV.L       @R1,R2
    00000094 323C                   ADD         R3,R2
    00000096              L1094:                            
    00000096 2E22                   MOV.L       R2,@R14
    00000098              L1089:                            
    00000098 63E2                   MOV.L       @R14,R3
    0000009A 8438                   MOV.B       @(8,R3),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:03  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000009C 2008                   TST         R0,R0
    0000009E 89DE                   BT          L1090
         inner.c    20            }
         inner.c    21    }
    000000A0 4F26                   LDS.L       @R15+,PR
    000000A2 6CF6                   MOV.L       @R15+,R12
    000000A4 6DF6                   MOV.L       @R15+,R13
    000000A6 000B                   RTS
    000000A8 6EF6                   MOV.L       @R15+,R14
         inner.c    22    
         inner.c    23    void
         inner.c    24    inner(void)
    000000AA              _inner:                          ; function: inner
                                                           ; frame size=12
    000000AA 2FE6                   MOV.L       R14,@-R15
    000000AC 2FD6                   MOV.L       R13,@-R15
    000000AE 4F22                   STS.L       PR,@-R15
         inner.c    25    {
         inner.c    26            save();
    000000B0 D311                   MOV.L       L1122+18,R3; _save
    000000B2 430B                   JSR         @R3
    000000B4 0009                   NOP
         inner.c    27            p2 = pop();
    000000B6 DE11                   MOV.L       L1122+22,R14; _p2
    000000B8 D211                   MOV.L       L1122+26,R2; _pop
    000000BA 420B                   JSR         @R2
    000000BC 0009                   NOP
         inner.c    28            p1 = pop();
    000000BE DD0A                   MOV.L       L1122+2,R13; _p1
    000000C0 D30F                   MOV.L       L1122+26,R3; _pop
    000000C2 430B                   JSR         @R3
    000000C4 2E02                   MOV.L       R0,@R14
    000000C6 6403                   MOV         R0,R4
    000000C8 2D02                   MOV.L       R0,@R13
    000000CA 8448                   MOV.B       @(8,R4),R0
    000000CC 600C                   EXTU.B      R0,R0
    000000CE 8804                   CMP/EQ      #4,R0
    000000D0 8B18                   BF          L1095
    000000D2 D30A                   MOV.L       L1122+22,R3; _p2
    000000D4 6032                   MOV.L       @R3,R0
    000000D6 8408                   MOV.B       @(8,R0),R0
    000000D8 600C                   EXTU.B      R0,R0
    000000DA 8804                   CMP/EQ      #4,R0
    000000DC 8B12                   BF          L1095
         inner.c    29            if (istensor(p1) && istensor(p2))
         inner.c    30                    inner_f();
    000000DE B033                   BSR         __$inner_f
    000000E0 0009                   NOP
    000000E2 A02C                   BRA         L1096
    000000E4 0009                   NOP
    000000E6              L1122:                            
    000000E6 0570                   .DATA.W     H'0570
    000000E8 <00000000>             .DATA.L     _p1
    000000EC <00000000>             .DATA.L     _symtab
    000000F0 <00000000>             .DATA.L     _push
    000000F4 <00000000>             .DATA.L     _eval
    000000F8 <00000000>             .DATA.L     _save




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:03  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000FC <00000000>             .DATA.L     _p2
    00000100 <00000000>             .DATA.L     _pop
    00000104              L1095:                            
         inner.c    31            else {
         inner.c    32                    push(p1);
    00000104 D391                   MOV.L       L1123,R3   ; _push
    00000106 430B                   JSR         @R3
    00000108 0009                   NOP
         inner.c    33                    push(p2);
    0000010A D290                   MOV.L       L1123,R2   ; _push
    0000010C 420B                   JSR         @R2
    0000010E 64E2                   MOV.L       @R14,R4
         inner.c    34                    if (istensor(p1))
    00000110 60D2                   MOV.L       @R13,R0
    00000112 8408                   MOV.B       @(8,R0),R0
    00000114 600C                   EXTU.B      R0,R0
    00000116 8804                   CMP/EQ      #4,R0
    00000118 8B04                   BF          L1097
         inner.c    35                            tensor_times_scalar();
    0000011A D28D                   MOV.L       L1123+4,R2 ; _tensor_times_scalar
    0000011C 420B                   JSR         @R2
    0000011E 0009                   NOP
    00000120 A00D                   BRA         L1096
    00000122 0009                   NOP
    00000124              L1097:                            
         inner.c    36                    else if (istensor(p2))
    00000124 60E2                   MOV.L       @R14,R0
    00000126 8408                   MOV.B       @(8,R0),R0
    00000128 600C                   EXTU.B      R0,R0
    0000012A 8804                   CMP/EQ      #4,R0
    0000012C 8B04                   BF          L1099
         inner.c    37                            scalar_times_tensor();
    0000012E D289                   MOV.L       L1123+8,R2 ; _scalar_times_tensor
    00000130 420B                   JSR         @R2
    00000132 0009                   NOP
    00000134 A003                   BRA         L1096
    00000136 0009                   NOP
    00000138              L1099:                            
         inner.c    38                    else
         inner.c    39                            multiply();
    00000138 D287                   MOV.L       L1123+12,R2; _multiply
    0000013A 420B                   JSR         @R2
    0000013C 0009                   NOP
    0000013E              L1096:                            
         inner.c    40            }
         inner.c    41            restore();
    0000013E 4F26                   LDS.L       @R15+,PR
    00000140 D386                   MOV.L       L1123+16,R3; _restore
    00000142 6DF6                   MOV.L       @R15+,R13
    00000144 432B                   JMP         @R3
    00000146 6EF6                   MOV.L       @R15+,R14
         inner.c    42    }
         inner.c    43    
         inner.c    44    // inner product of tensors p1 and p2
         inner.c    45    
         inner.c    46    static void
         inner.c    47    inner_f(void)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:03  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000148              __$inner_f:                      ; function: inner_f
                                                           ; frame size=80
    00000148 2FE6                   MOV.L       R14,@-R15
    0000014A 2FD6                   MOV.L       R13,@-R15
    0000014C 2FC6                   MOV.L       R12,@-R15
    0000014E 2FB6                   MOV.L       R11,@-R15
    00000150 2FA6                   MOV.L       R10,@-R15
    00000152 2F96                   MOV.L       R9,@-R15
    00000154 2F86                   MOV.L       R8,@-R15
    00000156 4F22                   STS.L       PR,@-R15
    00000158 4F12                   STS.L       MACL,@-R15
    0000015A 7FD4                   ADD         #-44,R15
         inner.c    48    {
         inner.c    49            int ak, bk, i, j, k, n, ndim;
         inner.c    50            U **a, **b, **c;
         inner.c    51    
         inner.c    52            n = p1->u.tensor->dim[p1->u.tensor->ndim - 1];
    0000015C D880                   MOV.L       L1123+20,R8; _p1
    0000015E 6482                   MOV.L       @R8,R4
    00000160 6442                   MOV.L       @R4,R4
    00000162 6342                   MOV.L       @R4,R3
    00000164 73FF                   ADD         #-1,R3
    00000166 4308                   SHLL2       R3
    00000168 6243                   MOV         R4,R2
    0000016A 7204                   ADD         #4,R2
    0000016C 332C                   ADD         R2,R3
    0000016E 6132                   MOV.L       @R3,R1
         inner.c    53    
         inner.c    54            if (n != p2->u.tensor->dim[0])
    00000170 D27C                   MOV.L       L1123+24,R2; _p2
    00000172 1F13                   MOV.L       R1,@(12,R15)
    00000174 6322                   MOV.L       @R2,R3
    00000176 6132                   MOV.L       @R3,R1
    00000178 53F3                   MOV.L       @(12,R15),R3
    0000017A 5011                   MOV.L       @(4,R1),R0
    0000017C 3300                   CMP/EQ      R0,R3
    0000017E 8903                   BT          L1101
         inner.c    55                    stop("inner: tensor dimension check");
    00000180 D479                   MOV.L       L1123+28,R4; L1074
    00000182 D17A                   MOV.L       L1123+32,R1; _stop
    00000184 410B                   JSR         @R1
    00000186 0009                   NOP
    00000188              L1101:                            
         inner.c    56    
         inner.c    57            ndim = p1->u.tensor->ndim + p2->u.tensor->ndim - 2;
    00000188 6382                   MOV.L       @R8,R3
    0000018A 6232                   MOV.L       @R3,R2
    0000018C D075                   MOV.L       L1123+24,R0; _p2
    0000018E 6102                   MOV.L       @R0,R1
    00000190 6222                   MOV.L       @R2,R2
    00000192 6312                   MOV.L       @R1,R3
    00000194 6332                   MOV.L       @R3,R3
    00000196 323C                   ADD         R3,R2
    00000198 72FE                   ADD         #-2,R2
         inner.c    58    
         inner.c    59            if (ndim > MAXDIM)
    0000019A E318                   MOV         #24,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:03  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000019C 3237                   CMP/GT      R3,R2
    0000019E 8F04                   BF/S        L1102
    000001A0 1F2A                   MOV.L       R2,@(40,R15)
         inner.c    60                    stop("inner: rank of result exceeds maximum");
    000001A2 D473                   MOV.L       L1123+36,R4; L1075
    000001A4 D371                   MOV.L       L1123+32,R3; _stop
    000001A6 430B                   JSR         @R3
    000001A8 0009                   NOP
    000001AA              L1102:                            
         inner.c    61    
         inner.c    62            a = p1->u.tensor->elem;
         inner.c    63            b = p2->u.tensor->elem;
         inner.c    64    
         inner.c    65            //---------------------------------------------------------------------
         inner.c    66            //
         inner.c    67            //      ak is the number of rows in tensor A
         inner.c    68            //
         inner.c    69            //      bk is the number of columns in tensor B
         inner.c    70            //
         inner.c    71            //      Example:
         inner.c    72            //
         inner.c    73            //      A[3][3][4] B[4][4][3]
         inner.c    74            //
         inner.c    75            //        3  3                          ak = 3 * 3 = 9
         inner.c    76            //
         inner.c    77            //                      4  3            bk = 4 * 3 = 12
         inner.c    78            //
         inner.c    79            //---------------------------------------------------------------------
         inner.c    80    
         inner.c    81            ak = 1;
    000001AA E701                   MOV         #1,R7
    000001AC 6582                   MOV.L       @R8,R5
         inner.c    82            for (i = 0; i < p1->u.tensor->ndim - 1; i++)
    000001AE E900                   MOV         #0,R9
    000001B0 D26C                   MOV.L       L1123+24,R2; _p2
    000001B2 6352                   MOV.L       @R5,R3
    000001B4 7368                   ADD         #104,R3
    000001B6 1F34                   MOV.L       R3,@(16,R15)
    000001B8 6622                   MOV.L       @R2,R6
    000001BA 6162                   MOV.L       @R6,R1
    000001BC 7168                   ADD         #104,R1
    000001BE 1F19                   MOV.L       R1,@(36,R15)
    000001C0 1F75                   MOV.L       R7,@(20,R15)
    000001C2 A00C                   BRA         L1103
    000001C4 6493                   MOV         R9,R4
    000001C6              L1104:                            
         inner.c    83                    ak *= p1->u.tensor->dim[i];
    000001C6 6343                   MOV         R4,R3
    000001C8 51F5                   MOV.L       @(20,R15),R1
    000001CA 4308                   SHLL2       R3
    000001CC 6052                   MOV.L       @R5,R0
    000001CE 7401                   ADD         #1,R4
    000001D0 6203                   MOV         R0,R2
    000001D2 7204                   ADD         #4,R2
    000001D4 332C                   ADD         R2,R3
    000001D6 6332                   MOV.L       @R3,R3
    000001D8 0137                   MUL.L       R3,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:03  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001DA 011A                   STS         MACL,R1
    000001DC 1F15                   MOV.L       R1,@(20,R15)
    000001DE              L1103:                            
    000001DE 6352                   MOV.L       @R5,R3
    000001E0 6232                   MOV.L       @R3,R2
    000001E2 72FF                   ADD         #-1,R2
    000001E4 3423                   CMP/GE      R2,R4
    000001E6 8BEE                   BF          L1104
         inner.c    84    
         inner.c    85            bk = 1;
    000001E8 6B73                   MOV         R7,R11
         inner.c    86            for (i = 1; i < p2->u.tensor->ndim; i++)
    000001EA A00A                   BRA         L1105
    000001EC 6473                   MOV         R7,R4
    000001EE              L1106:                            
         inner.c    87                    bk *= p2->u.tensor->dim[i];
    000001EE 6343                   MOV         R4,R3
    000001F0 6062                   MOV.L       @R6,R0
    000001F2 4308                   SHLL2       R3
    000001F4 6203                   MOV         R0,R2
    000001F6 7204                   ADD         #4,R2
    000001F8 332C                   ADD         R2,R3
    000001FA 7401                   ADD         #1,R4
    000001FC 6132                   MOV.L       @R3,R1
    000001FE 0B17                   MUL.L       R1,R11
    00000200 0B1A                   STS         MACL,R11
    00000202              L1105:                            
    00000202 6362                   MOV.L       @R6,R3
    00000204 6232                   MOV.L       @R3,R2
    00000206 3423                   CMP/GE      R2,R4
    00000208 8BF1                   BF          L1106
         inner.c    88    
         inner.c    89            p3 = alloc_tensor(ak * bk);
    0000020A 54F5                   MOV.L       @(20,R15),R4
    0000020C D359                   MOV.L       L1123+40,R3; _alloc_tensor
    0000020E 04B7                   MUL.L       R11,R4
    00000210 430B                   JSR         @R3
    00000212 041A                   STS         MACL,R4
    00000214 D258                   MOV.L       L1123+44,R2; _p3
    00000216 2202                   MOV.L       R0,@R2
         inner.c    90    
         inner.c    91            c = p3->u.tensor->elem;
    00000218 6102                   MOV.L       @R0,R1
    0000021A 7168                   ADD         #104,R1
    0000021C 1F17                   MOV.L       R1,@(28,R15)
         inner.c    92    
         inner.c    93            // new method copied from ginac
         inner.c    94    #if 1
         inner.c    95            for (i = 0; i < ak; i++) {
    0000021E DD4B                   MOV.L       L1123,R13  ; _push
    00000220 A043                   BRA         L1107
    00000222 2F92                   MOV.L       R9,@R15
    00000224              L1108:                            
    00000224 53F3                   MOV.L       @(12,R15),R3
         inner.c    96                    for (j = 0; j < n; j++) {
    00000226 6C93                   MOV         R9,R12
    00000228 62F2                   MOV.L       @R15,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:03  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000022A 0237                   MUL.L       R3,R2
    0000022C 031A                   STS         MACL,R3
    0000022E 1F31                   MOV.L       R3,@(4,R15)
    00000230 0B27                   MUL.L       R2,R11
    00000232 021A                   STS         MACL,R2
    00000234 A033                   BRA         L1109
    00000236 1F28                   MOV.L       R2,@(32,R15)
    00000238              L1110:                            
         inner.c    97                            if (iszero(a[i * n + j]))
    00000238 54F1                   MOV.L       @(4,R15),R4
    0000023A 34CC                   ADD         R12,R4
    0000023C 50F4                   MOV.L       @(16,R15),R0
    0000023E 4408                   SHLL2       R4
    00000240 D34E                   MOV.L       L1123+48,R3; _iszero
    00000242 430B                   JSR         @R3
    00000244 044E                   MOV.L       @(R0,R4),R4
    00000246 2008                   TST         R0,R0
    00000248 8B28                   BF          L1112
         inner.c    98                                    continue;
         inner.c    99                            for (k = 0; k < bk; k++) {
    0000024A 4B15                   CMP/PL      R11
    0000024C 1F92                   MOV.L       R9,@(8,R15)
    0000024E 5EF8                   MOV.L       @(32,R15),R14
    00000250 53F7                   MOV.L       @(28,R15),R3
    00000252 4E08                   SHLL2       R14
    00000254 0BC7                   MUL.L       R12,R11
    00000256 3E3C                   ADD         R3,R14
    00000258 52F9                   MOV.L       @(36,R15),R2
    0000025A 0A1A                   STS         MACL,R10
    0000025C 51F1                   MOV.L       @(4,R15),R1
    0000025E 4A08                   SHLL2       R10
    00000260 50F4                   MOV.L       @(16,R15),R0
    00000262 31CC                   ADD         R12,R1
    00000264 3A2C                   ADD         R2,R10
    00000266 4108                   SHLL2       R1
    00000268 310C                   ADD         R0,R1
    0000026A 8F17                   BF/S        L1112
    0000026C 1F16                   MOV.L       R1,@(24,R15)
    0000026E              L1114:                            
         inner.c   100                                    push(a[i * n + j]);
    0000026E 54F6                   MOV.L       @(24,R15),R4
    00000270 4D0B                   JSR         @R13
    00000272 6442                   MOV.L       @R4,R4
         inner.c   101                                    push(b[j * bk + k]);
    00000274 4D0B                   JSR         @R13
    00000276 64A6                   MOV.L       @R10+,R4
         inner.c   102                                    multiply();
    00000278 D337                   MOV.L       L1123+12,R3; _multiply
    0000027A 430B                   JSR         @R3
    0000027C 0009                   NOP
         inner.c   103                                    push(c[i * bk + k]);
    0000027E 4D0B                   JSR         @R13
    00000280 64E2                   MOV.L       @R14,R4
         inner.c   104                                    add();
    00000282 D23F                   MOV.L       L1123+52,R2; _add
    00000284 420B                   JSR         @R2
    00000286 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:03  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         inner.c   105                                    c[i * bk + k] = pop();
    00000288 D33E                   MOV.L       L1123+56,R3; _pop
    0000028A 430B                   JSR         @R3
    0000028C 0009                   NOP
    0000028E 2E02                   MOV.L       R0,@R14
    00000290 52F2                   MOV.L       @(8,R15),R2
    00000292 7201                   ADD         #1,R2
    00000294 1F22                   MOV.L       R2,@(8,R15)
    00000296 32B3                   CMP/GE      R11,R2
    00000298 8FE9                   BF/S        L1114
    0000029A 7E04                   ADD         #4,R14
    0000029C              L1112:                            
    0000029C 7C01                   ADD         #1,R12
    0000029E              L1109:                            
    0000029E 52F3                   MOV.L       @(12,R15),R2
    000002A0 3C23                   CMP/GE      R2,R12
    000002A2 8BC9                   BF          L1110
    000002A4 61F2                   MOV.L       @R15,R1
    000002A6 7101                   ADD         #1,R1
    000002A8 2F12                   MOV.L       R1,@R15
    000002AA              L1107:                            
    000002AA 53F5                   MOV.L       @(20,R15),R3
    000002AC 62F2                   MOV.L       @R15,R2
    000002AE 3233                   CMP/GE      R3,R2
    000002B0 8BB8                   BF          L1108
    000002B2 D331                   MOV.L       L1123+44,R3; _p3
    000002B4 52FA                   MOV.L       @(40,R15),R2
    000002B6 2228                   TST         R2,R2
    000002B8 8F04                   BF/S        L1115
    000002BA 6E32                   MOV.L       @R3,R14
         inner.c   106                            }
         inner.c   107                    }
         inner.c   108            }
         inner.c   109    #else
         inner.c   110            for (i = 0; i < ak; i++) {
         inner.c   111                    for (j = 0; j < bk; j++) {
         inner.c   112                            push(zero);
         inner.c   113                            for (k = 0; k < n; k++) {
         inner.c   114                                    push(a[i * n + k]);
         inner.c   115                                    push(b[k * bk + j]);
         inner.c   116                                    multiply();
         inner.c   117                                    add();
         inner.c   118                            }
         inner.c   119                            c[i * bk + j] = pop();
         inner.c   120                    }
         inner.c   121            }
         inner.c   122    #endif
         inner.c   123            //---------------------------------------------------------------------
         inner.c   124            //
         inner.c   125            //      Note on understanding "k * bk + j"
         inner.c   126            //
         inner.c   127            //      k * bk because each element of a column is bk locations apart
         inner.c   128            //
         inner.c   129            //      + j because the beginnings of all columns are in the first bk 
         inner.c   130            //      locations
         inner.c   131            //
         inner.c   132            //      Example: n = 2, bk = 6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:03  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         inner.c   133            //
         inner.c   134            //      b111    <- 1st element of 1st column
         inner.c   135            //      b112    <- 1st element of 2nd column
         inner.c   136            //      b113    <- 1st element of 3rd column
         inner.c   137            //      b121    <- 1st element of 4th column
         inner.c   138            //      b122    <- 1st element of 5th column
         inner.c   139            //      b123    <- 1st element of 6th column
         inner.c   140            //
         inner.c   141            //      b211    <- 2nd element of 1st column
         inner.c   142            //      b212    <- 2nd element of 2nd column
         inner.c   143            //      b213    <- 2nd element of 3rd column
         inner.c   144            //      b221    <- 2nd element of 4th column
         inner.c   145            //      b222    <- 2nd element of 5th column
         inner.c   146            //      b223    <- 2nd element of 6th column
         inner.c   147            //
         inner.c   148            //---------------------------------------------------------------------
         inner.c   149    
         inner.c   150            if (ndim == 0)
         inner.c   151                    push(p3->u.tensor->elem[0]);
    000002BC 64E2                   MOV.L       @R14,R4
    000002BE 7468                   ADD         #104,R4
    000002C0 A037                   BRA         L1121
    000002C2 6442                   MOV.L       @R4,R4
    000002C4              L1115:                            
         inner.c   152            else {
         inner.c   153                    p3->u.tensor->ndim = ndim;
    000002C4 62E2                   MOV.L       @R14,R2
    000002C6 51FA                   MOV.L       @(40,R15),R1
    000002C8 2212                   MOV.L       R1,@R2
         inner.c   154                    for (i = 0; i < p1->u.tensor->ndim - 1; i++)
    000002CA A00E                   BRA         L1117
    000002CC 6493                   MOV         R9,R4
    000002CE              L1118:                            
         inner.c   155                            p3->u.tensor->dim[i] = p1->u.tensor->dim[i];
    000002CE 6543                   MOV         R4,R5
    000002D0 D329                   MOV.L       L1123+44,R3; _p3
    000002D2 4508                   SHLL2       R5
    000002D4 6032                   MOV.L       @R3,R0
    000002D6 7401                   ADD         #1,R4
    000002D8 6202                   MOV.L       @R0,R2
    000002DA 7204                   ADD         #4,R2
    000002DC 6082                   MOV.L       @R8,R0
    000002DE 325C                   ADD         R5,R2
    000002E0 6102                   MOV.L       @R0,R1
    000002E2 7104                   ADD         #4,R1
    000002E4 315C                   ADD         R5,R1
    000002E6 6012                   MOV.L       @R1,R0
    000002E8 2202                   MOV.L       R0,@R2
    000002EA              L1117:                            
    000002EA 6382                   MOV.L       @R8,R3
    000002EC 6232                   MOV.L       @R3,R2
    000002EE 6122                   MOV.L       @R2,R1
    000002F0 71FF                   ADD         #-1,R1
    000002F2 3413                   CMP/GE      R1,R4
    000002F4 8BEB                   BF          L1118
         inner.c   156                    j = i;
    000002F6 6543                   MOV         R4,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:03  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         inner.c   157                    for (i = 0; i < p2->u.tensor->ndim - 1; i++)
    000002F8 A012                   BRA         L1119
    000002FA 6493                   MOV         R9,R4
    000002FC              L1120:                            
         inner.c   158                            p3->u.tensor->dim[j + i] = p2->u.tensor->dim[i + 1];
    000002FC D31E                   MOV.L       L1123+44,R3; _p3
    000002FE 6243                   MOV         R4,R2
    00000300 6032                   MOV.L       @R3,R0
    00000302 325C                   ADD         R5,R2
    00000304 6102                   MOV.L       @R0,R1
    00000306 6343                   MOV         R4,R3
    00000308 4208                   SHLL2       R2
    0000030A 7104                   ADD         #4,R1
    0000030C 321C                   ADD         R1,R2
    0000030E 4308                   SHLL2       R3
    00000310 D114                   MOV.L       L1123+24,R1; _p2
    00000312 7401                   ADD         #1,R4
    00000314 6012                   MOV.L       @R1,R0
    00000316 6002                   MOV.L       @R0,R0
    00000318 7004                   ADD         #4,R0
    0000031A 330C                   ADD         R0,R3
    0000031C 5331                   MOV.L       @(4,R3),R3
    0000031E 2232                   MOV.L       R3,@R2
    00000320              L1119:                            
    00000320 D310                   MOV.L       L1123+24,R3; _p2
    00000322 6232                   MOV.L       @R3,R2
    00000324 6122                   MOV.L       @R2,R1
    00000326 6012                   MOV.L       @R1,R0
    00000328 70FF                   ADD         #-1,R0
    0000032A 3403                   CMP/GE      R0,R4
    0000032C 8BE6                   BF          L1120
         inner.c   159                    push(p3);
    0000032E D312                   MOV.L       L1123+44,R3; _p3
    00000330 6432                   MOV.L       @R3,R4
    00000332              L1121:                            
    00000332 4D0B                   JSR         @R13
    00000334 0009                   NOP
         inner.c   160            }
         inner.c   161    }
    00000336 7F2C                   ADD         #44,R15
    00000338 4F16                   LDS.L       @R15+,MACL
    0000033A 4F26                   LDS.L       @R15+,PR
    0000033C 68F6                   MOV.L       @R15+,R8
    0000033E 69F6                   MOV.L       @R15+,R9
    00000340 6AF6                   MOV.L       @R15+,R10
    00000342 6BF6                   MOV.L       @R15+,R11
    00000344 6CF6                   MOV.L       @R15+,R12
    00000346 6DF6                   MOV.L       @R15+,R13
    00000348 000B                   RTS
    0000034A 6EF6                   MOV.L       @R15+,R14
    0000034C              L1123:                            
    0000034C <00000000>             .DATA.L     _push
    00000350 <00000000>             .DATA.L     _tensor_times_scalar
    00000354 <00000000>             .DATA.L     _scalar_times_tensor
    00000358 <00000000>             .DATA.L     _multiply
    0000035C <00000000>             .DATA.L     _restore
    00000360 <00000000>             .DATA.L     _p1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:03  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000364 <00000000>             .DATA.L     _p2
    00000368 <00000000>             .DATA.L     L1074
    0000036C <00000000>             .DATA.L     _stop
    00000370 <00000000>             .DATA.L     L1075
    00000374 <00000000>             .DATA.L     _alloc_tensor
    00000378 <00000000>             .DATA.L     _p3
    0000037C <00000000>             .DATA.L     _iszero
    00000380 <00000000>             .DATA.L     _add
    00000384 <00000000>             .DATA.L     _pop
C   00000000              L1074:
    00000000 696E6E6572             .SDATA      "inner: tensor dimension check"
             3A2074656E   
             736F722064   
             696D656E73   
             696F6E2063   
             6865636B     
    0000001D 00                     .DATA.B     H'00
    0000001E 00000002               .RES.W      1
    00000020              L1075:
    00000020 696E6E6572             .SDATA      "inner: rank of result exceeds maximum"
             3A2072616E   
             6B206F6620   
             726573756C   
             7420657863   
             6565647320   
             6D6178696D   
             756D         
    00000045 00                     .DATA.B     H'00

































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:03  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      161



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000388 Byte(s)
CONSTANT SECTION (C):                               00000046 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000003CE Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           16
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           2
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            56






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk77C3.tmp 

