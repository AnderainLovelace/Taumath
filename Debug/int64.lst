SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\int64.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         int64.c     1    typedef unsigned long                                   uint32_t        ;
         int64.c     2    typedef struct { uint32_t hi,lo; }              u64                     ; 
         int64.c     3    
         int64.c     4    u64
         int64.c     5    u64hilo (uint32_t hi, uint32_t lo)
P   00000000              _u64hilo:                        ; function: u64hilo
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF8                   ADD         #-8,R15
    00000004 D3C4                   MOV.L       L345+2,R3  ; __quick_evn_mvn
         int64.c     6    {
         int64.c     7            u64 r;
         int64.c     8            r.hi = hi;
    00000006 66F3                   MOV         R15,R6
    00000008 2642                   MOV.L       R4,@R6
    0000000A 6263                   MOV         R6,R2
         int64.c     9            r.lo = lo;
    0000000C 1651                   MOV.L       R5,@(4,R6)
    0000000E 51F3                   MOV.L       @(12,R15),R1
    00000010 430B                   JSR         @R3
    00000012 E008                   MOV         #8,R0
         int64.c    10            return r;
         int64.c    11    }
    00000014 7F08                   ADD         #8,R15
    00000016 4F26                   LDS.L       @R15+,PR
    00000018 000B                   RTS
    0000001A 0009                   NOP
         int64.c    12    /* Return a u64 value representing LO.  */
         int64.c    13    u64
         int64.c    14    u64lo (uint32_t lo)
    0000001C              _u64lo:                          ; function: u64lo
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    0000001C 4F22                   STS.L       PR,@-R15
         int64.c    15    {
         int64.c    16            u64 r;
         int64.c    17            r.hi = 0;
    0000001E E300                   MOV         #0,R3
    00000020 7FF8                   ADD         #-8,R15
    00000022 65F3                   MOV         R15,R5
    00000024 2532                   MOV.L       R3,@R5
    00000026 6253                   MOV         R5,R2
         int64.c    18            r.lo = lo;
    00000028 1541                   MOV.L       R4,@(4,R5)
    0000002A 51F3                   MOV.L       @(12,R15),R1
    0000002C D3BA                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    0000002E 430B                   JSR         @R3
    00000030 E008                   MOV         #8,R0
         int64.c    19            return r;
         int64.c    20    }
    00000032 7F08                   ADD         #8,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000034 4F26                   LDS.L       @R15+,PR
    00000036 000B                   RTS
    00000038 0009                   NOP
         int64.c    21    /* Return X < Y.        */
         int64.c    22    int
         int64.c    23    u64lt (u64 x, u64 y)
    0000003A              _u64lt:                          ; function: u64lt
                                                           ; frame size=0
         int64.c    24    {
         int64.c    25            return x.hi < y.hi || (x.hi == y.hi && x.lo < y.lo);
    0000003A 67F3                   MOV         R15,R7
    0000003C 7708                   ADD         #8,R7
    0000003E 66F3                   MOV         R15,R6
    00000040 6572                   MOV.L       @R7,R5
    00000042 6462                   MOV.L       @R6,R4
    00000044 3452                   CMP/HS      R5,R4
    00000046 8B07                   BF          L320
    00000048 3450                   CMP/EQ      R5,R4
    0000004A 8B03                   BF          L321
    0000004C 5371                   MOV.L       @(4,R7),R3
    0000004E 5261                   MOV.L       @(4,R6),R2
    00000050 3232                   CMP/HS      R3,R2
    00000052 8B01                   BF          L320
    00000054              L321:                             
    00000054 000B                   RTS
    00000056 E000                   MOV         #0,R0
    00000058              L320:                             
    00000058 E001                   MOV         #1,R0
         int64.c    26    }
    0000005A              L323:                             
    0000005A 000B                   RTS
    0000005C 0009                   NOP
         int64.c    27    /* Return X & Y.        */
         int64.c    28    u64
         int64.c    29    u64and (u64 x, u64 y)
    0000005E              _u64and:                         ; function: u64and
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    0000005E 4F22                   STS.L       PR,@-R15
    00000060 7FF8                   ADD         #-8,R15
         int64.c    30    {
         int64.c    31            u64 r;
         int64.c    32            r.hi = x.hi & y.hi;
    00000062 66F3                   MOV         R15,R6
    00000064 7618                   ADD         #24,R6
    00000066 65F3                   MOV         R15,R5
    00000068 6362                   MOV.L       @R6,R3
    0000006A 64F3                   MOV         R15,R4
    0000006C 7510                   ADD         #16,R5
    0000006E 6252                   MOV.L       @R5,R2
    00000070 2239                   AND         R3,R2
    00000072 2422                   MOV.L       R2,@R4
         int64.c    33            r.lo = x.lo & y.lo;
    00000074 5361                   MOV.L       @(4,R6),R3
    00000076 6243                   MOV         R4,R2
    00000078 5151                   MOV.L       @(4,R5),R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000007A 2139                   AND         R3,R1
    0000007C 1411                   MOV.L       R1,@(4,R4)
    0000007E 51F3                   MOV.L       @(12,R15),R1
    00000080 D3A5                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    00000082 430B                   JSR         @R3
    00000084 E008                   MOV         #8,R0
         int64.c    34            return r;
         int64.c    35    }
    00000086 7F08                   ADD         #8,R15
    00000088 4F26                   LDS.L       @R15+,PR
    0000008A 000B                   RTS
    0000008C 0009                   NOP
         int64.c    36    /* Return X | Y.        */
         int64.c    37    u64
         int64.c    38    u64or (u64 x, u64 y)
    0000008E              _u64or:                          ; function: u64or
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    0000008E 4F22                   STS.L       PR,@-R15
    00000090 7FF8                   ADD         #-8,R15
         int64.c    39    {
         int64.c    40            u64 r;
         int64.c    41            r.hi = x.hi | y.hi;
    00000092 66F3                   MOV         R15,R6
    00000094 7618                   ADD         #24,R6
    00000096 65F3                   MOV         R15,R5
    00000098 6362                   MOV.L       @R6,R3
    0000009A 64F3                   MOV         R15,R4
    0000009C 7510                   ADD         #16,R5
    0000009E 6252                   MOV.L       @R5,R2
    000000A0 223B                   OR          R3,R2
    000000A2 2422                   MOV.L       R2,@R4
         int64.c    42            r.lo = x.lo | y.lo;
    000000A4 5361                   MOV.L       @(4,R6),R3
    000000A6 6243                   MOV         R4,R2
    000000A8 5151                   MOV.L       @(4,R5),R1
    000000AA 213B                   OR          R3,R1
    000000AC 1411                   MOV.L       R1,@(4,R4)
    000000AE 51F3                   MOV.L       @(12,R15),R1
    000000B0 D399                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    000000B2 430B                   JSR         @R3
    000000B4 E008                   MOV         #8,R0
         int64.c    43            return r;
         int64.c    44    }
    000000B6 7F08                   ADD         #8,R15
    000000B8 4F26                   LDS.L       @R15+,PR
    000000BA 000B                   RTS
    000000BC 0009                   NOP
         int64.c    45    /* Return X ^ Y.        */
         int64.c    46    u64
         int64.c    47    u64xor (u64 x, u64 y)
    000000BE              _u64xor:                         ; function: u64xor
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    000000BE 4F22                   STS.L       PR,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000C0 7FF8                   ADD         #-8,R15
         int64.c    48    {
         int64.c    49            u64 r;
         int64.c    50            r.hi = x.hi ^ y.hi;
    000000C2 66F3                   MOV         R15,R6
    000000C4 7618                   ADD         #24,R6
    000000C6 65F3                   MOV         R15,R5
    000000C8 6362                   MOV.L       @R6,R3
    000000CA 64F3                   MOV         R15,R4
    000000CC 7510                   ADD         #16,R5
    000000CE 6252                   MOV.L       @R5,R2
    000000D0 223A                   XOR         R3,R2
    000000D2 2422                   MOV.L       R2,@R4
         int64.c    51            r.lo = x.lo ^ y.lo;
    000000D4 5361                   MOV.L       @(4,R6),R3
    000000D6 6243                   MOV         R4,R2
    000000D8 5151                   MOV.L       @(4,R5),R1
    000000DA 213A                   XOR         R3,R1
    000000DC 1411                   MOV.L       R1,@(4,R4)
    000000DE 51F3                   MOV.L       @(12,R15),R1
    000000E0 D38D                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    000000E2 430B                   JSR         @R3
    000000E4 E008                   MOV         #8,R0
         int64.c    52            return r;
         int64.c    53    }
    000000E6 7F08                   ADD         #8,R15
    000000E8 4F26                   LDS.L       @R15+,PR
    000000EA 000B                   RTS
    000000EC 0009                   NOP
         int64.c    54    /* Return X + Y.        */
         int64.c    55    u64
         int64.c    56    u64plus (u64 x, u64 y)
    000000EE              _u64plus:                        ; function: u64plus
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    000000EE 4F22                   STS.L       PR,@-R15
    000000F0 7FF8                   ADD         #-8,R15
         int64.c    57    {
         int64.c    58            u64 r;
         int64.c    59            r.lo = x.lo + y.lo;
    000000F2 66F3                   MOV         R15,R6
    000000F4 7618                   ADD         #24,R6
    000000F6 65F3                   MOV         R15,R5
    000000F8 5361                   MOV.L       @(4,R6),R3
    000000FA 64F3                   MOV         R15,R4
    000000FC 7510                   ADD         #16,R5
    000000FE 5251                   MOV.L       @(4,R5),R2
    00000100 323C                   ADD         R3,R2
    00000102 1421                   MOV.L       R2,@(4,R4)
         int64.c    60            r.hi = x.hi + y.hi + (r.lo < x.lo);
    00000104 6362                   MOV.L       @R6,R3
    00000106 6152                   MOV.L       @R5,R1
    00000108 5251                   MOV.L       @(4,R5),R2
    0000010A 313C                   ADD         R3,R1
    0000010C 5041                   MOV.L       @(4,R4),R0
    0000010E 3022                   CMP/HS      R2,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000110 D381                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    00000112 0029                   MOVT        R0
    00000114 CA01                   XOR         #1,R0
    00000116 310C                   ADD         R0,R1
    00000118 2412                   MOV.L       R1,@R4
    0000011A 6243                   MOV         R4,R2
    0000011C 51F3                   MOV.L       @(12,R15),R1
    0000011E 430B                   JSR         @R3
    00000120 E008                   MOV         #8,R0
         int64.c    61            return r;
         int64.c    62    }
    00000122 7F08                   ADD         #8,R15
    00000124 4F26                   LDS.L       @R15+,PR
    00000126 000B                   RTS
    00000128 0009                   NOP
         int64.c    63    /* Return X - Y.        */
         int64.c    64    u64
         int64.c    65    u64sub (u64 x, u64 y)
    0000012A              _u64sub:                         ; function: u64sub
                                                           ; frame size=64
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    0000012A 2FE6                   MOV.L       R14,@-R15
    0000012C 4F22                   STS.L       PR,@-R15
    0000012E 7FF0                   ADD         #-16,R15
         int64.c    66    {
         int64.c    67            u64 one={0,1},r;
    00000130 D27A                   MOV.L       L345+6,R2  ; L271
    00000132 61F3                   MOV         R15,R1
    00000134 D378                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    00000136 7108                   ADD         #8,R1
    00000138 430B                   JSR         @R3
    0000013A E008                   MOV         #8,R0
         int64.c    68            r.hi    = ~y.hi;
    0000013C 64F3                   MOV         R15,R4
    0000013E 7424                   ADD         #36,R4
    00000140 6142                   MOV.L       @R4,R1
         int64.c    69            r.lo    = ~y.lo;
         int64.c    70            r               = u64plus(r,one);
    00000142 62F3                   MOV         R15,R2
    00000144 6EF3                   MOV         R15,R14
    00000146 6117                   NOT         R1,R1
    00000148 2E12                   MOV.L       R1,@R14
    0000014A 7208                   ADD         #8,R2
    0000014C 5341                   MOV.L       @(4,R4),R3
    0000014E E008                   MOV         #8,R0
    00000150 6337                   NOT         R3,R3
    00000152 1E31                   MOV.L       R3,@(4,R14)
    00000154 D370                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    00000156 3F08                   SUB         R0,R15
    00000158 430B                   JSR         @R3
    0000015A 61F3                   MOV         R15,R1
    0000015C D36E                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    0000015E 62E3                   MOV         R14,R2
    00000160 E008                   MOV         #8,R0
    00000162 3F08                   SUB         R0,R15
    00000164 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000166 61F3                   MOV         R15,R1
    00000168 BFC1                   BSR         _u64plus
    0000016A 2FE6                   MOV.L       R14,@-R15
         int64.c    71            r               = u64plus(x,r);
    0000016C D36A                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    0000016E 62E3                   MOV         R14,R2
    00000170 E008                   MOV         #8,R0
    00000172 3F08                   SUB         R0,R15
    00000174 430B                   JSR         @R3
    00000176 61F3                   MOV         R15,R1
    00000178 D367                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    0000017A 62F3                   MOV         R15,R2
    0000017C 7238                   ADD         #56,R2
    0000017E E008                   MOV         #8,R0
    00000180 3F08                   SUB         R0,R15
    00000182 430B                   JSR         @R3
    00000184 61F3                   MOV         R15,R1
    00000186 BFB2                   BSR         _u64plus
    00000188 2FE6                   MOV.L       R14,@-R15
    0000018A 61F3                   MOV         R15,R1
    0000018C D362                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    0000018E 62E3                   MOV         R14,R2
    00000190 7140                   ADD         #64,R1
    00000192 6112                   MOV.L       @R1,R1
    00000194 430B                   JSR         @R3
    00000196 E008                   MOV         #8,R0
         int64.c    72            return r;
         int64.c    73    }
    00000198 7F38                   ADD         #56,R15
    0000019A 4F26                   LDS.L       @R15+,PR
    0000019C 000B                   RTS
    0000019E 6EF6                   MOV.L       @R15+,R14
         int64.c    74    /* Return X << N.       */
         int64.c    75    u64
         int64.c    76    u64shl (u64 x, int n)
    000001A0              _u64shl:                         ; function: u64shl
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    000001A0 4F22                   STS.L       PR,@-R15
    000001A2 E320                   MOV         #32,R3
    000001A4 7FF8                   ADD         #-8,R15
    000001A6 67F3                   MOV         R15,R7
    000001A8 7710                   ADD         #16,R7
    000001AA 65F3                   MOV         R15,R5
    000001AC 3433                   CMP/GE      R3,R4
    000001AE 8D0B                   BT/S        L329
    000001B0 5671                   MOV.L       @(4,R7),R6
         int64.c    77    {
         int64.c    78            u64 r;
         int64.c    79            if (n < 32)
         int64.c    80            {
         int64.c    81                    r.hi = (x.hi << n) | (x.lo >> (32 - n));
    000001B2 3348                   SUB         R4,R3
    000001B4 6172                   MOV.L       @R7,R1
    000001B6 633B                   NEG         R3,R3
    000001B8 414D                   SHLD        R4,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001BA 463D                   SHLD        R3,R6
    000001BC 216B                   OR          R6,R1
    000001BE 2512                   MOV.L       R1,@R5
         int64.c    82                    r.lo = x.lo << n;
    000001C0 5371                   MOV.L       @(4,R7),R3
    000001C2 434D                   SHLD        R4,R3
    000001C4 A005                   BRA         L330
    000001C6 1531                   MOV.L       R3,@(4,R5)
    000001C8              L329:                             
         int64.c    83            }
         int64.c    84            else
         int64.c    85            {
         int64.c    86                    r.hi = x.lo << (n - 32);
    000001C8 74E0                   ADD         #-32,R4
    000001CA 464D                   SHLD        R4,R6
    000001CC 2562                   MOV.L       R6,@R5
         int64.c    87                    r.lo = 0;
    000001CE E100                   MOV         #0,R1
    000001D0 1511                   MOV.L       R1,@(4,R5)
    000001D2              L330:                             
    000001D2 6253                   MOV         R5,R2
    000001D4 D350                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    000001D6 51F3                   MOV.L       @(12,R15),R1
    000001D8 430B                   JSR         @R3
    000001DA E008                   MOV         #8,R0
         int64.c    88            }
         int64.c    89      return r;
         int64.c    90    }
    000001DC 7F08                   ADD         #8,R15
    000001DE 4F26                   LDS.L       @R15+,PR
    000001E0 000B                   RTS
    000001E2 0009                   NOP
         int64.c    91    /* Return X >> N.       */
         int64.c    92    u64
         int64.c    93    u64shr (u64 x, int n)
    000001E4              _u64shr:                         ; function: u64shr
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    000001E4 4F22                   STS.L       PR,@-R15
         int64.c    94    {
         int64.c    95            u64 r;
         int64.c    96            if (n < 32)
    000001E6 E720                   MOV         #32,R7
    000001E8 7FF8                   ADD         #-8,R15
    000001EA 66F3                   MOV         R15,R6
    000001EC 7610                   ADD         #16,R6
    000001EE 3473                   CMP/GE      R7,R4
    000001F0 8D0C                   BT/S        L332
    000001F2 65F3                   MOV         R15,R5
         int64.c    97            {
         int64.c    98                    r.hi = x.hi >> n;
    000001F4 6262                   MOV.L       @R6,R2
         int64.c    99                    r.lo = (x.hi << (32 - n)) | (x.lo >> n);
    000001F6 3748                   SUB         R4,R7
    000001F8 634B                   NEG         R4,R3
    000001FA 423D                   SHLD        R3,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001FC 2522                   MOV.L       R2,@R5
    000001FE 624B                   NEG         R4,R2
    00000200 5161                   MOV.L       @(4,R6),R1
    00000202 6362                   MOV.L       @R6,R3
    00000204 437D                   SHLD        R7,R3
    00000206 412D                   SHLD        R2,R1
    00000208 A006                   BRA         L343
    0000020A 231B                   OR          R1,R3
    0000020C              L332:                             
         int64.c   100            }
         int64.c   101            else
         int64.c   102            {
         int64.c   103                    r.hi = 0;
    0000020C E100                   MOV         #0,R1
         int64.c   104                    r.lo = x.hi >> (n - 32);
    0000020E 74E0                   ADD         #-32,R4
    00000210 2512                   MOV.L       R1,@R5
    00000212 644B                   NEG         R4,R4
    00000214 6362                   MOV.L       @R6,R3
    00000216 434D                   SHLD        R4,R3
    00000218              L343:                             
    00000218 1531                   MOV.L       R3,@(4,R5)
    0000021A 6253                   MOV         R5,R2
    0000021C 51F3                   MOV.L       @(12,R15),R1
    0000021E D33E                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    00000220 430B                   JSR         @R3
    00000222 E008                   MOV         #8,R0
         int64.c   105            }
         int64.c   106            return r;
         int64.c   107    }
    00000224 7F08                   ADD         #8,R15
    00000226 4F26                   LDS.L       @R15+,PR
    00000228 000B                   RTS
    0000022A 0009                   NOP
         int64.c   108    
         int64.c   109    u64
         int64.c   110    u32mult(uint32_t op1, uint32_t op2)
    0000022C              _u32mult:                        ; function: u32mult
                                                           ; frame size=20
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    0000022C 2FD6                   MOV.L       R13,@-R15
         int64.c   111    {
         int64.c   112            u64 r;
         int64.c   113            uint32_t op1_hi = (op1 >> 16) & 0xffff;
    0000022E 6643                   MOV         R4,R6
    00000230 4F22                   STS.L       PR,@-R15
         int64.c   114            uint32_t op1_lo = op1 & 0xffff;
    00000232 674D                   EXTU.W      R4,R7
    00000234 4F12                   STS.L       MACL,@-R15
    00000236 4629                   SHLR16      R6
    00000238 7FF8                   ADD         #-8,R15
    0000023A 666D                   EXTU.W      R6,R6
         int64.c   115            uint32_t op2_hi = (op2 >> 16) & 0xffff;
    0000023C 6453                   MOV         R5,R4
    0000023E 4429                   SHLR16      R4
    00000240 644D                   EXTU.W      R4,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         int64.c   116            uint32_t op2_lo = op2 & 0xffff;
    00000242 655D                   EXTU.W      R5,R5
         int64.c   117        uint32_t cross_prod = op1_lo * op2_hi + op1_hi * op2_lo;
    00000244 0747                   MUL.L       R4,R7
         int64.c   118        r.hi = op1_hi * op2_hi + ((cross_prod >> 16) & 0xffff);
    00000246 6DF3                   MOV         R15,R13
    00000248 001A                   STS         MACL,R0
    0000024A 0657                   MUL.L       R5,R6
    0000024C 031A                   STS         MACL,R3
    0000024E 303C                   ADD         R3,R0
    00000250 0647                   MUL.L       R4,R6
    00000252 6203                   MOV         R0,R2
    00000254 4229                   SHLR16      R2
    00000256 622D                   EXTU.W      R2,R2
    00000258 061A                   STS         MACL,R6
    0000025A 326C                   ADD         R6,R2
         int64.c   119        r.lo = op1_lo * op2_lo + ((cross_prod << 16) & 0xffff0000);
    0000025C 0757                   MUL.L       R5,R7
    0000025E 4028                   SHLL16      R0
    00000260 2D22                   MOV.L       R2,@R13
    00000262 071A                   STS         MACL,R7
    00000264 D22E                   MOV.L       L345+10,R2 ; H'FFFF0000
    00000266 2029                   AND         R2,R0
    00000268 307C                   ADD         R7,R0
    0000026A 62D3                   MOV         R13,R2
    0000026C D32A                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    0000026E 1D01                   MOV.L       R0,@(4,R13)
    00000270 51F5                   MOV.L       @(20,R15),R1
    00000272 430B                   JSR         @R3
    00000274 E008                   MOV         #8,R0
         int64.c   120            return r;
         int64.c   121    }
    00000276 7F08                   ADD         #8,R15
    00000278 4F16                   LDS.L       @R15+,MACL
    0000027A 4F26                   LDS.L       @R15+,PR
    0000027C 000B                   RTS
    0000027E 6DF6                   MOV.L       @R15+,R13
         int64.c   122    
         int64.c   123    u64
         int64.c   124    u64mul(u64 x,u64 y)
    00000280              _u64mul:                         ; function: u64mul
                                                           ; frame size=40
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    00000280 2FE6                   MOV.L       R14,@-R15
    00000282 2FD6                   MOV.L       R13,@-R15
    00000284 2FC6                   MOV.L       R12,@-R15
    00000286 4F22                   STS.L       PR,@-R15
    00000288 4F12                   STS.L       MACL,@-R15
    0000028A 7FF0                   ADD         #-16,R15
         int64.c   125    {
         int64.c   126            u64 r,t;
         int64.c   127            t               = u32mult(x.lo,y.lo);
    0000028C 6CF3                   MOV         R15,R12
    0000028E 7C28                   ADD         #40,R12
    00000290 54C1                   MOV.L       @(4,R12),R4
    00000292 6DF3                   MOV         R15,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000294 7D30                   ADD         #48,R13
    00000296 6EF3                   MOV         R15,R14
    00000298 55D1                   MOV.L       @(4,R13),R5
    0000029A BFC7                   BSR         _u32mult
    0000029C 2FE6                   MOV.L       R14,@-R15
         int64.c   128            r.hi    = x.hi*y.lo+x.lo*y.hi+t.hi;
    0000029E 64F3                   MOV         R15,R4
    000002A0 53D1                   MOV.L       @(4,R13),R3
    000002A2 740C                   ADD         #12,R4
    000002A4 62C2                   MOV.L       @R12,R2
    000002A6 0237                   MUL.L       R3,R2
    000002A8 62D2                   MOV.L       @R13,R2
    000002AA 031A                   STS         MACL,R3
    000002AC 51C1                   MOV.L       @(4,R12),R1
    000002AE 0127                   MUL.L       R2,R1
    000002B0 62E2                   MOV.L       @R14,R2
    000002B2 001A                   STS         MACL,R0
    000002B4 330C                   ADD         R0,R3
    000002B6 332C                   ADD         R2,R3
    000002B8 2432                   MOV.L       R3,@R4
    000002BA 6243                   MOV         R4,R2
         int64.c   129            r.lo    = t.lo;
    000002BC 51E1                   MOV.L       @(4,R14),R1
    000002BE 1411                   MOV.L       R1,@(4,R4)
    000002C0 51FA                   MOV.L       @(40,R15),R1
    000002C2 D315                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    000002C4 430B                   JSR         @R3
    000002C6 E008                   MOV         #8,R0
         int64.c   130            return r;
         int64.c   131    }
    000002C8 7F14                   ADD         #20,R15
    000002CA 4F16                   LDS.L       @R15+,MACL
    000002CC 4F26                   LDS.L       @R15+,PR
    000002CE 6CF6                   MOV.L       @R15+,R12
    000002D0 6DF6                   MOV.L       @R15+,R13
    000002D2 000B                   RTS
    000002D4 6EF6                   MOV.L       @R15+,R14
         int64.c   132    
         int64.c   133    u64
         int64.c   134    u64div(u64 a,u64 b)
    000002D6              _u64div:                         ; function: u64div
                                                           ; frame size=88
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    000002D6 2FE6                   MOV.L       R14,@-R15
    000002D8 2FD6                   MOV.L       R13,@-R15
    000002DA 2FC6                   MOV.L       R12,@-R15
    000002DC 2FB6                   MOV.L       R11,@-R15
    000002DE 2FA6                   MOV.L       R10,@-R15
    000002E0 4F22                   STS.L       PR,@-R15
    000002E2 7FE8                   ADD         #-24,R15
         int64.c   135    {  
         int64.c   136        u64 c = {0,1}, d = {0,0}, _b = b;  
    000002E4 D20F                   MOV.L       L345+14,R2 ; L308
    000002E6 6DF3                   MOV         R15,R13
    000002E8 D30B                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    000002EA 7D10                   ADD         #16,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002EC 61D3                   MOV         R13,R1
    000002EE 430B                   JSR         @R3
    000002F0 E008                   MOV         #8,R0
    000002F2 6BF3                   MOV         R15,R11
    000002F4 D20C                   MOV.L       L345+18,R2 ; L310
    000002F6 7B08                   ADD         #8,R11
    000002F8 D307                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    000002FA 61B3                   MOV         R11,R1
    000002FC 430B                   JSR         @R3
    000002FE E008                   MOV         #8,R0
    00000300 D305                   MOV.L       L345+2,R3  ; __quick_evn_mvn
    00000302 6AF3                   MOV         R15,R10
    00000304 6EF3                   MOV         R15,R14
    00000306 7E3C                   ADD         #60,R14
    00000308 61A3                   MOV         R10,R1
    0000030A 62E3                   MOV         R14,R2
    0000030C 430B                   JSR         @R3
    0000030E E008                   MOV         #8,R0
    00000310 6CF3                   MOV         R15,R12
         int64.c   137        while(!u64lt(a,b)) // !a<b == a>=b  
    00000312 A01E                   BRA         L337
    00000314 7C34                   ADD         #52,R12
    00000316              L345:                             
    00000316 0000                   .DATA.W     0
    00000318 <00000000>             .DATA.L     __quick_evn_mvn
    0000031C <00000000>             .DATA.L     L271
    00000320 FFFF0000               .DATA.L     H'FFFF0000
    00000324 <00000000>             .DATA.L     L308
    00000328 <00000000>             .DATA.L     L310
    0000032C              L338:                             
         int64.c   138        {  
         int64.c   139                    c = u64shl(c,1);  
    0000032C D349                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    0000032E 62D3                   MOV         R13,R2
    00000330 E008                   MOV         #8,R0
    00000332 3F08                   SUB         R0,R15
    00000334 430B                   JSR         @R3
    00000336 61F3                   MOV         R15,R1
    00000338 E401                   MOV         #1,R4
    0000033A BF31                   BSR         _u64shl
    0000033C 2FD6                   MOV.L       R13,@-R15
         int64.c   140                    b = u64shl(b,1); 
    0000033E 62E3                   MOV         R14,R2
    00000340 D344                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    00000342 E008                   MOV         #8,R0
    00000344 3F08                   SUB         R0,R15
    00000346 430B                   JSR         @R3
    00000348 61F3                   MOV         R15,R1
    0000034A E401                   MOV         #1,R4
    0000034C BF28                   BSR         _u64shl
    0000034E 2FE6                   MOV.L       R14,@-R15
    00000350 7F18                   ADD         #24,R15
    00000352              L337:                             
    00000352 62E3                   MOV         R14,R2
    00000354 D33F                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    00000356 E008                   MOV         #8,R0
    00000358 3F08                   SUB         R0,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000035A 430B                   JSR         @R3
    0000035C 61F3                   MOV         R15,R1
    0000035E 62C3                   MOV         R12,R2
    00000360 D33C                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    00000362 E008                   MOV         #8,R0
    00000364 3F08                   SUB         R0,R15
    00000366 430B                   JSR         @R3
    00000368 61F3                   MOV         R15,R1
    0000036A BE66                   BSR         _u64lt
    0000036C 0009                   NOP
    0000036E 2008                   TST         R0,R0
    00000370 8DDC                   BT/S        L338
    00000372 7F10                   ADD         #16,R15
         int64.c   141        }  
         int64.c   142            c = u64shr(c,1);  
    00000374 D337                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    00000376 62D3                   MOV         R13,R2
    00000378 E008                   MOV         #8,R0
    0000037A 3F08                   SUB         R0,R15
    0000037C 430B                   JSR         @R3
    0000037E 61F3                   MOV         R15,R1
    00000380 E401                   MOV         #1,R4
    00000382 BF2F                   BSR         _u64shr
    00000384 2FD6                   MOV.L       R13,@-R15
         int64.c   143            b = u64shr(b,1); 
    00000386 62E3                   MOV         R14,R2
    00000388 D332                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    0000038A E008                   MOV         #8,R0
    0000038C 3F08                   SUB         R0,R15
    0000038E 430B                   JSR         @R3
    00000390 61F3                   MOV         R15,R1
         int64.c   144        while(!u64lt(b,_b))  
    00000392 A03D                   BRA         L344
    00000394 0009                   NOP
    00000396              L340:                             
         int64.c   145        {  
         int64.c   146            if(!u64lt(a,b))  
    00000396 62E3                   MOV         R14,R2
    00000398 D32E                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    0000039A E008                   MOV         #8,R0
    0000039C 3F08                   SUB         R0,R15
    0000039E 430B                   JSR         @R3
    000003A0 61F3                   MOV         R15,R1
    000003A2 62C3                   MOV         R12,R2
    000003A4 D32B                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    000003A6 E008                   MOV         #8,R0
    000003A8 3F08                   SUB         R0,R15
    000003AA 430B                   JSR         @R3
    000003AC 61F3                   MOV         R15,R1
    000003AE BE44                   BSR         _u64lt
    000003B0 0009                   NOP
    000003B2 2008                   TST         R0,R0
    000003B4 8F1D                   BF/S        L341
    000003B6 7F10                   ADD         #16,R15
         int64.c   147            {  
         int64.c   148                a = u64sub(a,b); 
    000003B8 D326                   MOV.L       L346+2,R3  ; __quick_evn_mvn




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003BA 62E3                   MOV         R14,R2
    000003BC E008                   MOV         #8,R0
    000003BE 3F08                   SUB         R0,R15
    000003C0 430B                   JSR         @R3
    000003C2 61F3                   MOV         R15,R1
    000003C4 D323                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    000003C6 62C3                   MOV         R12,R2
    000003C8 E008                   MOV         #8,R0
    000003CA 3F08                   SUB         R0,R15
    000003CC 430B                   JSR         @R3
    000003CE 61F3                   MOV         R15,R1
    000003D0 BEAB                   BSR         _u64sub
    000003D2 2FC6                   MOV.L       R12,@-R15
         int64.c   149                d = u64plus(d,c);
    000003D4 D31F                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    000003D6 62D3                   MOV         R13,R2
    000003D8 E008                   MOV         #8,R0
    000003DA 3F08                   SUB         R0,R15
    000003DC 430B                   JSR         @R3
    000003DE 61F3                   MOV         R15,R1
    000003E0 D31C                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    000003E2 62B3                   MOV         R11,R2
    000003E4 E008                   MOV         #8,R0
    000003E6 3F08                   SUB         R0,R15
    000003E8 430B                   JSR         @R3
    000003EA 61F3                   MOV         R15,R1
    000003EC BE7F                   BSR         _u64plus
    000003EE 2FB6                   MOV.L       R11,@-R15
    000003F0 7F28                   ADD         #40,R15
    000003F2              L341:                             
         int64.c   150            }  
         int64.c   151                    c = u64shr(c,1);  
    000003F2 62D3                   MOV         R13,R2
    000003F4 D317                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    000003F6 E008                   MOV         #8,R0
    000003F8 3F08                   SUB         R0,R15
    000003FA 430B                   JSR         @R3
    000003FC 61F3                   MOV         R15,R1
    000003FE E401                   MOV         #1,R4
    00000400 BEF0                   BSR         _u64shr
    00000402 2FD6                   MOV.L       R13,@-R15
         int64.c   152                    b = u64shr(b,1);  
    00000404 D313                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    00000406 62E3                   MOV         R14,R2
    00000408 E008                   MOV         #8,R0
    0000040A 3F08                   SUB         R0,R15
    0000040C 430B                   JSR         @R3
    0000040E 61F3                   MOV         R15,R1
    00000410              L344:                             
    00000410 E401                   MOV         #1,R4
    00000412 BEE7                   BSR         _u64shr
    00000414 2FE6                   MOV.L       R14,@-R15
    00000416 62A3                   MOV         R10,R2
    00000418 D30E                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    0000041A E008                   MOV         #8,R0
    0000041C 3F08                   SUB         R0,R15
    0000041E 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000420 61F3                   MOV         R15,R1
    00000422 62E3                   MOV         R14,R2
    00000424 D30B                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    00000426 E008                   MOV         #8,R0
    00000428 3F08                   SUB         R0,R15
    0000042A 430B                   JSR         @R3
    0000042C 61F3                   MOV         R15,R1
    0000042E BE04                   BSR         _u64lt
    00000430 0009                   NOP
    00000432 2008                   TST         R0,R0
    00000434 8DAF                   BT/S        L340
    00000436 7F28                   ADD         #40,R15
    00000438 51FC                   MOV.L       @(48,R15),R1
    0000043A 62B3                   MOV         R11,R2
    0000043C D305                   MOV.L       L346+2,R3  ; __quick_evn_mvn
    0000043E 430B                   JSR         @R3
    00000440 E008                   MOV         #8,R0
         int64.c   153        }  
         int64.c   154        return d;  
         int64.c   155    }
    00000442 7F18                   ADD         #24,R15
    00000444 4F26                   LDS.L       @R15+,PR
    00000446 6AF6                   MOV.L       @R15+,R10
    00000448 6BF6                   MOV.L       @R15+,R11
    0000044A 6CF6                   MOV.L       @R15+,R12
    0000044C 6DF6                   MOV.L       @R15+,R13
    0000044E 000B                   RTS
    00000450 6EF6                   MOV.L       @R15+,R14
    00000452              L346:                             
    00000452 0000                   .DATA.W     0
    00000454 <00000000>             .DATA.L     __quick_evn_mvn
C   00000000              L271:
    00000000 0000000000             .DATA.L     H'00000000,H'00000001
             000001       
    00000008              L308:
    00000008 0000000000             .DATA.L     H'00000000,H'00000001
             000001       
    00000010              L310:
    00000010 0000000000             .DATA.L     H'00000000,H'00000000
             000000       





















SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:04  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      155



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000458 Byte(s)
CONSTANT SECTION (C):                               00000018 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000470 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:            1
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          13
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            31






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk794A.tmp 

