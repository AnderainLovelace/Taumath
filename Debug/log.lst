SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:11  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\log.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           log.c     1    // natural logarithm
           log.c     2    
           log.c     3    #include "stdafx.h"
           log.c     4    #include "defs.h"
           log.c     5    
           log.c     6    void
           log.c     7    eval_log(void)
P   00000000              _eval_log:                       ; function: eval_log
                                                           ; frame size=8
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 4F22                   STS.L       PR,@-R15
           log.c     8    {
           log.c     9            push(cadr(p1));
    00000004 DE37                   MOV.L       L1118+6,R14; _p1
    00000006 64E2                   MOV.L       @R14,R4
    00000008 8448                   MOV.B       @(8,R4),R0
    0000000A 2008                   TST         R0,R0
    0000000C 8B02                   BF          L1071
    0000000E 64E2                   MOV.L       @R14,R4
    00000010 A004                   BRA         L1073
    00000012 5441                   MOV.L       @(4,R4),R4
    00000014              L1071:                            
    00000014 9363                   MOV.W       L1118,R3   ; H'0570
    00000016 D234                   MOV.L       L1118+10,R2; _symtab
    00000018 6422                   MOV.L       @R2,R4
    0000001A 343C                   ADD         R3,R4
    0000001C              L1073:                            
    0000001C 8448                   MOV.B       @(8,R4),R0
    0000001E 2008                   TST         R0,R0
    00000020 8B0C                   BF          L1070
    00000022 64E2                   MOV.L       @R14,R4
    00000024 8448                   MOV.B       @(8,R4),R0
    00000026 2008                   TST         R0,R0
    00000028 8B02                   BF          L1072
    0000002A 64E2                   MOV.L       @R14,R4
    0000002C A004                   BRA         L1074
    0000002E 5441                   MOV.L       @(4,R4),R4
    00000030              L1072:                            
    00000030 9355                   MOV.W       L1118,R3   ; H'0570
    00000032 D22D                   MOV.L       L1118+10,R2; _symtab
    00000034 6422                   MOV.L       @R2,R4
    00000036 343C                   ADD         R3,R4
    00000038              L1074:                            
    00000038 A004                   BRA         L1075
    0000003A 6442                   MOV.L       @R4,R4
    0000003C              L1070:                            
    0000003C 934F                   MOV.W       L1118,R3   ; H'0570
    0000003E D22A                   MOV.L       L1118+10,R2; _symtab
    00000040 6422                   MOV.L       @R2,R4
    00000042 343C                   ADD         R3,R4
    00000044              L1075:                            
    00000044 D329                   MOV.L       L1118+14,R3; _push
    00000046 430B                   JSR         @R3
    00000048 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:11  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           log.c    10            eval();
    0000004A D229                   MOV.L       L1118+18,R2; _eval
    0000004C 420B                   JSR         @R2
    0000004E 0009                   NOP
           log.c    11            logarithm();
    00000050 4F26                   LDS.L       @R15+,PR
    00000052 6EF6                   MOV.L       @R15+,R14
           log.c    12    }
           log.c    13    
           log.c    14    void
           log.c    15    logarithm(void)
    00000054              _logarithm:                      ; function: logarithm
                                                           ; frame size=4
    00000054 4F22                   STS.L       PR,@-R15
           log.c    16    {
           log.c    17            save();
    00000056 D327                   MOV.L       L1118+22,R3; _save
    00000058 430B                   JSR         @R3
    0000005A 0009                   NOP
           log.c    18            yylog();
    0000005C B003                   BSR         _yylog
    0000005E 0009                   NOP
           log.c    19            restore();
    00000060 D325                   MOV.L       L1118+26,R3; _restore
    00000062 432B                   JMP         @R3
    00000064 4F26                   LDS.L       @R15+,PR
           log.c    20    }
           log.c    21    
           log.c    22    void
           log.c    23    yylog(void)
    00000066              _yylog:                          ; function: yylog
                                                           ; frame size=56
    00000066 2FE6                   MOV.L       R14,@-R15
    00000068 2FD6                   MOV.L       R13,@-R15
    0000006A 2FC6                   MOV.L       R12,@-R15
    0000006C 2FB6                   MOV.L       R11,@-R15
    0000006E 2FA6                   MOV.L       R10,@-R15
    00000070 2F96                   MOV.L       R9,@-R15
    00000072 4F22                   STS.L       PR,@-R15
           log.c    24    {
           log.c    25            double d;
           log.c    26    
           log.c    27            p1 = pop();
    00000074 DE1B                   MOV.L       L1118+6,R14; _p1
    00000076 7FF8                   ADD         #-8,R15
    00000078 D320                   MOV.L       L1118+30,R3; _pop
    0000007A 430B                   JSR         @R3
    0000007C 0009                   NOP
    0000007E 6403                   MOV         R0,R4
    00000080 932E                   MOV.W       L1118+2,R3 ; H'05AC
    00000082 2E02                   MOV.L       R0,@R14
    00000084 DA1E                   MOV.L       L1118+34,R10; _push_integer
    00000086 DB18                   MOV.L       L1118+10,R11; _symtab
    00000088 62B2                   MOV.L       @R11,R2
    0000008A 323C                   ADD         R3,R2
    0000008C 3420                   CMP/EQ      R2,R4
    0000008E 8B01                   BF          L1076




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:11  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           log.c    28    
           log.c    29            if (p1 == symbol(E)) {
           log.c    30                    push_integer(1);
           log.c    31                    return;
    00000090 A006                   BRA         L1116
    00000092 E401                   MOV         #1,R4
    00000094              L1076:                            
           log.c    32            }
           log.c    33    
           log.c    34            if (equaln(p1, 1)) {
    00000094 D31B                   MOV.L       L1118+38,R3; _equaln
    00000096 430B                   JSR         @R3
    00000098 E501                   MOV         #1,R5
    0000009A 2008                   TST         R0,R0
    0000009C 8904                   BT          L1078
           log.c    35                    push_integer(0);
    0000009E E400                   MOV         #0,R4
           log.c    36                    return;
    000000A0              L1116:                            
    000000A0 4A0B                   JSR         @R10
    000000A2 0009                   NOP
    000000A4 A158                   BRA         L1077
    000000A6 0009                   NOP
    000000A8              L1078:                            
           log.c    37            }
           log.c    38    
           log.c    39            if (isnegativenumber(p1)) {
    000000A8 DC17                   MOV.L       L1118+42,R12; _add
    000000AA DD10                   MOV.L       L1118+14,R13; _push
    000000AC D317                   MOV.L       L1118+46,R3; _isnegativenumber
    000000AE 430B                   JSR         @R3
    000000B0 64E2                   MOV.L       @R14,R4
    000000B2 2008                   TST         R0,R0
    000000B4 8934                   BT          L1079
           log.c    40                    push(p1);
    000000B6 4D0B                   JSR         @R13
    000000B8 64E2                   MOV.L       @R14,R4
           log.c    41                    negate();
    000000BA D315                   MOV.L       L1118+50,R3; _negate
    000000BC 430B                   JSR         @R3
    000000BE 0009                   NOP
           log.c    42                    logarithm();
    000000C0 BFC8                   BSR         _logarithm
    000000C2 0009                   NOP
           log.c    43                    push(imaginaryunit);
    000000C4 D313                   MOV.L       L1118+54,R3; _imaginaryunit
    000000C6 4D0B                   JSR         @R13
    000000C8 6432                   MOV.L       @R3,R4
           log.c    44                    push_symbol(PI);
    000000CA D213                   MOV.L       L1118+58,R2; _push_symbol
    000000CC 420B                   JSR         @R2
    000000CE E47F                   MOV         #127,R4
           log.c    45                    multiply();
    000000D0 D312                   MOV.L       L1118+62,R3; _multiply
    000000D2 430B                   JSR         @R3
    000000D4 0009                   NOP
           log.c    46                    add();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:11  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000D6 4C0B                   JSR         @R12
    000000D8 0009                   NOP
           log.c    47                    return;
    000000DA A13D                   BRA         L1077
    000000DC 0009                   NOP
    000000DE              L1118:                            
    000000DE 0570                   .DATA.W     H'0570
    000000E0 05AC                   .DATA.W     H'05AC
    000000E2 0000                   .DATA.W     0
    000000E4 <00000000>             .DATA.L     _p1
    000000E8 <00000000>             .DATA.L     _symtab
    000000EC <00000000>             .DATA.L     _push
    000000F0 <00000000>             .DATA.L     _eval
    000000F4 <00000000>             .DATA.L     _save
    000000F8 <00000000>             .DATA.L     _restore
    000000FC <00000000>             .DATA.L     _pop
    00000100 <00000000>             .DATA.L     _push_integer
    00000104 <00000000>             .DATA.L     _equaln
    00000108 <00000000>             .DATA.L     _add
    0000010C <00000000>             .DATA.L     _isnegativenumber
    00000110 <00000000>             .DATA.L     _negate
    00000114 <00000000>             .DATA.L     _imaginaryunit
    00000118 <00000000>             .DATA.L     _push_symbol
    0000011C <00000000>             .DATA.L     _multiply
    00000120              L1079:                            
    00000120 69E2                   MOV.L       @R14,R9
    00000122 8498                   MOV.B       @(8,R9),R0
    00000124 600C                   EXTU.B      R0,R0
    00000126 8802                   CMP/EQ      #2,R0
    00000128 8B10                   BF          L1080
           log.c    48            }
           log.c    49    
           log.c    50            if (isdouble(p1)) {
           log.c    51                    d = log(p1->u.d);
    0000012A 5291                   MOV.L       @(4,R9),R2
    0000012C D133                   MOV.L       L1119+4,R1 ; _log
    0000012E 2F26                   MOV.L       R2,@-R15
    00000130 6292                   MOV.L       @R9,R2
    00000132 2F26                   MOV.L       R2,@-R15
    00000134 63F3                   MOV         R15,R3
    00000136 7308                   ADD         #8,R3
    00000138 410B                   JSR         @R1
    0000013A 2F36                   MOV.L       R3,@-R15
           log.c    52                    push_double(d);
    0000013C 53F4                   MOV.L       @(16,R15),R3
    0000013E 2F36                   MOV.L       R3,@-R15
    00000140 53F4                   MOV.L       @(16,R15),R3
    00000142 D22F                   MOV.L       L1119+8,R2 ; _push_double
    00000144 420B                   JSR         @R2
    00000146 2F36                   MOV.L       R3,@-R15
           log.c    53                    return;
    00000148 A106                   BRA         L1077
    0000014A 7F14                   ADD         #20,R15
    0000014C              L1080:                            
           log.c    54            }
           log.c    55    
           log.c    56            // rational number and not an integer?




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:11  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           log.c    57    
           log.c    58            if (isfraction(p1)) {
    0000014C D32D                   MOV.L       L1119+12,R3; _isfraction
    0000014E 430B                   JSR         @R3
    00000150 6493                   MOV         R9,R4
    00000152 2008                   TST         R0,R0
    00000154 8917                   BT          L1081
           log.c    59                    push(p1);
    00000156 4D0B                   JSR         @R13
    00000158 64E2                   MOV.L       @R14,R4
           log.c    60                    numerator();
    0000015A D32B                   MOV.L       L1119+16,R3; _numerator
    0000015C 430B                   JSR         @R3
    0000015E 0009                   NOP
           log.c    61                    logarithm();
    00000160 BF78                   BSR         _logarithm
    00000162 0009                   NOP
           log.c    62                    push(p1);
    00000164 4D0B                   JSR         @R13
    00000166 64E2                   MOV.L       @R14,R4
           log.c    63                    denominator();
    00000168 D328                   MOV.L       L1119+20,R3; _denominator
    0000016A 430B                   JSR         @R3
    0000016C 0009                   NOP
           log.c    64                    logarithm();
    0000016E BF71                   BSR         _logarithm
    00000170 0009                   NOP
           log.c    65                    subtract();
    00000172 7F08                   ADD         #8,R15
    00000174 D326                   MOV.L       L1119+24,R3; _subtract
    00000176 4F26                   LDS.L       @R15+,PR
    00000178 69F6                   MOV.L       @R15+,R9
    0000017A 6AF6                   MOV.L       @R15+,R10
    0000017C 6BF6                   MOV.L       @R15+,R11
    0000017E 6CF6                   MOV.L       @R15+,R12
    00000180 6DF6                   MOV.L       @R15+,R13
    00000182 432B                   JMP         @R3
    00000184 6EF6                   MOV.L       @R15+,R14
    00000186              L1081:                            
    00000186 64E2                   MOV.L       @R14,R4
    00000188 8448                   MOV.B       @(8,R4),R0
    0000018A 2008                   TST         R0,R0
    0000018C 8F02                   BF/S        L1083
    0000018E 65B2                   MOV.L       @R11,R5
    00000190 A003                   BRA         L1084
    00000192 6242                   MOV.L       @R4,R2
    00000194              L1083:                            
    00000194 9330                   MOV.W       L1119,R3   ; H'0570
    00000196 62B2                   MOV.L       @R11,R2
    00000198 323C                   ADD         R3,R2
    0000019A              L1084:                            
    0000019A 902E                   MOV.W       L1119+2,R0 ; H'03F0
    0000019C 305C                   ADD         R5,R0
    0000019E 3200                   CMP/EQ      R0,R2
    000001A0 8901                   BT          L1120
    000001A2 A086                   BRA         L1082
    000001A4 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:11  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001A6              L1120:                            
           log.c    66                    return;
           log.c    67            }
           log.c    68    
           log.c    69            // log(a ^ b) --> b log(a)
           log.c    70    
           log.c    71            if (car(p1) == symbol(POWER)) {
           log.c    72                    push(caddr(p1));
    000001A6 64E2                   MOV.L       @R14,R4
    000001A8 8448                   MOV.B       @(8,R4),R0
    000001AA 2008                   TST         R0,R0
    000001AC 8B02                   BF          L1087
    000001AE 64E2                   MOV.L       @R14,R4
    000001B0 A004                   BRA         L1092
    000001B2 5441                   MOV.L       @(4,R4),R4
    000001B4              L1087:                            
    000001B4 9320                   MOV.W       L1119,R3   ; H'0570
    000001B6 D217                   MOV.L       L1119+28,R2; _symtab
    000001B8 6422                   MOV.L       @R2,R4
    000001BA 343C                   ADD         R3,R4
    000001BC              L1092:                            
    000001BC 8448                   MOV.B       @(8,R4),R0
    000001BE 2008                   TST         R0,R0
    000001C0 8B0C                   BF          L1086
    000001C2 64E2                   MOV.L       @R14,R4
    000001C4 8448                   MOV.B       @(8,R4),R0
    000001C6 2008                   TST         R0,R0
    000001C8 8B02                   BF          L1088
    000001CA 64E2                   MOV.L       @R14,R4
    000001CC A004                   BRA         L1093
    000001CE 5441                   MOV.L       @(4,R4),R4
    000001D0              L1088:                            
    000001D0 9312                   MOV.W       L1119,R3   ; H'0570
    000001D2 D210                   MOV.L       L1119+28,R2; _symtab
    000001D4 6422                   MOV.L       @R2,R4
    000001D6 343C                   ADD         R3,R4
    000001D8              L1093:                            
    000001D8 A004                   BRA         L1094
    000001DA 5441                   MOV.L       @(4,R4),R4
    000001DC              L1086:                            
    000001DC 930C                   MOV.W       L1119,R3   ; H'0570
    000001DE D20D                   MOV.L       L1119+28,R2; _symtab
    000001E0 6422                   MOV.L       @R2,R4
    000001E2 343C                   ADD         R3,R4
    000001E4              L1094:                            
    000001E4 8448                   MOV.B       @(8,R4),R0
    000001E6 2008                   TST         R0,R0
    000001E8 8B30                   BF          L1085
    000001EA 64E2                   MOV.L       @R14,R4
    000001EC 8448                   MOV.B       @(8,R4),R0
    000001EE 2008                   TST         R0,R0
    000001F0 8B12                   BF          L1090
    000001F2 64E2                   MOV.L       @R14,R4
    000001F4 A014                   BRA         L1095
    000001F6 5441                   MOV.L       @(4,R4),R4
    000001F8              L1119:                            
    000001F8 0570                   .DATA.W     H'0570




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:11  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001FA 03F0                   .DATA.W     H'03F0
    000001FC <00000000>             .DATA.L     _log
    00000200 <00000000>             .DATA.L     _push_double
    00000204 <00000000>             .DATA.L     _isfraction
    00000208 <00000000>             .DATA.L     _numerator
    0000020C <00000000>             .DATA.L     _denominator
    00000210 <00000000>             .DATA.L     _subtract
    00000214 <00000000>             .DATA.L     _symtab
    00000218              L1090:                            
    00000218 936C                   MOV.W       L1121,R3   ; H'0570
    0000021A D237                   MOV.L       L1121+4,R2 ; _symtab
    0000021C 6422                   MOV.L       @R2,R4
    0000021E 343C                   ADD         R3,R4
    00000220              L1095:                            
    00000220 8448                   MOV.B       @(8,R4),R0
    00000222 2008                   TST         R0,R0
    00000224 8B0C                   BF          L1089
    00000226 64E2                   MOV.L       @R14,R4
    00000228 8448                   MOV.B       @(8,R4),R0
    0000022A 2008                   TST         R0,R0
    0000022C 8B02                   BF          L1091
    0000022E 64E2                   MOV.L       @R14,R4
    00000230 A004                   BRA         L1096
    00000232 5441                   MOV.L       @(4,R4),R4
    00000234              L1091:                            
    00000234 935E                   MOV.W       L1121,R3   ; H'0570
    00000236 D230                   MOV.L       L1121+4,R2 ; _symtab
    00000238 6422                   MOV.L       @R2,R4
    0000023A 343C                   ADD         R3,R4
    0000023C              L1096:                            
    0000023C A004                   BRA         L1097
    0000023E 5441                   MOV.L       @(4,R4),R4
    00000240              L1089:                            
    00000240 9358                   MOV.W       L1121,R3   ; H'0570
    00000242 D22D                   MOV.L       L1121+4,R2 ; _symtab
    00000244 6422                   MOV.L       @R2,R4
    00000246 343C                   ADD         R3,R4
    00000248              L1097:                            
    00000248 A004                   BRA         L1098
    0000024A 6442                   MOV.L       @R4,R4
    0000024C              L1085:                            
    0000024C 9352                   MOV.W       L1121,R3   ; H'0570
    0000024E D22A                   MOV.L       L1121+4,R2 ; _symtab
    00000250 6422                   MOV.L       @R2,R4
    00000252 343C                   ADD         R3,R4
    00000254              L1098:                            
    00000254 4D0B                   JSR         @R13
    00000256 0009                   NOP
           log.c    73                    push(cadr(p1));
    00000258 64E2                   MOV.L       @R14,R4
    0000025A 8448                   MOV.B       @(8,R4),R0
    0000025C 2008                   TST         R0,R0
    0000025E 8B02                   BF          L1100
    00000260 64E2                   MOV.L       @R14,R4
    00000262 A004                   BRA         L1102
    00000264 5441                   MOV.L       @(4,R4),R4
    00000266              L1100:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:11  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000266 9345                   MOV.W       L1121,R3   ; H'0570
    00000268 D223                   MOV.L       L1121+4,R2 ; _symtab
    0000026A 6422                   MOV.L       @R2,R4
    0000026C 343C                   ADD         R3,R4
    0000026E              L1102:                            
    0000026E 8448                   MOV.B       @(8,R4),R0
    00000270 2008                   TST         R0,R0
    00000272 8B0C                   BF          L1099
    00000274 64E2                   MOV.L       @R14,R4
    00000276 8448                   MOV.B       @(8,R4),R0
    00000278 2008                   TST         R0,R0
    0000027A 8B02                   BF          L1101
    0000027C 64E2                   MOV.L       @R14,R4
    0000027E A004                   BRA         L1103
    00000280 5441                   MOV.L       @(4,R4),R4
    00000282              L1101:                            
    00000282 9337                   MOV.W       L1121,R3   ; H'0570
    00000284 D21C                   MOV.L       L1121+4,R2 ; _symtab
    00000286 6422                   MOV.L       @R2,R4
    00000288 343C                   ADD         R3,R4
    0000028A              L1103:                            
    0000028A A004                   BRA         L1104
    0000028C 6442                   MOV.L       @R4,R4
    0000028E              L1099:                            
    0000028E 9331                   MOV.W       L1121,R3   ; H'0570
    00000290 D219                   MOV.L       L1121+4,R2 ; _symtab
    00000292 6422                   MOV.L       @R2,R4
    00000294 343C                   ADD         R3,R4
    00000296              L1104:                            
    00000296 4D0B                   JSR         @R13
    00000298 0009                   NOP
           log.c    74                    logarithm();
    0000029A BEDB                   BSR         _logarithm
    0000029C 0009                   NOP
           log.c    75                    multiply();
    0000029E 7F08                   ADD         #8,R15
    000002A0 D216                   MOV.L       L1121+8,R2 ; _multiply
    000002A2 4F26                   LDS.L       @R15+,PR
    000002A4 69F6                   MOV.L       @R15+,R9
    000002A6 6AF6                   MOV.L       @R15+,R10
    000002A8 6BF6                   MOV.L       @R15+,R11
    000002AA 6CF6                   MOV.L       @R15+,R12
    000002AC 6DF6                   MOV.L       @R15+,R13
    000002AE 422B                   JMP         @R2
    000002B0 6EF6                   MOV.L       @R15+,R14
    000002B2              L1082:                            
           log.c    76                    return;
           log.c    77            }
           log.c    78    
           log.c    79            // log(a * b) --> log(a) + log(b)
           log.c    80    
           log.c    81            if (car(p1) == symbol(MULTIPLY)) {
    000002B2 8448                   MOV.B       @(8,R4),R0
    000002B4 2008                   TST         R0,R0
    000002B6 8B01                   BF          L1106
    000002B8 A002                   BRA         L1107
    000002BA 6342                   MOV.L       @R4,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:11  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002BC              L1106:                            
    000002BC 931A                   MOV.W       L1121,R3   ; H'0570
    000002BE 335C                   ADD         R5,R3
    000002C0              L1107:                            
    000002C0 9119                   MOV.W       L1121+2,R1 ; H'0384
    000002C2 315C                   ADD         R5,R1
    000002C4 3310                   CMP/EQ      R1,R3
    000002C6 8B37                   BF          L1105
           log.c    82                    push_integer(0);
    000002C8 4A0B                   JSR         @R10
    000002CA E400                   MOV         #0,R4
           log.c    83                    p1 = cdr(p1);
    000002CC 63E2                   MOV.L       @R14,R3
    000002CE 8438                   MOV.B       @(8,R3),R0
    000002D0 2008                   TST         R0,R0
    000002D2 8B02                   BF          L1108
    000002D4 62E2                   MOV.L       @R14,R2
    000002D6 A028                   BRA         L1117
    000002D8 5221                   MOV.L       @(4,R2),R2
    000002DA              L1108:                            
    000002DA 930B                   MOV.W       L1121,R3   ; H'0570
    000002DC D106                   MOV.L       L1121+4,R1 ; _symtab
    000002DE 6212                   MOV.L       @R1,R2
    000002E0 323C                   ADD         R3,R2
           log.c    84                    while (iscons(p1)) {
    000002E2 A022                   BRA         L1117
    000002E4 0009                   NOP
    000002E6              L1111:                            
           log.c    85                            push(car(p1));
    000002E6 64E2                   MOV.L       @R14,R4
    000002E8 8448                   MOV.B       @(8,R4),R0
    000002EA 2008                   TST         R0,R0
    000002EC 8B08                   BF          L1112
    000002EE 64E2                   MOV.L       @R14,R4
    000002F0 A00A                   BRA         L1113
    000002F2 6442                   MOV.L       @R4,R4
    000002F4              L1121:                            
    000002F4 0570                   .DATA.W     H'0570
    000002F6 0384                   .DATA.W     H'0384
    000002F8 <00000000>             .DATA.L     _symtab
    000002FC <00000000>             .DATA.L     _multiply
    00000300              L1112:                            
    00000300 9333                   MOV.W       L1122,R3   ; H'0570
    00000302 D21A                   MOV.L       L1122+2,R2 ; _symtab
    00000304 6422                   MOV.L       @R2,R4
    00000306 343C                   ADD         R3,R4
    00000308              L1113:                            
    00000308 4D0B                   JSR         @R13
    0000030A 0009                   NOP
           log.c    86                            logarithm();
    0000030C BEA2                   BSR         _logarithm
    0000030E 0009                   NOP
           log.c    87                            add();
    00000310 4C0B                   JSR         @R12
    00000312 0009                   NOP
           log.c    88                            p1 = cdr(p1);
    00000314 63E2                   MOV.L       @R14,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:11  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000316 8438                   MOV.B       @(8,R3),R0
    00000318 2008                   TST         R0,R0
    0000031A 8B02                   BF          L1114
    0000031C 62E2                   MOV.L       @R14,R2
    0000031E A004                   BRA         L1117
    00000320 5221                   MOV.L       @(4,R2),R2
    00000322              L1114:                            
    00000322 9322                   MOV.W       L1122,R3   ; H'0570
    00000324 D111                   MOV.L       L1122+2,R1 ; _symtab
    00000326 6212                   MOV.L       @R1,R2
    00000328 323C                   ADD         R3,R2
    0000032A              L1117:                            
    0000032A 6323                   MOV         R2,R3
    0000032C 2E22                   MOV.L       R2,@R14
    0000032E 8438                   MOV.B       @(8,R3),R0
    00000330 2008                   TST         R0,R0
    00000332 89D8                   BT          L1111
           log.c    89                    }
           log.c    90                    return;
    00000334 A010                   BRA         L1077
    00000336 0009                   NOP
    00000338              L1105:                            
           log.c    91            }
           log.c    92    
           log.c    93            push_symbol(LOG);
    00000338 D20D                   MOV.L       L1122+6,R2 ; _push_symbol
    0000033A 420B                   JSR         @R2
    0000033C E448                   MOV         #72,R4
           log.c    94            push(p1);
    0000033E 4D0B                   JSR         @R13
    00000340 64E2                   MOV.L       @R14,R4
           log.c    95            list(2);
    00000342 E402                   MOV         #2,R4
    00000344 D30B                   MOV.L       L1122+10,R3; _list
    00000346 7F08                   ADD         #8,R15
    00000348 4F26                   LDS.L       @R15+,PR
    0000034A 69F6                   MOV.L       @R15+,R9
    0000034C 6AF6                   MOV.L       @R15+,R10
    0000034E 6BF6                   MOV.L       @R15+,R11
    00000350 6CF6                   MOV.L       @R15+,R12
    00000352 6DF6                   MOV.L       @R15+,R13
    00000354 432B                   JMP         @R3
    00000356 6EF6                   MOV.L       @R15+,R14
    00000358              L1077:                            
           log.c    96    }
    00000358 7F08                   ADD         #8,R15
    0000035A 4F26                   LDS.L       @R15+,PR
    0000035C 69F6                   MOV.L       @R15+,R9
    0000035E 6AF6                   MOV.L       @R15+,R10
    00000360 6BF6                   MOV.L       @R15+,R11
    00000362 6CF6                   MOV.L       @R15+,R12
    00000364 6DF6                   MOV.L       @R15+,R13
    00000366 000B                   RTS
    00000368 6EF6                   MOV.L       @R15+,R14
    0000036A              L1122:                            
    0000036A 0570                   .DATA.W     H'0570
    0000036C <00000000>             .DATA.L     _symtab




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:11  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000370 <00000000>             .DATA.L     _push_symbol
    00000374 <00000000>             .DATA.L     _list
           log.c    97    


























































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:11  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:       97



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000378 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000378 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           22
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           3
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            75






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmk9639.tmp 

