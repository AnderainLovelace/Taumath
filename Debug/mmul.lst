SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\mmul.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          mmul.c     1    // Bignum multiplication and division
          mmul.c     2    
          mmul.c     3    #include "stdafx.h"
          mmul.c     4    #include "defs.h"
          mmul.c     5    
          mmul.c     6    const double POW_2_32 = 4294967296.0;
          mmul.c     7    
          mmul.c     8    extern int ge(unsigned int *, unsigned int *, int);
          mmul.c     9    
          mmul.c    10    static void mulf(unsigned int *, unsigned int *, int, unsigned int);
          mmul.c    11    static void addf(unsigned int *, unsigned int *, int);
          mmul.c    12    static void subf(unsigned int *, unsigned int *, int);
          mmul.c    13    
          mmul.c    14    unsigned int *
          mmul.c    15    mmul(unsigned int *a, unsigned int *b)
P   00000000              _mmul:                           ; function: mmul
                                                           ; frame size=56
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 2FB6                   MOV.L       R11,@-R15
    00000008 2FA6                   MOV.L       R10,@-R15
    0000000A 6B43                   MOV         R4,R11
    0000000C 2F96                   MOV.L       R9,@-R15
    0000000E 74FC                   ADD         #-4,R4
    00000010 2F86                   MOV.L       R8,@-R15
    00000012 4F22                   STS.L       PR,@-R15
    00000014 4F12                   STS.L       MACL,@-R15
    00000016 7FEC                   ADD         #-20,R15
    00000018 6042                   MOV.L       @R4,R0
    0000001A 8801                   CMP/EQ      #1,R0
    0000001C 8F03                   BF/S        L1170
    0000001E 6C53                   MOV         R5,R12
    00000020 62B2                   MOV.L       @R11,R2
    00000022 2228                   TST         R2,R2
    00000024 8907                   BT          L1169
    00000026              L1170:                            
    00000026 60C3                   MOV         R12,R0
    00000028 70FC                   ADD         #-4,R0
    0000002A 6002                   MOV.L       @R0,R0
    0000002C 8801                   CMP/EQ      #1,R0
    0000002E 8B0F                   BF          L1168
    00000030 62C2                   MOV.L       @R12,R2
    00000032 2228                   TST         R2,R2
    00000034 8B0C                   BF          L1168
    00000036              L1169:                            
          mmul.c    16    {
          mmul.c    17            int alen, blen, i, n;
          mmul.c    18            unsigned int *t, *x;
          mmul.c    19    
          mmul.c    20            if (MZERO(a) || MZERO(b))
          mmul.c    21                    return mint(0);
    00000036 E400                   MOV         #0,R4
    00000038 D382                   MOV.L       L1252,R3   ; _mint




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000003A 7F14                   ADD         #20,R15
    0000003C 4F16                   LDS.L       @R15+,MACL
    0000003E 4F26                   LDS.L       @R15+,PR
    00000040 68F6                   MOV.L       @R15+,R8
    00000042 69F6                   MOV.L       @R15+,R9
    00000044 6AF6                   MOV.L       @R15+,R10
    00000046 6BF6                   MOV.L       @R15+,R11
    00000048 6CF6                   MOV.L       @R15+,R12
    0000004A 6DF6                   MOV.L       @R15+,R13
    0000004C 432B                   JMP         @R3
    0000004E 6EF6                   MOV.L       @R15+,R14
    00000050              L1168:                            
    00000050 62B3                   MOV         R11,R2
    00000052 72F8                   ADD         #-8,R2
    00000054 1F23                   MOV.L       R2,@(12,R15)
    00000056 6042                   MOV.L       @R4,R0
    00000058 8801                   CMP/EQ      #1,R0
    0000005A 8B10                   BF          L1172
    0000005C 60B2                   MOV.L       @R11,R0
    0000005E 8801                   CMP/EQ      #1,R0
    00000060 8B0D                   BF          L1172
          mmul.c    22    
          mmul.c    23            if (MLENGTH(a) == 1 && a[0] == 1) {
          mmul.c    24                    t = mcopy(b);
    00000062 D379                   MOV.L       L1252+4,R3 ; _mcopy
    00000064 430B                   JSR         @R3
    00000066 64C3                   MOV         R12,R4
          mmul.c    25                    MSIGN(t) *= MSIGN(a);
    00000068 53F3                   MOV.L       @(12,R15),R3
    0000006A 6403                   MOV         R0,R4
    0000006C 6332                   MOV.L       @R3,R3
    0000006E 6203                   MOV         R0,R2
    00000070 72F8                   ADD         #-8,R2
    00000072 6122                   MOV.L       @R2,R1
    00000074 0137                   MUL.L       R3,R1
    00000076 011A                   STS         MACL,R1
    00000078 2212                   MOV.L       R1,@R2
    0000007A A017                   BRA         L1160
    0000007C 0009                   NOP
    0000007E              L1172:                            
    0000007E 65C3                   MOV         R12,R5
    00000080 75FC                   ADD         #-4,R5
    00000082 63C3                   MOV         R12,R3
    00000084 73F8                   ADD         #-8,R3
    00000086 1F34                   MOV.L       R3,@(16,R15)
    00000088 6052                   MOV.L       @R5,R0
    0000008A 8801                   CMP/EQ      #1,R0
    0000008C 8B10                   BF          L1173
    0000008E 60C2                   MOV.L       @R12,R0
    00000090 8801                   CMP/EQ      #1,R0
    00000092 8B0D                   BF          L1173
          mmul.c    26                    return t;
          mmul.c    27            }
          mmul.c    28    
          mmul.c    29            if (MLENGTH(b) == 1 && b[0] == 1) {
          mmul.c    30                    t = mcopy(a);
    00000094 D36C                   MOV.L       L1252+4,R3 ; _mcopy




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000096 430B                   JSR         @R3
    00000098 64B3                   MOV         R11,R4
    0000009A 6403                   MOV         R0,R4
          mmul.c    31                    MSIGN(t) *= MSIGN(b);
    0000009C 53F4                   MOV.L       @(16,R15),R3
    0000009E 6203                   MOV         R0,R2
    000000A0 6332                   MOV.L       @R3,R3
    000000A2 72F8                   ADD         #-8,R2
    000000A4 6122                   MOV.L       @R2,R1
    000000A6 0137                   MUL.L       R3,R1
    000000A8 011A                   STS         MACL,R1
    000000AA 2212                   MOV.L       R1,@R2
    000000AC              L1160:
          mmul.c    32                    return t;
    000000AC A04D                   BRA         L1171
    000000AE 6043                   MOV         R4,R0
    000000B0              L1173:                            
          mmul.c    33            }
          mmul.c    34    
          mmul.c    35            alen = MLENGTH(a);
    000000B0 6342                   MOV.L       @R4,R3
    000000B2 1F31                   MOV.L       R3,@(4,R15)
          mmul.c    36            blen = MLENGTH(b);
    000000B4 6252                   MOV.L       @R5,R2
    000000B6 2F22                   MOV.L       R2,@R15
          mmul.c    37    
          mmul.c    38            n = alen + blen;
    000000B8 59F1                   MOV.L       @(4,R15),R9
    000000BA 6323                   MOV         R2,R3
          mmul.c    39    
          mmul.c    40            x = mnew(n);
    000000BC D263                   MOV.L       L1252+8,R2 ; _mnew
    000000BE 393C                   ADD         R3,R9
    000000C0 420B                   JSR         @R2
    000000C2 6493                   MOV         R9,R4
          mmul.c    41    
          mmul.c    42            t = mnew(alen + 1);
    000000C4 54F1                   MOV.L       @(4,R15),R4
    000000C6 6E03                   MOV         R0,R14
    000000C8 D360                   MOV.L       L1252+8,R3 ; _mnew
    000000CA 7401                   ADD         #1,R4
    000000CC 430B                   JSR         @R3
    000000CE 1F42                   MOV.L       R4,@(8,R15)
    000000D0 6A03                   MOV         R0,R10
          mmul.c    43    
          mmul.c    44            for (i = 0; i < n; i++)
    000000D2 E500                   MOV         #0,R5
    000000D4 6653                   MOV         R5,R6
    000000D6 E400                   MOV         #0,R4
    000000D8 4915                   CMP/PL      R9
    000000DA 8F05                   BF/S        L1174
    000000DC 34EC                   ADD         R14,R4
    000000DE              L1175:                            
    000000DE 7601                   ADD         #1,R6
          mmul.c    45                    x[i] = 0;
    000000E0 2452                   MOV.L       R5,@R4
    000000E2 3693                   CMP/GE      R9,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000E4 8FFB                   BF/S        L1175
    000000E6 7404                   ADD         #4,R4
    000000E8              L1174:                            
          mmul.c    46    
          mmul.c    47            /* sum of partial products */
          mmul.c    48    
          mmul.c    49            for (i = 0; i < blen; i++) {
    000000E8 62F2                   MOV.L       @R15,R2
    000000EA 6853                   MOV         R5,R8
    000000EC 4215                   CMP/PL      R2
    000000EE 8F10                   BF/S        L1176
    000000F0 6D53                   MOV         R5,R13
    000000F2              L1177:                            
          mmul.c    50                    mulf(t, a, alen, b[i]);
    000000F2 60D3                   MOV         R13,R0
    000000F4 56F1                   MOV.L       @(4,R15),R6
    000000F6 65B3                   MOV         R11,R5
    000000F8 07CE                   MOV.L       @(R0,R12),R7
    000000FA B1F1                   BSR         __$mulf
    000000FC 64A3                   MOV         R10,R4
          mmul.c    51                    addf(x + i, t, alen + 1);
    000000FE 65A3                   MOV         R10,R5
    00000100 56F2                   MOV.L       @(8,R15),R6
    00000102 64D3                   MOV         R13,R4
    00000104 B150                   BSR         __$addf
    00000106 34EC                   ADD         R14,R4
    00000108 62F2                   MOV.L       @R15,R2
    0000010A 7801                   ADD         #1,R8
    0000010C 3823                   CMP/GE      R2,R8
    0000010E 8FF0                   BF/S        L1177
    00000110 7D04                   ADD         #4,R13
    00000112              L1176:                            
          mmul.c    52            }
          mmul.c    53    
          mmul.c    54            mfree(t);
    00000112 D24F                   MOV.L       L1252+12,R2; _mfree
    00000114 420B                   JSR         @R2
    00000116 64A3                   MOV         R10,R4
          mmul.c    55    
          mmul.c    56            /* length of product */
          mmul.c    57    
          mmul.c    58            for (i = n - 1; i > 0; i--)
    00000118 6493                   MOV         R9,R4
    0000011A 74FF                   ADD         #-1,R4
    0000011C 4415                   CMP/PL      R4
    0000011E 8B07                   BF          L1178
    00000120              L1179:                            
          mmul.c    59                    if (x[i])
    00000120 6043                   MOV         R4,R0
    00000122 4008                   SHLL2       R0
    00000124 03EE                   MOV.L       @(R0,R14),R3
    00000126 2338                   TST         R3,R3
    00000128 8B02                   BF          L1178
    0000012A 74FF                   ADD         #-1,R4
    0000012C 4415                   CMP/PL      R4
    0000012E 89F7                   BT          L1179
    00000130              L1178:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          mmul.c    60                            break;
          mmul.c    61    
          mmul.c    62            MLENGTH(x) = i + 1;
    00000130 62E3                   MOV         R14,R2
    00000132 7401                   ADD         #1,R4
    00000134 2246                   MOV.L       R4,@-R2
          mmul.c    63    
          mmul.c    64            MSIGN(x) = MSIGN(a) * MSIGN(b);
    00000136 63E3                   MOV         R14,R3
    00000138 52F3                   MOV.L       @(12,R15),R2
          mmul.c    65    
          mmul.c    66            return x;
    0000013A 60E3                   MOV         R14,R0
    0000013C 51F4                   MOV.L       @(16,R15),R1
    0000013E 73F8                   ADD         #-8,R3
    00000140 6222                   MOV.L       @R2,R2
    00000142 6112                   MOV.L       @R1,R1
    00000144 0217                   MUL.L       R1,R2
    00000146 021A                   STS         MACL,R2
    00000148 2322                   MOV.L       R2,@R3
          mmul.c    67    }
    0000014A              L1171:                            
    0000014A 7F14                   ADD         #20,R15
    0000014C 4F16                   LDS.L       @R15+,MACL
    0000014E 4F26                   LDS.L       @R15+,PR
    00000150 68F6                   MOV.L       @R15+,R8
    00000152 69F6                   MOV.L       @R15+,R9
    00000154 6AF6                   MOV.L       @R15+,R10
    00000156 6BF6                   MOV.L       @R15+,R11
    00000158 6CF6                   MOV.L       @R15+,R12
    0000015A 6DF6                   MOV.L       @R15+,R13
    0000015C 000B                   RTS
    0000015E 6EF6                   MOV.L       @R15+,R14
          mmul.c    68    
          mmul.c    69    unsigned int *
          mmul.c    70    mdiv(unsigned int *a, unsigned int *b)
    00000160              _mdiv:                           ; function: mdiv
                                                           ; frame size=128
                                                           ; used runtime library name:
                                                           ; __addd, __muld, __divdr, __dtou, __utod
    00000160 2FE6                   MOV.L       R14,@-R15
    00000162 2FD6                   MOV.L       R13,@-R15
    00000164 2FC6                   MOV.L       R12,@-R15
    00000166 6D53                   MOV         R5,R13
    00000168 2FB6                   MOV.L       R11,@-R15
    0000016A 7DFC                   ADD         #-4,R13
    0000016C 2FA6                   MOV.L       R10,@-R15
    0000016E 2F96                   MOV.L       R9,@-R15
    00000170 2F86                   MOV.L       R8,@-R15
    00000172 4F22                   STS.L       PR,@-R15
    00000174 4F12                   STS.L       MACL,@-R15
    00000176 7FC8                   ADD         #-56,R15
    00000178 1F43                   MOV.L       R4,@(12,R15)
    0000017A 60D2                   MOV.L       @R13,R0
    0000017C 8801                   CMP/EQ      #1,R0
    0000017E 8F07                   BF/S        L1182
    00000180 6E53                   MOV         R5,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000182 62E2                   MOV.L       @R14,R2
    00000184 2228                   TST         R2,R2
    00000186 8B03                   BF          L1182
          mmul.c    71    {
          mmul.c    72            int alen, blen, i, n;
          mmul.c    73            unsigned int c, *t, *x, *y;
          mmul.c    74            ULONGLONG jj, kk;
          mmul.c    75    
          mmul.c    76            if (MZERO(b))
          mmul.c    77                    stop("divide by zero");
    00000188 D432                   MOV.L       L1252+16,R4; L1087
    0000018A D333                   MOV.L       L1252+20,R3; _stop
    0000018C 430B                   JSR         @R3
    0000018E 0009                   NOP
    00000190              L1182:                            
    00000190 54F3                   MOV.L       @(12,R15),R4
    00000192 74FC                   ADD         #-4,R4
    00000194 6042                   MOV.L       @R4,R0
    00000196 8801                   CMP/EQ      #1,R0
    00000198 8B03                   BF          L1183
    0000019A 52F3                   MOV.L       @(12,R15),R2
    0000019C 6322                   MOV.L       @R2,R3
    0000019E 2338                   TST         R3,R3
    000001A0 8906                   BT          L1161
    000001A2              L1183:                            
          mmul.c    78    
          mmul.c    79            if (MZERO(a))
          mmul.c    80                    return mint(0);
          mmul.c    81    
          mmul.c    82            alen = MLENGTH(a);
    000001A2 6242                   MOV.L       @R4,R2
    000001A4 1F21                   MOV.L       R2,@(4,R15)
          mmul.c    83            blen = MLENGTH(b);
          mmul.c    84    
          mmul.c    85            n = alen - blen;
    000001A6 6923                   MOV         R2,R9
    000001A8 6CD2                   MOV.L       @R13,R12
    000001AA 39C8                   SUB         R12,R9
          mmul.c    86    
          mmul.c    87            if (n < 0)
    000001AC 4911                   CMP/PZ      R9
    000001AE 890C                   BT          L1185
    000001B0              L1161:
          mmul.c    88                    return mint(0);
    000001B0 D224                   MOV.L       L1252,R2   ; _mint
    000001B2 E400                   MOV         #0,R4
    000001B4 7F38                   ADD         #56,R15
    000001B6 4F16                   LDS.L       @R15+,MACL
    000001B8 4F26                   LDS.L       @R15+,PR
    000001BA 68F6                   MOV.L       @R15+,R8
    000001BC 69F6                   MOV.L       @R15+,R9
    000001BE 6AF6                   MOV.L       @R15+,R10
    000001C0 6BF6                   MOV.L       @R15+,R11
    000001C2 6CF6                   MOV.L       @R15+,R12
    000001C4 6DF6                   MOV.L       @R15+,R13
    000001C6 422B                   JMP         @R2
    000001C8 6EF6                   MOV.L       @R15+,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001CA              L1185:                            
          mmul.c    89    
          mmul.c    90            x = mnew(alen + 1);
    000001CA DA20                   MOV.L       L1252+8,R10; _mnew
    000001CC 54F1                   MOV.L       @(4,R15),R4
    000001CE 4A0B                   JSR         @R10
    000001D0 7401                   ADD         #1,R4
    000001D2 6D03                   MOV         R0,R13
          mmul.c    91    
          mmul.c    92            for (i = 0; i < alen; i++)
    000001D4 53F1                   MOV.L       @(4,R15),R3
    000001D6 4315                   CMP/PL      R3
    000001D8 8F0B                   BF/S        L1186
    000001DA E400                   MOV         #0,R4
    000001DC              L1187:                            
          mmul.c    93                    x[i] = a[i];
    000001DC 53F3                   MOV.L       @(12,R15),R3
    000001DE 6043                   MOV         R4,R0
    000001E0 4008                   SHLL2       R0
    000001E2 6203                   MOV         R0,R2
    000001E4 033E                   MOV.L       @(R0,R3),R3
    000001E6 7401                   ADD         #1,R4
    000001E8 32DC                   ADD         R13,R2
    000001EA 2232                   MOV.L       R3,@R2
    000001EC 53F1                   MOV.L       @(4,R15),R3
    000001EE 3433                   CMP/GE      R3,R4
    000001F0 8BF4                   BF          L1187
    000001F2              L1186:                            
          mmul.c    94    
          mmul.c    95            x[i] = 0;
    000001F2 6043                   MOV         R4,R0
    000001F4 4008                   SHLL2       R0
    000001F6 E300                   MOV         #0,R3
    000001F8 0D36                   MOV.L       R3,@(R0,R13)
          mmul.c    96    
          mmul.c    97            y = mnew(n + 1);
    000001FA 6493                   MOV         R9,R4
    000001FC 4A0B                   JSR         @R10
    000001FE 7401                   ADD         #1,R4
    00000200 6B03                   MOV         R0,R11
          mmul.c    98    
          mmul.c    99            t = mnew(blen + 1);
    00000202 64C3                   MOV         R12,R4
    00000204 7401                   ADD         #1,R4
    00000206 4A0B                   JSR         @R10
    00000208 1F47                   MOV.L       R4,@(28,R15)
    0000020A 2F02                   MOV.L       R0,@R15
          mmul.c   100    
          mmul.c   101            /* Add 1 here to round up in case the remaining words are non-zero. */
          mmul.c   102    
          mmul.c   103            kk = (ULONGLONG) b[blen - 1] + 1;
    0000020C D313                   MOV.L       L1252+24,R3; __utod
    0000020E 60C3                   MOV         R12,R0
    00000210 70FF                   ADD         #-1,R0
    00000212 4008                   SHLL2       R0
    00000214 00EE                   MOV.L       @(R0,R14),R0
    00000216 7FF8                   ADD         #-8,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000218 430B                   JSR         @R3
    0000021A 2FF6                   MOV.L       R15,@-R15
    0000021C D311                   MOV.L       L1252+32,R3; __addd
    0000021E E200                   MOV         #0,R2
    00000220 2F26                   MOV.L       R2,@-R15
    00000222 D20F                   MOV.L       L1252+28,R2; H'3FF00000
    00000224 2F26                   MOV.L       R2,@-R15
    00000226 61F3                   MOV         R15,R1
    00000228 7138                   ADD         #56,R1
    0000022A 430B                   JSR         @R3
    0000022C 2F16                   MOV.L       R1,@-R15
          mmul.c   104    
          mmul.c   105            for (i = 0; i <= n; i++) {
    0000022E EA00                   MOV         #0,R10
    00000230 6493                   MOV         R9,R4
    00000232 4408                   SHLL2       R4
    00000234 1F48                   MOV.L       R4,@(32,R15)
    00000236 6893                   MOV         R9,R8
    00000238 34DC                   ADD         R13,R4
    0000023A 4808                   SHLL2       R8
    0000023C 1F46                   MOV.L       R4,@(24,R15)
    0000023E 38BC                   ADD         R11,R8
    00000240 A07B                   BRA         L1188
    00000242 1F45                   MOV.L       R4,@(20,R15)
    00000244              L1252:                            
    00000244 <00000000>             .DATA.L     _mint
    00000248 <00000000>             .DATA.L     _mcopy
    0000024C <00000000>             .DATA.L     _mnew
    00000250 <00000000>             .DATA.L     _mfree
    00000254 <00000000>             .DATA.L     L1087
    00000258 <00000000>             .DATA.L     _stop
    0000025C <00000000>             .DATA.L     __utod
    00000260 3FF00000               .DATA.L     H'3FF00000
    00000264 <00000000>             .DATA.L     __addd
    00000268              L1189:                            
          mmul.c   106    
          mmul.c   107                    y[n - i] = 0;
    00000268 6293                   MOV         R9,R2
    0000026A 32A8                   SUB         R10,R2
    0000026C 4208                   SHLL2       R2
    0000026E 32BC                   ADD         R11,R2
    00000270 1F24                   MOV.L       R2,@(16,R15)
    00000272 E300                   MOV         #0,R3
    00000274 2232                   MOV.L       R3,@R2
    00000276 63A3                   MOV         R10,R3
    00000278 52F1                   MOV.L       @(4,R15),R2
    0000027A 4308                   SHLL2       R3
    0000027C 32A8                   SUB         R10,R2
    0000027E 1F22                   MOV.L       R2,@(8,R15)
    00000280 51F8                   MOV.L       @(32,R15),R1
    00000282 3138                   SUB         R3,R1
    00000284 31DC                   ADD         R13,R1
    00000286 1F19                   MOV.L       R1,@(36,R15)
          mmul.c   108    
          mmul.c   109                    for (;;) {
    00000288              L1191:                            
          mmul.c   110    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          mmul.c   111                            /* estimate the partial quotient */
          mmul.c   112    /*
          mmul.c   113                            if (little_endian()) {
          mmul.c   114                                    ((unsigned int *) &jj)[0] = x[alen - i - 1];
          mmul.c   115                                    ((unsigned int *) &jj)[1] = x[alen - i - 0];
          mmul.c   116                            } else {
          mmul.c   117                                    ((unsigned int *) &jj)[1] = x[alen - i - 1];
          mmul.c   118                                    ((unsigned int *) &jj)[0] = x[alen - i - 0];
          mmul.c   119                            }
          mmul.c   120    */
          mmul.c   121                            jj = x[alen - i - 1]/*low*/+x[alen - i]/*high*/*POW_2_32;
    00000288 50F2                   MOV.L       @(8,R15),R0
    0000028A 70FF                   ADD         #-1,R0
    0000028C D38A                   MOV.L       L1253,R3   ; __utod
    0000028E 4008                   SHLL2       R0
    00000290 00DE                   MOV.L       @(R0,R13),R0
    00000292 7FF8                   ADD         #-8,R15
    00000294 430B                   JSR         @R3
    00000296 2FF6                   MOV.L       R15,@-R15
    00000298 D387                   MOV.L       L1253,R3   ; __utod
    0000029A 7FF8                   ADD         #-8,R15
    0000029C 50F6                   MOV.L       @(24,R15),R0
    0000029E 4008                   SHLL2       R0
    000002A0 00DE                   MOV.L       @(R0,R13),R0
    000002A2 7FF8                   ADD         #-8,R15
    000002A4 430B                   JSR         @R3
    000002A6 2FF6                   MOV.L       R15,@-R15
    000002A8 D284                   MOV.L       L1253+4,R2 ; _POW_2_32
    000002AA 5121                   MOV.L       @(4,R2),R1
    000002AC D084                   MOV.L       L1253+8,R0 ; __muld
    000002AE 2F16                   MOV.L       R1,@-R15
    000002B0 6122                   MOV.L       @R2,R1
    000002B2 2F16                   MOV.L       R1,@-R15
    000002B4 63F3                   MOV         R15,R3
    000002B6 7310                   ADD         #16,R3
    000002B8 400B                   JSR         @R0
    000002BA 2F36                   MOV.L       R3,@-R15
    000002BC D281                   MOV.L       L1253+12,R2; __addd
    000002BE 61F3                   MOV         R15,R1
    000002C0 7140                   ADD         #64,R1
    000002C2 420B                   JSR         @R2
    000002C4 2F16                   MOV.L       R1,@-R15
          mmul.c   122    
          mmul.c   123    
          mmul.c   124                            c = (unsigned int) (jj / kk);
    000002C6 7FF8                   ADD         #-8,R15
    000002C8 D17F                   MOV.L       L1253+16,R1; __divdr
    000002CA 53FF                   MOV.L       @(60,R15),R3
    000002CC 2F36                   MOV.L       R3,@-R15
    000002CE 53FF                   MOV.L       @(60,R15),R3
    000002D0 2F36                   MOV.L       R3,@-R15
    000002D2 52FF                   MOV.L       @(60,R15),R2
    000002D4 2F26                   MOV.L       R2,@-R15
    000002D6 52FF                   MOV.L       @(60,R15),R2
    000002D8 2F26                   MOV.L       R2,@-R15
    000002DA 63F3                   MOV         R15,R3
    000002DC 7310                   ADD         #16,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002DE 410B                   JSR         @R1
    000002E0 2F36                   MOV.L       R3,@-R15
    000002E2 D27A                   MOV.L       L1253+20,R2; __dtou
    000002E4 420B                   JSR         @R2
    000002E6 0009                   NOP
    000002E8 6703                   MOV         R0,R7
          mmul.c   125    
          mmul.c   126                            if (c == 0) {
    000002EA 2778                   TST         R7,R7
    000002EC 8B10                   BF          L1192
          mmul.c   127                                    if (ge(x + n - i, b, blen)) { /* see note 1 */
    000002EE 66C3                   MOV         R12,R6
    000002F0 D377                   MOV.L       L1253+24,R3; _ge
    000002F2 65E3                   MOV         R14,R5
    000002F4 430B                   JSR         @R3
    000002F6 54F9                   MOV.L       @(36,R15),R4
    000002F8 2008                   TST         R0,R0
    000002FA 8916                   BT          L1194
          mmul.c   128                                            y[n - i]++;
    000002FC 53F4                   MOV.L       @(16,R15),R3
          mmul.c   129                                            subf(x + n - i, b, blen);
    000002FE 66C3                   MOV         R12,R6
    00000300 6232                   MOV.L       @R3,R2
    00000302 65E3                   MOV         R14,R5
    00000304 7201                   ADD         #1,R2
    00000306 2322                   MOV.L       R2,@R3
    00000308 B092                   BSR         __$subf
    0000030A 54F5                   MOV.L       @(20,R15),R4
          mmul.c   130                                    }
          mmul.c   131                                    break;
    0000030C A00D                   BRA         L1194
    0000030E 0009                   NOP
    00000310              L1192:                            
          mmul.c   132                            }
          mmul.c   133    
          mmul.c   134                            y[n - i] += c;
    00000310 6382                   MOV.L       @R8,R3
          mmul.c   135                            mulf(t, b, blen, c);
    00000312 66C3                   MOV         R12,R6
    00000314 337C                   ADD         R7,R3
    00000316 65E3                   MOV         R14,R5
    00000318 2832                   MOV.L       R3,@R8
    0000031A B0E1                   BSR         __$mulf
    0000031C 64F2                   MOV.L       @R15,R4
          mmul.c   136                            subf(x + n - i, t, blen + 1);
    0000031E 56F7                   MOV.L       @(28,R15),R6
    00000320 65F2                   MOV.L       @R15,R5
    00000322 B085                   BSR         __$subf
    00000324 54F6                   MOV.L       @(24,R15),R4
    00000326 AFAF                   BRA         L1191
    00000328 0009                   NOP
    0000032A              L1194:                            
    0000032A 7A01                   ADD         #1,R10
    0000032C 53F6                   MOV.L       @(24,R15),R3
    0000032E 78FC                   ADD         #-4,R8
    00000330 73FC                   ADD         #-4,R3
    00000332 1F36                   MOV.L       R3,@(24,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000334 52F5                   MOV.L       @(20,R15),R2
    00000336 72FC                   ADD         #-4,R2
    00000338 1F25                   MOV.L       R2,@(20,R15)
    0000033A              L1188:                            
    0000033A 3A97                   CMP/GT      R9,R10
    0000033C 8B94                   BF          L1189
          mmul.c   137                    }
          mmul.c   138            }
          mmul.c   139    
          mmul.c   140            mfree(t);
    0000033E DC65                   MOV.L       L1253+28,R12; _mfree
    00000340 4C0B                   JSR         @R12
    00000342 64F2                   MOV.L       @R15,R4
          mmul.c   141    
          mmul.c   142            mfree(x);
    00000344 4C0B                   JSR         @R12
    00000346 64D3                   MOV         R13,R4
          mmul.c   143    
          mmul.c   144            /* length of quotient */
          mmul.c   145    
          mmul.c   146            for (i = n; i > 0; i--)
    00000348 6493                   MOV         R9,R4
    0000034A 4415                   CMP/PL      R4
    0000034C 8B07                   BF          L1195
    0000034E              L1196:                            
          mmul.c   147                    if (y[i])
    0000034E 6043                   MOV         R4,R0
    00000350 4008                   SHLL2       R0
    00000352 03BE                   MOV.L       @(R0,R11),R3
    00000354 2338                   TST         R3,R3
    00000356 8B02                   BF          L1195
    00000358 74FF                   ADD         #-1,R4
    0000035A 4415                   CMP/PL      R4
    0000035C 89F7                   BT          L1196
    0000035E              L1195:                            
          mmul.c   148                            break;
          mmul.c   149    
          mmul.c   150            if (i == 0 && y[0] == 0) {
    0000035E 2448                   TST         R4,R4
    00000360 8B09                   BF          L1199
    00000362 63B2                   MOV.L       @R11,R3
    00000364 2338                   TST         R3,R3
    00000366 8B06                   BF          L1199
          mmul.c   151                    mfree(y);
    00000368 4C0B                   JSR         @R12
    0000036A 64B3                   MOV         R11,R4
          mmul.c   152                    y = mint(0);
    0000036C D35A                   MOV.L       L1253+32,R3; _mint
    0000036E 430B                   JSR         @R3
    00000370 E400                   MOV         #0,R4
    00000372 A00D                   BRA         L1200
    00000374 6B03                   MOV         R0,R11
    00000376              L1199:                            
          mmul.c   153            } else {
          mmul.c   154                    MLENGTH(y) = i + 1;
    00000376 63B3                   MOV         R11,R3
    00000378 7401                   ADD         #1,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          mmul.c   155                    MSIGN(y) = MSIGN(a) * MSIGN(b);
    0000037A 62B3                   MOV         R11,R2
    0000037C 2346                   MOV.L       R4,@-R3
    0000037E 7EF8                   ADD         #-8,R14
    00000380 53F3                   MOV.L       @(12,R15),R3
    00000382 E0F8                   MOV         #-8,R0
    00000384 61E2                   MOV.L       @R14,R1
    00000386 72F8                   ADD         #-8,R2
    00000388 003E                   MOV.L       @(R0,R3),R0
    0000038A 0017                   MUL.L       R1,R0
    0000038C 011A                   STS         MACL,R1
    0000038E 2212                   MOV.L       R1,@R2
    00000390              L1200:                            
          mmul.c   156            }
          mmul.c   157    
          mmul.c   158            return y;
    00000390 60B3                   MOV         R11,R0
          mmul.c   159    }
    00000392 7F38                   ADD         #56,R15
    00000394 4F16                   LDS.L       @R15+,MACL
    00000396 4F26                   LDS.L       @R15+,PR
    00000398 68F6                   MOV.L       @R15+,R8
    0000039A 69F6                   MOV.L       @R15+,R9
    0000039C 6AF6                   MOV.L       @R15+,R10
    0000039E 6BF6                   MOV.L       @R15+,R11
    000003A0 6CF6                   MOV.L       @R15+,R12
    000003A2 6DF6                   MOV.L       @R15+,R13
    000003A4 000B                   RTS
    000003A6 6EF6                   MOV.L       @R15+,R14
          mmul.c   160    
          mmul.c   161    // a = a + b
          mmul.c   162    
          mmul.c   163    static void
          mmul.c   164    addf(unsigned int *a, unsigned int *b, int len)
    000003A8              __$addf:                         ; function: addf
                                                           ; frame size=52
                                                           ; used runtime library name:
                                                           ; __addd, __divdr, __dtou, __utod
    000003A8 2FE6                   MOV.L       R14,@-R15
          mmul.c   165    {
          mmul.c   166            int i;
          mmul.c   167            LONGLONG t = 0; /* can be signed or unsigned */
    000003AA E200                   MOV         #0,R2
    000003AC 4F22                   STS.L       PR,@-R15
          mmul.c   168            for (i = 0; i < len; i++) {
    000003AE 4615                   CMP/PL      R6
    000003B0 7FF8                   ADD         #-8,R15
    000003B2 63F3                   MOV         R15,R3
    000003B4 2322                   MOV.L       R2,@R3
    000003B6 6E23                   MOV         R2,R14
    000003B8 1321                   MOV.L       R2,@(4,R3)
    000003BA 8F35                   BF/S        L1201
    000003BC 6723                   MOV         R2,R7
    000003BE              L1202:                            
          mmul.c   169                    t += (LONGLONG) a[i] + b[i];
    000003BE 6173                   MOV         R7,R1
    000003C0 53F1                   MOV.L       @(4,R15),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003C2 314C                   ADD         R4,R1
    000003C4 2F36                   MOV.L       R3,@-R15
    000003C6 53F1                   MOV.L       @(4,R15),R3
    000003C8 2F36                   MOV.L       R3,@-R15
    000003CA 6012                   MOV.L       @R1,R0
    000003CC D33A                   MOV.L       L1253,R3   ; __utod
    000003CE 7FF0                   ADD         #-16,R15
    000003D0 430B                   JSR         @R3
    000003D2 2FF6                   MOV.L       R15,@-R15
    000003D4 D338                   MOV.L       L1253,R3   ; __utod
    000003D6 6073                   MOV         R7,R0
    000003D8 005E                   MOV.L       @(R0,R5),R0
    000003DA 7FF8                   ADD         #-8,R15
    000003DC 430B                   JSR         @R3
    000003DE 2FF6                   MOV.L       R15,@-R15
    000003E0 D238                   MOV.L       L1253+12,R2; __addd
    000003E2 63F3                   MOV         R15,R3
    000003E4 7310                   ADD         #16,R3
    000003E6 420B                   JSR         @R2
    000003E8 2F36                   MOV.L       R3,@-R15
    000003EA 63F3                   MOV         R15,R3
    000003EC 7310                   ADD         #16,R3
    000003EE 2F36                   MOV.L       R3,@-R15
    000003F0 D334                   MOV.L       L1253+12,R3; __addd
    000003F2 430B                   JSR         @R3
    000003F4 0009                   NOP
          mmul.c   170                    a[i] = (unsigned int) t;
    000003F6 52F1                   MOV.L       @(4,R15),R2
    000003F8 D334                   MOV.L       L1253+20,R3; __dtou
    000003FA 2F26                   MOV.L       R2,@-R15
    000003FC 52F1                   MOV.L       @(4,R15),R2
    000003FE 430B                   JSR         @R3
    00000400 2F26                   MOV.L       R2,@-R15
    00000402 2102                   MOV.L       R0,@R1
          mmul.c   171                    //t >>= 32;
          mmul.c   172                    t/=POW_2_32;
    00000404 52F1                   MOV.L       @(4,R15),R2
    00000406 2F26                   MOV.L       R2,@-R15
    00000408 52F1                   MOV.L       @(4,R15),R2
    0000040A 2F26                   MOV.L       R2,@-R15
    0000040C D32B                   MOV.L       L1253+4,R3 ; _POW_2_32
    0000040E 5231                   MOV.L       @(4,R3),R2
    00000410 D12D                   MOV.L       L1253+16,R1; __divdr
    00000412 2F26                   MOV.L       R2,@-R15
    00000414 6232                   MOV.L       @R3,R2
    00000416 2F26                   MOV.L       R2,@-R15
    00000418 60F3                   MOV         R15,R0
    0000041A 7010                   ADD         #16,R0
    0000041C 410B                   JSR         @R1
    0000041E 2F06                   MOV.L       R0,@-R15
    00000420 7E01                   ADD         #1,R14
    00000422 3E63                   CMP/GE      R6,R14
    00000424 8FCB                   BF/S        L1202
    00000426 7704                   ADD         #4,R7
    00000428              L1201:                            
          mmul.c   173            }
          mmul.c   174    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000428 7F08                   ADD         #8,R15
    0000042A 4F26                   LDS.L       @R15+,PR
    0000042C 000B                   RTS
    0000042E 6EF6                   MOV.L       @R15+,R14
          mmul.c   175    
          mmul.c   176    // a = a - b
          mmul.c   177    
          mmul.c   178    static void
          mmul.c   179    subf(unsigned int *a, unsigned int *b, int len)
    00000430              __$subf:                         ; function: subf
                                                           ; frame size=52
                                                           ; used runtime library name:
                                                           ; __addd, __subdr, __divdr, __dtou, __utod
    00000430 2FE6                   MOV.L       R14,@-R15
          mmul.c   180    {
          mmul.c   181            int i;
          mmul.c   182            LONGLONG t = 0; /* must be signed */
    00000432 E200                   MOV         #0,R2
    00000434 4F22                   STS.L       PR,@-R15
          mmul.c   183            for (i = 0; i < len; i++) {
    00000436 4615                   CMP/PL      R6
    00000438 7FF8                   ADD         #-8,R15
    0000043A 63F3                   MOV         R15,R3
    0000043C 2322                   MOV.L       R2,@R3
    0000043E 6E23                   MOV         R2,R14
    00000440 1321                   MOV.L       R2,@(4,R3)
    00000442 8F35                   BF/S        L1203
    00000444 6723                   MOV         R2,R7
    00000446              L1204:                            
          mmul.c   184                    t += (LONGLONG) a[i] - b[i];
    00000446 6173                   MOV         R7,R1
    00000448 53F1                   MOV.L       @(4,R15),R3
    0000044A 314C                   ADD         R4,R1
    0000044C 2F36                   MOV.L       R3,@-R15
    0000044E 53F1                   MOV.L       @(4,R15),R3
    00000450 2F36                   MOV.L       R3,@-R15
    00000452 6012                   MOV.L       @R1,R0
    00000454 D318                   MOV.L       L1253,R3   ; __utod
    00000456 7FF0                   ADD         #-16,R15
    00000458 430B                   JSR         @R3
    0000045A 2FF6                   MOV.L       R15,@-R15
    0000045C D316                   MOV.L       L1253,R3   ; __utod
    0000045E 6073                   MOV         R7,R0
    00000460 005E                   MOV.L       @(R0,R5),R0
    00000462 7FF8                   ADD         #-8,R15
    00000464 430B                   JSR         @R3
    00000466 2FF6                   MOV.L       R15,@-R15
    00000468 D21C                   MOV.L       L1253+36,R2; __subdr
    0000046A 63F3                   MOV         R15,R3
    0000046C 7310                   ADD         #16,R3
    0000046E 420B                   JSR         @R2
    00000470 2F36                   MOV.L       R3,@-R15
    00000472 63F3                   MOV         R15,R3
    00000474 7310                   ADD         #16,R3
    00000476 2F36                   MOV.L       R3,@-R15
    00000478 D312                   MOV.L       L1253+12,R3; __addd
    0000047A 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000047C 0009                   NOP
          mmul.c   185                    a[i] = (unsigned int) t;
    0000047E 52F1                   MOV.L       @(4,R15),R2
    00000480 D312                   MOV.L       L1253+20,R3; __dtou
    00000482 2F26                   MOV.L       R2,@-R15
    00000484 52F1                   MOV.L       @(4,R15),R2
    00000486 430B                   JSR         @R3
    00000488 2F26                   MOV.L       R2,@-R15
    0000048A 2102                   MOV.L       R0,@R1
          mmul.c   186                    //t >>= 32;
          mmul.c   187                    t/=POW_2_32;
    0000048C 52F1                   MOV.L       @(4,R15),R2
    0000048E 2F26                   MOV.L       R2,@-R15
    00000490 52F1                   MOV.L       @(4,R15),R2
    00000492 2F26                   MOV.L       R2,@-R15
    00000494 D309                   MOV.L       L1253+4,R3 ; _POW_2_32
    00000496 5231                   MOV.L       @(4,R3),R2
    00000498 D10B                   MOV.L       L1253+16,R1; __divdr
    0000049A 2F26                   MOV.L       R2,@-R15
    0000049C 6232                   MOV.L       @R3,R2
    0000049E 2F26                   MOV.L       R2,@-R15
    000004A0 60F3                   MOV         R15,R0
    000004A2 7010                   ADD         #16,R0
    000004A4 410B                   JSR         @R1
    000004A6 2F06                   MOV.L       R0,@-R15
    000004A8 7E01                   ADD         #1,R14
    000004AA 3E63                   CMP/GE      R6,R14
    000004AC 8FCB                   BF/S        L1204
    000004AE 7704                   ADD         #4,R7
    000004B0              L1203:                            
          mmul.c   188                    //printf("t=%ld,i=%d\n",t,i);
          mmul.c   189            }
          mmul.c   190    }
    000004B0 7F08                   ADD         #8,R15
    000004B2 4F26                   LDS.L       @R15+,PR
    000004B4 000B                   RTS
    000004B6 6EF6                   MOV.L       @R15+,R14
    000004B8              L1253:                            
    000004B8 <00000000>             .DATA.L     __utod
    000004BC <00000000>             .DATA.L     _POW_2_32
    000004C0 <00000000>             .DATA.L     __muld
    000004C4 <00000000>             .DATA.L     __addd
    000004C8 <00000000>             .DATA.L     __divdr
    000004CC <00000000>             .DATA.L     __dtou
    000004D0 <00000000>             .DATA.L     _ge
    000004D4 <00000000>             .DATA.L     _mfree
    000004D8 <00000000>             .DATA.L     _mint
    000004DC <00000000>             .DATA.L     __subdr
          mmul.c   191    
          mmul.c   192    // a = b * c
          mmul.c   193    
          mmul.c   194    // 0xffffffff + 0xffffffff * 0xffffffff == 0xffffffff00000000
          mmul.c   195    
          mmul.c   196    static void
          mmul.c   197    mulf(unsigned int *a, unsigned int *b, int len, unsigned int c)
    000004E0              __$mulf:                         ; function: mulf
                                                           ; frame size=52




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; used runtime library name:
                                                           ; __addd, __muld, __divdr, __dtou, __utod
    000004E0 2FE6                   MOV.L       R14,@-R15
          mmul.c   198    {
          mmul.c   199            int i;
          mmul.c   200            ULONGLONG t = 0; /* must be unsigned */
    000004E2 E200                   MOV         #0,R2
    000004E4 4F22                   STS.L       PR,@-R15
          mmul.c   201            for (i = 0; i < len; i++) {
    000004E6 4615                   CMP/PL      R6
    000004E8 7FF8                   ADD         #-8,R15
    000004EA 63F3                   MOV         R15,R3
    000004EC 2322                   MOV.L       R2,@R3
    000004EE 1321                   MOV.L       R2,@(4,R3)
    000004F0 8F35                   BF/S        L1205
    000004F2 6E23                   MOV         R2,R14
    000004F4              L1206:                            
          mmul.c   202                    t += (ULONGLONG) b[i] * c;
    000004F4 53F1                   MOV.L       @(4,R15),R3
    000004F6 61E3                   MOV         R14,R1
    000004F8 2F36                   MOV.L       R3,@-R15
    000004FA 4108                   SHLL2       R1
    000004FC 53F1                   MOV.L       @(4,R15),R3
    000004FE 6013                   MOV         R1,R0
    00000500 2F36                   MOV.L       R3,@-R15
    00000502 005E                   MOV.L       @(R0,R5),R0
    00000504 D38D                   MOV.L       L1254,R3   ; __utod
    00000506 7FF0                   ADD         #-16,R15
    00000508 430B                   JSR         @R3
    0000050A 2FF6                   MOV.L       R15,@-R15
    0000050C D38B                   MOV.L       L1254,R3   ; __utod
    0000050E 6073                   MOV         R7,R0
    00000510 7FF8                   ADD         #-8,R15
    00000512 430B                   JSR         @R3
    00000514 2FF6                   MOV.L       R15,@-R15
    00000516 63F3                   MOV         R15,R3
    00000518 D289                   MOV.L       L1254+4,R2 ; __muld
    0000051A 7310                   ADD         #16,R3
    0000051C 420B                   JSR         @R2
    0000051E 2F36                   MOV.L       R3,@-R15
    00000520 63F3                   MOV         R15,R3
    00000522 7310                   ADD         #16,R3
    00000524 2F36                   MOV.L       R3,@-R15
    00000526 D387                   MOV.L       L1254+8,R3 ; __addd
    00000528 430B                   JSR         @R3
    0000052A 0009                   NOP
          mmul.c   203                    a[i] = (unsigned int) t;
    0000052C 53F1                   MOV.L       @(4,R15),R3
    0000052E 2F36                   MOV.L       R3,@-R15
    00000530 53F1                   MOV.L       @(4,R15),R3
    00000532 2F36                   MOV.L       R3,@-R15
    00000534 D384                   MOV.L       L1254+12,R3; __dtou
    00000536 430B                   JSR         @R3
    00000538 314C                   ADD         R4,R1
    0000053A 2102                   MOV.L       R0,@R1
          mmul.c   204                    //t >>= 32;
          mmul.c   205                    t /=POW_2_32;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000053C 52F1                   MOV.L       @(4,R15),R2
    0000053E 2F26                   MOV.L       R2,@-R15
    00000540 52F1                   MOV.L       @(4,R15),R2
    00000542 2F26                   MOV.L       R2,@-R15
    00000544 D381                   MOV.L       L1254+16,R3; _POW_2_32
    00000546 5231                   MOV.L       @(4,R3),R2
    00000548 D181                   MOV.L       L1254+20,R1; __divdr
    0000054A 2F26                   MOV.L       R2,@-R15
    0000054C 6232                   MOV.L       @R3,R2
    0000054E 2F26                   MOV.L       R2,@-R15
    00000550 60F3                   MOV         R15,R0
    00000552 7010                   ADD         #16,R0
    00000554 410B                   JSR         @R1
    00000556 2F06                   MOV.L       R0,@-R15
    00000558 7E01                   ADD         #1,R14
    0000055A 3E63                   CMP/GE      R6,R14
    0000055C 8BCA                   BF          L1206
    0000055E              L1205:                            
          mmul.c   206            }
          mmul.c   207            a[i] = (unsigned int) t;
    0000055E 4E08                   SHLL2       R14
    00000560 52F1                   MOV.L       @(4,R15),R2
    00000562 3E4C                   ADD         R4,R14
    00000564 D378                   MOV.L       L1254+12,R3; __dtou
    00000566 2F26                   MOV.L       R2,@-R15
    00000568 52F1                   MOV.L       @(4,R15),R2
    0000056A 430B                   JSR         @R3
    0000056C 2F26                   MOV.L       R2,@-R15
    0000056E 2E02                   MOV.L       R0,@R14
          mmul.c   208    }
    00000570 7F08                   ADD         #8,R15
    00000572 4F26                   LDS.L       @R15+,PR
    00000574 000B                   RTS
    00000576 6EF6                   MOV.L       @R15+,R14
          mmul.c   209    
          mmul.c   210    unsigned int *
          mmul.c   211    mmod(unsigned int *a, unsigned int *b)
    00000578              _mmod:                           ; function: mmod
                                                           ; frame size=128
                                                           ; used runtime library name:
                                                           ; __addd, __muld, __divdr, __dtoi, __utod
    00000578 2FE6                   MOV.L       R14,@-R15
    0000057A 6E53                   MOV         R5,R14
    0000057C 2FD6                   MOV.L       R13,@-R15
    0000057E 7EFC                   ADD         #-4,R14
    00000580 2FC6                   MOV.L       R12,@-R15
    00000582 2FB6                   MOV.L       R11,@-R15
    00000584 2FA6                   MOV.L       R10,@-R15
    00000586 2F96                   MOV.L       R9,@-R15
    00000588 2F86                   MOV.L       R8,@-R15
    0000058A 4F22                   STS.L       PR,@-R15
    0000058C 7FC4                   ADD         #-60,R15
    0000058E 1F42                   MOV.L       R4,@(8,R15)
    00000590 60E2                   MOV.L       @R14,R0
    00000592 8801                   CMP/EQ      #1,R0
    00000594 8F07                   BF/S        L1207
    00000596 6D53                   MOV         R5,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000598 62D2                   MOV.L       @R13,R2
    0000059A 2228                   TST         R2,R2
    0000059C 8B03                   BF          L1207
          mmul.c   212    {
          mmul.c   213            int alen, blen, i, n;
          mmul.c   214            unsigned int c, *t, *x, *y;
          mmul.c   215            ULONGLONG jj, kk;
          mmul.c   216    
          mmul.c   217            if (MZERO(b))
          mmul.c   218                    stop("divide by zero");
    0000059E D46D                   MOV.L       L1254+24,R4; L1087
    000005A0 D36D                   MOV.L       L1254+28,R3; _stop
    000005A2 430B                   JSR         @R3
    000005A4 0009                   NOP
    000005A6              L1207:                            
    000005A6 54F2                   MOV.L       @(8,R15),R4
    000005A8 74FC                   ADD         #-4,R4
    000005AA 6042                   MOV.L       @R4,R0
    000005AC 8801                   CMP/EQ      #1,R0
    000005AE 8B0F                   BF          L1208
    000005B0 52F2                   MOV.L       @(8,R15),R2
    000005B2 6322                   MOV.L       @R2,R3
    000005B4 2338                   TST         R3,R3
    000005B6 8B0B                   BF          L1208
          mmul.c   219    
          mmul.c   220            if (MZERO(a))
          mmul.c   221                    return mint(0);
    000005B8 D368                   MOV.L       L1254+32,R3; _mint
    000005BA E400                   MOV         #0,R4
    000005BC 7F3C                   ADD         #60,R15
    000005BE 4F26                   LDS.L       @R15+,PR
    000005C0 68F6                   MOV.L       @R15+,R8
    000005C2 69F6                   MOV.L       @R15+,R9
    000005C4 6AF6                   MOV.L       @R15+,R10
    000005C6 6BF6                   MOV.L       @R15+,R11
    000005C8 6CF6                   MOV.L       @R15+,R12
    000005CA 6DF6                   MOV.L       @R15+,R13
    000005CC 432B                   JMP         @R3
    000005CE 6EF6                   MOV.L       @R15+,R14
    000005D0              L1208:                            
          mmul.c   222    
          mmul.c   223            alen = MLENGTH(a);
    000005D0 6242                   MOV.L       @R4,R2
    000005D2 2F22                   MOV.L       R2,@R15
          mmul.c   224            blen = MLENGTH(b);
    000005D4 6CE2                   MOV.L       @R14,R12
          mmul.c   225    
          mmul.c   226            n = alen - blen;
    000005D6 6923                   MOV         R2,R9
    000005D8 39C8                   SUB         R12,R9
          mmul.c   227    
          mmul.c   228            if (n < 0)
    000005DA 4911                   CMP/PZ      R9
    000005DC 890B                   BT          L1210
          mmul.c   229                    return mcopy(a);
    000005DE 54F2                   MOV.L       @(8,R15),R4
    000005E0 D35F                   MOV.L       L1254+36,R3; _mcopy




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005E2 7F3C                   ADD         #60,R15
    000005E4 4F26                   LDS.L       @R15+,PR
    000005E6 68F6                   MOV.L       @R15+,R8
    000005E8 69F6                   MOV.L       @R15+,R9
    000005EA 6AF6                   MOV.L       @R15+,R10
    000005EC 6BF6                   MOV.L       @R15+,R11
    000005EE 6CF6                   MOV.L       @R15+,R12
    000005F0 6DF6                   MOV.L       @R15+,R13
    000005F2 432B                   JMP         @R3
    000005F4 6EF6                   MOV.L       @R15+,R14
    000005F6              L1210:                            
          mmul.c   230    
          mmul.c   231            x = mnew(alen + 1);
    000005F6 DB5B                   MOV.L       L1254+40,R11; _mnew
    000005F8 64F2                   MOV.L       @R15,R4
    000005FA 4B0B                   JSR         @R11
    000005FC 7401                   ADD         #1,R4
    000005FE 6E03                   MOV         R0,R14
          mmul.c   232    
          mmul.c   233            for (i = 0; i < alen; i++)
    00000600 63F2                   MOV.L       @R15,R3
    00000602 4315                   CMP/PL      R3
    00000604 8F0B                   BF/S        L1211
    00000606 E400                   MOV         #0,R4
    00000608              L1212:                            
          mmul.c   234                    x[i] = a[i];
    00000608 53F2                   MOV.L       @(8,R15),R3
    0000060A 6043                   MOV         R4,R0
    0000060C 4008                   SHLL2       R0
    0000060E 6203                   MOV         R0,R2
    00000610 033E                   MOV.L       @(R0,R3),R3
    00000612 7401                   ADD         #1,R4
    00000614 32EC                   ADD         R14,R2
    00000616 2232                   MOV.L       R3,@R2
    00000618 63F2                   MOV.L       @R15,R3
    0000061A 3433                   CMP/GE      R3,R4
    0000061C 8BF4                   BF          L1212
    0000061E              L1211:                            
          mmul.c   235    
          mmul.c   236            x[i] = 0;
    0000061E 6043                   MOV         R4,R0
    00000620 4008                   SHLL2       R0
    00000622 E300                   MOV         #0,R3
    00000624 0E36                   MOV.L       R3,@(R0,R14)
          mmul.c   237    
          mmul.c   238            y = mnew(n + 1);
    00000626 6493                   MOV         R9,R4
    00000628 4B0B                   JSR         @R11
    0000062A 7401                   ADD         #1,R4
    0000062C 1F07                   MOV.L       R0,@(28,R15)
          mmul.c   239    
          mmul.c   240            t = mnew(blen + 1);
    0000062E 64C3                   MOV         R12,R4
    00000630 7401                   ADD         #1,R4
    00000632 4B0B                   JSR         @R11
    00000634 1F46                   MOV.L       R4,@(24,R15)
    00000636 1F01                   MOV.L       R0,@(4,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          mmul.c   241    
          mmul.c   242            kk = (ULONGLONG) b[blen - 1] + 1;
    00000638 D340                   MOV.L       L1254,R3   ; __utod
    0000063A 60C3                   MOV         R12,R0
    0000063C 70FF                   ADD         #-1,R0
    0000063E 1F0A                   MOV.L       R0,@(40,R15)
    00000640 4008                   SHLL2       R0
    00000642 00DE                   MOV.L       @(R0,R13),R0
    00000644 7FF8                   ADD         #-8,R15
    00000646 430B                   JSR         @R3
    00000648 2FF6                   MOV.L       R15,@-R15
    0000064A E200                   MOV         #0,R2
    0000064C D33D                   MOV.L       L1254+8,R3 ; __addd
    0000064E 2F26                   MOV.L       R2,@-R15
    00000650 D245                   MOV.L       L1254+44,R2; H'3FF00000
    00000652 2F26                   MOV.L       R2,@-R15
    00000654 61F3                   MOV         R15,R1
    00000656 713C                   ADD         #60,R1
    00000658 430B                   JSR         @R3
    0000065A 2F16                   MOV.L       R1,@-R15
          mmul.c   243    
          mmul.c   244            for (i = 0; i <= n; i++) {
    0000065C EB00                   MOV         #0,R11
    0000065E 6493                   MOV         R9,R4
    00000660 4408                   SHLL2       R4
    00000662 6893                   MOV         R9,R8
    00000664 1F48                   MOV.L       R4,@(32,R15)
    00000666 4808                   SHLL2       R8
    00000668 34EC                   ADD         R14,R4
    0000066A 1F45                   MOV.L       R4,@(20,R15)
    0000066C 53F7                   MOV.L       @(28,R15),R3
    0000066E 383C                   ADD         R3,R8
    00000670 A088                   BRA         L1213
    00000672 1F44                   MOV.L       R4,@(16,R15)
    00000674              L1214:                            
          mmul.c   245    
          mmul.c   246                    y[n - i] = 0;
    00000674 52F7                   MOV.L       @(28,R15),R2
    00000676 E100                   MOV         #0,R1
    00000678 6393                   MOV         R9,R3
    0000067A 33B8                   SUB         R11,R3
    0000067C 4308                   SHLL2       R3
    0000067E 332C                   ADD         R2,R3
    00000680 1F33                   MOV.L       R3,@(12,R15)
    00000682 2312                   MOV.L       R1,@R3
    00000684 6AF2                   MOV.L       @R15,R10
    00000686 63B3                   MOV         R11,R3
    00000688 52F8                   MOV.L       @(32,R15),R2
    0000068A 3AB8                   SUB         R11,R10
    0000068C 4308                   SHLL2       R3
    0000068E 3238                   SUB         R3,R2
    00000690 32EC                   ADD         R14,R2
    00000692 1F29                   MOV.L       R2,@(36,R15)
          mmul.c   247    
          mmul.c   248                    for (;;) {
    00000694              L1216:                            
          mmul.c   249    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          mmul.c   250                            /* estimate the partial quotient */
          mmul.c   251    /*
          mmul.c   252                            if (little_endian()) {
          mmul.c   253                                    ((unsigned int *) &jj)[0] = x[alen - i - 1];
          mmul.c   254                                    ((unsigned int *) &jj)[1] = x[alen - i - 0];
          mmul.c   255                            } else {
          mmul.c   256                                    ((unsigned int *) &jj)[1] = x[alen - i - 1];
          mmul.c   257                                    ((unsigned int *) &jj)[0] = x[alen - i - 0];
          mmul.c   258                            }
          mmul.c   259    */
          mmul.c   260                            jj = x[alen - i - 1]/*low*/+x[alen - i]/*high*/*POW_2_32;
    00000694 D329                   MOV.L       L1254,R3   ; __utod
    00000696 60A3                   MOV         R10,R0
    00000698 70FF                   ADD         #-1,R0
    0000069A 4008                   SHLL2       R0
    0000069C 00EE                   MOV.L       @(R0,R14),R0
    0000069E 7FF8                   ADD         #-8,R15
    000006A0 430B                   JSR         @R3
    000006A2 2FF6                   MOV.L       R15,@-R15
    000006A4 D325                   MOV.L       L1254,R3   ; __utod
    000006A6 60A3                   MOV         R10,R0
    000006A8 4008                   SHLL2       R0
    000006AA 00EE                   MOV.L       @(R0,R14),R0
    000006AC 7FF0                   ADD         #-16,R15
    000006AE 430B                   JSR         @R3
    000006B0 2FF6                   MOV.L       R15,@-R15
    000006B2 D226                   MOV.L       L1254+16,R2; _POW_2_32
    000006B4 D022                   MOV.L       L1254+4,R0 ; __muld
    000006B6 5121                   MOV.L       @(4,R2),R1
    000006B8 2F16                   MOV.L       R1,@-R15
    000006BA 6122                   MOV.L       @R2,R1
    000006BC 2F16                   MOV.L       R1,@-R15
    000006BE 63F3                   MOV         R15,R3
    000006C0 7310                   ADD         #16,R3
    000006C2 400B                   JSR         @R0
    000006C4 2F36                   MOV.L       R3,@-R15
    000006C6 61F3                   MOV         R15,R1
    000006C8 D21E                   MOV.L       L1254+8,R2 ; __addd
    000006CA 7144                   ADD         #68,R1
    000006CC 420B                   JSR         @R2
    000006CE 2F16                   MOV.L       R1,@-R15
          mmul.c   261    
          mmul.c   262                            c = (int) (jj / kk);
    000006D0 D11F                   MOV.L       L1254+20,R1; __divdr
    000006D2 7FF8                   ADD         #-8,R15
    000006D4 E040                   MOV         #64,R0
    000006D6 03FE                   MOV.L       @(R0,R15),R3
    000006D8 2F36                   MOV.L       R3,@-R15
    000006DA E040                   MOV         #64,R0
    000006DC 03FE                   MOV.L       @(R0,R15),R3
    000006DE E040                   MOV         #64,R0
    000006E0 2F36                   MOV.L       R3,@-R15
    000006E2 02FE                   MOV.L       @(R0,R15),R2
    000006E4 2F26                   MOV.L       R2,@-R15
    000006E6 E040                   MOV         #64,R0
    000006E8 02FE                   MOV.L       @(R0,R15),R2
    000006EA 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006EC 63F3                   MOV         R15,R3
    000006EE 7310                   ADD         #16,R3
    000006F0 410B                   JSR         @R1
    000006F2 2F36                   MOV.L       R3,@-R15
    000006F4 D21D                   MOV.L       L1254+48,R2; __dtoi
    000006F6 420B                   JSR         @R2
    000006F8 0009                   NOP
    000006FA 6703                   MOV         R0,R7
          mmul.c   263    
          mmul.c   264                            if (c == 0) {
    000006FC 2778                   TST         R7,R7
    000006FE 8B10                   BF          L1217
          mmul.c   265                                    if (ge(x + n - i, b, blen)) { /* see note 1 */
    00000700 D31B                   MOV.L       L1254+52,R3; _ge
    00000702 66C3                   MOV         R12,R6
    00000704 65D3                   MOV         R13,R5
    00000706 430B                   JSR         @R3
    00000708 54F9                   MOV.L       @(36,R15),R4
    0000070A 2008                   TST         R0,R0
    0000070C 8932                   BT          L1219
          mmul.c   266                                            y[n - i]++;
          mmul.c   267                                            subf(x + n - i, b, blen);
    0000070E 66C3                   MOV         R12,R6
    00000710 53F3                   MOV.L       @(12,R15),R3
    00000712 65D3                   MOV         R13,R5
    00000714 6232                   MOV.L       @R3,R2
    00000716 7201                   ADD         #1,R2
    00000718 2322                   MOV.L       R2,@R3
    0000071A BE89                   BSR         __$subf
    0000071C 54F4                   MOV.L       @(16,R15),R4
          mmul.c   268                                    }
          mmul.c   269                                    break;
    0000071E A029                   BRA         L1219
    00000720 0009                   NOP
    00000722              L1217:                            
          mmul.c   270                            }
          mmul.c   271    
          mmul.c   272                            y[n - i] += c;
          mmul.c   273                            mulf(t, b, blen, c);
    00000722 66C3                   MOV         R12,R6
    00000724 6382                   MOV.L       @R8,R3
    00000726 65D3                   MOV         R13,R5
    00000728 337C                   ADD         R7,R3
    0000072A 2832                   MOV.L       R3,@R8
    0000072C BED8                   BSR         __$mulf
    0000072E 54F1                   MOV.L       @(4,R15),R4
          mmul.c   274                            subf(x + n - i, t, blen + 1);
    00000730 56F6                   MOV.L       @(24,R15),R6
    00000732 55F1                   MOV.L       @(4,R15),R5
    00000734 BE7C                   BSR         __$subf
    00000736 54F5                   MOV.L       @(20,R15),R4
    00000738 AFAC                   BRA         L1216
    0000073A 0009                   NOP
    0000073C              L1254:                            
    0000073C <00000000>             .DATA.L     __utod
    00000740 <00000000>             .DATA.L     __muld
    00000744 <00000000>             .DATA.L     __addd




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000748 <00000000>             .DATA.L     __dtou
    0000074C <00000000>             .DATA.L     _POW_2_32
    00000750 <00000000>             .DATA.L     __divdr
    00000754 <00000000>             .DATA.L     L1087
    00000758 <00000000>             .DATA.L     _stop
    0000075C <00000000>             .DATA.L     _mint
    00000760 <00000000>             .DATA.L     _mcopy
    00000764 <00000000>             .DATA.L     _mnew
    00000768 3FF00000               .DATA.L     H'3FF00000
    0000076C <00000000>             .DATA.L     __dtoi
    00000770 <00000000>             .DATA.L     _ge
    00000774              L1219:                            
    00000774 53F5                   MOV.L       @(20,R15),R3
    00000776 78FC                   ADD         #-4,R8
    00000778 7B01                   ADD         #1,R11
    0000077A 73FC                   ADD         #-4,R3
    0000077C 1F35                   MOV.L       R3,@(20,R15)
    0000077E 52F4                   MOV.L       @(16,R15),R2
    00000780 72FC                   ADD         #-4,R2
    00000782 1F24                   MOV.L       R2,@(16,R15)
    00000784              L1213:                            
    00000784 3B97                   CMP/GT      R9,R11
    00000786 8901                   BT          L1255
    00000788 AF74                   BRA         L1214
    0000078A 0009                   NOP
    0000078C              L1255:                            
          mmul.c   275                    }
          mmul.c   276            }
          mmul.c   277    
          mmul.c   278            mfree(t);
    0000078C DD8C                   MOV.L       L1256,R13  ; _mfree
    0000078E 4D0B                   JSR         @R13
    00000790 54F1                   MOV.L       @(4,R15),R4
          mmul.c   279    
          mmul.c   280            mfree(y);
    00000792 4D0B                   JSR         @R13
    00000794 54F7                   MOV.L       @(28,R15),R4
          mmul.c   281    
          mmul.c   282            /* length of remainder */
          mmul.c   283    
          mmul.c   284            for (i = blen - 1; i > 0; i--)
    00000796 54FA                   MOV.L       @(40,R15),R4
    00000798 4415                   CMP/PL      R4
    0000079A 8B07                   BF          L1220
    0000079C              L1221:                            
          mmul.c   285                    if (x[i])
    0000079C 6043                   MOV         R4,R0
    0000079E 4008                   SHLL2       R0
    000007A0 03EE                   MOV.L       @(R0,R14),R3
    000007A2 2338                   TST         R3,R3
    000007A4 8B02                   BF          L1220
    000007A6 74FF                   ADD         #-1,R4
    000007A8 4415                   CMP/PL      R4
    000007AA 89F7                   BT          L1221
    000007AC              L1220:                            
          mmul.c   286                            break;
          mmul.c   287    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          mmul.c   288            if (i == 0 && x[0] == 0) {
    000007AC 2448                   TST         R4,R4
    000007AE 8B09                   BF          L1224
    000007B0 63E2                   MOV.L       @R14,R3
    000007B2 2338                   TST         R3,R3
    000007B4 8B06                   BF          L1224
          mmul.c   289                    mfree(x);
    000007B6 4D0B                   JSR         @R13
    000007B8 64E3                   MOV         R14,R4
          mmul.c   290                    x = mint(0);
    000007BA D382                   MOV.L       L1256+4,R3 ; _mint
    000007BC 430B                   JSR         @R3
    000007BE E400                   MOV         #0,R4
    000007C0 A009                   BRA         L1225
    000007C2 6E03                   MOV         R0,R14
    000007C4              L1224:                            
          mmul.c   291            } else {
          mmul.c   292                    MLENGTH(x) = i + 1;
    000007C4 63E3                   MOV         R14,R3
    000007C6 7401                   ADD         #1,R4
    000007C8 2346                   MOV.L       R4,@-R3
          mmul.c   293                    MSIGN(x) = MSIGN(a);
    000007CA 62E3                   MOV         R14,R2
    000007CC 53F2                   MOV.L       @(8,R15),R3
    000007CE E0F8                   MOV         #-8,R0
    000007D0 013E                   MOV.L       @(R0,R3),R1
    000007D2 72F8                   ADD         #-8,R2
    000007D4 2212                   MOV.L       R1,@R2
    000007D6              L1225:                            
          mmul.c   294            }
          mmul.c   295    
          mmul.c   296            return x;
    000007D6 60E3                   MOV         R14,R0
          mmul.c   297    }
    000007D8 7F3C                   ADD         #60,R15
    000007DA 4F26                   LDS.L       @R15+,PR
    000007DC 68F6                   MOV.L       @R15+,R8
    000007DE 69F6                   MOV.L       @R15+,R9
    000007E0 6AF6                   MOV.L       @R15+,R10
    000007E2 6BF6                   MOV.L       @R15+,R11
    000007E4 6CF6                   MOV.L       @R15+,R12
    000007E6 6DF6                   MOV.L       @R15+,R13
    000007E8 000B                   RTS
    000007EA 6EF6                   MOV.L       @R15+,R14
          mmul.c   298    
          mmul.c   299    // return both quotient and remainder of a/b
          mmul.c   300    
          mmul.c   301    void
          mmul.c   302    mdivrem(unsigned int **q, unsigned int **r, unsigned int *a, unsigned int *b)
    000007EC              _mdivrem:                        ; function: mdivrem
                                                           ; frame size=140
                                                           ; used runtime library name:
                                                           ; __addd, __muld, __divdr, __dtoi, __utod
    000007EC 2FE6                   MOV.L       R14,@-R15
    000007EE 6E73                   MOV         R7,R14
    000007F0 2FD6                   MOV.L       R13,@-R15
    000007F2 7EFC                   ADD         #-4,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007F4 2FC6                   MOV.L       R12,@-R15
    000007F6 2FB6                   MOV.L       R11,@-R15
    000007F8 2FA6                   MOV.L       R10,@-R15
    000007FA 2F96                   MOV.L       R9,@-R15
    000007FC 2F86                   MOV.L       R8,@-R15
    000007FE 4F22                   STS.L       PR,@-R15
    00000800 4F12                   STS.L       MACL,@-R15
    00000802 7FBC                   ADD         #-68,R15
    00000804 1F49                   MOV.L       R4,@(36,R15)
    00000806 1F58                   MOV.L       R5,@(32,R15)
    00000808 1F62                   MOV.L       R6,@(8,R15)
    0000080A 60E2                   MOV.L       @R14,R0
    0000080C 8801                   CMP/EQ      #1,R0
    0000080E 8F07                   BF/S        L1226
    00000810 6D73                   MOV         R7,R13
    00000812 62D2                   MOV.L       @R13,R2
    00000814 2228                   TST         R2,R2
    00000816 8B03                   BF          L1226
          mmul.c   303    {
          mmul.c   304            int alen, blen, i, n;
          mmul.c   305            unsigned int c, *t, *x, *y;
          mmul.c   306            ULONGLONG jj, kk;
          mmul.c   307    
          mmul.c   308            if (MZERO(b))
          mmul.c   309                    stop("divide by zero");
    00000818 D46B                   MOV.L       L1256+8,R4 ; L1087
    0000081A D36C                   MOV.L       L1256+12,R3; _stop
    0000081C 430B                   JSR         @R3
    0000081E 0009                   NOP
    00000820              L1226:                            
    00000820 54F2                   MOV.L       @(8,R15),R4
    00000822 74FC                   ADD         #-4,R4
    00000824 6042                   MOV.L       @R4,R0
    00000826 8801                   CMP/EQ      #1,R0
    00000828 8B11                   BF          L1227
    0000082A 52F2                   MOV.L       @(8,R15),R2
    0000082C 6322                   MOV.L       @R2,R3
    0000082E 2338                   TST         R3,R3
    00000830 8B0D                   BF          L1227
          mmul.c   310    
          mmul.c   311            if (MZERO(a)) {
          mmul.c   312                    *q = mint(0);
    00000832 53F9                   MOV.L       @(36,R15),R3
    00000834 2F36                   MOV.L       R3,@-R15
    00000836 D363                   MOV.L       L1256+4,R3 ; _mint
    00000838 430B                   JSR         @R3
    0000083A E400                   MOV         #0,R4
    0000083C 62F6                   MOV.L       @R15+,R2
    0000083E 2202                   MOV.L       R0,@R2
          mmul.c   313                    *r = mint(0);
    00000840 53F8                   MOV.L       @(32,R15),R3
    00000842 2F36                   MOV.L       R3,@-R15
    00000844 D35F                   MOV.L       L1256+4,R3 ; _mint
    00000846 430B                   JSR         @R3
    00000848 E400                   MOV         #0,R4
          mmul.c   314                    return;
    0000084A A013                   BRA         L1251




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000084C 0009                   NOP
    0000084E              L1227:                            
          mmul.c   315            }
          mmul.c   316    
          mmul.c   317            alen = MLENGTH(a);
    0000084E 6342                   MOV.L       @R4,R3
    00000850 2F32                   MOV.L       R3,@R15
          mmul.c   318            blen = MLENGTH(b);
          mmul.c   319    
          mmul.c   320            n = alen - blen;
    00000852 6933                   MOV         R3,R9
    00000854 6CE2                   MOV.L       @R14,R12
    00000856 39C8                   SUB         R12,R9
          mmul.c   321    
          mmul.c   322            if (n < 0) {
    00000858 4911                   CMP/PZ      R9
    0000085A 890E                   BT          L1229
          mmul.c   323                    *q = mint(0);
    0000085C 52F9                   MOV.L       @(36,R15),R2
    0000085E 2F26                   MOV.L       R2,@-R15
    00000860 D358                   MOV.L       L1256+4,R3 ; _mint
    00000862 430B                   JSR         @R3
    00000864 E400                   MOV         #0,R4
    00000866 61F6                   MOV.L       @R15+,R1
    00000868 2102                   MOV.L       R0,@R1
          mmul.c   324                    *r = mcopy(a);
    0000086A 53F8                   MOV.L       @(32,R15),R3
    0000086C 2F36                   MOV.L       R3,@-R15
    0000086E D358                   MOV.L       L1256+16,R3; _mcopy
    00000870 430B                   JSR         @R3
    00000872 54F3                   MOV.L       @(12,R15),R4
          mmul.c   325                    return;
    00000874              L1251:                            
    00000874 62F6                   MOV.L       @R15+,R2
    00000876 A116                   BRA         L1228
    00000878 2202                   MOV.L       R0,@R2
    0000087A              L1229:                            
          mmul.c   326            }
          mmul.c   327    
          mmul.c   328            x = mnew(alen + 1);
    0000087A DA56                   MOV.L       L1256+20,R10; _mnew
    0000087C 64F2                   MOV.L       @R15,R4
    0000087E 4A0B                   JSR         @R10
    00000880 7401                   ADD         #1,R4
    00000882 6E03                   MOV         R0,R14
          mmul.c   329    
          mmul.c   330            for (i = 0; i < alen; i++)
    00000884 63F2                   MOV.L       @R15,R3
    00000886 4315                   CMP/PL      R3
    00000888 8F0B                   BF/S        L1230
    0000088A E400                   MOV         #0,R4
    0000088C              L1231:                            
          mmul.c   331                    x[i] = a[i];
    0000088C 53F2                   MOV.L       @(8,R15),R3
    0000088E 6043                   MOV         R4,R0
    00000890 4008                   SHLL2       R0
    00000892 6203                   MOV         R0,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000894 033E                   MOV.L       @(R0,R3),R3
    00000896 7401                   ADD         #1,R4
    00000898 32EC                   ADD         R14,R2
    0000089A 2232                   MOV.L       R3,@R2
    0000089C 63F2                   MOV.L       @R15,R3
    0000089E 3433                   CMP/GE      R3,R4
    000008A0 8BF4                   BF          L1231
    000008A2              L1230:                            
          mmul.c   332    
          mmul.c   333            x[i] = 0;
    000008A2 6043                   MOV         R4,R0
    000008A4 4008                   SHLL2       R0
    000008A6 E300                   MOV         #0,R3
    000008A8 0E36                   MOV.L       R3,@(R0,R14)
          mmul.c   334    
          mmul.c   335            y = mnew(n + 1);
    000008AA 6493                   MOV         R9,R4
    000008AC 4A0B                   JSR         @R10
    000008AE 7401                   ADD         #1,R4
    000008B0 6B03                   MOV         R0,R11
          mmul.c   336    
          mmul.c   337            t = mnew(blen + 1);
    000008B2 64C3                   MOV         R12,R4
    000008B4 7401                   ADD         #1,R4
    000008B6 4A0B                   JSR         @R10
    000008B8 1F47                   MOV.L       R4,@(28,R15)
    000008BA 1F01                   MOV.L       R0,@(4,R15)
          mmul.c   338    
          mmul.c   339            kk = (ULONGLONG) b[blen - 1] + 1;
    000008BC D346                   MOV.L       L1256+24,R3; __utod
    000008BE 60C3                   MOV         R12,R0
    000008C0 70FF                   ADD         #-1,R0
    000008C2 1F0C                   MOV.L       R0,@(48,R15)
    000008C4 4008                   SHLL2       R0
    000008C6 00DE                   MOV.L       @(R0,R13),R0
    000008C8 7FF8                   ADD         #-8,R15
    000008CA 430B                   JSR         @R3
    000008CC 2FF6                   MOV.L       R15,@-R15
    000008CE E200                   MOV         #0,R2
    000008D0 D343                   MOV.L       L1256+32,R3; __addd
    000008D2 2F26                   MOV.L       R2,@-R15
    000008D4 D241                   MOV.L       L1256+28,R2; H'3FF00000
    000008D6 2F26                   MOV.L       R2,@-R15
    000008D8 61F3                   MOV         R15,R1
    000008DA 7144                   ADD         #68,R1
    000008DC 430B                   JSR         @R3
    000008DE 2F16                   MOV.L       R1,@-R15
          mmul.c   340    
          mmul.c   341            for (i = 0; i <= n; i++) {
    000008E0 EA00                   MOV         #0,R10
    000008E2 6493                   MOV         R9,R4
    000008E4 4408                   SHLL2       R4
    000008E6 6393                   MOV         R9,R3
    000008E8 1F4A                   MOV.L       R4,@(40,R15)
    000008EA 4308                   SHLL2       R3
    000008EC 34EC                   ADD         R14,R4
    000008EE 33BC                   ADD         R11,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008F0 1F44                   MOV.L       R4,@(16,R15)
    000008F2 1F35                   MOV.L       R3,@(20,R15)
    000008F4 A08A                   BRA         L1232
    000008F6 1F46                   MOV.L       R4,@(24,R15)
    000008F8              L1233:                            
          mmul.c   342    
          mmul.c   343                    y[n - i] = 0;
    000008F8 6393                   MOV         R9,R3
    000008FA 33A8                   SUB         R10,R3
    000008FC 4308                   SHLL2       R3
    000008FE 33BC                   ADD         R11,R3
    00000900 1F33                   MOV.L       R3,@(12,R15)
    00000902 E200                   MOV         #0,R2
    00000904 2322                   MOV.L       R2,@R3
    00000906 63A3                   MOV         R10,R3
    00000908 52FA                   MOV.L       @(40,R15),R2
    0000090A 4308                   SHLL2       R3
    0000090C 68F2                   MOV.L       @R15,R8
    0000090E 3238                   SUB         R3,R2
    00000910 38A8                   SUB         R10,R8
    00000912 32EC                   ADD         R14,R2
    00000914 1F2B                   MOV.L       R2,@(44,R15)
          mmul.c   344    
          mmul.c   345                    for (;;) {
    00000916              L1235:                            
          mmul.c   346    
          mmul.c   347                            /* estimate the partial quotient */
          mmul.c   348    /*
          mmul.c   349                            if (little_endian()) {
          mmul.c   350                                    ((unsigned int *) &jj)[0] = x[alen - i - 1];
          mmul.c   351                                    ((unsigned int *) &jj)[1] = x[alen - i - 0];
          mmul.c   352                            } else {
          mmul.c   353                                    ((unsigned int *) &jj)[1] = x[alen - i - 1];
          mmul.c   354                                    ((unsigned int *) &jj)[0] = x[alen - i - 0];
          mmul.c   355                            }
          mmul.c   356    */
          mmul.c   357                            jj = x[alen - i - 1]/*low*/+x[alen - i]/*high*/*POW_2_32;
    00000916 6083                   MOV         R8,R0
    00000918 D32F                   MOV.L       L1256+24,R3; __utod
    0000091A 70FF                   ADD         #-1,R0
    0000091C 4008                   SHLL2       R0
    0000091E 00EE                   MOV.L       @(R0,R14),R0
    00000920 7FF8                   ADD         #-8,R15
    00000922 430B                   JSR         @R3
    00000924 2FF6                   MOV.L       R15,@-R15
    00000926 6083                   MOV         R8,R0
    00000928 D32B                   MOV.L       L1256+24,R3; __utod
    0000092A 4008                   SHLL2       R0
    0000092C 00EE                   MOV.L       @(R0,R14),R0
    0000092E 7FF0                   ADD         #-16,R15
    00000930 430B                   JSR         @R3
    00000932 2FF6                   MOV.L       R15,@-R15
    00000934 D22B                   MOV.L       L1256+36,R2; _POW_2_32
    00000936 5121                   MOV.L       @(4,R2),R1
    00000938 D02B                   MOV.L       L1256+40,R0; __muld
    0000093A 2F16                   MOV.L       R1,@-R15
    0000093C 6122                   MOV.L       @R2,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000093E 2F16                   MOV.L       R1,@-R15
    00000940 63F3                   MOV         R15,R3
    00000942 7310                   ADD         #16,R3
    00000944 400B                   JSR         @R0
    00000946 2F36                   MOV.L       R3,@-R15
    00000948 D225                   MOV.L       L1256+32,R2; __addd
    0000094A 61F3                   MOV         R15,R1
    0000094C 714C                   ADD         #76,R1
    0000094E 420B                   JSR         @R2
    00000950 2F16                   MOV.L       R1,@-R15
          mmul.c   358    
          mmul.c   359                            c = (int) (jj / kk);
    00000952 7FF8                   ADD         #-8,R15
    00000954 D125                   MOV.L       L1256+44,R1; __divdr
    00000956 E048                   MOV         #72,R0
    00000958 03FE                   MOV.L       @(R0,R15),R3
    0000095A E048                   MOV         #72,R0
    0000095C 2F36                   MOV.L       R3,@-R15
    0000095E 03FE                   MOV.L       @(R0,R15),R3
    00000960 2F36                   MOV.L       R3,@-R15
    00000962 E048                   MOV         #72,R0
    00000964 02FE                   MOV.L       @(R0,R15),R2
    00000966 E048                   MOV         #72,R0
    00000968 2F26                   MOV.L       R2,@-R15
    0000096A 02FE                   MOV.L       @(R0,R15),R2
    0000096C 2F26                   MOV.L       R2,@-R15
    0000096E 63F3                   MOV         R15,R3
    00000970 7310                   ADD         #16,R3
    00000972 410B                   JSR         @R1
    00000974 2F36                   MOV.L       R3,@-R15
    00000976 D21E                   MOV.L       L1256+48,R2; __dtoi
    00000978 420B                   JSR         @R2
    0000097A 0009                   NOP
    0000097C 6703                   MOV         R0,R7
          mmul.c   360    
          mmul.c   361                            if (c == 0) {
    0000097E 2778                   TST         R7,R7
    00000980 8B10                   BF          L1236
          mmul.c   362                                    if (ge(x + n - i, b, blen)) { /* see note 1 */
    00000982 66C3                   MOV         R12,R6
    00000984 D31B                   MOV.L       L1256+52,R3; _ge
    00000986 65D3                   MOV         R13,R5
    00000988 430B                   JSR         @R3
    0000098A 54FB                   MOV.L       @(44,R15),R4
    0000098C 2008                   TST         R0,R0
    0000098E 8933                   BT          L1238
          mmul.c   363                                            y[n - i]++;
    00000990 53F3                   MOV.L       @(12,R15),R3
          mmul.c   364                                            subf(x + n - i, b, blen);
    00000992 66C3                   MOV         R12,R6
    00000994 6232                   MOV.L       @R3,R2
    00000996 65D3                   MOV         R13,R5
    00000998 7201                   ADD         #1,R2
    0000099A 2322                   MOV.L       R2,@R3
    0000099C BD48                   BSR         __$subf
    0000099E 54F6                   MOV.L       @(24,R15),R4
          mmul.c   365                                    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          mmul.c   366                                    break;
    000009A0 A02A                   BRA         L1238
    000009A2 0009                   NOP
    000009A4              L1236:                            
          mmul.c   367                            }
          mmul.c   368    
          mmul.c   369                            y[n - i] += c;
    000009A4 53F5                   MOV.L       @(20,R15),R3
          mmul.c   370                            mulf(t, b, blen, c);
    000009A6 66C3                   MOV         R12,R6
    000009A8 6232                   MOV.L       @R3,R2
    000009AA 65D3                   MOV         R13,R5
    000009AC 327C                   ADD         R7,R2
    000009AE 2322                   MOV.L       R2,@R3
    000009B0 BD96                   BSR         __$mulf
    000009B2 54F1                   MOV.L       @(4,R15),R4
          mmul.c   371                            subf(x + n - i, t, blen + 1);
    000009B4 56F7                   MOV.L       @(28,R15),R6
    000009B6 55F1                   MOV.L       @(4,R15),R5
    000009B8 BD3A                   BSR         __$subf
    000009BA 54F4                   MOV.L       @(16,R15),R4
    000009BC AFAB                   BRA         L1235
    000009BE 0009                   NOP
    000009C0              L1256:                            
    000009C0 <00000000>             .DATA.L     _mfree
    000009C4 <00000000>             .DATA.L     _mint
    000009C8 <00000000>             .DATA.L     L1087
    000009CC <00000000>             .DATA.L     _stop
    000009D0 <00000000>             .DATA.L     _mcopy
    000009D4 <00000000>             .DATA.L     _mnew
    000009D8 <00000000>             .DATA.L     __utod
    000009DC 3FF00000               .DATA.L     H'3FF00000
    000009E0 <00000000>             .DATA.L     __addd
    000009E4 <00000000>             .DATA.L     _POW_2_32
    000009E8 <00000000>             .DATA.L     __muld
    000009EC <00000000>             .DATA.L     __divdr
    000009F0 <00000000>             .DATA.L     __dtoi
    000009F4 <00000000>             .DATA.L     _ge
    000009F8              L1238:                            
    000009F8 53F4                   MOV.L       @(16,R15),R3
    000009FA 7A01                   ADD         #1,R10
    000009FC 73FC                   ADD         #-4,R3
    000009FE 1F34                   MOV.L       R3,@(16,R15)
    00000A00 52F5                   MOV.L       @(20,R15),R2
    00000A02 72FC                   ADD         #-4,R2
    00000A04 1F25                   MOV.L       R2,@(20,R15)
    00000A06 51F6                   MOV.L       @(24,R15),R1
    00000A08 71FC                   ADD         #-4,R1
    00000A0A 1F16                   MOV.L       R1,@(24,R15)
    00000A0C              L1232:                            
    00000A0C 3A97                   CMP/GT      R9,R10
    00000A0E 8901                   BT          L1257
    00000A10 AF72                   BRA         L1233
    00000A12 0009                   NOP
    00000A14              L1257:                            
          mmul.c   372                    }
          mmul.c   373            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          mmul.c   374    
          mmul.c   375            mfree(t);
    00000A14 DA29                   MOV.L       L1258,R10  ; _mfree
    00000A16 4A0B                   JSR         @R10
    00000A18 54F1                   MOV.L       @(4,R15),R4
          mmul.c   376    
          mmul.c   377            /* length of quotient */
          mmul.c   378    
          mmul.c   379            for (i = n; i > 0; i--)
    00000A1A 6493                   MOV         R9,R4
    00000A1C 4415                   CMP/PL      R4
    00000A1E 8B07                   BF          L1239
    00000A20              L1240:                            
          mmul.c   380                    if (y[i])
    00000A20 6043                   MOV         R4,R0
    00000A22 4008                   SHLL2       R0
    00000A24 03BE                   MOV.L       @(R0,R11),R3
    00000A26 2338                   TST         R3,R3
    00000A28 8B02                   BF          L1239
    00000A2A 74FF                   ADD         #-1,R4
    00000A2C 4415                   CMP/PL      R4
    00000A2E 89F7                   BT          L1240
    00000A30              L1239:                            
    00000A30 5CF2                   MOV.L       @(8,R15),R12
    00000A32 2448                   TST         R4,R4
    00000A34 8F0A                   BF/S        L1243
    00000A36 7CF8                   ADD         #-8,R12
    00000A38 62B2                   MOV.L       @R11,R2
    00000A3A 2228                   TST         R2,R2
    00000A3C 8B06                   BF          L1243
          mmul.c   381                            break;
          mmul.c   382    
          mmul.c   383            if (i == 0 && y[0] == 0) {
          mmul.c   384                    mfree(y);
    00000A3E 4A0B                   JSR         @R10
    00000A40 64B3                   MOV         R11,R4
          mmul.c   385                    y = mint(0);
    00000A42 D31F                   MOV.L       L1258+4,R3 ; _mint
    00000A44 430B                   JSR         @R3
    00000A46 E400                   MOV         #0,R4
    00000A48 A00B                   BRA         L1244
    00000A4A 6B03                   MOV         R0,R11
    00000A4C              L1243:                            
          mmul.c   386            } else {
          mmul.c   387                    MLENGTH(y) = i + 1;
    00000A4C 63B3                   MOV         R11,R3
    00000A4E 7401                   ADD         #1,R4
    00000A50 2346                   MOV.L       R4,@-R3
          mmul.c   388                    MSIGN(y) = MSIGN(a) * MSIGN(b);
    00000A52 62B3                   MOV         R11,R2
    00000A54 61C2                   MOV.L       @R12,R1
    00000A56 7DF8                   ADD         #-8,R13
    00000A58 63D2                   MOV.L       @R13,R3
    00000A5A 72F8                   ADD         #-8,R2
    00000A5C 0137                   MUL.L       R3,R1
    00000A5E 031A                   STS         MACL,R3
    00000A60 2232                   MOV.L       R3,@R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A62              L1244:                            
          mmul.c   389            }
          mmul.c   390    
          mmul.c   391            /* length of remainder */
          mmul.c   392    
          mmul.c   393            for (i = blen - 1; i > 0; i--)
    00000A62 54FC                   MOV.L       @(48,R15),R4
    00000A64 4415                   CMP/PL      R4
    00000A66 8B07                   BF          L1245
    00000A68              L1246:                            
          mmul.c   394                    if (x[i])
    00000A68 6043                   MOV         R4,R0
    00000A6A 4008                   SHLL2       R0
    00000A6C 03EE                   MOV.L       @(R0,R14),R3
    00000A6E 2338                   TST         R3,R3
    00000A70 8B02                   BF          L1245
    00000A72 74FF                   ADD         #-1,R4
    00000A74 4415                   CMP/PL      R4
    00000A76 89F7                   BT          L1246
    00000A78              L1245:                            
          mmul.c   395                            break;
          mmul.c   396    
          mmul.c   397            if (i == 0 && x[0] == 0) {
    00000A78 2448                   TST         R4,R4
    00000A7A 8B09                   BF          L1249
    00000A7C 63E2                   MOV.L       @R14,R3
    00000A7E 2338                   TST         R3,R3
    00000A80 8B06                   BF          L1249
          mmul.c   398                    mfree(x);
    00000A82 4A0B                   JSR         @R10
    00000A84 64E3                   MOV         R14,R4
          mmul.c   399                    x = mint(0);
    00000A86 D30E                   MOV.L       L1258+4,R3 ; _mint
    00000A88 430B                   JSR         @R3
    00000A8A E400                   MOV         #0,R4
    00000A8C A007                   BRA         L1250
    00000A8E 6E03                   MOV         R0,R14
    00000A90              L1249:                            
          mmul.c   400            } else {
          mmul.c   401                    MLENGTH(x) = i + 1;
    00000A90 63E3                   MOV         R14,R3
    00000A92 7401                   ADD         #1,R4
    00000A94 2346                   MOV.L       R4,@-R3
          mmul.c   402                    MSIGN(x) = MSIGN(a);
    00000A96 62E3                   MOV         R14,R2
    00000A98 63C2                   MOV.L       @R12,R3
    00000A9A 72F8                   ADD         #-8,R2
    00000A9C 2232                   MOV.L       R3,@R2
    00000A9E              L1250:                            
          mmul.c   403            }
          mmul.c   404    
          mmul.c   405            *q = y;
    00000A9E 52F9                   MOV.L       @(36,R15),R2
    00000AA0 22B2                   MOV.L       R11,@R2
          mmul.c   406            *r = x;
    00000AA2 53F8                   MOV.L       @(32,R15),R3
    00000AA4 23E2                   MOV.L       R14,@R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          mmul.c   407    }
    00000AA6              L1228:                            
    00000AA6 7F44                   ADD         #68,R15
    00000AA8 4F16                   LDS.L       @R15+,MACL
    00000AAA 4F26                   LDS.L       @R15+,PR
    00000AAC 68F6                   MOV.L       @R15+,R8
    00000AAE 69F6                   MOV.L       @R15+,R9
    00000AB0 6AF6                   MOV.L       @R15+,R10
    00000AB2 6BF6                   MOV.L       @R15+,R11
    00000AB4 6CF6                   MOV.L       @R15+,R12
    00000AB6 6DF6                   MOV.L       @R15+,R13
    00000AB8 000B                   RTS
    00000ABA 6EF6                   MOV.L       @R15+,R14
    00000ABC              L1258:                            
    00000ABC <00000000>             .DATA.L     _mfree
    00000AC0 <00000000>             .DATA.L     _mint
C   00000000              _POW_2_32:                       ; static: POW_2_32
    00000000 41F0000000             .DATA.L     H'41F00000,H'00000000
             000000       
    00000008              L1087:
    00000008 6469766964             .SDATA      "divide by zero"
             6520627920   
             7A65726F     
    00000016 00                     .DATA.B     H'00





































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:16  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      407



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000AC4 Byte(s)
CONSTANT SECTION (C):                               00000017 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000ADB Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           13
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           5
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            94






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkA771.tmp 

