SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:18  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\mprime.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        mprime.c     1    // Bignum prime test (returns 1 if prime, 0 if not)
        mprime.c     2    
        mprime.c     3    // Uses Algorithm P (probabilistic primality test) from p. 395 of
        mprime.c     4    // "The Art of Computer Programming, Volume 2" by Donald E. Knuth.
        mprime.c     5    
        mprime.c     6    #include "stdafx.h"
        mprime.c     7    #include "defs.h"
        mprime.c     8    
        mprime.c     9    static int mprimef(unsigned int *, unsigned int *, int);
        mprime.c    10    
        mprime.c    11    int
        mprime.c    12    mprime(unsigned int *n)
P   00000000              _mprime:                         ; function: mprime
                                                           ; frame size=24
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 6D43                   MOV         R4,R13
    00000008 2FB6                   MOV.L       R11,@-R15
    0000000A 74FC                   ADD         #-4,R4
    0000000C 2FA6                   MOV.L       R10,@-R15
    0000000E 4F22                   STS.L       PR,@-R15
    00000010 6042                   MOV.L       @R4,R0
    00000012 8801                   CMP/EQ      #1,R0
    00000014 8B08                   BF          L1095
    00000016 60D2                   MOV.L       @R13,R0
    00000018 8801                   CMP/EQ      #1,R0
    0000001A 8925                   BT          L1119
        mprime.c    13    {
        mprime.c    14            int i, k;
        mprime.c    15            unsigned int *q;
        mprime.c    16    
        mprime.c    17            // 1?
        mprime.c    18    
        mprime.c    19            if (MLENGTH(n) == 1 && n[0] == 1)
        mprime.c    20                    return 0;
        mprime.c    21    
        mprime.c    22            // 2?
        mprime.c    23    
        mprime.c    24            if (MLENGTH(n) == 1 && n[0] == 2)
    0000001C 6042                   MOV.L       @R4,R0
    0000001E 8801                   CMP/EQ      #1,R0
    00000020 8B02                   BF          L1095
    00000022 60D2                   MOV.L       @R13,R0
    00000024 8802                   CMP/EQ      #2,R0
    00000026 8921                   BT          L1082
    00000028              L1095:                            
        mprime.c    25                    return 1;
        mprime.c    26    
        mprime.c    27            // even?
        mprime.c    28    
        mprime.c    29            if ((n[0] & 1) == 0)
    00000028 62D2                   MOV.L       @R13,R2
    0000002A EC01                   MOV         #1,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:18  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000002C 22C8                   TST         R12,R2
    0000002E 891B                   BT          L1119
        mprime.c    30                    return 0;
        mprime.c    31    
        mprime.c    32            // n = 1 + (2 ^ k) q
        mprime.c    33    
        mprime.c    34            q = mcopy(n);
    00000030 D361                   MOV.L       L1120+2,R3 ; _mcopy
    00000032 430B                   JSR         @R3
    00000034 64D3                   MOV         R13,R4
    00000036 6E03                   MOV         R0,R14
    00000038 DA60                   MOV.L       L1120+6,R10; _mshiftright
        mprime.c    35    
        mprime.c    36            k = 0;
    0000003A EB00                   MOV         #0,R11
        mprime.c    37            do {
    0000003C              L1097:                            
        mprime.c    38                    mshiftright(q);
    0000003C 4A0B                   JSR         @R10
    0000003E 64E3                   MOV         R14,R4
        mprime.c    39                    k++;
        mprime.c    40            } while ((q[0] & 1) == 0);
    00000040 62E2                   MOV.L       @R14,R2
    00000042 22C8                   TST         R12,R2
    00000044 8DFA                   BT/S        L1097
    00000046 7B01                   ADD         #1,R11
        mprime.c    41    
        mprime.c    42            // try 25 times
        mprime.c    43    
        mprime.c    44            for (i = 0; i < 25; i++)
    00000048 EC00                   MOV         #0,R12
    0000004A EA19                   MOV         #25,R10
    0000004C              L1099:                            
        mprime.c    45                    if (mprimef(n, q, k) == 0)
    0000004C 66B3                   MOV         R11,R6
    0000004E 65E3                   MOV         R14,R5
    00000050 B014                   BSR         __$mprimef
    00000052 64D3                   MOV         R13,R4
    00000054 2008                   TST         R0,R0
    00000056 8902                   BT          L1098
    00000058 7C01                   ADD         #1,R12
    0000005A 3CA3                   CMP/GE      R10,R12
    0000005C 8BF6                   BF          L1099
    0000005E              L1098:                            
        mprime.c    46                            break;
        mprime.c    47    
        mprime.c    48            mfree(q);
    0000005E D258                   MOV.L       L1120+10,R2; _mfree
    00000060 420B                   JSR         @R2
    00000062 64E3                   MOV         R14,R4
        mprime.c    49    
        mprime.c    50            if (i < 25)
    00000064 3CA3                   CMP/GE      R10,R12
    00000066 8901                   BT          L1082
    00000068              L1119:                            
        mprime.c    51                    return 0;
    00000068 A001                   BRA         L1094




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:18  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000006A E000                   MOV         #0,R0
    0000006C              L1082:
        mprime.c    52            else
        mprime.c    53                    return 1;
    0000006C E001                   MOV         #1,R0
        mprime.c    54    }
    0000006E              L1094:                            
    0000006E 4F26                   LDS.L       @R15+,PR
    00000070 6AF6                   MOV.L       @R15+,R10
    00000072 6BF6                   MOV.L       @R15+,R11
    00000074 6CF6                   MOV.L       @R15+,R12
    00000076 6DF6                   MOV.L       @R15+,R13
    00000078 000B                   RTS
    0000007A 6EF6                   MOV.L       @R15+,R14
        mprime.c    55    
        mprime.c    56    //-----------------------------------------------------------------------------
        mprime.c    57    //
        mprime.c    58    //      This is the actual implementation of Algorithm P.
        mprime.c    59    //
        mprime.c    60    //      Input:          n               The number in question.
        mprime.c    61    //
        mprime.c    62    //                      q               n = 1 + (2 ^ k) q
        mprime.c    63    //
        mprime.c    64    //                      k
        mprime.c    65    //
        mprime.c    66    //      Output:         1               when n is probably prime
        mprime.c    67    //
        mprime.c    68    //                      0               when n is definitely not prime
        mprime.c    69    //
        mprime.c    70    //-----------------------------------------------------------------------------
        mprime.c    71    
        mprime.c    72    static int
        mprime.c    73    mprimef(unsigned int *n, unsigned int *q, int k)
    0000007C              __$mprimef:                      ; function: mprimef
                                                           ; frame size=48
    0000007C 2FE6                   MOV.L       R14,@-R15
    0000007E 2FD6                   MOV.L       R13,@-R15
    00000080 2FC6                   MOV.L       R12,@-R15
    00000082 2FB6                   MOV.L       R11,@-R15
    00000084 2FA6                   MOV.L       R10,@-R15
    00000086 6B43                   MOV         R4,R11
        mprime.c    74    {
        mprime.c    75            int i, j;
        mprime.c    76            unsigned int *t, *x, *y;
        mprime.c    77    
        mprime.c    78            // generate x
        mprime.c    79    
        mprime.c    80            t = mcopy(n);
    00000088 D34B                   MOV.L       L1120+2,R3 ; _mcopy
    0000008A 2F96                   MOV.L       R9,@-R15
    0000008C 2F86                   MOV.L       R8,@-R15
    0000008E 4F22                   STS.L       PR,@-R15
    00000090 4F12                   STS.L       MACL,@-R15
    00000092 7FF8                   ADD         #-8,R15
    00000094 2F52                   MOV.L       R5,@R15
    00000096 1F61                   MOV.L       R6,@(4,R15)
    00000098 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:18  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000009A 64B3                   MOV         R11,R4
    0000009C D949                   MOV.L       L1120+14,R9; _mmod
    0000009E 6A03                   MOV         R0,R10
    000000A0 DE47                   MOV.L       L1120+10,R14; _mfree
    000000A2 6803                   MOV         R0,R8
    000000A4 78FC                   ADD         #-4,R8
        mprime.c    81    
        mprime.c    82            while (1) {
    000000A6              L1105:                            
        mprime.c    83                    for (i = 0; i < MLENGTH(t); i++)
    000000A6 A009                   BRA         L1106
    000000A8 ED00                   MOV         #0,R13
    000000AA              L1107:                            
        mprime.c    84                            t[i] = rand();
    000000AA 62D3                   MOV         R13,R2
    000000AC D346                   MOV.L       L1120+18,R3; _rand
    000000AE 4208                   SHLL2       R2
    000000B0 32AC                   ADD         R10,R2
    000000B2 430B                   JSR         @R3
    000000B4 2F26                   MOV.L       R2,@-R15
    000000B6 7D01                   ADD         #1,R13
    000000B8 61F6                   MOV.L       @R15+,R1
    000000BA 2102                   MOV.L       R0,@R1
    000000BC              L1106:                            
    000000BC 6382                   MOV.L       @R8,R3
    000000BE 3D33                   CMP/GE      R3,R13
    000000C0 8BF3                   BF          L1107
        mprime.c    85                    x = mmod(t, n);
    000000C2 65B3                   MOV         R11,R5
    000000C4 490B                   JSR         @R9
    000000C6 64A3                   MOV         R10,R4
    000000C8 6C03                   MOV         R0,R12
        mprime.c    86                    if (!MZERO(x) && !MEQUAL(x, 1))
    000000CA 6403                   MOV         R0,R4
    000000CC 74FC                   ADD         #-4,R4
    000000CE 6442                   MOV.L       @R4,R4
    000000D0 6043                   MOV         R4,R0
    000000D2 8801                   CMP/EQ      #1,R0
    000000D4 8B11                   BF          L1111
    000000D6 62C2                   MOV.L       @R12,R2
    000000D8 2228                   TST         R2,R2
    000000DA 890A                   BT          L1108
    000000DC 6043                   MOV         R4,R0
    000000DE 8801                   CMP/EQ      #1,R0
    000000E0 8B0B                   BF          L1111
    000000E2 60C3                   MOV         R12,R0
    000000E4 63C2                   MOV.L       @R12,R3
    000000E6 70F8                   ADD         #-8,R0
    000000E8 6202                   MOV.L       @R0,R2
    000000EA 0237                   MUL.L       R3,R2
    000000EC 001A                   STS         MACL,R0
    000000EE 8801                   CMP/EQ      #1,R0
    000000F0 8B03                   BF          L1111
    000000F2              L1108:                            
        mprime.c    87                            break;
        mprime.c    88                    mfree(x);
    000000F2 4E0B                   JSR         @R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:18  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000F4 64C3                   MOV         R12,R4
    000000F6 AFD6                   BRA         L1105
    000000F8 0009                   NOP
    000000FA              L1111:                            
        mprime.c    89            }
        mprime.c    90    
        mprime.c    91            mfree(t);
    000000FA 4E0B                   JSR         @R14
    000000FC 64A3                   MOV         R10,R4
        mprime.c    92    
        mprime.c    93            // exponentiate
        mprime.c    94    
        mprime.c    95            y = mmodpow(x, q, n);
    000000FE 66B3                   MOV         R11,R6
    00000100 65F2                   MOV.L       @R15,R5
    00000102 D332                   MOV.L       L1120+22,R3; _mmodpow
    00000104 430B                   JSR         @R3
    00000106 64C3                   MOV         R12,R4
    00000108 6D03                   MOV         R0,R13
        mprime.c    96    
        mprime.c    97            // done?
        mprime.c    98    
        mprime.c    99            if (MEQUAL(y, 1)) {
    0000010A 70FC                   ADD         #-4,R0
    0000010C 6002                   MOV.L       @R0,R0
    0000010E 8801                   CMP/EQ      #1,R0
    00000110 8B07                   BF          L1112
    00000112 60D3                   MOV         R13,R0
    00000114 63D2                   MOV.L       @R13,R3
    00000116 70F8                   ADD         #-8,R0
    00000118 6202                   MOV.L       @R0,R2
    0000011A 0237                   MUL.L       R3,R2
    0000011C 001A                   STS         MACL,R0
    0000011E 8801                   CMP/EQ      #1,R0
    00000120 8913                   BT          L1084
    00000122              L1112:                            
        mprime.c   100                    mfree(x);
        mprime.c   101                    mfree(y);
        mprime.c   102                    return 1;
        mprime.c   103            }
        mprime.c   104    
        mprime.c   105            j = 0;
    00000122 E800                   MOV         #0,R8
        mprime.c   106    
        mprime.c   107            while (1) {
    00000124              L1115:                            
        mprime.c   108    
        mprime.c   109                    // y = n - 1?
        mprime.c   110    
        mprime.c   111                    t = msub(n, y);
    00000124 DA2A                   MOV.L       L1120+26,R10; _msub
    00000126 65D3                   MOV         R13,R5
    00000128 4A0B                   JSR         @R10
    0000012A 64B3                   MOV         R11,R4
    0000012C 6403                   MOV         R0,R4
        mprime.c   112    
        mprime.c   113                    if (MEQUAL(t, 1)) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:18  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000012E 70FC                   ADD         #-4,R0
    00000130 6002                   MOV.L       @R0,R0
    00000132 8801                   CMP/EQ      #1,R0
    00000134 8B0F                   BF          L1116
    00000136 6043                   MOV         R4,R0
    00000138 6342                   MOV.L       @R4,R3
    0000013A 70F8                   ADD         #-8,R0
    0000013C 6202                   MOV.L       @R0,R2
    0000013E 0237                   MUL.L       R3,R2
    00000140 001A                   STS         MACL,R0
    00000142 8801                   CMP/EQ      #1,R0
    00000144 8B07                   BF          L1116
        mprime.c   114                            mfree(t);
    00000146 4E0B                   JSR         @R14
    00000148 0009                   NOP
    0000014A              L1084:
        mprime.c   115                            mfree(x);
    0000014A 4E0B                   JSR         @R14
    0000014C 64C3                   MOV         R12,R4
        mprime.c   116                            mfree(y);
    0000014E 4E0B                   JSR         @R14
    00000150 64D3                   MOV         R13,R4
        mprime.c   117                            return 1;
    00000152 A025                   BRA         L1113
    00000154 E001                   MOV         #1,R0
    00000156              L1116:                            
        mprime.c   118                    }
        mprime.c   119    
        mprime.c   120                    mfree(t);
    00000156 4E0B                   JSR         @R14
    00000158 0009                   NOP
        mprime.c   121    
        mprime.c   122                    if (++j == k) {
    0000015A 7801                   ADD         #1,R8
    0000015C 52F1                   MOV.L       @(4,R15),R2
    0000015E 3820                   CMP/EQ      R2,R8
    00000160 8919                   BT          L1085
        mprime.c   123                            mfree(x);
        mprime.c   124                            mfree(y);
        mprime.c   125                            return 0;
        mprime.c   126                    }
        mprime.c   127    
        mprime.c   128                    // y = (y ^ 2) mod n
        mprime.c   129    
        mprime.c   130                    t = mmul(y, y);
    00000162 65D3                   MOV         R13,R5
    00000164 DA1B                   MOV.L       L1120+30,R10; _mmul
    00000166 4A0B                   JSR         @R10
    00000168 64D3                   MOV         R13,R4
    0000016A 6A03                   MOV         R0,R10
        mprime.c   131                    mfree(y);
    0000016C 4E0B                   JSR         @R14
    0000016E 64D3                   MOV         R13,R4
        mprime.c   132                    y = mmod(t, n);
    00000170 65B3                   MOV         R11,R5
    00000172 490B                   JSR         @R9
    00000174 64A3                   MOV         R10,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:18  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000176 6D03                   MOV         R0,R13
        mprime.c   133                    mfree(t);
    00000178 4E0B                   JSR         @R14
    0000017A 64A3                   MOV         R10,R4
        mprime.c   134    
        mprime.c   135                    // y = 1?
        mprime.c   136    
        mprime.c   137                    if (MEQUAL(y, 1)) {
    0000017C 60D3                   MOV         R13,R0
    0000017E 70FC                   ADD         #-4,R0
    00000180 6002                   MOV.L       @R0,R0
    00000182 8801                   CMP/EQ      #1,R0
    00000184 8BCE                   BF          L1115
    00000186 60D3                   MOV         R13,R0
    00000188 63D2                   MOV.L       @R13,R3
    0000018A 70F8                   ADD         #-8,R0
    0000018C 6202                   MOV.L       @R0,R2
    0000018E 0237                   MUL.L       R3,R2
    00000190 001A                   STS         MACL,R0
    00000192 8801                   CMP/EQ      #1,R0
    00000194 8BC6                   BF          L1115
    00000196              L1085:
        mprime.c   138                            mfree(x);
    00000196 4E0B                   JSR         @R14
    00000198 64C3                   MOV         R12,R4
        mprime.c   139                            mfree(y);
    0000019A 4E0B                   JSR         @R14
    0000019C 64D3                   MOV         R13,R4
        mprime.c   140                            return 0;
    0000019E E000                   MOV         #0,R0
    000001A0              L1113:                            
        mprime.c   141                    }
        mprime.c   142            }
        mprime.c   143    }
    000001A0 7F08                   ADD         #8,R15
    000001A2 4F16                   LDS.L       @R15+,MACL
    000001A4 4F26                   LDS.L       @R15+,PR
    000001A6 68F6                   MOV.L       @R15+,R8
    000001A8 69F6                   MOV.L       @R15+,R9
    000001AA 6AF6                   MOV.L       @R15+,R10
    000001AC 6BF6                   MOV.L       @R15+,R11
    000001AE 6CF6                   MOV.L       @R15+,R12
    000001B0 6DF6                   MOV.L       @R15+,R13
    000001B2 000B                   RTS
    000001B4 6EF6                   MOV.L       @R15+,R14
    000001B6              L1120:                            
    000001B6 0000                   .DATA.W     0
    000001B8 <00000000>             .DATA.L     _mcopy
    000001BC <00000000>             .DATA.L     _mshiftright
    000001C0 <00000000>             .DATA.L     _mfree
    000001C4 <00000000>             .DATA.L     _mmod
    000001C8 <00000000>             .DATA.L     _rand
    000001CC <00000000>             .DATA.L     _mmodpow
    000001D0 <00000000>             .DATA.L     _msub
    000001D4 <00000000>             .DATA.L     _mmul






SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:18  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      143



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000001D8 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000001D8 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:            8
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           1
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            28






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkAFBE.tmp 

