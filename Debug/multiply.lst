SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\multiply.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      multiply.c     1    // Symbolic multiplication
      multiply.c     2    
      multiply.c     3    #include "stdafx.h"
      multiply.c     4    #include "defs.h"
      multiply.c     5    
      multiply.c     6    extern void append(void);
      multiply.c     7    static void parse_p1(void);
      multiply.c     8    static void parse_p2(void);
      multiply.c     9    static void __normalize_radical_factors(int);
      multiply.c    10    
      multiply.c    11    void
      multiply.c    12    multiply(void)
P   00000000              _multiply:                       ; function: multiply
                                                           ; frame size=4
    00000000 4F22                   STS.L       PR,@-R15
      multiply.c    13    {
      multiply.c    14            if (esc_flag)
    00000002 D23A                   MOV.L       L1544+2,R2 ; _esc_flag
    00000004 6322                   MOV.L       @R2,R3
    00000006 2338                   TST         R3,R3
    00000008 8903                   BT          L1153
      multiply.c    15                    stop("escape key stop");
    0000000A D439                   MOV.L       L1544+6,R4 ; L1062
    0000000C D339                   MOV.L       L1544+10,R3; _stop
    0000000E 430B                   JSR         @R3
    00000010 0009                   NOP
    00000012              L1153:                            
    00000012 D239                   MOV.L       L1544+14,R2; _tos
    00000014 D339                   MOV.L       L1544+18,R3; _stack
    00000016 6422                   MOV.L       @R2,R4
    00000018 6532                   MOV.L       @R3,R5
    0000001A 6043                   MOV         R4,R0
    0000001C 70FE                   ADD         #-2,R0
    0000001E 4008                   SHLL2       R0
    00000020 065E                   MOV.L       @(R0,R5),R6
    00000022 8468                   MOV.B       @(8,R6),R0
    00000024 600C                   EXTU.B      R0,R0
    00000026 8801                   CMP/EQ      #1,R0
    00000028 8D03                   BT/S        L1155
    0000002A 6603                   MOV         R0,R6
    0000002C 6063                   MOV         R6,R0
    0000002E 8802                   CMP/EQ      #2,R0
    00000030 8B12                   BF          L1154
    00000032              L1155:                            
    00000032 6043                   MOV         R4,R0
    00000034 70FF                   ADD         #-1,R0
    00000036 4008                   SHLL2       R0
    00000038 005E                   MOV.L       @(R0,R5),R0
    0000003A 8408                   MOV.B       @(8,R0),R0
    0000003C 600C                   EXTU.B      R0,R0
    0000003E 8801                   CMP/EQ      #1,R0
    00000040 8907                   BT          L1156
    00000042 6043                   MOV         R4,R0
    00000044 70FF                   ADD         #-1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000046 4008                   SHLL2       R0
    00000048 005E                   MOV.L       @(R0,R5),R0
    0000004A 8408                   MOV.B       @(8,R0),R0
    0000004C 600C                   EXTU.B      R0,R0
    0000004E 8802                   CMP/EQ      #2,R0
    00000050 8B02                   BF          L1154
    00000052              L1156:                            
      multiply.c    16            if (isnum(stack[tos - 2]) && isnum(stack[tos - 1]))
      multiply.c    17                    multiply_numbers();
    00000052 D22B                   MOV.L       L1544+22,R2; _multiply_numbers
    00000054 422B                   JMP         @R2
    00000056 4F26                   LDS.L       @R15+,PR
    00000058              L1154:                            
      multiply.c    18            else {
      multiply.c    19                    save();
    00000058 D22A                   MOV.L       L1544+26,R2; _save
    0000005A 420B                   JSR         @R2
    0000005C 0009                   NOP
      multiply.c    20                    yymultiply();
    0000005E B003                   BSR         _yymultiply
    00000060 0009                   NOP
      multiply.c    21                    restore();
    00000062 D229                   MOV.L       L1544+30,R2; _restore
    00000064 422B                   JMP         @R2
    00000066 4F26                   LDS.L       @R15+,PR
      multiply.c    22            }
      multiply.c    23    }
      multiply.c    24    
      multiply.c    25    void
      multiply.c    26    yymultiply(void)
    00000068              _yymultiply:                     ; function: yymultiply
                                                           ; frame size=40
    00000068 2FE6                   MOV.L       R14,@-R15
    0000006A 2FD6                   MOV.L       R13,@-R15
    0000006C 2FC6                   MOV.L       R12,@-R15
    0000006E 2FB6                   MOV.L       R11,@-R15
    00000070 2FA6                   MOV.L       R10,@-R15
    00000072 2F96                   MOV.L       R9,@-R15
    00000074 2F86                   MOV.L       R8,@-R15
    00000076 4F22                   STS.L       PR,@-R15
    00000078 D824                   MOV.L       L1544+34,R8; _pop
    0000007A 7FF8                   ADD         #-8,R15
    0000007C D91E                   MOV.L       L1544+14,R9; _tos
    0000007E DB24                   MOV.L       L1544+38,R11; _symtab
    00000080 DC24                   MOV.L       L1544+42,R12; _push
    00000082 DD25                   MOV.L       L1544+46,R13; _p2
    00000084 DE25                   MOV.L       L1544+50,R14; _p1
      multiply.c    27    {
      multiply.c    28            int h, i, n;
      multiply.c    29    
      multiply.c    30            // pop operands
      multiply.c    31    
      multiply.c    32            p2 = pop();
    00000086 480B                   JSR         @R8
    00000088 0009                   NOP
      multiply.c    33            p1 = pop();
    0000008A 480B                   JSR         @R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000008C 2D02                   MOV.L       R0,@R13
    0000008E 2E02                   MOV.L       R0,@R14
      multiply.c    34    
      multiply.c    35            h = tos;
    00000090 6A92                   MOV.L       @R9,R10
      multiply.c    36    
      multiply.c    37            // is either operand zero?
      multiply.c    38    
      multiply.c    39            if (iszero(p1) || iszero(p2)) {
    00000092 D323                   MOV.L       L1544+54,R3; _iszero
    00000094 430B                   JSR         @R3
    00000096 6403                   MOV         R0,R4
    00000098 2008                   TST         R0,R0
    0000009A 8B05                   BF          L1159
    0000009C D31E                   MOV.L       L1544+46,R3; _p2
    0000009E D220                   MOV.L       L1544+54,R2; _iszero
    000000A0 420B                   JSR         @R2
    000000A2 6432                   MOV.L       @R3,R4
    000000A4 2008                   TST         R0,R0
    000000A6 8902                   BT          L1158
    000000A8              L1159:                            
      multiply.c    40                    push(zero);
    000000A8 D21E                   MOV.L       L1544+58,R2; _zero
      multiply.c    41                    return;
    000000AA A3F6                   BRA         L1542
    000000AC 6422                   MOV.L       @R2,R4
    000000AE              L1158:                            
    000000AE D31E                   MOV.L       L1544+62,R3; _expanding
    000000B0 6432                   MOV.L       @R3,R4
    000000B2 2448                   TST         R4,R4
    000000B4 8B01                   BF          L1545
    000000B6 A0BE                   BRA         L1172
    000000B8 0009                   NOP
    000000BA              L1545:                            
    000000BA D118                   MOV.L       L1544+50,R1; _p1
    000000BC 6212                   MOV.L       @R1,R2
    000000BE 8428                   MOV.B       @(8,R2),R0
    000000C0 2008                   TST         R0,R0
    000000C2 8B02                   BF          L1162
    000000C4 6212                   MOV.L       @R1,R2
    000000C6 A004                   BRA         L1163
    000000C8 6122                   MOV.L       @R2,R1
    000000CA              L1162:                            
    000000CA 920E                   MOV.W       L1544,R2   ; H'0570
    000000CC D010                   MOV.L       L1544+38,R0; _symtab
    000000CE 6102                   MOV.L       @R0,R1
    000000D0 312C                   ADD         R2,R1
    000000D2              L1163:                            
    000000D2 D20F                   MOV.L       L1544+38,R2; _symtab
    000000D4 6322                   MOV.L       @R2,R3
    000000D6 730C                   ADD         #12,R3
    000000D8 3130                   CMP/EQ      R3,R1
    000000DA 8B57                   BF          L1161
      multiply.c    42            }
      multiply.c    43    
      multiply.c    44            // is either operand a sum?
      multiply.c    45    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      multiply.c    46            if (expanding && isadd(p1)) {
      multiply.c    47                    p1 = cdr(p1);
    000000DC 63E2                   MOV.L       @R14,R3
    000000DE 8438                   MOV.B       @(8,R3),R0
    000000E0 2008                   TST         R0,R0
    000000E2 8B23                   BF          L1164
    000000E4 62E2                   MOV.L       @R14,R2
    000000E6 A025                   BRA         L1165
    000000E8 5221                   MOV.L       @(4,R2),R2
    000000EA              L1544:                            
    000000EA 0570                   .DATA.W     H'0570
    000000EC <00000000>             .DATA.L     _esc_flag
    000000F0 <00000000>             .DATA.L     L1062
    000000F4 <00000000>             .DATA.L     _stop
    000000F8 <00000000>             .DATA.L     _tos
    000000FC <00000000>             .DATA.L     _stack
    00000100 <00000000>             .DATA.L     _multiply_numbers
    00000104 <00000000>             .DATA.L     _save
    00000108 <00000000>             .DATA.L     _restore
    0000010C <00000000>             .DATA.L     _pop
    00000110 <00000000>             .DATA.L     _symtab
    00000114 <00000000>             .DATA.L     _push
    00000118 <00000000>             .DATA.L     _p2
    0000011C <00000000>             .DATA.L     _p1
    00000120 <00000000>             .DATA.L     _iszero
    00000124 <00000000>             .DATA.L     _zero
    00000128 <00000000>             .DATA.L     _expanding
    0000012C              L1164:                            
    0000012C 936E                   MOV.W       L1546,R3   ; H'0570
    0000012E D138                   MOV.L       L1546+4,R1 ; _symtab
    00000130 6212                   MOV.L       @R1,R2
    00000132 323C                   ADD         R3,R2
    00000134              L1165:                            
    00000134 2E22                   MOV.L       R2,@R14
      multiply.c    48                    push(zero);
    00000136 D337                   MOV.L       L1546+8,R3 ; _zero
    00000138 4C0B                   JSR         @R12
    0000013A 6432                   MOV.L       @R3,R4
      multiply.c    49                    while (iscons(p1)) {
    0000013C A020                   BRA         L1166
    0000013E 0009                   NOP
    00000140              L1167:                            
      multiply.c    50                            push(car(p1));
    00000140 64E2                   MOV.L       @R14,R4
    00000142 8448                   MOV.B       @(8,R4),R0
    00000144 2008                   TST         R0,R0
    00000146 8B02                   BF          L1168
    00000148 64E2                   MOV.L       @R14,R4
    0000014A A004                   BRA         L1169
    0000014C 6442                   MOV.L       @R4,R4
    0000014E              L1168:                            
    0000014E 935D                   MOV.W       L1546,R3   ; H'0570
    00000150 D22F                   MOV.L       L1546+4,R2 ; _symtab
    00000152 6422                   MOV.L       @R2,R4
    00000154 343C                   ADD         R3,R4
    00000156              L1169:                            
    00000156 4C0B                   JSR         @R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000158 0009                   NOP
      multiply.c    51                            push(p2);
    0000015A 4C0B                   JSR         @R12
    0000015C 64D2                   MOV.L       @R13,R4
      multiply.c    52                            multiply();
    0000015E BF4F                   BSR         _multiply
    00000160 0009                   NOP
      multiply.c    53                            add();
    00000162 D22D                   MOV.L       L1546+12,R2; _add
    00000164 420B                   JSR         @R2
    00000166 0009                   NOP
      multiply.c    54                            p1 = cdr(p1);
    00000168 62E2                   MOV.L       @R14,R2
    0000016A 8428                   MOV.B       @(8,R2),R0
    0000016C 2008                   TST         R0,R0
    0000016E 8B02                   BF          L1170
    00000170 62E2                   MOV.L       @R14,R2
    00000172 A004                   BRA         L1171
    00000174 5321                   MOV.L       @(4,R2),R3
    00000176              L1170:                            
    00000176 9249                   MOV.W       L1546,R2   ; H'0570
    00000178 D125                   MOV.L       L1546+4,R1 ; _symtab
    0000017A 6312                   MOV.L       @R1,R3
    0000017C 332C                   ADD         R2,R3
    0000017E              L1171:                            
    0000017E 2E32                   MOV.L       R3,@R14
    00000180              L1166:                            
    00000180 62E2                   MOV.L       @R14,R2
    00000182 8428                   MOV.B       @(8,R2),R0
    00000184 2008                   TST         R0,R0
    00000186 89DB                   BT          L1167
      multiply.c    55                    }
      multiply.c    56                    return;
    00000188 A3B6                   BRA         L1160
    0000018A 0009                   NOP
    0000018C              L1161:                            
      multiply.c    57            }
      multiply.c    58    
      multiply.c    59            if (expanding && isadd(p2)) {
    0000018C 2448                   TST         R4,R4
    0000018E 8952                   BT          L1172
    00000190 D322                   MOV.L       L1546+16,R3; _p2
    00000192 6232                   MOV.L       @R3,R2
    00000194 8428                   MOV.B       @(8,R2),R0
    00000196 2008                   TST         R0,R0
    00000198 8B03                   BF          L1173
    0000019A 6132                   MOV.L       @R3,R1
    0000019C 6312                   MOV.L       @R1,R3
    0000019E A004                   BRA         L1174
    000001A0 0009                   NOP
    000001A2              L1173:                            
    000001A2 9233                   MOV.W       L1546,R2   ; H'0570
    000001A4 D01A                   MOV.L       L1546+4,R0 ; _symtab
    000001A6 6302                   MOV.L       @R0,R3
    000001A8 332C                   ADD         R2,R3
    000001AA              L1174:                            
    000001AA D119                   MOV.L       L1546+4,R1 ; _symtab




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001AC 6212                   MOV.L       @R1,R2
    000001AE 720C                   ADD         #12,R2
    000001B0 3320                   CMP/EQ      R2,R3
    000001B2 8B40                   BF          L1172
      multiply.c    60                    p2 = cdr(p2);
    000001B4 63D2                   MOV.L       @R13,R3
    000001B6 8438                   MOV.B       @(8,R3),R0
    000001B8 2008                   TST         R0,R0
    000001BA 8B02                   BF          L1175
    000001BC 62D2                   MOV.L       @R13,R2
    000001BE A004                   BRA         L1176
    000001C0 5221                   MOV.L       @(4,R2),R2
    000001C2              L1175:                            
    000001C2 9323                   MOV.W       L1546,R3   ; H'0570
    000001C4 D112                   MOV.L       L1546+4,R1 ; _symtab
    000001C6 6212                   MOV.L       @R1,R2
    000001C8 323C                   ADD         R3,R2
    000001CA              L1176:                            
    000001CA 2D22                   MOV.L       R2,@R13
      multiply.c    61                    push(zero);
    000001CC D311                   MOV.L       L1546+8,R3 ; _zero
    000001CE 4C0B                   JSR         @R12
    000001D0 6432                   MOV.L       @R3,R4
      multiply.c    62                    while (iscons(p2)) {
    000001D2 A02A                   BRA         L1177
    000001D4 0009                   NOP
    000001D6              L1178:                            
      multiply.c    63                            push(p1);
    000001D6 4C0B                   JSR         @R12
    000001D8 64E2                   MOV.L       @R14,R4
      multiply.c    64                            push(car(p2));
    000001DA 64D2                   MOV.L       @R13,R4
    000001DC 8448                   MOV.B       @(8,R4),R0
    000001DE 2008                   TST         R0,R0
    000001E0 8B02                   BF          L1179
    000001E2 64D2                   MOV.L       @R13,R4
    000001E4 A004                   BRA         L1180
    000001E6 6442                   MOV.L       @R4,R4
    000001E8              L1179:                            
    000001E8 9310                   MOV.W       L1546,R3   ; H'0570
    000001EA D209                   MOV.L       L1546+4,R2 ; _symtab
    000001EC 6422                   MOV.L       @R2,R4
    000001EE 343C                   ADD         R3,R4
    000001F0              L1180:                            
    000001F0 4C0B                   JSR         @R12
    000001F2 0009                   NOP
      multiply.c    65                            multiply();
    000001F4 BF04                   BSR         _multiply
    000001F6 0009                   NOP
      multiply.c    66                            add();
    000001F8 D207                   MOV.L       L1546+12,R2; _add
    000001FA 420B                   JSR         @R2
    000001FC 0009                   NOP
      multiply.c    67                            p2 = cdr(p2);
    000001FE 62D2                   MOV.L       @R13,R2
    00000200 8428                   MOV.B       @(8,R2),R0
    00000202 2008                   TST         R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000204 8B0C                   BF          L1181
    00000206 62D2                   MOV.L       @R13,R2
    00000208 A00E                   BRA         L1182
    0000020A 5321                   MOV.L       @(4,R2),R3
    0000020C              L1546:                            
    0000020C 0570                   .DATA.W     H'0570
    0000020E 0000                   .DATA.W     0
    00000210 <00000000>             .DATA.L     _symtab
    00000214 <00000000>             .DATA.L     _zero
    00000218 <00000000>             .DATA.L     _add
    0000021C <00000000>             .DATA.L     _p2
    00000220              L1181:                            
    00000220 9279                   MOV.W       L1547,R2   ; H'0570
    00000222 D13E                   MOV.L       L1547+6,R1 ; _symtab
    00000224 6312                   MOV.L       @R1,R3
    00000226 332C                   ADD         R2,R3
    00000228              L1182:                            
    00000228 2D32                   MOV.L       R3,@R13
    0000022A              L1177:                            
    0000022A 62D2                   MOV.L       @R13,R2
    0000022C 8428                   MOV.B       @(8,R2),R0
    0000022E 2008                   TST         R0,R0
    00000230 89D1                   BT          L1178
      multiply.c    68                    }
      multiply.c    69                    return;
    00000232 A361                   BRA         L1160
    00000234 0009                   NOP
    00000236              L1172:                            
      multiply.c    70            }
      multiply.c    71    
      multiply.c    72            // scalar times tensor?
      multiply.c    73    
      multiply.c    74            if (!istensor(p1) && istensor(p2)) {
    00000236 60E2                   MOV.L       @R14,R0
    00000238 8408                   MOV.B       @(8,R0),R0
    0000023A 600C                   EXTU.B      R0,R0
    0000023C 8804                   CMP/EQ      #4,R0
    0000023E 8914                   BT          L1183
    00000240 D337                   MOV.L       L1547+10,R3; _p2
    00000242 6032                   MOV.L       @R3,R0
    00000244 8408                   MOV.B       @(8,R0),R0
    00000246 600C                   EXTU.B      R0,R0
    00000248 8804                   CMP/EQ      #4,R0
    0000024A 8B0E                   BF          L1183
      multiply.c    75                    push(p1);
    0000024C 4C0B                   JSR         @R12
    0000024E 64E2                   MOV.L       @R14,R4
      multiply.c    76                    push(p2);
    00000250 4C0B                   JSR         @R12
    00000252 64D2                   MOV.L       @R13,R4
      multiply.c    77                    scalar_times_tensor();
    00000254 D333                   MOV.L       L1547+14,R3; _scalar_times_tensor
    00000256 7F08                   ADD         #8,R15
    00000258 4F26                   LDS.L       @R15+,PR
    0000025A 68F6                   MOV.L       @R15+,R8
    0000025C 69F6                   MOV.L       @R15+,R9
    0000025E 6AF6                   MOV.L       @R15+,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000260 6BF6                   MOV.L       @R15+,R11
    00000262 6CF6                   MOV.L       @R15+,R12
    00000264 6DF6                   MOV.L       @R15+,R13
    00000266 432B                   JMP         @R3
    00000268 6EF6                   MOV.L       @R15+,R14
    0000026A              L1183:                            
      multiply.c    78                    return;
      multiply.c    79            }
      multiply.c    80    
      multiply.c    81            // tensor times scalar?
      multiply.c    82    
      multiply.c    83            if (istensor(p1) && !istensor(p2)) {
    0000026A 60E2                   MOV.L       @R14,R0
    0000026C 8408                   MOV.B       @(8,R0),R0
    0000026E 600C                   EXTU.B      R0,R0
    00000270 8804                   CMP/EQ      #4,R0
    00000272 8B14                   BF          L1184
    00000274 D32A                   MOV.L       L1547+10,R3; _p2
    00000276 6032                   MOV.L       @R3,R0
    00000278 8408                   MOV.B       @(8,R0),R0
    0000027A 600C                   EXTU.B      R0,R0
    0000027C 8804                   CMP/EQ      #4,R0
    0000027E 890E                   BT          L1184
      multiply.c    84                    push(p1);
    00000280 4C0B                   JSR         @R12
    00000282 64E2                   MOV.L       @R14,R4
      multiply.c    85                    push(p2);
    00000284 4C0B                   JSR         @R12
    00000286 64D2                   MOV.L       @R13,R4
      multiply.c    86                    tensor_times_scalar();
    00000288 D327                   MOV.L       L1547+18,R3; _tensor_times_scalar
    0000028A 7F08                   ADD         #8,R15
    0000028C 4F26                   LDS.L       @R15+,PR
    0000028E 68F6                   MOV.L       @R15+,R8
    00000290 69F6                   MOV.L       @R15+,R9
    00000292 6AF6                   MOV.L       @R15+,R10
    00000294 6BF6                   MOV.L       @R15+,R11
    00000296 6CF6                   MOV.L       @R15+,R12
    00000298 6DF6                   MOV.L       @R15+,R13
    0000029A 432B                   JMP         @R3
    0000029C 6EF6                   MOV.L       @R15+,R14
    0000029E              L1184:                            
      multiply.c    87                    return;
      multiply.c    88            }
      multiply.c    89    
      multiply.c    90            // adjust operands
      multiply.c    91    
      multiply.c    92            if (car(p1) == symbol(MULTIPLY))
    0000029E 63E2                   MOV.L       @R14,R3
    000002A0 8438                   MOV.B       @(8,R3),R0
    000002A2 2008                   TST         R0,R0
    000002A4 8B02                   BF          L1186
    000002A6 62E2                   MOV.L       @R14,R2
    000002A8 A004                   BRA         L1187
    000002AA 6222                   MOV.L       @R2,R2
    000002AC              L1186:                            
    000002AC 9333                   MOV.W       L1547,R3   ; H'0570




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002AE D11B                   MOV.L       L1547+6,R1 ; _symtab
    000002B0 6212                   MOV.L       @R1,R2
    000002B2 323C                   ADD         R3,R2
    000002B4              L1187:                            
    000002B4 9330                   MOV.W       L1547+2,R3 ; H'0384
    000002B6 60B2                   MOV.L       @R11,R0
    000002B8 303C                   ADD         R3,R0
    000002BA 3200                   CMP/EQ      R0,R2
    000002BC 8B0C                   BF          L1185
      multiply.c    93                    p1 = cdr(p1);
    000002BE 62E2                   MOV.L       @R14,R2
    000002C0 8428                   MOV.B       @(8,R2),R0
    000002C2 2008                   TST         R0,R0
    000002C4 8B02                   BF          L1188
    000002C6 61E2                   MOV.L       @R14,R1
    000002C8 A004                   BRA         L1189
    000002CA 5111                   MOV.L       @(4,R1),R1
    000002CC              L1188:                            
    000002CC 9223                   MOV.W       L1547,R2   ; H'0570
    000002CE D013                   MOV.L       L1547+6,R0 ; _symtab
    000002D0 6102                   MOV.L       @R0,R1
    000002D2 312C                   ADD         R2,R1
    000002D4              L1189:                            
    000002D4 A008                   BRA         L1190
    000002D6 2E12                   MOV.L       R1,@R14
    000002D8              L1185:                            
      multiply.c    94            else {
      multiply.c    95                    push(p1);
    000002D8 4C0B                   JSR         @R12
    000002DA 64E2                   MOV.L       @R14,R4
      multiply.c    96                    list(1);
    000002DC D313                   MOV.L       L1547+22,R3; _list
    000002DE 430B                   JSR         @R3
    000002E0 E401                   MOV         #1,R4
      multiply.c    97                    p1 = pop();
    000002E2 480B                   JSR         @R8
    000002E4 0009                   NOP
    000002E6 2E02                   MOV.L       R0,@R14
    000002E8              L1190:                            
      multiply.c    98            }
      multiply.c    99    
      multiply.c   100            if (car(p2) == symbol(MULTIPLY))
    000002E8 63D2                   MOV.L       @R13,R3
    000002EA 8438                   MOV.B       @(8,R3),R0
    000002EC 2008                   TST         R0,R0
    000002EE 8B02                   BF          L1192
    000002F0 62D2                   MOV.L       @R13,R2
    000002F2 A004                   BRA         L1193
    000002F4 6222                   MOV.L       @R2,R2
    000002F6              L1192:                            
    000002F6 930E                   MOV.W       L1547,R3   ; H'0570
    000002F8 D108                   MOV.L       L1547+6,R1 ; _symtab
    000002FA 6212                   MOV.L       @R1,R2
    000002FC 323C                   ADD         R3,R2
    000002FE              L1193:                            
    000002FE 930B                   MOV.W       L1547+2,R3 ; H'0384
    00000300 60B2                   MOV.L       @R11,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000302 303C                   ADD         R3,R0
    00000304 3200                   CMP/EQ      R0,R2
    00000306 8B19                   BF          L1191
      multiply.c   101                    p2 = cdr(p2);
    00000308 62D2                   MOV.L       @R13,R2
    0000030A 8428                   MOV.B       @(8,R2),R0
    0000030C 2008                   TST         R0,R0
    0000030E 8B0F                   BF          L1194
    00000310 61D2                   MOV.L       @R13,R1
    00000312 A011                   BRA         L1195
    00000314 5111                   MOV.L       @(4,R1),R1
    00000316              L1547:                            
    00000316 0570                   .DATA.W     H'0570
    00000318 0384                   .DATA.W     H'0384
    0000031A 0000                   .DATA.W     0
    0000031C <00000000>             .DATA.L     _symtab
    00000320 <00000000>             .DATA.L     _p2
    00000324 <00000000>             .DATA.L     _scalar_times_tensor
    00000328 <00000000>             .DATA.L     _tensor_times_scalar
    0000032C <00000000>             .DATA.L     _list
    00000330              L1194:                            
    00000330 925F                   MOV.W       L1548,R2   ; H'0570
    00000332 D030                   MOV.L       L1548+2,R0 ; _symtab
    00000334 6102                   MOV.L       @R0,R1
    00000336 312C                   ADD         R2,R1
    00000338              L1195:                            
    00000338 A008                   BRA         L1196
    0000033A 2D12                   MOV.L       R1,@R13
    0000033C              L1191:                            
      multiply.c   102            else {
      multiply.c   103                    push(p2);
    0000033C 4C0B                   JSR         @R12
    0000033E 64D2                   MOV.L       @R13,R4
      multiply.c   104                    list(1);
    00000340 D32D                   MOV.L       L1548+6,R3 ; _list
    00000342 430B                   JSR         @R3
    00000344 E401                   MOV         #1,R4
      multiply.c   105                    p2 = pop();
    00000346 480B                   JSR         @R8
    00000348 0009                   NOP
    0000034A 2D02                   MOV.L       R0,@R13
    0000034C              L1196:                            
      multiply.c   106            }
      multiply.c   107    
      multiply.c   108            // handle numerical coefficients
      multiply.c   109    
      multiply.c   110            if (isnum(car(p1)) && isnum(car(p2))) {
    0000034C 60E2                   MOV.L       @R14,R0
    0000034E 8408                   MOV.B       @(8,R0),R0
    00000350 2008                   TST         R0,R0
    00000352 8B02                   BF          L1199
    00000354 60E2                   MOV.L       @R14,R0
    00000356 A004                   BRA         L1204
    00000358 6002                   MOV.L       @R0,R0
    0000035A              L1199:                            
    0000035A 934A                   MOV.W       L1548,R3   ; H'0570
    0000035C D225                   MOV.L       L1548+2,R2 ; _symtab




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000035E 6022                   MOV.L       @R2,R0
    00000360 303C                   ADD         R3,R0
    00000362              L1204:                            
    00000362 8408                   MOV.B       @(8,R0),R0
    00000364 600C                   EXTU.B      R0,R0
    00000366 8801                   CMP/EQ      #1,R0
    00000368 890E                   BT          L1198
    0000036A 60E2                   MOV.L       @R14,R0
    0000036C 8408                   MOV.B       @(8,R0),R0
    0000036E 2008                   TST         R0,R0
    00000370 8B02                   BF          L1200
    00000372 60E2                   MOV.L       @R14,R0
    00000374 A004                   BRA         L1205
    00000376 6002                   MOV.L       @R0,R0
    00000378              L1200:                            
    00000378 933B                   MOV.W       L1548,R3   ; H'0570
    0000037A D21E                   MOV.L       L1548+2,R2 ; _symtab
    0000037C 6022                   MOV.L       @R2,R0
    0000037E 303C                   ADD         R3,R0
    00000380              L1205:                            
    00000380 8408                   MOV.B       @(8,R0),R0
    00000382 600C                   EXTU.B      R0,R0
    00000384 8802                   CMP/EQ      #2,R0
    00000386 8B51                   BF          L1197
    00000388              L1198:                            
    00000388 D31C                   MOV.L       L1548+10,R3; _p2
    0000038A 6032                   MOV.L       @R3,R0
    0000038C 8408                   MOV.B       @(8,R0),R0
    0000038E 2008                   TST         R0,R0
    00000390 8B02                   BF          L1202
    00000392 6032                   MOV.L       @R3,R0
    00000394 A004                   BRA         L1206
    00000396 6002                   MOV.L       @R0,R0
    00000398              L1202:                            
    00000398 922B                   MOV.W       L1548,R2   ; H'0570
    0000039A D116                   MOV.L       L1548+2,R1 ; _symtab
    0000039C 6012                   MOV.L       @R1,R0
    0000039E 302C                   ADD         R2,R0
    000003A0              L1206:                            
    000003A0 8408                   MOV.B       @(8,R0),R0
    000003A2 600C                   EXTU.B      R0,R0
    000003A4 8801                   CMP/EQ      #1,R0
    000003A6 8910                   BT          L1201
    000003A8 D314                   MOV.L       L1548+10,R3; _p2
    000003AA 6032                   MOV.L       @R3,R0
    000003AC 8408                   MOV.B       @(8,R0),R0
    000003AE 2008                   TST         R0,R0
    000003B0 8B03                   BF          L1203
    000003B2 D312                   MOV.L       L1548+10,R3; _p2
    000003B4 6032                   MOV.L       @R3,R0
    000003B6 A004                   BRA         L1207
    000003B8 6002                   MOV.L       @R0,R0
    000003BA              L1203:                            
    000003BA 931A                   MOV.W       L1548,R3   ; H'0570
    000003BC D20D                   MOV.L       L1548+2,R2 ; _symtab
    000003BE 6022                   MOV.L       @R2,R0
    000003C0 303C                   ADD         R3,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003C2              L1207:                            
    000003C2 8408                   MOV.B       @(8,R0),R0
    000003C4 600C                   EXTU.B      R0,R0
    000003C6 8802                   CMP/EQ      #2,R0
    000003C8 8B30                   BF          L1197
    000003CA              L1201:                            
      multiply.c   111                    push(car(p1));
    000003CA 64E2                   MOV.L       @R14,R4
    000003CC 8448                   MOV.B       @(8,R4),R0
    000003CE 2008                   TST         R0,R0
    000003D0 8B02                   BF          L1208
    000003D2 64E2                   MOV.L       @R14,R4
    000003D4 A004                   BRA         L1209
    000003D6 6442                   MOV.L       @R4,R4
    000003D8              L1208:                            
    000003D8 930B                   MOV.W       L1548,R3   ; H'0570
    000003DA D206                   MOV.L       L1548+2,R2 ; _symtab
    000003DC 6422                   MOV.L       @R2,R4
    000003DE 343C                   ADD         R3,R4
    000003E0              L1209:                            
    000003E0 4C0B                   JSR         @R12
    000003E2 0009                   NOP
      multiply.c   112                    push(car(p2));
    000003E4 64D2                   MOV.L       @R13,R4
    000003E6 8448                   MOV.B       @(8,R4),R0
    000003E8 2008                   TST         R0,R0
    000003EA 8B09                   BF          L1210
    000003EC 64D2                   MOV.L       @R13,R4
    000003EE A00B                   BRA         L1211
    000003F0 6442                   MOV.L       @R4,R4
    000003F2              L1548:                            
    000003F2 0570                   .DATA.W     H'0570
    000003F4 <00000000>             .DATA.L     _symtab
    000003F8 <00000000>             .DATA.L     _list
    000003FC <00000000>             .DATA.L     _p2
    00000400              L1210:                            
    00000400 9362                   MOV.W       L1549,R3   ; H'0570
    00000402 D232                   MOV.L       L1549+4,R2 ; _symtab
    00000404 6422                   MOV.L       @R2,R4
    00000406 343C                   ADD         R3,R4
    00000408              L1211:                            
    00000408 4C0B                   JSR         @R12
    0000040A 0009                   NOP
      multiply.c   113                    multiply_numbers();
    0000040C D330                   MOV.L       L1549+8,R3 ; _multiply_numbers
    0000040E 430B                   JSR         @R3
    00000410 0009                   NOP
      multiply.c   114                    p1 = cdr(p1);
    00000412 63E2                   MOV.L       @R14,R3
    00000414 8438                   MOV.B       @(8,R3),R0
    00000416 2008                   TST         R0,R0
    00000418 8B02                   BF          L1212
    0000041A 62E2                   MOV.L       @R14,R2
    0000041C A004                   BRA         L1213
    0000041E 5221                   MOV.L       @(4,R2),R2
    00000420              L1212:                            
    00000420 9352                   MOV.W       L1549,R3   ; H'0570




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000422 D12A                   MOV.L       L1549+4,R1 ; _symtab
    00000424 6212                   MOV.L       @R1,R2
    00000426 323C                   ADD         R3,R2
    00000428              L1213:                            
    00000428 A069                   BRA         L1136
    0000042A 2E22                   MOV.L       R2,@R14
    0000042C              L1197:                            
      multiply.c   115                    p2 = cdr(p2);
      multiply.c   116            } else if (isnum(car(p1))) {
    0000042C 60E2                   MOV.L       @R14,R0
    0000042E 8408                   MOV.B       @(8,R0),R0
    00000430 2008                   TST         R0,R0
    00000432 8B02                   BF          L1217
    00000434 60E2                   MOV.L       @R14,R0
    00000436 A004                   BRA         L1219
    00000438 6002                   MOV.L       @R0,R0
    0000043A              L1217:                            
    0000043A 9345                   MOV.W       L1549,R3   ; H'0570
    0000043C D223                   MOV.L       L1549+4,R2 ; _symtab
    0000043E 6022                   MOV.L       @R2,R0
    00000440 303C                   ADD         R3,R0
    00000442              L1219:                            
    00000442 8408                   MOV.B       @(8,R0),R0
    00000444 600C                   EXTU.B      R0,R0
    00000446 8801                   CMP/EQ      #1,R0
    00000448 890E                   BT          L1216
    0000044A 60E2                   MOV.L       @R14,R0
    0000044C 8408                   MOV.B       @(8,R0),R0
    0000044E 2008                   TST         R0,R0
    00000450 8B02                   BF          L1218
    00000452 60E2                   MOV.L       @R14,R0
    00000454 A004                   BRA         L1220
    00000456 6002                   MOV.L       @R0,R0
    00000458              L1218:                            
    00000458 9336                   MOV.W       L1549,R3   ; H'0570
    0000045A D21C                   MOV.L       L1549+4,R2 ; _symtab
    0000045C 6022                   MOV.L       @R2,R0
    0000045E 303C                   ADD         R3,R0
    00000460              L1220:                            
    00000460 8408                   MOV.B       @(8,R0),R0
    00000462 600C                   EXTU.B      R0,R0
    00000464 8802                   CMP/EQ      #2,R0
    00000466 8B19                   BF          L1215
    00000468              L1216:                            
      multiply.c   117                    push(car(p1));
    00000468 64E2                   MOV.L       @R14,R4
    0000046A 8448                   MOV.B       @(8,R4),R0
    0000046C 2008                   TST         R0,R0
    0000046E 8B02                   BF          L1221
    00000470 64E2                   MOV.L       @R14,R4
    00000472 A004                   BRA         L1222
    00000474 6442                   MOV.L       @R4,R4
    00000476              L1221:                            
    00000476 9327                   MOV.W       L1549,R3   ; H'0570
    00000478 D214                   MOV.L       L1549+4,R2 ; _symtab
    0000047A 6422                   MOV.L       @R2,R4
    0000047C 343C                   ADD         R3,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000047E              L1222:                            
    0000047E 4C0B                   JSR         @R12
    00000480 0009                   NOP
      multiply.c   118                    p1 = cdr(p1);
    00000482 62E2                   MOV.L       @R14,R2
    00000484 8428                   MOV.B       @(8,R2),R0
    00000486 2008                   TST         R0,R0
    00000488 8B02                   BF          L1223
    0000048A 62E2                   MOV.L       @R14,R2
    0000048C A004                   BRA         L1224
    0000048E 5321                   MOV.L       @(4,R2),R3
    00000490              L1223:                            
    00000490 921A                   MOV.W       L1549,R2   ; H'0570
    00000492 D10E                   MOV.L       L1549+4,R1 ; _symtab
    00000494 6312                   MOV.L       @R1,R3
    00000496 332C                   ADD         R2,R3
    00000498              L1224:                            
    00000498 A041                   BRA         L1214
    0000049A 2E32                   MOV.L       R3,@R14
    0000049C              L1215:                            
      multiply.c   119            } else if (isnum(car(p2))) {
    0000049C 60D2                   MOV.L       @R13,R0
    0000049E 8408                   MOV.B       @(8,R0),R0
    000004A0 2008                   TST         R0,R0
    000004A2 8B02                   BF          L1228
    000004A4 60D2                   MOV.L       @R13,R0
    000004A6 A004                   BRA         L1230
    000004A8 6002                   MOV.L       @R0,R0
    000004AA              L1228:                            
    000004AA 930D                   MOV.W       L1549,R3   ; H'0570
    000004AC D207                   MOV.L       L1549+4,R2 ; _symtab
    000004AE 6022                   MOV.L       @R2,R0
    000004B0 303C                   ADD         R3,R0
    000004B2              L1230:                            
    000004B2 8408                   MOV.B       @(8,R0),R0
    000004B4 600C                   EXTU.B      R0,R0
    000004B6 8801                   CMP/EQ      #1,R0
    000004B8 8914                   BT          L1227
    000004BA 60D2                   MOV.L       @R13,R0
    000004BC 8408                   MOV.B       @(8,R0),R0
    000004BE 2008                   TST         R0,R0
    000004C0 8B08                   BF          L1229
    000004C2 60D2                   MOV.L       @R13,R0
    000004C4 A00A                   BRA         L1231
    000004C6 6002                   MOV.L       @R0,R0
    000004C8              L1549:                            
    000004C8 0570                   .DATA.W     H'0570
    000004CA 0000                   .DATA.W     0
    000004CC <00000000>             .DATA.L     _symtab
    000004D0 <00000000>             .DATA.L     _multiply_numbers
    000004D4              L1229:                            
    000004D4 936A                   MOV.W       L1550,R3   ; H'0570
    000004D6 D236                   MOV.L       L1550+4,R2 ; _symtab
    000004D8 6022                   MOV.L       @R2,R0
    000004DA 303C                   ADD         R3,R0
    000004DC              L1231:                            
    000004DC 8408                   MOV.B       @(8,R0),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004DE 600C                   EXTU.B      R0,R0
    000004E0 8802                   CMP/EQ      #2,R0
    000004E2 8B19                   BF          L1226
    000004E4              L1227:                            
      multiply.c   120                    push(car(p2));
    000004E4 64D2                   MOV.L       @R13,R4
    000004E6 8448                   MOV.B       @(8,R4),R0
    000004E8 2008                   TST         R0,R0
    000004EA 8B02                   BF          L1232
    000004EC 64D2                   MOV.L       @R13,R4
    000004EE A004                   BRA         L1233
    000004F0 6442                   MOV.L       @R4,R4
    000004F2              L1232:                            
    000004F2 935B                   MOV.W       L1550,R3   ; H'0570
    000004F4 D22E                   MOV.L       L1550+4,R2 ; _symtab
    000004F6 6422                   MOV.L       @R2,R4
    000004F8 343C                   ADD         R3,R4
    000004FA              L1233:                            
    000004FA 4C0B                   JSR         @R12
    000004FC 0009                   NOP
    000004FE              L1136:
      multiply.c   121                    p2 = cdr(p2);
    000004FE 62D2                   MOV.L       @R13,R2
    00000500 8428                   MOV.B       @(8,R2),R0
    00000502 2008                   TST         R0,R0
    00000504 8B02                   BF          L1234
    00000506 62D2                   MOV.L       @R13,R2
    00000508 A004                   BRA         L1235
    0000050A 5321                   MOV.L       @(4,R2),R3
    0000050C              L1234:                            
    0000050C 924E                   MOV.W       L1550,R2   ; H'0570
    0000050E D128                   MOV.L       L1550+4,R1 ; _symtab
    00000510 6312                   MOV.L       @R1,R3
    00000512 332C                   ADD         R2,R3
    00000514              L1235:                            
    00000514 A003                   BRA         L1214
    00000516 2D32                   MOV.L       R3,@R13
    00000518              L1226:                            
      multiply.c   122            } else
      multiply.c   123                    push(one);
    00000518 D126                   MOV.L       L1550+8,R1 ; _one
    0000051A 4C0B                   JSR         @R12
    0000051C 6412                   MOV.L       @R1,R4
    0000051E              L1214:                            
      multiply.c   124    
      multiply.c   125            parse_p1();
    0000051E B1F5                   BSR         __$parse_p1
    00000520 0009                   NOP
      multiply.c   126            parse_p2();
    00000522 B29E                   BSR         __$parse_p2
    00000524 0009                   NOP
      multiply.c   127    
      multiply.c   128            while (iscons(p1) && iscons(p2)) {
    00000526 A111                   BRA         L1237
    00000528 0009                   NOP
    0000052A              L1238:                            
      multiply.c   129    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      multiply.c   130    //              if (car(p1)->gamma && car(p2)->gamma) {
      multiply.c   131    //                      combine_gammas(h);
      multiply.c   132    //                      p1 = cdr(p1);
      multiply.c   133    //                      p2 = cdr(p2);
      multiply.c   134    //                      parse_p1();
      multiply.c   135    //                      parse_p2();
      multiply.c   136    //                      continue;
      multiply.c   137    //              }
      multiply.c   138    
      multiply.c   139                    if (caar(p1) == symbol(OPERATOR) && caar(p2) == symbol(OPERATOR)) {
    0000052A 9540                   MOV.W       L1550+2,R5 ; H'03C0
    0000052C 62E2                   MOV.L       @R14,R2
    0000052E 8428                   MOV.B       @(8,R2),R0
    00000530 2008                   TST         R0,R0
    00000532 8B02                   BF          L1241
    00000534 62E2                   MOV.L       @R14,R2
    00000536 A004                   BRA         L1246
    00000538 6322                   MOV.L       @R2,R3
    0000053A              L1241:                            
    0000053A 9237                   MOV.W       L1550,R2   ; H'0570
    0000053C D11C                   MOV.L       L1550+4,R1 ; _symtab
    0000053E 6312                   MOV.L       @R1,R3
    00000540 332C                   ADD         R2,R3
    00000542              L1246:                            
    00000542 8438                   MOV.B       @(8,R3),R0
    00000544 2008                   TST         R0,R0
    00000546 8B0C                   BF          L1240
    00000548 63E2                   MOV.L       @R14,R3
    0000054A 8438                   MOV.B       @(8,R3),R0
    0000054C 2008                   TST         R0,R0
    0000054E 8B02                   BF          L1242
    00000550 62E2                   MOV.L       @R14,R2
    00000552 A004                   BRA         L1247
    00000554 6222                   MOV.L       @R2,R2
    00000556              L1242:                            
    00000556 9329                   MOV.W       L1550,R3   ; H'0570
    00000558 D115                   MOV.L       L1550+4,R1 ; _symtab
    0000055A 6212                   MOV.L       @R1,R2
    0000055C 323C                   ADD         R3,R2
    0000055E              L1247:                            
    0000055E A004                   BRA         L1248
    00000560 6222                   MOV.L       @R2,R2
    00000562              L1240:                            
    00000562 9323                   MOV.W       L1550,R3   ; H'0570
    00000564 D112                   MOV.L       L1550+4,R1 ; _symtab
    00000566 6212                   MOV.L       @R1,R2
    00000568 323C                   ADD         R3,R2
    0000056A              L1248:                            
    0000056A 64B2                   MOV.L       @R11,R4
    0000056C 345C                   ADD         R5,R4
    0000056E 3240                   CMP/EQ      R4,R2
    00000570 8B76                   BF          L1239
    00000572 D311                   MOV.L       L1550+12,R3; _p2
    00000574 6232                   MOV.L       @R3,R2
    00000576 8428                   MOV.B       @(8,R2),R0
    00000578 2008                   TST         R0,R0
    0000057A 8B03                   BF          L1244




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000057C 6132                   MOV.L       @R3,R1
    0000057E 6312                   MOV.L       @R1,R3
    00000580 A003                   BRA         L1249
    00000582 0009                   NOP
    00000584              L1244:                            
    00000584 9212                   MOV.W       L1550,R2   ; H'0570
    00000586 63B2                   MOV.L       @R11,R3
    00000588 332C                   ADD         R2,R3
    0000058A              L1249:                            
    0000058A 8438                   MOV.B       @(8,R3),R0
    0000058C 2008                   TST         R0,R0
    0000058E 8B15                   BF          L1243
    00000590 D209                   MOV.L       L1550+12,R2; _p2
    00000592 6322                   MOV.L       @R2,R3
    00000594 8438                   MOV.B       @(8,R3),R0
    00000596 2008                   TST         R0,R0
    00000598 8B03                   BF          L1245
    0000059A D307                   MOV.L       L1550+12,R3; _p2
    0000059C 6232                   MOV.L       @R3,R2
    0000059E A003                   BRA         L1250
    000005A0 6222                   MOV.L       @R2,R2
    000005A2              L1245:                            
    000005A2 9303                   MOV.W       L1550,R3   ; H'0570
    000005A4 62B2                   MOV.L       @R11,R2
    000005A6 323C                   ADD         R3,R2
    000005A8              L1250:                            
    000005A8 A00B                   BRA         L1251
    000005AA 6222                   MOV.L       @R2,R2
    000005AC              L1550:                            
    000005AC 0570                   .DATA.W     H'0570
    000005AE 03C0                   .DATA.W     H'03C0
    000005B0 <00000000>             .DATA.L     _symtab
    000005B4 <00000000>             .DATA.L     _one
    000005B8 <00000000>             .DATA.L     _p2
    000005BC              L1243:                            
    000005BC 9365                   MOV.W       L1551,R3   ; H'0570
    000005BE 62B2                   MOV.L       @R11,R2
    000005C0 323C                   ADD         R3,R2
    000005C2              L1251:                            
    000005C2 3240                   CMP/EQ      R4,R2
    000005C4 8B4C                   BF          L1239
      multiply.c   140                            push_symbol(OPERATOR);
    000005C6 D231                   MOV.L       L1551+2,R2 ; _push_symbol
    000005C8 420B                   JSR         @R2
    000005CA E450                   MOV         #80,R4
      multiply.c   141                            push(cdar(p1));
    000005CC 64E2                   MOV.L       @R14,R4
    000005CE 8448                   MOV.B       @(8,R4),R0
    000005D0 2008                   TST         R0,R0
    000005D2 8B02                   BF          L1253
    000005D4 64E2                   MOV.L       @R14,R4
    000005D6 A004                   BRA         L1255
    000005D8 6442                   MOV.L       @R4,R4
    000005DA              L1253:                            
    000005DA 9356                   MOV.W       L1551,R3   ; H'0570
    000005DC D22C                   MOV.L       L1551+6,R2 ; _symtab
    000005DE 6422                   MOV.L       @R2,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005E0 343C                   ADD         R3,R4
    000005E2              L1255:                            
    000005E2 8448                   MOV.B       @(8,R4),R0
    000005E4 2008                   TST         R0,R0
    000005E6 8B0C                   BF          L1252
    000005E8 64E2                   MOV.L       @R14,R4
    000005EA 8448                   MOV.B       @(8,R4),R0
    000005EC 2008                   TST         R0,R0
    000005EE 8B02                   BF          L1254
    000005F0 64E2                   MOV.L       @R14,R4
    000005F2 A004                   BRA         L1256
    000005F4 6442                   MOV.L       @R4,R4
    000005F6              L1254:                            
    000005F6 9348                   MOV.W       L1551,R3   ; H'0570
    000005F8 D225                   MOV.L       L1551+6,R2 ; _symtab
    000005FA 6422                   MOV.L       @R2,R4
    000005FC 343C                   ADD         R3,R4
    000005FE              L1256:                            
    000005FE A004                   BRA         L1257
    00000600 5441                   MOV.L       @(4,R4),R4
    00000602              L1252:                            
    00000602 9342                   MOV.W       L1551,R3   ; H'0570
    00000604 D222                   MOV.L       L1551+6,R2 ; _symtab
    00000606 6422                   MOV.L       @R2,R4
    00000608 343C                   ADD         R3,R4
    0000060A              L1257:                            
    0000060A 4C0B                   JSR         @R12
    0000060C 0009                   NOP
      multiply.c   142                            push(cdar(p2));
    0000060E 64D2                   MOV.L       @R13,R4
    00000610 8448                   MOV.B       @(8,R4),R0
    00000612 2008                   TST         R0,R0
    00000614 8B02                   BF          L1259
    00000616 64D2                   MOV.L       @R13,R4
    00000618 A004                   BRA         L1261
    0000061A 6442                   MOV.L       @R4,R4
    0000061C              L1259:                            
    0000061C 9335                   MOV.W       L1551,R3   ; H'0570
    0000061E D21C                   MOV.L       L1551+6,R2 ; _symtab
    00000620 6422                   MOV.L       @R2,R4
    00000622 343C                   ADD         R3,R4
    00000624              L1261:                            
    00000624 8448                   MOV.B       @(8,R4),R0
    00000626 2008                   TST         R0,R0
    00000628 8B0C                   BF          L1258
    0000062A 64D2                   MOV.L       @R13,R4
    0000062C 8448                   MOV.B       @(8,R4),R0
    0000062E 2008                   TST         R0,R0
    00000630 8B02                   BF          L1260
    00000632 64D2                   MOV.L       @R13,R4
    00000634 A004                   BRA         L1262
    00000636 6442                   MOV.L       @R4,R4
    00000638              L1260:                            
    00000638 9327                   MOV.W       L1551,R3   ; H'0570
    0000063A D215                   MOV.L       L1551+6,R2 ; _symtab
    0000063C 6422                   MOV.L       @R2,R4
    0000063E 343C                   ADD         R3,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000640              L1262:                            
    00000640 A004                   BRA         L1263
    00000642 5441                   MOV.L       @(4,R4),R4
    00000644              L1258:                            
    00000644 9321                   MOV.W       L1551,R3   ; H'0570
    00000646 D212                   MOV.L       L1551+6,R2 ; _symtab
    00000648 6422                   MOV.L       @R2,R4
    0000064A 343C                   ADD         R3,R4
    0000064C              L1263:                            
    0000064C 4C0B                   JSR         @R12
    0000064E 0009                   NOP
      multiply.c   143                            append();
    00000650 D310                   MOV.L       L1551+10,R3; _append
    00000652 430B                   JSR         @R3
    00000654 0009                   NOP
      multiply.c   144                            cons();
    00000656 D210                   MOV.L       L1551+14,R2; _cons
    00000658 420B                   JSR         @R2
    0000065A 0009                   NOP
    0000065C A055                   BRA         L1134
    0000065E 0009                   NOP
    00000660              L1239:                            
      multiply.c   145                            p1 = cdr(p1);
      multiply.c   146                            p2 = cdr(p2);
      multiply.c   147                            parse_p1();
      multiply.c   148                            parse_p2();
      multiply.c   149                            continue;
      multiply.c   150                    }
      multiply.c   151    
      multiply.c   152                    switch (cmp_expr(p3, p4)) {
    00000660 D20E                   MOV.L       L1551+18,R2; _p4
    00000662 6522                   MOV.L       @R2,R5
    00000664 D30E                   MOV.L       L1551+22,R3; _p3
    00000666 D10F                   MOV.L       L1551+26,R1; _cmp_expr
    00000668 410B                   JSR         @R1
    0000066A 6432                   MOV.L       @R3,R4
    0000066C 88FF                   CMP/EQ      #-1,R0
    0000066E 8905                   BT          L1142
    00000670 8801                   CMP/EQ      #1,R0
    00000672 892E                   BT          L1143
    00000674 8800                   CMP/EQ      #0,R0
    00000676 8946                   BT          L1144
    00000678 A064                   BRA         L1145
    0000067A 0009                   NOP
    0000067C              L1142:                           ; case label 
      multiply.c   153                    case -1:
      multiply.c   154                            push(car(p1));
    0000067C 64E2                   MOV.L       @R14,R4
    0000067E 8448                   MOV.B       @(8,R4),R0
    00000680 2008                   TST         R0,R0
    00000682 8B11                   BF          L1265
    00000684 64E2                   MOV.L       @R14,R4
    00000686 A013                   BRA         L1266
    00000688 6442                   MOV.L       @R4,R4
    0000068A              L1551:                            
    0000068A 0570                   .DATA.W     H'0570
    0000068C <00000000>             .DATA.L     _push_symbol




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000690 <00000000>             .DATA.L     _symtab
    00000694 <00000000>             .DATA.L     _append
    00000698 <00000000>             .DATA.L     _cons
    0000069C <00000000>             .DATA.L     _p4
    000006A0 <00000000>             .DATA.L     _p3
    000006A4 <00000000>             .DATA.L     _cmp_expr
    000006A8              L1265:                            
    000006A8 9364                   MOV.W       L1552,R3   ; H'0570
    000006AA D233                   MOV.L       L1552+4,R2 ; _symtab
    000006AC 6422                   MOV.L       @R2,R4
    000006AE 343C                   ADD         R3,R4
    000006B0              L1266:                            
    000006B0 4C0B                   JSR         @R12
    000006B2 0009                   NOP
      multiply.c   155                            p1 = cdr(p1);
    000006B4 62E2                   MOV.L       @R14,R2
    000006B6 8428                   MOV.B       @(8,R2),R0
    000006B8 2008                   TST         R0,R0
    000006BA 8B02                   BF          L1267
    000006BC 62E2                   MOV.L       @R14,R2
    000006BE A004                   BRA         L1268
    000006C0 5321                   MOV.L       @(4,R2),R3
    000006C2              L1267:                            
    000006C2 9257                   MOV.W       L1552,R2   ; H'0570
    000006C4 D12C                   MOV.L       L1552+4,R1 ; _symtab
    000006C6 6312                   MOV.L       @R1,R3
    000006C8 332C                   ADD         R2,R3
    000006CA              L1268:                            
      multiply.c   156                            parse_p1();
    000006CA B11F                   BSR         __$parse_p1
    000006CC 2E32                   MOV.L       R3,@R14
      multiply.c   157                            break;
    000006CE A03D                   BRA         L1237
    000006D0 0009                   NOP
    000006D2              L1143:                           ; case label 
      multiply.c   158                    case 1:
      multiply.c   159                            push(car(p2));
    000006D2 64D2                   MOV.L       @R13,R4
    000006D4 8448                   MOV.B       @(8,R4),R0
    000006D6 2008                   TST         R0,R0
    000006D8 8B02                   BF          L1269
    000006DA 64D2                   MOV.L       @R13,R4
    000006DC A004                   BRA         L1270
    000006DE 6442                   MOV.L       @R4,R4
    000006E0              L1269:                            
    000006E0 9348                   MOV.W       L1552,R3   ; H'0570
    000006E2 D225                   MOV.L       L1552+4,R2 ; _symtab
    000006E4 6422                   MOV.L       @R2,R4
    000006E6 343C                   ADD         R3,R4
    000006E8              L1270:                            
    000006E8 4C0B                   JSR         @R12
    000006EA 0009                   NOP
      multiply.c   160                            p2 = cdr(p2);
    000006EC 62D2                   MOV.L       @R13,R2
    000006EE 8428                   MOV.B       @(8,R2),R0
    000006F0 2008                   TST         R0,R0
    000006F2 8B02                   BF          L1271




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006F4 62D2                   MOV.L       @R13,R2
    000006F6 A004                   BRA         L1272
    000006F8 5321                   MOV.L       @(4,R2),R3
    000006FA              L1271:                            
    000006FA 923B                   MOV.W       L1552,R2   ; H'0570
    000006FC D11E                   MOV.L       L1552+4,R1 ; _symtab
    000006FE 6312                   MOV.L       @R1,R3
    00000700 332C                   ADD         R2,R3
    00000702              L1272:                            
    00000702 A01B                   BRA         L1135
    00000704 2D32                   MOV.L       R3,@R13
    00000706              L1144:                           ; case label 
      multiply.c   161                            parse_p2();
      multiply.c   162                            break;
      multiply.c   163                    case 0:
      multiply.c   164                            combine_factors(h);
    00000706 B247                   BSR         _combine_factors
    00000708 64A3                   MOV         R10,R4
    0000070A              L1134:
      multiply.c   165                            p1 = cdr(p1);
    0000070A 63E2                   MOV.L       @R14,R3
    0000070C 8438                   MOV.B       @(8,R3),R0
    0000070E 2008                   TST         R0,R0
    00000710 8B02                   BF          L1273
    00000712 62E2                   MOV.L       @R14,R2
    00000714 A004                   BRA         L1274
    00000716 5221                   MOV.L       @(4,R2),R2
    00000718              L1273:                            
    00000718 932C                   MOV.W       L1552,R3   ; H'0570
    0000071A D117                   MOV.L       L1552+4,R1 ; _symtab
    0000071C 6212                   MOV.L       @R1,R2
    0000071E 323C                   ADD         R3,R2
    00000720              L1274:                            
    00000720 2E22                   MOV.L       R2,@R14
      multiply.c   166                            p2 = cdr(p2);
    00000722 61D2                   MOV.L       @R13,R1
    00000724 8418                   MOV.B       @(8,R1),R0
    00000726 2008                   TST         R0,R0
    00000728 8B02                   BF          L1275
    0000072A 62D2                   MOV.L       @R13,R2
    0000072C A004                   BRA         L1276
    0000072E 5321                   MOV.L       @(4,R2),R3
    00000730              L1275:                            
    00000730 9220                   MOV.W       L1552,R2   ; H'0570
    00000732 D111                   MOV.L       L1552+4,R1 ; _symtab
    00000734 6312                   MOV.L       @R1,R3
    00000736 332C                   ADD         R2,R3
    00000738              L1276:                            
      multiply.c   167                            parse_p1();
    00000738 B0E8                   BSR         __$parse_p1
    0000073A 2D32                   MOV.L       R3,@R13
    0000073C              L1135:
      multiply.c   168                            parse_p2();
    0000073C B191                   BSR         __$parse_p2
    0000073E 0009                   NOP
      multiply.c   169                            break;
    00000740 A004                   BRA         L1237




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000742 0009                   NOP
    00000744              L1145:                           ; default label 
      multiply.c   170                    default:
      multiply.c   171                            stop("internal error 2");
    00000744 D40D                   MOV.L       L1552+8,R4 ; L1083
    00000746 D30E                   MOV.L       L1552+12,R3; _stop
    00000748 430B                   JSR         @R3
    0000074A 0009                   NOP
      multiply.c   172                            break;
    0000074C              L1237:                            
    0000074C 63E2                   MOV.L       @R14,R3
    0000074E 8438                   MOV.B       @(8,R3),R0
    00000750 2008                   TST         R0,R0
    00000752 8B2B                   BF          L1278
    00000754 D30B                   MOV.L       L1552+16,R3; _p2
    00000756 6232                   MOV.L       @R3,R2
    00000758 8428                   MOV.B       @(8,R2),R0
    0000075A 2008                   TST         R0,R0
    0000075C 8B01                   BF          L1553
    0000075E AEE4                   BRA         L1238
    00000760 0009                   NOP
    00000762              L1553:                            
      multiply.c   173                    }
      multiply.c   174            }
      multiply.c   175    
      multiply.c   176            // push remaining factors, if any
      multiply.c   177    
      multiply.c   178            while (iscons(p1)) {
    00000762 A023                   BRA         L1278
    00000764 0009                   NOP
    00000766              L1279:                            
      multiply.c   179                    push(car(p1));
    00000766 64E2                   MOV.L       @R14,R4
    00000768 8448                   MOV.B       @(8,R4),R0
    0000076A 2008                   TST         R0,R0
    0000076C 8B0C                   BF          L1280
    0000076E 64E2                   MOV.L       @R14,R4
    00000770 A00E                   BRA         L1281
    00000772 6442                   MOV.L       @R4,R4
    00000774              L1552:                            
    00000774 0570                   .DATA.W     H'0570
    00000776 0000                   .DATA.W     0
    00000778 <00000000>             .DATA.L     _symtab
    0000077C <00000000>             .DATA.L     L1083
    00000780 <00000000>             .DATA.L     _stop
    00000784 <00000000>             .DATA.L     _p2
    00000788              L1280:                            
    00000788 935B                   MOV.W       L1554,R3   ; H'0570
    0000078A D22E                   MOV.L       L1554+2,R2 ; _symtab
    0000078C 6422                   MOV.L       @R2,R4
    0000078E 343C                   ADD         R3,R4
    00000790              L1281:                            
    00000790 4C0B                   JSR         @R12
    00000792 0009                   NOP
      multiply.c   180                    p1 = cdr(p1);
    00000794 62E2                   MOV.L       @R14,R2
    00000796 8428                   MOV.B       @(8,R2),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000798 2008                   TST         R0,R0
    0000079A 8B02                   BF          L1282
    0000079C 62E2                   MOV.L       @R14,R2
    0000079E A004                   BRA         L1283
    000007A0 5321                   MOV.L       @(4,R2),R3
    000007A2              L1282:                            
    000007A2 924E                   MOV.W       L1554,R2   ; H'0570
    000007A4 D127                   MOV.L       L1554+2,R1 ; _symtab
    000007A6 6312                   MOV.L       @R1,R3
    000007A8 332C                   ADD         R2,R3
    000007AA              L1283:                            
    000007AA 2E32                   MOV.L       R3,@R14
    000007AC              L1278:                            
    000007AC 62E2                   MOV.L       @R14,R2
    000007AE 8428                   MOV.B       @(8,R2),R0
    000007B0 2008                   TST         R0,R0
    000007B2 89D8                   BT          L1279
      multiply.c   181            }
      multiply.c   182    
      multiply.c   183            while (iscons(p2)) {
    000007B4 A019                   BRA         L1284
    000007B6 0009                   NOP
    000007B8              L1285:                            
      multiply.c   184                    push(car(p2));
    000007B8 64D2                   MOV.L       @R13,R4
    000007BA 8448                   MOV.B       @(8,R4),R0
    000007BC 2008                   TST         R0,R0
    000007BE 8B02                   BF          L1286
    000007C0 64D2                   MOV.L       @R13,R4
    000007C2 A004                   BRA         L1287
    000007C4 6442                   MOV.L       @R4,R4
    000007C6              L1286:                            
    000007C6 933C                   MOV.W       L1554,R3   ; H'0570
    000007C8 D21E                   MOV.L       L1554+2,R2 ; _symtab
    000007CA 6422                   MOV.L       @R2,R4
    000007CC 343C                   ADD         R3,R4
    000007CE              L1287:                            
    000007CE 4C0B                   JSR         @R12
    000007D0 0009                   NOP
      multiply.c   185                    p2 = cdr(p2);
    000007D2 62D2                   MOV.L       @R13,R2
    000007D4 8428                   MOV.B       @(8,R2),R0
    000007D6 2008                   TST         R0,R0
    000007D8 8B02                   BF          L1288
    000007DA 62D2                   MOV.L       @R13,R2
    000007DC A004                   BRA         L1289
    000007DE 5321                   MOV.L       @(4,R2),R3
    000007E0              L1288:                            
    000007E0 922F                   MOV.W       L1554,R2   ; H'0570
    000007E2 D118                   MOV.L       L1554+2,R1 ; _symtab
    000007E4 6312                   MOV.L       @R1,R3
    000007E6 332C                   ADD         R2,R3
    000007E8              L1289:                            
    000007E8 2D32                   MOV.L       R3,@R13
    000007EA              L1284:                            
    000007EA 62D2                   MOV.L       @R13,R2
    000007EC 8428                   MOV.B       @(8,R2),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007EE 2008                   TST         R0,R0
    000007F0 89E2                   BT          L1285
      multiply.c   186            }
      multiply.c   187    
      multiply.c   188            // normalize radical factors
      multiply.c   189    
      multiply.c   190            // example: 2*2(-1/2) -> 2^(1/2)
      multiply.c   191    
      multiply.c   192            // must be done after merge because merge may produce radical
      multiply.c   193    
      multiply.c   194            // example: 2^(1/2-a)*2^a -> 2^(1/2)
      multiply.c   195    
      multiply.c   196            __normalize_radical_factors(h);
    000007F2 B41D                   BSR         __$__normalize_radical_factors
    000007F4 64A3                   MOV         R10,R4
      multiply.c   197    
      multiply.c   198            // this hack should not be necessary, unless power returns a multiply
      multiply.c   199    
      multiply.c   200            //for (i = h; i < tos; i++) {
      multiply.c   201            //      if (car(stack[i]) == symbol(MULTIPLY)) {
      multiply.c   202            //              multiply_all(tos - h);
      multiply.c   203            //              return;
      multiply.c   204            //      }
      multiply.c   205            //}
      multiply.c   206    
      multiply.c   207            if (expanding) {
    000007F6 D214                   MOV.L       L1554+6,R2 ; _expanding
    000007F8 6322                   MOV.L       @R2,R3
    000007FA 2338                   TST         R3,R3
    000007FC 892D                   BT          L1290
      multiply.c   208                    for (i = h; i < tos; i++) {
    000007FE 65A3                   MOV         R10,R5
    00000800 64A3                   MOV         R10,R4
    00000802 A027                   BRA         L1291
    00000804 4408                   SHLL2       R4
    00000806              L1292:                            
      multiply.c   209                            if (isadd(stack[i])) {
    00000806 E208                   MOV         #8,R2
    00000808 D310                   MOV.L       L1554+10,R3; _stack
    0000080A 6032                   MOV.L       @R3,R0
    0000080C 064E                   MOV.L       @(R0,R4),R6
    0000080E 326C                   ADD         R6,R2
    00000810 6220                   MOV.B       @R2,R2
    00000812 2228                   TST         R2,R2
    00000814 8B01                   BF          L1294
    00000816 A004                   BRA         L1295
    00000818 6362                   MOV.L       @R6,R3
    0000081A              L1294:                            
    0000081A 9212                   MOV.W       L1554,R2   ; H'0570
    0000081C D109                   MOV.L       L1554+2,R1 ; _symtab
    0000081E 6312                   MOV.L       @R1,R3
    00000820 332C                   ADD         R2,R3
    00000822              L1295:                            
    00000822 62B2                   MOV.L       @R11,R2
    00000824 720C                   ADD         #12,R2
    00000826 3320                   CMP/EQ      R2,R3
    00000828 8B12                   BF          L1293




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      multiply.c   210                                    multiply_all(tos - h);
    0000082A 6492                   MOV.L       @R9,R4
    0000082C 34A8                   SUB         R10,R4
    0000082E 7F08                   ADD         #8,R15
    00000830 4F26                   LDS.L       @R15+,PR
    00000832 68F6                   MOV.L       @R15+,R8
    00000834 69F6                   MOV.L       @R15+,R9
    00000836 6AF6                   MOV.L       @R15+,R10
    00000838 6BF6                   MOV.L       @R15+,R11
    0000083A 6CF6                   MOV.L       @R15+,R12
    0000083C 6DF6                   MOV.L       @R15+,R13
    0000083E A30A                   BRA         _multiply_all
    00000840 6EF6                   MOV.L       @R15+,R14
    00000842              L1554:                            
    00000842 0570                   .DATA.W     H'0570
    00000844 <00000000>             .DATA.L     _symtab
    00000848 <00000000>             .DATA.L     _expanding
    0000084C <00000000>             .DATA.L     _stack
    00000850              L1293:                            
    00000850 7501                   ADD         #1,R5
    00000852 7404                   ADD         #4,R4
    00000854              L1291:                            
    00000854 6392                   MOV.L       @R9,R3
    00000856 3533                   CMP/GE      R3,R5
    00000858 8BD5                   BF          L1292
    0000085A              L1290:                            
      multiply.c   211                                    return;
      multiply.c   212                            }
      multiply.c   213                    }
      multiply.c   214            }
      multiply.c   215    
      multiply.c   216            // n is the number of result factors on the stack
      multiply.c   217    
      multiply.c   218            n = tos - h;
    0000085A 6192                   MOV.L       @R9,R1
    0000085C 31A8                   SUB         R10,R1
      multiply.c   219    
      multiply.c   220            if (n == 1)
    0000085E 6013                   MOV         R1,R0
    00000860 2F12                   MOV.L       R1,@R15
    00000862 8801                   CMP/EQ      #1,R0
    00000864 8948                   BT          L1160
      multiply.c   221                    return;
      multiply.c   222    
      multiply.c   223            // discard integer 1
      multiply.c   224    
      multiply.c   225            if (isrational(stack[h]) && equaln(stack[h], 1)) {
    00000866 60A3                   MOV         R10,R0
    00000868 D236                   MOV.L       L1555+6,R2 ; _stack
    0000086A 4008                   SHLL2       R0
    0000086C 6322                   MOV.L       @R2,R3
    0000086E 003E                   MOV.L       @(R0,R3),R0
    00000870 1F01                   MOV.L       R0,@(4,R15)
    00000872 8408                   MOV.B       @(8,R0),R0
    00000874 600C                   EXTU.B      R0,R0
    00000876 8801                   CMP/EQ      #1,R0
    00000878 8B26                   BF          L1297




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000087A E501                   MOV         #1,R5
    0000087C D332                   MOV.L       L1555+10,R3; _equaln
    0000087E 430B                   JSR         @R3
    00000880 54F1                   MOV.L       @(4,R15),R4
    00000882 2008                   TST         R0,R0
    00000884 8920                   BT          L1297
      multiply.c   226                    if (n == 2) {
    00000886 60F2                   MOV.L       @R15,R0
    00000888 8802                   CMP/EQ      #2,R0
    0000088A 8B0A                   BF          L1298
      multiply.c   227                            p7 = pop();
    0000088C 480B                   JSR         @R8
    0000088E 0009                   NOP
    00000890 D22E                   MOV.L       L1555+14,R2; _p7
      multiply.c   228                            pop();
    00000892 480B                   JSR         @R8
    00000894 2202                   MOV.L       R0,@R2
      multiply.c   229                            push(p7);
    00000896 D32D                   MOV.L       L1555+14,R3; _p7
    00000898 6432                   MOV.L       @R3,R4
    0000089A              L1542:                            
    0000089A 4C0B                   JSR         @R12
    0000089C 0009                   NOP
    0000089E A02B                   BRA         L1160
    000008A0 0009                   NOP
    000008A2              L1298:                            
      multiply.c   230                    } else {
      multiply.c   231                            stack[h] = symbol(MULTIPLY);
    000008A2 4A08                   SHLL2       R10
    000008A4 D327                   MOV.L       L1555+6,R3 ; _stack
    000008A6 6032                   MOV.L       @R3,R0
    000008A8 9249                   MOV.W       L1555,R2   ; H'0384
    000008AA 61B2                   MOV.L       @R11,R1
      multiply.c   232                            list(n);
    000008AC D328                   MOV.L       L1555+18,R3; _list
    000008AE 312C                   ADD         R2,R1
    000008B0 0A16                   MOV.L       R1,@(R0,R10)
    000008B2 64F2                   MOV.L       @R15,R4
    000008B4 7F08                   ADD         #8,R15
    000008B6 4F26                   LDS.L       @R15+,PR
    000008B8 68F6                   MOV.L       @R15+,R8
    000008BA 69F6                   MOV.L       @R15+,R9
    000008BC 6AF6                   MOV.L       @R15+,R10
    000008BE 6BF6                   MOV.L       @R15+,R11
    000008C0 6CF6                   MOV.L       @R15+,R12
    000008C2 6DF6                   MOV.L       @R15+,R13
    000008C4 432B                   JMP         @R3
    000008C6 6EF6                   MOV.L       @R15+,R14
    000008C8              L1297:                            
      multiply.c   233                    }
      multiply.c   234                    return;
      multiply.c   235            }
      multiply.c   236    
      multiply.c   237            list(n);
    000008C8 D321                   MOV.L       L1555+18,R3; _list
    000008CA 430B                   JSR         @R3
    000008CC 64F2                   MOV.L       @R15,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      multiply.c   238            p7 = pop();
    000008CE 480B                   JSR         @R8
    000008D0 0009                   NOP
    000008D2 D21E                   MOV.L       L1555+14,R2; _p7
      multiply.c   239            push_symbol(MULTIPLY);
    000008D4 D31F                   MOV.L       L1555+22,R3; _push_symbol
    000008D6 2202                   MOV.L       R0,@R2
    000008D8 430B                   JSR         @R3
    000008DA E44B                   MOV         #75,R4
      multiply.c   240            push(p7);
    000008DC D21B                   MOV.L       L1555+14,R2; _p7
    000008DE 4C0B                   JSR         @R12
    000008E0 6422                   MOV.L       @R2,R4
      multiply.c   241            cons();
    000008E2 7F08                   ADD         #8,R15
    000008E4 D31C                   MOV.L       L1555+26,R3; _cons
    000008E6 4F26                   LDS.L       @R15+,PR
    000008E8 68F6                   MOV.L       @R15+,R8
    000008EA 69F6                   MOV.L       @R15+,R9
    000008EC 6AF6                   MOV.L       @R15+,R10
    000008EE 6BF6                   MOV.L       @R15+,R11
    000008F0 6CF6                   MOV.L       @R15+,R12
    000008F2 6DF6                   MOV.L       @R15+,R13
    000008F4 432B                   JMP         @R3
    000008F6 6EF6                   MOV.L       @R15+,R14
    000008F8              L1160:                            
      multiply.c   242    }
    000008F8 7F08                   ADD         #8,R15
    000008FA 4F26                   LDS.L       @R15+,PR
    000008FC 68F6                   MOV.L       @R15+,R8
    000008FE 69F6                   MOV.L       @R15+,R9
    00000900 6AF6                   MOV.L       @R15+,R10
    00000902 6BF6                   MOV.L       @R15+,R11
    00000904 6CF6                   MOV.L       @R15+,R12
    00000906 6DF6                   MOV.L       @R15+,R13
    00000908 000B                   RTS
    0000090A 6EF6                   MOV.L       @R15+,R14
      multiply.c   243    
      multiply.c   244    // Decompose a factor into base and power.
      multiply.c   245    //
      multiply.c   246    // input:       car(p1)         factor
      multiply.c   247    //
      multiply.c   248    // output:      p3              factor's base
      multiply.c   249    //
      multiply.c   250    //              p5              factor's power (possibly 1)
      multiply.c   251    
      multiply.c   252    static void
      multiply.c   253    parse_p1(void)
    0000090C              __$parse_p1:                     ; function: parse_p1
                                                           ; frame size=0
      multiply.c   254    {
      multiply.c   255            p3 = car(p1);
    0000090C D513                   MOV.L       L1555+30,R5; _p1
    0000090E D414                   MOV.L       L1555+34,R4; _p3
    00000910 6252                   MOV.L       @R5,R2
    00000912 8428                   MOV.B       @(8,R2),R0
    00000914 2008                   TST         R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000916 8B02                   BF          L1300
    00000918 6252                   MOV.L       @R5,R2
    0000091A A004                   BRA         L1301
    0000091C 6322                   MOV.L       @R2,R3
    0000091E              L1300:                            
    0000091E 920F                   MOV.W       L1555+2,R2 ; H'0570
    00000920 D110                   MOV.L       L1555+38,R1; _symtab
    00000922 6312                   MOV.L       @R1,R3
    00000924 332C                   ADD         R2,R3
    00000926              L1301:                            
    00000926 2432                   MOV.L       R3,@R4
      multiply.c   256            p5 = one;
    00000928 D50F                   MOV.L       L1555+42,R5; _p5
    0000092A D210                   MOV.L       L1555+46,R2; _one
    0000092C 6322                   MOV.L       @R2,R3
    0000092E 2532                   MOV.L       R3,@R5
      multiply.c   257            if (car(p3) == symbol(POWER)) {
    00000930 6042                   MOV.L       @R4,R0
    00000932 8408                   MOV.B       @(8,R0),R0
    00000934 2008                   TST         R0,R0
    00000936 8B1B                   BF          L1303
    00000938 6142                   MOV.L       @R4,R1
    0000093A A01D                   BRA         L1304
    0000093C 6112                   MOV.L       @R1,R1
    0000093E              L1555:                            
    0000093E 0384                   .DATA.W     H'0384
    00000940 0570                   .DATA.W     H'0570
    00000942 0000                   .DATA.W     0
    00000944 <00000000>             .DATA.L     _stack
    00000948 <00000000>             .DATA.L     _equaln
    0000094C <00000000>             .DATA.L     _p7
    00000950 <00000000>             .DATA.L     _list
    00000954 <00000000>             .DATA.L     _push_symbol
    00000958 <00000000>             .DATA.L     _cons
    0000095C <00000000>             .DATA.L     _p1
    00000960 <00000000>             .DATA.L     _p3
    00000964 <00000000>             .DATA.L     _symtab
    00000968 <00000000>             .DATA.L     _p5
    0000096C <00000000>             .DATA.L     _one
    00000970              L1303:                            
    00000970 9366                   MOV.W       L1556,R3   ; H'0570
    00000972 D034                   MOV.L       L1556+4,R0 ; _symtab
    00000974 6102                   MOV.L       @R0,R1
    00000976 313C                   ADD         R3,R1
    00000978              L1304:                            
    00000978 9363                   MOV.W       L1556+2,R3 ; H'03F0
    0000097A D032                   MOV.L       L1556+4,R0 ; _symtab
    0000097C 6202                   MOV.L       @R0,R2
    0000097E 323C                   ADD         R3,R2
    00000980 3120                   CMP/EQ      R2,R1
    00000982 8B6C                   BF          L1302
      multiply.c   258                    p5 = caddr(p3);
    00000984 6242                   MOV.L       @R4,R2
    00000986 8428                   MOV.B       @(8,R2),R0
    00000988 2008                   TST         R0,R0
    0000098A 8B02                   BF          L1307
    0000098C 6142                   MOV.L       @R4,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000098E A004                   BRA         L1312
    00000990 5111                   MOV.L       @(4,R1),R1
    00000992              L1307:                            
    00000992 9255                   MOV.W       L1556,R2   ; H'0570
    00000994 D02B                   MOV.L       L1556+4,R0 ; _symtab
    00000996 6102                   MOV.L       @R0,R1
    00000998 312C                   ADD         R2,R1
    0000099A              L1312:                            
    0000099A 8418                   MOV.B       @(8,R1),R0
    0000099C 2008                   TST         R0,R0
    0000099E 8B0C                   BF          L1306
    000009A0 6342                   MOV.L       @R4,R3
    000009A2 8438                   MOV.B       @(8,R3),R0
    000009A4 2008                   TST         R0,R0
    000009A6 8B02                   BF          L1308
    000009A8 6242                   MOV.L       @R4,R2
    000009AA A004                   BRA         L1313
    000009AC 5221                   MOV.L       @(4,R2),R2
    000009AE              L1308:                            
    000009AE 9347                   MOV.W       L1556,R3   ; H'0570
    000009B0 D124                   MOV.L       L1556+4,R1 ; _symtab
    000009B2 6212                   MOV.L       @R1,R2
    000009B4 323C                   ADD         R3,R2
    000009B6              L1313:                            
    000009B6 A004                   BRA         L1314
    000009B8 5221                   MOV.L       @(4,R2),R2
    000009BA              L1306:                            
    000009BA 9341                   MOV.W       L1556,R3   ; H'0570
    000009BC D121                   MOV.L       L1556+4,R1 ; _symtab
    000009BE 6212                   MOV.L       @R1,R2
    000009C0 323C                   ADD         R3,R2
    000009C2              L1314:                            
    000009C2 8428                   MOV.B       @(8,R2),R0
    000009C4 2008                   TST         R0,R0
    000009C6 8B21                   BF          L1305
    000009C8 6242                   MOV.L       @R4,R2
    000009CA 8428                   MOV.B       @(8,R2),R0
    000009CC 2008                   TST         R0,R0
    000009CE 8B02                   BF          L1310
    000009D0 6242                   MOV.L       @R4,R2
    000009D2 A004                   BRA         L1315
    000009D4 5321                   MOV.L       @(4,R2),R3
    000009D6              L1310:                            
    000009D6 9233                   MOV.W       L1556,R2   ; H'0570
    000009D8 D11A                   MOV.L       L1556+4,R1 ; _symtab
    000009DA 6312                   MOV.L       @R1,R3
    000009DC 332C                   ADD         R2,R3
    000009DE              L1315:                            
    000009DE 8438                   MOV.B       @(8,R3),R0
    000009E0 2008                   TST         R0,R0
    000009E2 8B0C                   BF          L1309
    000009E4 6342                   MOV.L       @R4,R3
    000009E6 8438                   MOV.B       @(8,R3),R0
    000009E8 2008                   TST         R0,R0
    000009EA 8B02                   BF          L1311
    000009EC 6242                   MOV.L       @R4,R2
    000009EE A004                   BRA         L1316




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009F0 5221                   MOV.L       @(4,R2),R2
    000009F2              L1311:                            
    000009F2 9325                   MOV.W       L1556,R3   ; H'0570
    000009F4 D113                   MOV.L       L1556+4,R1 ; _symtab
    000009F6 6212                   MOV.L       @R1,R2
    000009F8 323C                   ADD         R3,R2
    000009FA              L1316:                            
    000009FA A004                   BRA         L1317
    000009FC 5221                   MOV.L       @(4,R2),R2
    000009FE              L1309:                            
    000009FE 931F                   MOV.W       L1556,R3   ; H'0570
    00000A00 D110                   MOV.L       L1556+4,R1 ; _symtab
    00000A02 6212                   MOV.L       @R1,R2
    00000A04 323C                   ADD         R3,R2
    00000A06              L1317:                            
    00000A06 6122                   MOV.L       @R2,R1
    00000A08 A004                   BRA         L1318
    00000A0A 0009                   NOP
    00000A0C              L1305:                            
    00000A0C 9318                   MOV.W       L1556,R3   ; H'0570
    00000A0E D00D                   MOV.L       L1556+4,R0 ; _symtab
    00000A10 6102                   MOV.L       @R0,R1
    00000A12 313C                   ADD         R3,R1
    00000A14              L1318:                            
    00000A14 2512                   MOV.L       R1,@R5
      multiply.c   259                    p3 = cadr(p3);
    00000A16 6342                   MOV.L       @R4,R3
    00000A18 8438                   MOV.B       @(8,R3),R0
    00000A1A 2008                   TST         R0,R0
    00000A1C 8B02                   BF          L1320
    00000A1E 6242                   MOV.L       @R4,R2
    00000A20 A004                   BRA         L1322
    00000A22 5221                   MOV.L       @(4,R2),R2
    00000A24              L1320:                            
    00000A24 930C                   MOV.W       L1556,R3   ; H'0570
    00000A26 D107                   MOV.L       L1556+4,R1 ; _symtab
    00000A28 6212                   MOV.L       @R1,R2
    00000A2A 323C                   ADD         R3,R2
    00000A2C              L1322:                            
    00000A2C 8428                   MOV.B       @(8,R2),R0
    00000A2E 2008                   TST         R0,R0
    00000A30 8B10                   BF          L1319
    00000A32 6342                   MOV.L       @R4,R3
    00000A34 8438                   MOV.B       @(8,R3),R0
    00000A36 2008                   TST         R0,R0
    00000A38 8B06                   BF          L1321
    00000A3A 6242                   MOV.L       @R4,R2
    00000A3C A008                   BRA         L1323
    00000A3E 5221                   MOV.L       @(4,R2),R2
    00000A40              L1556:                            
    00000A40 0570                   .DATA.W     H'0570
    00000A42 03F0                   .DATA.W     H'03F0
    00000A44 <00000000>             .DATA.L     _symtab
    00000A48              L1321:                            
    00000A48 9365                   MOV.W       L1557,R3   ; H'0570
    00000A4A D134                   MOV.L       L1557+6,R1 ; _symtab
    00000A4C 6212                   MOV.L       @R1,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A4E 323C                   ADD         R3,R2
    00000A50              L1323:                            
    00000A50 A004                   BRA         L1324
    00000A52 6322                   MOV.L       @R2,R3
    00000A54              L1319:                            
    00000A54 925F                   MOV.W       L1557,R2   ; H'0570
    00000A56 D131                   MOV.L       L1557+6,R1 ; _symtab
    00000A58 6312                   MOV.L       @R1,R3
    00000A5A 332C                   ADD         R2,R3
    00000A5C              L1324:                            
    00000A5C 2432                   MOV.L       R3,@R4
    00000A5E              L1302:                            
      multiply.c   260            }
      multiply.c   261    }
    00000A5E 000B                   RTS
    00000A60 0009                   NOP
      multiply.c   262    
      multiply.c   263    // Decompose a factor into base and power.
      multiply.c   264    //
      multiply.c   265    // input:       car(p2)         factor
      multiply.c   266    //
      multiply.c   267    // output:      p4              factor's base
      multiply.c   268    //
      multiply.c   269    //              p6              factor's power (possibly 1)
      multiply.c   270    
      multiply.c   271    static void
      multiply.c   272    parse_p2(void)
    00000A62              __$parse_p2:                     ; function: parse_p2
                                                           ; frame size=0
      multiply.c   273    {
      multiply.c   274            p4 = car(p2);
    00000A62 D52F                   MOV.L       L1557+10,R5; _p2
    00000A64 D42F                   MOV.L       L1557+14,R4; _p4
    00000A66 6252                   MOV.L       @R5,R2
    00000A68 8428                   MOV.B       @(8,R2),R0
    00000A6A 2008                   TST         R0,R0
    00000A6C 8B02                   BF          L1325
    00000A6E 6252                   MOV.L       @R5,R2
    00000A70 A004                   BRA         L1326
    00000A72 6322                   MOV.L       @R2,R3
    00000A74              L1325:                            
    00000A74 924F                   MOV.W       L1557,R2   ; H'0570
    00000A76 D129                   MOV.L       L1557+6,R1 ; _symtab
    00000A78 6312                   MOV.L       @R1,R3
    00000A7A 332C                   ADD         R2,R3
    00000A7C              L1326:                            
    00000A7C 2432                   MOV.L       R3,@R4
      multiply.c   275            p6 = one;
    00000A7E D52A                   MOV.L       L1557+18,R5; _p6
    00000A80 D22A                   MOV.L       L1557+22,R2; _one
    00000A82 6322                   MOV.L       @R2,R3
    00000A84 2532                   MOV.L       R3,@R5
      multiply.c   276            if (car(p4) == symbol(POWER)) {
    00000A86 6042                   MOV.L       @R4,R0
    00000A88 8408                   MOV.B       @(8,R0),R0
    00000A8A 2008                   TST         R0,R0
    00000A8C 8B02                   BF          L1328




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A8E 6142                   MOV.L       @R4,R1
    00000A90 A004                   BRA         L1329
    00000A92 6112                   MOV.L       @R1,R1
    00000A94              L1328:                            
    00000A94 933F                   MOV.W       L1557,R3   ; H'0570
    00000A96 D021                   MOV.L       L1557+6,R0 ; _symtab
    00000A98 6102                   MOV.L       @R0,R1
    00000A9A 313C                   ADD         R3,R1
    00000A9C              L1329:                            
    00000A9C 933C                   MOV.W       L1557+2,R3 ; H'03F0
    00000A9E D01F                   MOV.L       L1557+6,R0 ; _symtab
    00000AA0 6202                   MOV.L       @R0,R2
    00000AA2 323C                   ADD         R3,R2
    00000AA4 3120                   CMP/EQ      R2,R1
    00000AA6 8B75                   BF          L1327
      multiply.c   277                    p6 = caddr(p4);
    00000AA8 6242                   MOV.L       @R4,R2
    00000AAA 8428                   MOV.B       @(8,R2),R0
    00000AAC 2008                   TST         R0,R0
    00000AAE 8B02                   BF          L1332
    00000AB0 6142                   MOV.L       @R4,R1
    00000AB2 A004                   BRA         L1337
    00000AB4 5111                   MOV.L       @(4,R1),R1
    00000AB6              L1332:                            
    00000AB6 922E                   MOV.W       L1557,R2   ; H'0570
    00000AB8 D018                   MOV.L       L1557+6,R0 ; _symtab
    00000ABA 6102                   MOV.L       @R0,R1
    00000ABC 312C                   ADD         R2,R1
    00000ABE              L1337:                            
    00000ABE 8418                   MOV.B       @(8,R1),R0
    00000AC0 2008                   TST         R0,R0
    00000AC2 8B0C                   BF          L1331
    00000AC4 6342                   MOV.L       @R4,R3
    00000AC6 8438                   MOV.B       @(8,R3),R0
    00000AC8 2008                   TST         R0,R0
    00000ACA 8B02                   BF          L1333
    00000ACC 6242                   MOV.L       @R4,R2
    00000ACE A004                   BRA         L1338
    00000AD0 5221                   MOV.L       @(4,R2),R2
    00000AD2              L1333:                            
    00000AD2 9320                   MOV.W       L1557,R3   ; H'0570
    00000AD4 D111                   MOV.L       L1557+6,R1 ; _symtab
    00000AD6 6212                   MOV.L       @R1,R2
    00000AD8 323C                   ADD         R3,R2
    00000ADA              L1338:                            
    00000ADA A004                   BRA         L1339
    00000ADC 5221                   MOV.L       @(4,R2),R2
    00000ADE              L1331:                            
    00000ADE 931A                   MOV.W       L1557,R3   ; H'0570
    00000AE0 D10E                   MOV.L       L1557+6,R1 ; _symtab
    00000AE2 6212                   MOV.L       @R1,R2
    00000AE4 323C                   ADD         R3,R2
    00000AE6              L1339:                            
    00000AE6 8428                   MOV.B       @(8,R2),R0
    00000AE8 2008                   TST         R0,R0
    00000AEA 8B2E                   BF          L1330
    00000AEC 6242                   MOV.L       @R4,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AEE 8428                   MOV.B       @(8,R2),R0
    00000AF0 2008                   TST         R0,R0
    00000AF2 8B02                   BF          L1335
    00000AF4 6242                   MOV.L       @R4,R2
    00000AF6 A004                   BRA         L1340
    00000AF8 5321                   MOV.L       @(4,R2),R3
    00000AFA              L1335:                            
    00000AFA 920C                   MOV.W       L1557,R2   ; H'0570
    00000AFC D107                   MOV.L       L1557+6,R1 ; _symtab
    00000AFE 6312                   MOV.L       @R1,R3
    00000B00 332C                   ADD         R2,R3
    00000B02              L1340:                            
    00000B02 8438                   MOV.B       @(8,R3),R0
    00000B04 2008                   TST         R0,R0
    00000B06 8B19                   BF          L1334
    00000B08 6342                   MOV.L       @R4,R3
    00000B0A 8438                   MOV.B       @(8,R3),R0
    00000B0C 2008                   TST         R0,R0
    00000B0E 8B0F                   BF          L1336
    00000B10 6242                   MOV.L       @R4,R2
    00000B12 A011                   BRA         L1341
    00000B14 5221                   MOV.L       @(4,R2),R2
    00000B16              L1557:                            
    00000B16 0570                   .DATA.W     H'0570
    00000B18 03F0                   .DATA.W     H'03F0
    00000B1A 0000                   .DATA.W     0
    00000B1C <00000000>             .DATA.L     _symtab
    00000B20 <00000000>             .DATA.L     _p2
    00000B24 <00000000>             .DATA.L     _p4
    00000B28 <00000000>             .DATA.L     _p6
    00000B2C <00000000>             .DATA.L     _one
    00000B30              L1336:                            
    00000B30 9372                   MOV.W       L1558,R3   ; H'0570
    00000B32 D13A                   MOV.L       L1558+4,R1 ; _symtab
    00000B34 6212                   MOV.L       @R1,R2
    00000B36 323C                   ADD         R3,R2
    00000B38              L1341:                            
    00000B38 A004                   BRA         L1342
    00000B3A 5221                   MOV.L       @(4,R2),R2
    00000B3C              L1334:                            
    00000B3C 936C                   MOV.W       L1558,R3   ; H'0570
    00000B3E D137                   MOV.L       L1558+4,R1 ; _symtab
    00000B40 6212                   MOV.L       @R1,R2
    00000B42 323C                   ADD         R3,R2
    00000B44              L1342:                            
    00000B44 6122                   MOV.L       @R2,R1
    00000B46 A004                   BRA         L1343
    00000B48 0009                   NOP
    00000B4A              L1330:                            
    00000B4A 9365                   MOV.W       L1558,R3   ; H'0570
    00000B4C D033                   MOV.L       L1558+4,R0 ; _symtab
    00000B4E 6102                   MOV.L       @R0,R1
    00000B50 313C                   ADD         R3,R1
    00000B52              L1343:                            
    00000B52 2512                   MOV.L       R1,@R5
      multiply.c   278                    p4 = cadr(p4);
    00000B54 6342                   MOV.L       @R4,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B56 8438                   MOV.B       @(8,R3),R0
    00000B58 2008                   TST         R0,R0
    00000B5A 8B02                   BF          L1345
    00000B5C 6242                   MOV.L       @R4,R2
    00000B5E A004                   BRA         L1347
    00000B60 5221                   MOV.L       @(4,R2),R2
    00000B62              L1345:                            
    00000B62 9359                   MOV.W       L1558,R3   ; H'0570
    00000B64 D12D                   MOV.L       L1558+4,R1 ; _symtab
    00000B66 6212                   MOV.L       @R1,R2
    00000B68 323C                   ADD         R3,R2
    00000B6A              L1347:                            
    00000B6A 8428                   MOV.B       @(8,R2),R0
    00000B6C 2008                   TST         R0,R0
    00000B6E 8B0C                   BF          L1344
    00000B70 6342                   MOV.L       @R4,R3
    00000B72 8438                   MOV.B       @(8,R3),R0
    00000B74 2008                   TST         R0,R0
    00000B76 8B02                   BF          L1346
    00000B78 6242                   MOV.L       @R4,R2
    00000B7A A004                   BRA         L1348
    00000B7C 5221                   MOV.L       @(4,R2),R2
    00000B7E              L1346:                            
    00000B7E 934B                   MOV.W       L1558,R3   ; H'0570
    00000B80 D126                   MOV.L       L1558+4,R1 ; _symtab
    00000B82 6212                   MOV.L       @R1,R2
    00000B84 323C                   ADD         R3,R2
    00000B86              L1348:                            
    00000B86 A004                   BRA         L1349
    00000B88 6322                   MOV.L       @R2,R3
    00000B8A              L1344:                            
    00000B8A 9245                   MOV.W       L1558,R2   ; H'0570
    00000B8C D123                   MOV.L       L1558+4,R1 ; _symtab
    00000B8E 6312                   MOV.L       @R1,R3
    00000B90 332C                   ADD         R2,R3
    00000B92              L1349:                            
    00000B92 2432                   MOV.L       R3,@R4
    00000B94              L1327:                            
      multiply.c   279            }
      multiply.c   280    }
    00000B94 000B                   RTS
    00000B96 0009                   NOP
      multiply.c   281    
      multiply.c   282    void
      multiply.c   283    combine_factors(int h)
    00000B98              _combine_factors:                ; function: combine_factors
                                                           ; frame size=36
    00000B98 2FE6                   MOV.L       R14,@-R15
    00000B9A 2FD6                   MOV.L       R13,@-R15
    00000B9C 2FC6                   MOV.L       R12,@-R15
    00000B9E 2FB6                   MOV.L       R11,@-R15
    00000BA0 2FA6                   MOV.L       R10,@-R15
    00000BA2 2F96                   MOV.L       R9,@-R15
    00000BA4 2F86                   MOV.L       R8,@-R15
    00000BA6 4F22                   STS.L       PR,@-R15
      multiply.c   284    {
      multiply.c   285            push(p4);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BA8 DD1D                   MOV.L       L1558+8,R13; _push
    00000BAA 7FFC                   ADD         #-4,R15
    00000BAC D31D                   MOV.L       L1558+12,R3; _p4
    00000BAE 2F42                   MOV.L       R4,@R15
    00000BB0 4D0B                   JSR         @R13
    00000BB2 6432                   MOV.L       @R3,R4
      multiply.c   286            push(p5);
    00000BB4 D21C                   MOV.L       L1558+16,R2; _p5
    00000BB6 4D0B                   JSR         @R13
    00000BB8 6422                   MOV.L       @R2,R4
      multiply.c   287            push(p6);
    00000BBA D31C                   MOV.L       L1558+20,R3; _p6
    00000BBC 4D0B                   JSR         @R13
    00000BBE 6432                   MOV.L       @R3,R4
      multiply.c   288            add();
    00000BC0 D21B                   MOV.L       L1558+24,R2; _add
    00000BC2 420B                   JSR         @R2
    00000BC4 0009                   NOP
      multiply.c   289            power();
    00000BC6 D11B                   MOV.L       L1558+28,R1; _power
    00000BC8 410B                   JSR         @R1
    00000BCA 0009                   NOP
      multiply.c   290            p7 = pop();
    00000BCC D91A                   MOV.L       L1558+32,R9; _pop
    00000BCE DE1B                   MOV.L       L1558+36,R14; _p7
    00000BD0 490B                   JSR         @R9
    00000BD2 0009                   NOP
    00000BD4 2E02                   MOV.L       R0,@R14
    00000BD6 6403                   MOV         R0,R4
    00000BD8 DC19                   MOV.L       L1558+40,R12; _stack
    00000BDA 6AF2                   MOV.L       @R15,R10
    00000BDC 6BC2                   MOV.L       @R12,R11
    00000BDE 4A08                   SHLL2       R10
    00000BE0 8448                   MOV.B       @(8,R4),R0
    00000BE2 600C                   EXTU.B      R0,R0
    00000BE4 8801                   CMP/EQ      #1,R0
    00000BE6 8D03                   BT/S        L1351
    00000BE8 6503                   MOV         R0,R5
    00000BEA 6053                   MOV         R5,R0
    00000BEC 8802                   CMP/EQ      #2,R0
    00000BEE 8B0C                   BF          L1350
    00000BF0              L1351:                            
      multiply.c   291            if (isnum(p7)) {
      multiply.c   292                    push(stack[h]);
    00000BF0 60A3                   MOV         R10,R0
    00000BF2 4D0B                   JSR         @R13
    00000BF4 04BE                   MOV.L       @(R0,R11),R4
      multiply.c   293                    push(p7);
    00000BF6 4D0B                   JSR         @R13
    00000BF8 64E2                   MOV.L       @R14,R4
      multiply.c   294                    multiply_numbers();
    00000BFA D312                   MOV.L       L1558+44,R3; _multiply_numbers
    00000BFC 430B                   JSR         @R3
    00000BFE 0009                   NOP
      multiply.c   295                    stack[h] = pop();
    00000C00 68C2                   MOV.L       @R12,R8
    00000C02 490B                   JSR         @R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C04 38AC                   ADD         R10,R8
    00000C06 A10D                   BRA         L1352
    00000C08 2802                   MOV.L       R0,@R8
    00000C0A              L1350:                            
    00000C0A D604                   MOV.L       L1558+4,R6 ; _symtab
    00000C0C 8448                   MOV.B       @(8,R4),R0
    00000C0E 2008                   TST         R0,R0
    00000C10 8F1A                   BF/S        L1354
    00000C12 6562                   MOV.L       @R6,R5
    00000C14 A01B                   BRA         L1355
    00000C16 6242                   MOV.L       @R4,R2
    00000C18              L1558:                            
    00000C18 0570                   .DATA.W     H'0570
    00000C1A 0000                   .DATA.W     0
    00000C1C <00000000>             .DATA.L     _symtab
    00000C20 <00000000>             .DATA.L     _push
    00000C24 <00000000>             .DATA.L     _p4
    00000C28 <00000000>             .DATA.L     _p5
    00000C2C <00000000>             .DATA.L     _p6
    00000C30 <00000000>             .DATA.L     _add
    00000C34 <00000000>             .DATA.L     _power
    00000C38 <00000000>             .DATA.L     _pop
    00000C3C <00000000>             .DATA.L     _p7
    00000C40 <00000000>             .DATA.L     _stack
    00000C44 <00000000>             .DATA.L     _multiply_numbers
    00000C48              L1354:                            
    00000C48 9359                   MOV.W       L1559,R3   ; H'0570
    00000C4A 6262                   MOV.L       @R6,R2
    00000C4C 323C                   ADD         R3,R2
    00000C4E              L1355:                            
    00000C4E 9057                   MOV.W       L1559+2,R0 ; H'0384
    00000C50 305C                   ADD         R5,R0
    00000C52 3200                   CMP/EQ      R0,R2
    00000C54 8901                   BT          L1560
    00000C56 A0E3                   BRA         L1543
    00000C58 0009                   NOP
    00000C5A              L1560:                            
      multiply.c   296            } else if (car(p7) == symbol(MULTIPLY)) {
      multiply.c   297                    // power can return number * factor (i.e. -1 * i)
      multiply.c   298                    if (isnum(cadr(p7)) && cdddr(p7) == symbol(NIL)) {
    00000C5A 8448                   MOV.B       @(8,R4),R0
    00000C5C 2008                   TST         R0,R0
    00000C5E 8B01                   BF          L1359
    00000C60 A002                   BRA         L1371
    00000C62 5041                   MOV.L       @(4,R4),R0
    00000C64              L1359:                            
    00000C64 904B                   MOV.W       L1559,R0   ; H'0570
    00000C66 305C                   ADD         R5,R0
    00000C68              L1371:                            
    00000C68 8408                   MOV.B       @(8,R0),R0
    00000C6A 2008                   TST         R0,R0
    00000C6C 8B08                   BF          L1358
    00000C6E 8448                   MOV.B       @(8,R4),R0
    00000C70 2008                   TST         R0,R0
    00000C72 8B01                   BF          L1360
    00000C74 A002                   BRA         L1372
    00000C76 5041                   MOV.L       @(4,R4),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C78              L1360:                            
    00000C78 9041                   MOV.W       L1559,R0   ; H'0570
    00000C7A 305C                   ADD         R5,R0
    00000C7C              L1372:                            
    00000C7C A002                   BRA         L1373
    00000C7E 6002                   MOV.L       @R0,R0
    00000C80              L1358:                            
    00000C80 903D                   MOV.W       L1559,R0   ; H'0570
    00000C82 305C                   ADD         R5,R0
    00000C84              L1373:                            
    00000C84 8408                   MOV.B       @(8,R0),R0
    00000C86 600C                   EXTU.B      R0,R0
    00000C88 8801                   CMP/EQ      #1,R0
    00000C8A 891A                   BT          L1357
    00000C8C 8448                   MOV.B       @(8,R4),R0
    00000C8E 2008                   TST         R0,R0
    00000C90 8B01                   BF          L1362
    00000C92 A002                   BRA         L1374
    00000C94 5041                   MOV.L       @(4,R4),R0
    00000C96              L1362:                            
    00000C96 9032                   MOV.W       L1559,R0   ; H'0570
    00000C98 305C                   ADD         R5,R0
    00000C9A              L1374:                            
    00000C9A 8408                   MOV.B       @(8,R0),R0
    00000C9C 2008                   TST         R0,R0
    00000C9E 8B08                   BF          L1361
    00000CA0 8448                   MOV.B       @(8,R4),R0
    00000CA2 2008                   TST         R0,R0
    00000CA4 8B01                   BF          L1363
    00000CA6 A002                   BRA         L1375
    00000CA8 5041                   MOV.L       @(4,R4),R0
    00000CAA              L1363:                            
    00000CAA 9028                   MOV.W       L1559,R0   ; H'0570
    00000CAC 305C                   ADD         R5,R0
    00000CAE              L1375:                            
    00000CAE A002                   BRA         L1376
    00000CB0 6002                   MOV.L       @R0,R0
    00000CB2              L1361:                            
    00000CB2 9024                   MOV.W       L1559,R0   ; H'0570
    00000CB4 305C                   ADD         R5,R0
    00000CB6              L1376:                            
    00000CB6 8408                   MOV.B       @(8,R0),R0
    00000CB8 600C                   EXTU.B      R0,R0
    00000CBA 8802                   CMP/EQ      #2,R0
    00000CBC 8901                   BT          L1561
    00000CBE A0AF                   BRA         L1543
    00000CC0 0009                   NOP
    00000CC2              L1561:                            
    00000CC2              L1357:                            
    00000CC2 8448                   MOV.B       @(8,R4),R0
    00000CC4 2008                   TST         R0,R0
    00000CC6 8B01                   BF          L1366
    00000CC8 A002                   BRA         L1377
    00000CCA 5241                   MOV.L       @(4,R4),R2
    00000CCC              L1366:                            
    00000CCC 9217                   MOV.W       L1559,R2   ; H'0570
    00000CCE 325C                   ADD         R5,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CD0              L1377:                            
    00000CD0 8428                   MOV.B       @(8,R2),R0
    00000CD2 2008                   TST         R0,R0
    00000CD4 8B09                   BF          L1365
    00000CD6 8448                   MOV.B       @(8,R4),R0
    00000CD8 2008                   TST         R0,R0
    00000CDA 8B01                   BF          L1367
    00000CDC A002                   BRA         L1378
    00000CDE 5241                   MOV.L       @(4,R4),R2
    00000CE0              L1367:                            
    00000CE0 920D                   MOV.W       L1559,R2   ; H'0570
    00000CE2 325C                   ADD         R5,R2
    00000CE4              L1378:                            
    00000CE4 5321                   MOV.L       @(4,R2),R3
    00000CE6 A002                   BRA         L1379
    00000CE8 0009                   NOP
    00000CEA              L1365:                            
    00000CEA 9308                   MOV.W       L1559,R3   ; H'0570
    00000CEC 335C                   ADD         R5,R3
    00000CEE              L1379:                            
    00000CEE 8438                   MOV.B       @(8,R3),R0
    00000CF0 2008                   TST         R0,R0
    00000CF2 8B18                   BF          L1364
    00000CF4 8448                   MOV.B       @(8,R4),R0
    00000CF6 2008                   TST         R0,R0
    00000CF8 8B03                   BF          L1369
    00000CFA A004                   BRA         L1380
    00000CFC 5341                   MOV.L       @(4,R4),R3
    00000CFE              L1559:                            
    00000CFE 0570                   .DATA.W     H'0570
    00000D00 0384                   .DATA.W     H'0384
    00000D02              L1369:                            
    00000D02 936A                   MOV.W       L1562,R3   ; H'0570
    00000D04 335C                   ADD         R5,R3
    00000D06              L1380:                            
    00000D06 8438                   MOV.B       @(8,R3),R0
    00000D08 2008                   TST         R0,R0
    00000D0A 8B08                   BF          L1368
    00000D0C 8448                   MOV.B       @(8,R4),R0
    00000D0E 2008                   TST         R0,R0
    00000D10 8B01                   BF          L1370
    00000D12 A002                   BRA         L1381
    00000D14 5241                   MOV.L       @(4,R4),R2
    00000D16              L1370:                            
    00000D16 9260                   MOV.W       L1562,R2   ; H'0570
    00000D18 325C                   ADD         R5,R2
    00000D1A              L1381:                            
    00000D1A A002                   BRA         L1382
    00000D1C 5221                   MOV.L       @(4,R2),R2
    00000D1E              L1368:                            
    00000D1E 925C                   MOV.W       L1562,R2   ; H'0570
    00000D20 325C                   ADD         R5,R2
    00000D22              L1382:                            
    00000D22 A002                   BRA         L1383
    00000D24 5221                   MOV.L       @(4,R2),R2
    00000D26              L1364:                            
    00000D26 9258                   MOV.W       L1562,R2   ; H'0570




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D28 325C                   ADD         R5,R2
    00000D2A              L1383:                            
    00000D2A 9356                   MOV.W       L1562,R3   ; H'0570
    00000D2C 335C                   ADD         R5,R3
    00000D2E 3230                   CMP/EQ      R3,R2
    00000D30 8B76                   BF          L1543
      multiply.c   299                            push(stack[h]);
    00000D32 60A3                   MOV         R10,R0
    00000D34 4D0B                   JSR         @R13
    00000D36 04BE                   MOV.L       @(R0,R11),R4
      multiply.c   300                            push(cadr(p7));
    00000D38 64E2                   MOV.L       @R14,R4
    00000D3A 8448                   MOV.B       @(8,R4),R0
    00000D3C 2008                   TST         R0,R0
    00000D3E 8B02                   BF          L1385
    00000D40 64E2                   MOV.L       @R14,R4
    00000D42 A004                   BRA         L1387
    00000D44 5441                   MOV.L       @(4,R4),R4
    00000D46              L1385:                            
    00000D46 9348                   MOV.W       L1562,R3   ; H'0570
    00000D48 D224                   MOV.L       L1562+2,R2 ; _symtab
    00000D4A 6422                   MOV.L       @R2,R4
    00000D4C 343C                   ADD         R3,R4
    00000D4E              L1387:                            
    00000D4E 8448                   MOV.B       @(8,R4),R0
    00000D50 2008                   TST         R0,R0
    00000D52 8B0C                   BF          L1384
    00000D54 64E2                   MOV.L       @R14,R4
    00000D56 8448                   MOV.B       @(8,R4),R0
    00000D58 2008                   TST         R0,R0
    00000D5A 8B02                   BF          L1386
    00000D5C 64E2                   MOV.L       @R14,R4
    00000D5E A004                   BRA         L1388
    00000D60 5441                   MOV.L       @(4,R4),R4
    00000D62              L1386:                            
    00000D62 933A                   MOV.W       L1562,R3   ; H'0570
    00000D64 D21D                   MOV.L       L1562+2,R2 ; _symtab
    00000D66 6422                   MOV.L       @R2,R4
    00000D68 343C                   ADD         R3,R4
    00000D6A              L1388:                            
    00000D6A A004                   BRA         L1389
    00000D6C 6442                   MOV.L       @R4,R4
    00000D6E              L1384:                            
    00000D6E 9334                   MOV.W       L1562,R3   ; H'0570
    00000D70 D21A                   MOV.L       L1562+2,R2 ; _symtab
    00000D72 6422                   MOV.L       @R2,R4
    00000D74 343C                   ADD         R3,R4
    00000D76              L1389:                            
    00000D76 4D0B                   JSR         @R13
    00000D78 0009                   NOP
      multiply.c   301                            multiply_numbers();
    00000D7A D319                   MOV.L       L1562+6,R3 ; _multiply_numbers
    00000D7C 430B                   JSR         @R3
    00000D7E 0009                   NOP
      multiply.c   302                            stack[h] = pop();
    00000D80 68C2                   MOV.L       @R12,R8
    00000D82 490B                   JSR         @R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D84 38AC                   ADD         R10,R8
    00000D86 2802                   MOV.L       R0,@R8
      multiply.c   303                            push(caddr(p7));
    00000D88 64E2                   MOV.L       @R14,R4
    00000D8A 8448                   MOV.B       @(8,R4),R0
    00000D8C 2008                   TST         R0,R0
    00000D8E 8B02                   BF          L1392
    00000D90 64E2                   MOV.L       @R14,R4
    00000D92 A004                   BRA         L1397
    00000D94 5441                   MOV.L       @(4,R4),R4
    00000D96              L1392:                            
    00000D96 9320                   MOV.W       L1562,R3   ; H'0570
    00000D98 D210                   MOV.L       L1562+2,R2 ; _symtab
    00000D9A 6422                   MOV.L       @R2,R4
    00000D9C 343C                   ADD         R3,R4
    00000D9E              L1397:                            
    00000D9E 8448                   MOV.B       @(8,R4),R0
    00000DA0 2008                   TST         R0,R0
    00000DA2 8B0C                   BF          L1391
    00000DA4 64E2                   MOV.L       @R14,R4
    00000DA6 8448                   MOV.B       @(8,R4),R0
    00000DA8 2008                   TST         R0,R0
    00000DAA 8B02                   BF          L1393
    00000DAC 64E2                   MOV.L       @R14,R4
    00000DAE A004                   BRA         L1398
    00000DB0 5441                   MOV.L       @(4,R4),R4
    00000DB2              L1393:                            
    00000DB2 9312                   MOV.W       L1562,R3   ; H'0570
    00000DB4 D209                   MOV.L       L1562+2,R2 ; _symtab
    00000DB6 6422                   MOV.L       @R2,R4
    00000DB8 343C                   ADD         R3,R4
    00000DBA              L1398:                            
    00000DBA A004                   BRA         L1399
    00000DBC 5441                   MOV.L       @(4,R4),R4
    00000DBE              L1391:                            
    00000DBE 930C                   MOV.W       L1562,R3   ; H'0570
    00000DC0 D206                   MOV.L       L1562+2,R2 ; _symtab
    00000DC2 6422                   MOV.L       @R2,R4
    00000DC4 343C                   ADD         R3,R4
    00000DC6              L1399:                            
    00000DC6 8448                   MOV.B       @(8,R4),R0
    00000DC8 2008                   TST         R0,R0
    00000DCA 8B25                   BF          L1390
    00000DCC 64E2                   MOV.L       @R14,R4
    00000DCE 8448                   MOV.B       @(8,R4),R0
    00000DD0 2008                   TST         R0,R0
    00000DD2 8B07                   BF          L1395
    00000DD4 64E2                   MOV.L       @R14,R4
    00000DD6 A009                   BRA         L1400
    00000DD8 5441                   MOV.L       @(4,R4),R4
    00000DDA              L1562:                            
    00000DDA 0570                   .DATA.W     H'0570
    00000DDC <00000000>             .DATA.L     _symtab
    00000DE0 <00000000>             .DATA.L     _multiply_numbers
    00000DE4              L1395:                            
    00000DE4 9385                   MOV.W       L1563,R3   ; H'0570
    00000DE6 D243                   MOV.L       L1563+2,R2 ; _symtab




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DE8 6422                   MOV.L       @R2,R4
    00000DEA 343C                   ADD         R3,R4
    00000DEC              L1400:                            
    00000DEC 8448                   MOV.B       @(8,R4),R0
    00000DEE 2008                   TST         R0,R0
    00000DF0 8B0C                   BF          L1394
    00000DF2 64E2                   MOV.L       @R14,R4
    00000DF4 8448                   MOV.B       @(8,R4),R0
    00000DF6 2008                   TST         R0,R0
    00000DF8 8B02                   BF          L1396
    00000DFA 64E2                   MOV.L       @R14,R4
    00000DFC A004                   BRA         L1401
    00000DFE 5441                   MOV.L       @(4,R4),R4
    00000E00              L1396:                            
    00000E00 9377                   MOV.W       L1563,R3   ; H'0570
    00000E02 D23C                   MOV.L       L1563+2,R2 ; _symtab
    00000E04 6422                   MOV.L       @R2,R4
    00000E06 343C                   ADD         R3,R4
    00000E08              L1401:                            
    00000E08 A004                   BRA         L1402
    00000E0A 5441                   MOV.L       @(4,R4),R4
    00000E0C              L1394:                            
    00000E0C 9371                   MOV.W       L1563,R3   ; H'0570
    00000E0E D239                   MOV.L       L1563+2,R2 ; _symtab
    00000E10 6422                   MOV.L       @R2,R4
    00000E12 343C                   ADD         R3,R4
    00000E14              L1402:                            
    00000E14 A004                   BRA         L1543
    00000E16 6442                   MOV.L       @R4,R4
    00000E18              L1390:                            
    00000E18 936B                   MOV.W       L1563,R3   ; H'0570
    00000E1A D236                   MOV.L       L1563+2,R2 ; _symtab
    00000E1C 6422                   MOV.L       @R2,R4
    00000E1E 343C                   ADD         R3,R4
    00000E20              L1543:                            
    00000E20 4D0B                   JSR         @R13
    00000E22 0009                   NOP
    00000E24              L1352:                            
      multiply.c   304                    } else
      multiply.c   305                            push(p7);
      multiply.c   306            } else
      multiply.c   307                    push(p7);
      multiply.c   308    }
    00000E24 7F04                   ADD         #4,R15
    00000E26 4F26                   LDS.L       @R15+,PR
    00000E28 68F6                   MOV.L       @R15+,R8
    00000E2A 69F6                   MOV.L       @R15+,R9
    00000E2C 6AF6                   MOV.L       @R15+,R10
    00000E2E 6BF6                   MOV.L       @R15+,R11
    00000E30 6CF6                   MOV.L       @R15+,R12
    00000E32 6DF6                   MOV.L       @R15+,R13
    00000E34 000B                   RTS
    00000E36 6EF6                   MOV.L       @R15+,R14
      multiply.c   309    
      multiply.c   310    int gp[17][17] = {
      multiply.c   311            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
      multiply.c   312            {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      multiply.c   313            {0,0,1,-6,-7,-8,-3,-4,-5,13,14,15,-16,9,10,11,-12},
      multiply.c   314            {0,0,6,-1,-11,10,-2,-15,14,12,-5,4,-9,16,-8,7,-13},
      multiply.c   315            {0,0,7,11,-1,-9,15,-2,-13,5,12,-3,-10,8,16,-6,-14},
      multiply.c   316            {0,0,8,-10,9,-1,-14,13,-2,-4,3,12,-11,-7,6,16,-15},
      multiply.c   317            {0,0,3,2,15,-14,1,11,-10,16,-8,7,13,12,-5,4,9},
      multiply.c   318            {0,0,4,-15,2,13,-11,1,9,8,16,-6,14,5,12,-3,10},
      multiply.c   319            {0,0,5,14,-13,2,10,-9,1,-7,6,16,15,-4,3,12,11},
      multiply.c   320            {0,0,13,12,-5,4,16,-8,7,-1,-11,10,-3,-2,-15,14,-6},
      multiply.c   321            {0,0,14,5,12,-3,8,16,-6,11,-1,-9,-4,15,-2,-13,-7},
      multiply.c   322            {0,0,15,-4,3,12,-7,6,16,-10,9,-1,-5,-14,13,-2,-8},
      multiply.c   323            {0,0,16,-9,-10,-11,-13,-14,-15,-3,-4,-5,1,-6,-7,-8,2},
      multiply.c   324            {0,0,9,-16,8,-7,-12,5,-4,-2,-15,14,6,-1,-11,10,3},
      multiply.c   325            {0,0,10,-8,-16,6,-5,-12,3,15,-2,-13,7,11,-1,-9,4},
      multiply.c   326            {0,0,11,7,-6,-16,4,-3,-12,-14,13,-2,8,-10,9,-1,5},
      multiply.c   327            {0,0,12,13,14,15,9,10,11,-6,-7,-8,-2,-3,-4,-5,-1}
      multiply.c   328    };
      multiply.c   329    
      multiply.c   330    #if 0
      multiply.c   331    
      multiply.c   332    static void
      multiply.c   333    combine_gammas(int h)
      multiply.c   334    {
      multiply.c   335            int n;
      multiply.c   336            n = gp[(int) p1->gamma][(int) p2->gamma];
      multiply.c   337            if (n < 0) {
      multiply.c   338                    n = -n;
      multiply.c   339                    push(stack[h]);
      multiply.c   340                    negate();
      multiply.c   341                    stack[h] = pop();
      multiply.c   342            }
      multiply.c   343            if (n > 1)
      multiply.c   344                    push(_gamma[n]);
      multiply.c   345    }
      multiply.c   346    
      multiply.c   347    #endif
      multiply.c   348    
      multiply.c   349    void
      multiply.c   350    multiply_noexpand(void)
    00000E38              _multiply_noexpand:              ; function: multiply_noexpand
                                                           ; frame size=12
    00000E38 2FE6                   MOV.L       R14,@-R15
      multiply.c   351    {
      multiply.c   352            int x;
      multiply.c   353            x = expanding;
      multiply.c   354            expanding = 0;
    00000E3A E200                   MOV         #0,R2
    00000E3C 4F22                   STS.L       PR,@-R15
    00000E3E 7FFC                   ADD         #-4,R15
    00000E40 DE2D                   MOV.L       L1563+6,R14; _expanding
    00000E42 63E2                   MOV.L       @R14,R3
    00000E44 2F32                   MOV.L       R3,@R15
      multiply.c   355            multiply();
    00000E46 B8DB                   BSR         _multiply
    00000E48 2E22                   MOV.L       R2,@R14
      multiply.c   356            expanding = x;
    00000E4A 61F2                   MOV.L       @R15,R1
    00000E4C 2E12                   MOV.L       R1,@R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      multiply.c   357    }
    00000E4E 7F04                   ADD         #4,R15
    00000E50 4F26                   LDS.L       @R15+,PR
    00000E52 000B                   RTS
    00000E54 6EF6                   MOV.L       @R15+,R14
      multiply.c   358    
      multiply.c   359    // multiply n factors on stack
      multiply.c   360    
      multiply.c   361    void
      multiply.c   362    multiply_all(int n)
    00000E56              _multiply_all:                   ; function: multiply_all
                                                           ; frame size=36
      multiply.c   363    {
      multiply.c   364            int h, i;
      multiply.c   365            if (n == 1)
    00000E56 6043                   MOV         R4,R0
    00000E58 2FE6                   MOV.L       R14,@-R15
    00000E5A 8801                   CMP/EQ      #1,R0
    00000E5C 2FD6                   MOV.L       R13,@-R15
    00000E5E 2FC6                   MOV.L       R12,@-R15
    00000E60 2FB6                   MOV.L       R11,@-R15
    00000E62 2FA6                   MOV.L       R10,@-R15
    00000E64 2F86                   MOV.L       R8,@-R15
    00000E66 4F22                   STS.L       PR,@-R15
    00000E68 7FF8                   ADD         #-8,R15
    00000E6A 8D2A                   BT/S        L1407
    00000E6C 6D43                   MOV         R4,R13
      multiply.c   366                    return;
      multiply.c   367            if (n == 0) {
    00000E6E 2DD8                   TST         R13,R13
    00000E70 DB22                   MOV.L       L1563+10,R11; _push
    00000E72 8B04                   BF          L1408
      multiply.c   368                    push(one);
    00000E74 D322                   MOV.L       L1563+14,R3; _one
    00000E76 4B0B                   JSR         @R11
    00000E78 6432                   MOV.L       @R3,R4
      multiply.c   369                    return;
    00000E7A A022                   BRA         L1407
    00000E7C 0009                   NOP
    00000E7E              L1408:                            
      multiply.c   370            }
      multiply.c   371            h = tos - n;
    00000E7E D221                   MOV.L       L1563+18,R2; _tos
      multiply.c   372            push(stack[h]);
    00000E80 DA21                   MOV.L       L1563+22,R10; _stack
    00000E82 6E22                   MOV.L       @R2,R14
    00000E84 3ED8                   SUB         R13,R14
    00000E86 60E3                   MOV         R14,R0
    00000E88 4008                   SHLL2       R0
    00000E8A 2F02                   MOV.L       R0,@R15
    00000E8C 63A2                   MOV.L       @R10,R3
    00000E8E 4B0B                   JSR         @R11
    00000E90 043E                   MOV.L       @(R0,R3),R4
      multiply.c   373            for (i = 1; i < n; i++) {
    00000E92 EC01                   MOV         #1,R12
    00000E94 7E01                   ADD         #1,R14
    00000E96 3CD3                   CMP/GE      R13,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E98 1FE1                   MOV.L       R14,@(4,R15)
    00000E9A 8D09                   BT/S        L1409
    00000E9C 4E08                   SHLL2       R14
    00000E9E              L1410:                            
      multiply.c   374                    push(stack[h + i]);
    00000E9E 60A2                   MOV.L       @R10,R0
    00000EA0 4B0B                   JSR         @R11
    00000EA2 04EE                   MOV.L       @(R0,R14),R4
      multiply.c   375                    multiply();
    00000EA4 B8AC                   BSR         _multiply
    00000EA6 0009                   NOP
    00000EA8 7C01                   ADD         #1,R12
    00000EAA 3CD3                   CMP/GE      R13,R12
    00000EAC 8FF7                   BF/S        L1410
    00000EAE 7E04                   ADD         #4,R14
    00000EB0              L1409:                            
      multiply.c   376            }
      multiply.c   377            stack[h] = pop();
    00000EB0 62A2                   MOV.L       @R10,R2
    00000EB2 68F2                   MOV.L       @R15,R8
    00000EB4 D315                   MOV.L       L1563+26,R3; _pop
    00000EB6 430B                   JSR         @R3
    00000EB8 382C                   ADD         R2,R8
    00000EBA 2802                   MOV.L       R0,@R8
      multiply.c   378            tos = h + 1;
    00000EBC 53F1                   MOV.L       @(4,R15),R3
    00000EBE D211                   MOV.L       L1563+18,R2; _tos
    00000EC0 2232                   MOV.L       R3,@R2
      multiply.c   379    }
    00000EC2              L1407:                            
    00000EC2 7F08                   ADD         #8,R15
    00000EC4 4F26                   LDS.L       @R15+,PR
    00000EC6 68F6                   MOV.L       @R15+,R8
    00000EC8 6AF6                   MOV.L       @R15+,R10
    00000ECA 6BF6                   MOV.L       @R15+,R11
    00000ECC 6CF6                   MOV.L       @R15+,R12
    00000ECE 6DF6                   MOV.L       @R15+,R13
    00000ED0 000B                   RTS
    00000ED2 6EF6                   MOV.L       @R15+,R14
      multiply.c   380    
      multiply.c   381    void
      multiply.c   382    multiply_all_noexpand(int n)
    00000ED4              _multiply_all_noexpand:          ; function: multiply_all_noexpand
                                                           ; frame size=12
    00000ED4 2FE6                   MOV.L       R14,@-R15
      multiply.c   383    {
      multiply.c   384            int x;
      multiply.c   385            x = expanding;
      multiply.c   386            expanding = 0;
    00000ED6 E200                   MOV         #0,R2
    00000ED8 4F22                   STS.L       PR,@-R15
    00000EDA 7FFC                   ADD         #-4,R15
    00000EDC DE06                   MOV.L       L1563+6,R14; _expanding
    00000EDE 63E2                   MOV.L       @R14,R3
    00000EE0 2F32                   MOV.L       R3,@R15
      multiply.c   387            multiply_all(n);
    00000EE2 BFB8                   BSR         _multiply_all




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000EE4 2E22                   MOV.L       R2,@R14
      multiply.c   388            expanding = x;
    00000EE6 62F2                   MOV.L       @R15,R2
    00000EE8 2E22                   MOV.L       R2,@R14
      multiply.c   389    }
    00000EEA 7F04                   ADD         #4,R15
    00000EEC 4F26                   LDS.L       @R15+,PR
    00000EEE 000B                   RTS
    00000EF0 6EF6                   MOV.L       @R15+,R14
    00000EF2              L1563:                            
    00000EF2 0570                   .DATA.W     H'0570
    00000EF4 <00000000>             .DATA.L     _symtab
    00000EF8 <00000000>             .DATA.L     _expanding
    00000EFC <00000000>             .DATA.L     _push
    00000F00 <00000000>             .DATA.L     _one
    00000F04 <00000000>             .DATA.L     _tos
    00000F08 <00000000>             .DATA.L     _stack
    00000F0C <00000000>             .DATA.L     _pop
      multiply.c   390    
      multiply.c   391    //-----------------------------------------------------------------------------
      multiply.c   392    //
      multiply.c   393    //      Symbolic division
      multiply.c   394    //
      multiply.c   395    //      Input:          Dividend and divisor on stack
      multiply.c   396    //
      multiply.c   397    //      Output:         Quotient on stack
      multiply.c   398    //
      multiply.c   399    //-----------------------------------------------------------------------------
      multiply.c   400    
      multiply.c   401    void
      multiply.c   402    divide(void)
    00000F10              _divide:                         ; function: divide
                                                           ; frame size=4
    00000F10 4F22                   STS.L       PR,@-R15
    00000F12 D386                   MOV.L       L1564+2,R3 ; _tos
    00000F14 D286                   MOV.L       L1564+6,R2 ; _stack
    00000F16 6432                   MOV.L       @R3,R4
    00000F18 6522                   MOV.L       @R2,R5
    00000F1A 6043                   MOV         R4,R0
    00000F1C 70FE                   ADD         #-2,R0
    00000F1E 4008                   SHLL2       R0
    00000F20 065E                   MOV.L       @(R0,R5),R6
    00000F22 8468                   MOV.B       @(8,R6),R0
    00000F24 600C                   EXTU.B      R0,R0
    00000F26 8801                   CMP/EQ      #1,R0
    00000F28 8D03                   BT/S        L1412
    00000F2A 6603                   MOV         R0,R6
    00000F2C 6063                   MOV         R6,R0
    00000F2E 8802                   CMP/EQ      #2,R0
    00000F30 8B12                   BF          L1411
    00000F32              L1412:                            
    00000F32 6043                   MOV         R4,R0
    00000F34 70FF                   ADD         #-1,R0
    00000F36 4008                   SHLL2       R0
    00000F38 005E                   MOV.L       @(R0,R5),R0
    00000F3A 8408                   MOV.B       @(8,R0),R0
    00000F3C 600C                   EXTU.B      R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F3E 8801                   CMP/EQ      #1,R0
    00000F40 8907                   BT          L1413
    00000F42 6043                   MOV         R4,R0
    00000F44 70FF                   ADD         #-1,R0
    00000F46 4008                   SHLL2       R0
    00000F48 005E                   MOV.L       @(R0,R5),R0
    00000F4A 8408                   MOV.B       @(8,R0),R0
    00000F4C 600C                   EXTU.B      R0,R0
    00000F4E 8802                   CMP/EQ      #2,R0
    00000F50 8B02                   BF          L1411
    00000F52              L1413:                            
      multiply.c   403    {
      multiply.c   404            if (isnum(stack[tos - 2]) && isnum(stack[tos - 1]))
      multiply.c   405                    divide_numbers();
    00000F52 D278                   MOV.L       L1564+10,R2; _divide_numbers
    00000F54 422B                   JMP         @R2
    00000F56 4F26                   LDS.L       @R15+,PR
    00000F58              L1411:                            
      multiply.c   406            else {
      multiply.c   407                    inverse();
    00000F58 B002                   BSR         _inverse
    00000F5A 0009                   NOP
      multiply.c   408                    multiply();
    00000F5C A850                   BRA         _multiply
    00000F5E 4F26                   LDS.L       @R15+,PR
      multiply.c   409            }
      multiply.c   410    }
      multiply.c   411    
      multiply.c   412    void
      multiply.c   413    inverse(void)
    00000F60              _inverse:                        ; function: inverse
                                                           ; frame size=4
    00000F60 4F22                   STS.L       PR,@-R15
      multiply.c   414    {
      multiply.c   415            if (isnum(stack[tos - 1]))
    00000F62 D372                   MOV.L       L1564+2,R3 ; _tos
    00000F64 D272                   MOV.L       L1564+6,R2 ; _stack
    00000F66 6432                   MOV.L       @R3,R4
    00000F68 6022                   MOV.L       @R2,R0
    00000F6A 74FF                   ADD         #-1,R4
    00000F6C 4408                   SHLL2       R4
    00000F6E 044E                   MOV.L       @(R0,R4),R4
    00000F70 8448                   MOV.B       @(8,R4),R0
    00000F72 600C                   EXTU.B      R0,R0
    00000F74 8801                   CMP/EQ      #1,R0
    00000F76 8D03                   BT/S        L1416
    00000F78 6403                   MOV         R0,R4
    00000F7A 6043                   MOV         R4,R0
    00000F7C 8802                   CMP/EQ      #2,R0
    00000F7E 8B02                   BF          L1415
    00000F80              L1416:                            
      multiply.c   416                    invert_number();
    00000F80 D36D                   MOV.L       L1564+14,R3; _invert_number
    00000F82 432B                   JMP         @R3
    00000F84 4F26                   LDS.L       @R15+,PR
    00000F86              L1415:                            
      multiply.c   417            else {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      multiply.c   418                    push_integer(-1);
    00000F86 D36D                   MOV.L       L1564+18,R3; _push_integer
    00000F88 430B                   JSR         @R3
    00000F8A E4FF                   MOV         #-1,R4
      multiply.c   419                    power();
    00000F8C D26C                   MOV.L       L1564+22,R2; _power
    00000F8E 422B                   JMP         @R2
    00000F90 4F26                   LDS.L       @R15+,PR
      multiply.c   420            }
      multiply.c   421    }
      multiply.c   422    
      multiply.c   423    void
      multiply.c   424    reciprocate(void)
    00000F92              _reciprocate:                    ; function: reciprocate
                                                           ; frame size=4
    00000F92 4F22                   STS.L       PR,@-R15
      multiply.c   425    {
      multiply.c   426            if (isnum(stack[tos - 1]))
    00000F94 D365                   MOV.L       L1564+2,R3 ; _tos
    00000F96 6432                   MOV.L       @R3,R4
    00000F98 D265                   MOV.L       L1564+6,R2 ; _stack
    00000F9A 74FF                   ADD         #-1,R4
    00000F9C 6022                   MOV.L       @R2,R0
    00000F9E 4408                   SHLL2       R4
    00000FA0 044E                   MOV.L       @(R0,R4),R4
    00000FA2 8448                   MOV.B       @(8,R4),R0
    00000FA4 600C                   EXTU.B      R0,R0
    00000FA6 8801                   CMP/EQ      #1,R0
    00000FA8 8D03                   BT/S        L1419
    00000FAA 6403                   MOV         R0,R4
    00000FAC 6043                   MOV         R4,R0
    00000FAE 8802                   CMP/EQ      #2,R0
    00000FB0 8B02                   BF          L1418
    00000FB2              L1419:                            
      multiply.c   427                    invert_number();
    00000FB2 D361                   MOV.L       L1564+14,R3; _invert_number
    00000FB4 432B                   JMP         @R3
    00000FB6 4F26                   LDS.L       @R15+,PR
    00000FB8              L1418:                            
      multiply.c   428            else {
      multiply.c   429                    push_integer(-1);
    00000FB8 D360                   MOV.L       L1564+18,R3; _push_integer
    00000FBA 430B                   JSR         @R3
    00000FBC E4FF                   MOV         #-1,R4
      multiply.c   430                    power();
    00000FBE D260                   MOV.L       L1564+22,R2; _power
    00000FC0 422B                   JMP         @R2
    00000FC2 4F26                   LDS.L       @R15+,PR
      multiply.c   431            }
      multiply.c   432    }
      multiply.c   433    
      multiply.c   434    void
      multiply.c   435    negate(void)
    00000FC4              _negate:                         ; function: negate
                                                           ; frame size=4
    00000FC4 4F22                   STS.L       PR,@-R15
      multiply.c   436    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      multiply.c   437            if (isnum(stack[tos - 1]))
    00000FC6 D359                   MOV.L       L1564+2,R3 ; _tos
    00000FC8 D259                   MOV.L       L1564+6,R2 ; _stack
    00000FCA 6432                   MOV.L       @R3,R4
    00000FCC 6022                   MOV.L       @R2,R0
    00000FCE 74FF                   ADD         #-1,R4
    00000FD0 4408                   SHLL2       R4
    00000FD2 044E                   MOV.L       @(R0,R4),R4
    00000FD4 8448                   MOV.B       @(8,R4),R0
    00000FD6 600C                   EXTU.B      R0,R0
    00000FD8 8801                   CMP/EQ      #1,R0
    00000FDA 8D03                   BT/S        L1422
    00000FDC 6403                   MOV         R0,R4
    00000FDE 6043                   MOV         R4,R0
    00000FE0 8802                   CMP/EQ      #2,R0
    00000FE2 8B02                   BF          L1421
    00000FE4              L1422:                            
      multiply.c   438                    negate_number();
    00000FE4 D357                   MOV.L       L1564+26,R3; _negate_number
    00000FE6 432B                   JMP         @R3
    00000FE8 4F26                   LDS.L       @R15+,PR
    00000FEA              L1421:                            
      multiply.c   439            else {
      multiply.c   440                    push_integer(-1);
    00000FEA D354                   MOV.L       L1564+18,R3; _push_integer
    00000FEC 430B                   JSR         @R3
    00000FEE E4FF                   MOV         #-1,R4
      multiply.c   441                    multiply();
    00000FF0 A806                   BRA         _multiply
    00000FF2 4F26                   LDS.L       @R15+,PR
      multiply.c   442            }
      multiply.c   443    }
      multiply.c   444    
      multiply.c   445    void
      multiply.c   446    negate_expand(void)
    00000FF4              _negate_expand:                  ; function: negate_expand
                                                           ; frame size=12
    00000FF4 2FE6                   MOV.L       R14,@-R15
      multiply.c   447    {
      multiply.c   448            int x;
      multiply.c   449            x = expanding;
      multiply.c   450            expanding = 1;
    00000FF6 E201                   MOV         #1,R2
    00000FF8 4F22                   STS.L       PR,@-R15
    00000FFA 7FFC                   ADD         #-4,R15
    00000FFC DE52                   MOV.L       L1564+30,R14; _expanding
    00000FFE 63E2                   MOV.L       @R14,R3
    00001000 2F32                   MOV.L       R3,@R15
      multiply.c   451            negate();
    00001002 BFDF                   BSR         _negate
    00001004 2E22                   MOV.L       R2,@R14
      multiply.c   452            expanding = x;
    00001006 61F2                   MOV.L       @R15,R1
    00001008 2E12                   MOV.L       R1,@R14
      multiply.c   453    }
    0000100A 7F04                   ADD         #4,R15
    0000100C 4F26                   LDS.L       @R15+,PR




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000100E 000B                   RTS
    00001010 6EF6                   MOV.L       @R15+,R14
      multiply.c   454    
      multiply.c   455    void
      multiply.c   456    negate_noexpand(void)
    00001012              _negate_noexpand:                ; function: negate_noexpand
                                                           ; frame size=12
      multiply.c   457    {
      multiply.c   458            int x;
      multiply.c   459            x = expanding;
      multiply.c   460            expanding = 0;
    00001012 E200                   MOV         #0,R2
    00001014 2FE6                   MOV.L       R14,@-R15
    00001016 4F22                   STS.L       PR,@-R15
    00001018 DE4B                   MOV.L       L1564+30,R14; _expanding
    0000101A 7FFC                   ADD         #-4,R15
    0000101C 63E2                   MOV.L       @R14,R3
    0000101E 2F32                   MOV.L       R3,@R15
      multiply.c   461            negate();
    00001020 BFD0                   BSR         _negate
    00001022 2E22                   MOV.L       R2,@R14
      multiply.c   462            expanding = x;
    00001024 61F2                   MOV.L       @R15,R1
    00001026 2E12                   MOV.L       R1,@R14
      multiply.c   463    }
    00001028 7F04                   ADD         #4,R15
    0000102A 4F26                   LDS.L       @R15+,PR
    0000102C 000B                   RTS
    0000102E 6EF6                   MOV.L       @R15+,R14
      multiply.c   464    
      multiply.c   465    //-----------------------------------------------------------------------------
      multiply.c   466    //
      multiply.c   467    //      Normalize radical factors
      multiply.c   468    //
      multiply.c   469    //      Input:          stack[h]        Coefficient factor, possibly 1
      multiply.c   470    //
      multiply.c   471    //                      stack[h + 1]    Second factor
      multiply.c   472    //
      multiply.c   473    //                      stack[tos - 1]  Last factor
      multiply.c   474    //
      multiply.c   475    //      Output:         Reduced coefficent and normalized radicals (maybe)
      multiply.c   476    //
      multiply.c   477    //      Example:        2*2^(-1/2) -> 2^(1/2)
      multiply.c   478    //
      multiply.c   479    //      (power number number) is guaranteed to have the following properties:
      multiply.c   480    //
      multiply.c   481    //      1. Base is an integer
      multiply.c   482    //
      multiply.c   483    //      2. Absolute value of exponent < 1
      multiply.c   484    //
      multiply.c   485    //      These properties are assured by the power function.
      multiply.c   486    //
      multiply.c   487    //-----------------------------------------------------------------------------
      multiply.c   488    
      multiply.c   489    #define A p1
      multiply.c   490    #define B p2
      multiply.c   491    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      multiply.c   492    #define BASE p3
      multiply.c   493    #define EXPO p4
      multiply.c   494    
      multiply.c   495    #define TMP p5
      multiply.c   496    
      multiply.c   497    static int __is_radical_number(U *);
      multiply.c   498    
      multiply.c   499    static void
      multiply.c   500    __normalize_radical_factors(int h)
    00001030              __$__normalize_radical_factors:  ; function: __normalize_radical_factors
                                                           ; frame size=60
    00001030 2FE6                   MOV.L       R14,@-R15
    00001032 6343                   MOV         R4,R3
    00001034 2FD6                   MOV.L       R13,@-R15
    00001036 4308                   SHLL2       R3
    00001038 2FC6                   MOV.L       R12,@-R15
    0000103A 2FB6                   MOV.L       R11,@-R15
    0000103C 2FA6                   MOV.L       R10,@-R15
    0000103E 2F96                   MOV.L       R9,@-R15
    00001040 2F86                   MOV.L       R8,@-R15
    00001042 4F22                   STS.L       PR,@-R15
    00001044 DD3A                   MOV.L       L1564+6,R13; _stack
    00001046 7FE8                   ADD         #-24,R15
    00001048 2F42                   MOV.L       R4,@R15
    0000104A 1F34                   MOV.L       R3,@(16,R15)
    0000104C 60D2                   MOV.L       @R13,R0
    0000104E 043E                   MOV.L       @(R0,R3),R4
    00001050 D33E                   MOV.L       L1564+34,R3; _isplusone
    00001052 430B                   JSR         @R3
    00001054 0009                   NOP
    00001056 2008                   TST         R0,R0
    00001058 8901                   BT          L1565
    0000105A A223                   BRA         L1426
    0000105C 0009                   NOP
    0000105E              L1565:                            
    0000105E D234                   MOV.L       L1564+6,R2 ; _stack
    00001060 50F4                   MOV.L       @(16,R15),R0
    00001062 6322                   MOV.L       @R2,R3
    00001064 043E                   MOV.L       @(R0,R3),R4
    00001066 D33A                   MOV.L       L1564+38,R3; _isminusone
    00001068 430B                   JSR         @R3
    0000106A 0009                   NOP
    0000106C 2008                   TST         R0,R0
    0000106E 8901                   BT          L1566
    00001070 A218                   BRA         L1426
    00001072 0009                   NOP
    00001074              L1566:                            
    00001074 D22E                   MOV.L       L1564+6,R2 ; _stack
    00001076 6322                   MOV.L       @R2,R3
    00001078 50F4                   MOV.L       @(16,R15),R0
    0000107A 003E                   MOV.L       @(R0,R3),R0
    0000107C 8408                   MOV.B       @(8,R0),R0
    0000107E 600C                   EXTU.B      R0,R0
    00001080 8802                   CMP/EQ      #2,R0
    00001082 8B01                   BF          L1567
    00001084 A20E                   BRA         L1426
    00001086 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001088              L1567:                            
      multiply.c   501    {
      multiply.c   502            int i;
      multiply.c   503    
      multiply.c   504            // if coeff is 1 or floating then don't bother
      multiply.c   505    
      multiply.c   506            if (isplusone(stack[h]) || isminusone(stack[h]) || isdouble(stack[h]))
      multiply.c   507                    return;
      multiply.c   508    
      multiply.c   509            // if no radicals then don't bother
      multiply.c   510    
      multiply.c   511            for (i = h + 1; i < tos; i++)
    00001088 6EF2                   MOV.L       @R15,R14
    0000108A 7E01                   ADD         #1,R14
    0000108C A008                   BRA         L1427
    0000108E 1FE5                   MOV.L       R14,@(20,R15)
    00001090              L1428:                            
      multiply.c   512                    if (__is_radical_number(stack[i]))
    00001090 63D2                   MOV.L       @R13,R3
    00001092 60E3                   MOV         R14,R0
    00001094 4008                   SHLL2       R0
    00001096 B20F                   BSR         __$__is_radical_number
    00001098 043E                   MOV.L       @(R0,R3),R4
    0000109A 2008                   TST         R0,R0
    0000109C 8B04                   BF          L1430
    0000109E 7E01                   ADD         #1,R14
    000010A0              L1427:                            
    000010A0 D222                   MOV.L       L1564+2,R2 ; _tos
    000010A2 6322                   MOV.L       @R2,R3
    000010A4 3E33                   CMP/GE      R3,R14
    000010A6 8BF3                   BF          L1428
    000010A8              L1430:                            
      multiply.c   513                            break;
      multiply.c   514    
      multiply.c   515            if (i == tos)
    000010A8 D120                   MOV.L       L1564+2,R1 ; _tos
    000010AA 6012                   MOV.L       @R1,R0
    000010AC 3E00                   CMP/EQ      R0,R14
    000010AE 8B01                   BF          L1568
    000010B0 A1F8                   BRA         L1426
    000010B2 0009                   NOP
    000010B4              L1568:                            
      multiply.c   516                    return;
      multiply.c   517    
      multiply.c   518            // ok, try to simplify
      multiply.c   519    
      multiply.c   520            save();
    000010B4 D227                   MOV.L       L1564+42,R2; _save
    000010B6 420B                   JSR         @R2
    000010B8 0009                   NOP
      multiply.c   521    
      multiply.c   522            // numerator
      multiply.c   523    
      multiply.c   524            push(stack[h]);
    000010BA DE27                   MOV.L       L1564+46,R14; _push
    000010BC 63D2                   MOV.L       @R13,R3
    000010BE 50F4                   MOV.L       @(16,R15),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010C0 4E0B                   JSR         @R14
    000010C2 043E                   MOV.L       @(R0,R3),R4
      multiply.c   525            mp_numerator();
    000010C4 D325                   MOV.L       L1564+50,R3; _mp_numerator
    000010C6 430B                   JSR         @R3
    000010C8 0009                   NOP
      multiply.c   526            A = pop();
    000010CA D825                   MOV.L       L1564+54,R8; _p1
    000010CC D925                   MOV.L       L1564+58,R9; _pop
    000010CE 490B                   JSR         @R9
    000010D0 0009                   NOP
    000010D2 2802                   MOV.L       R0,@R8
      multiply.c   527    
      multiply.c   528            for (i = h + 1; i < tos; i++) {
    000010D4 52F5                   MOV.L       @(20,R15),R2
    000010D6 1F21                   MOV.L       R2,@(4,R15)
    000010D8 DA23                   MOV.L       L1564+62,R10; _p5
    000010DA 6423                   MOV         R2,R4
    000010DC DB23                   MOV.L       L1564+66,R11; _p3
    000010DE 4408                   SHLL2       R4
    000010E0 DC23                   MOV.L       L1564+70,R12; _p4
    000010E2 2F42                   MOV.L       R4,@R15
    000010E4 1F43                   MOV.L       R4,@(12,R15)
    000010E6 A0DB                   BRA         L1432
    000010E8 1F42                   MOV.L       R4,@(8,R15)
    000010EA              L1433:                            
      multiply.c   529    
      multiply.c   530                    if (isplusone(A) || isminusone(A))
    000010EA D218                   MOV.L       L1564+34,R2; _isplusone
    000010EC 420B                   JSR         @R2
    000010EE 6482                   MOV.L       @R8,R4
    000010F0 2008                   TST         R0,R0
    000010F2 8901                   BT          L1569
    000010F4 A0DB                   BRA         L1436
    000010F6 0009                   NOP
    000010F8              L1569:                            
    000010F8 D219                   MOV.L       L1564+54,R2; _p1
    000010FA D315                   MOV.L       L1564+38,R3; _isminusone
    000010FC 430B                   JSR         @R3
    000010FE 6422                   MOV.L       @R2,R4
    00001100 2008                   TST         R0,R0
    00001102 8901                   BT          L1570
    00001104 A0D3                   BRA         L1436
    00001106 0009                   NOP
    00001108              L1570:                            
      multiply.c   531                            break;
      multiply.c   532    
      multiply.c   533                    if (!__is_radical_number(stack[i]))
    00001108 61D2                   MOV.L       @R13,R1
    0000110A 50F2                   MOV.L       @(8,R15),R0
    0000110C B1D4                   BSR         __$__is_radical_number
    0000110E 041E                   MOV.L       @(R0,R1),R4
    00001110 2008                   TST         R0,R0
    00001112 8B01                   BF          L1571
    00001114 A0B8                   BRA         L1438
    00001116 0009                   NOP
    00001118              L1571:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      multiply.c   534                            continue;
      multiply.c   535    
      multiply.c   536                    BASE = cadr(stack[i]);
    00001118 63D2                   MOV.L       @R13,R3
    0000111A 55F3                   MOV.L       @(12,R15),R5
    0000111C 353C                   ADD         R3,R5
    0000111E 6452                   MOV.L       @R5,R4
    00001120 8448                   MOV.B       @(8,R4),R0
    00001122 2008                   TST         R0,R0
    00001124 8B26                   BF          L1440
    00001126 A029                   BRA         L1442
    00001128 5341                   MOV.L       @(4,R4),R3
    0000112A              L1564:                            
    0000112A 0000                   .DATA.W     0
    0000112C <00000000>             .DATA.L     _tos
    00001130 <00000000>             .DATA.L     _stack
    00001134 <00000000>             .DATA.L     _divide_numbers
    00001138 <00000000>             .DATA.L     _invert_number
    0000113C <00000000>             .DATA.L     _push_integer
    00001140 <00000000>             .DATA.L     _power
    00001144 <00000000>             .DATA.L     _negate_number
    00001148 <00000000>             .DATA.L     _expanding
    0000114C <00000000>             .DATA.L     _isplusone
    00001150 <00000000>             .DATA.L     _isminusone
    00001154 <00000000>             .DATA.L     _save
    00001158 <00000000>             .DATA.L     _push
    0000115C <00000000>             .DATA.L     _mp_numerator
    00001160 <00000000>             .DATA.L     _p1
    00001164 <00000000>             .DATA.L     _pop
    00001168 <00000000>             .DATA.L     _p5
    0000116C <00000000>             .DATA.L     _p3
    00001170 <00000000>             .DATA.L     _p4
    00001174              L1440:                            
    00001174 9252                   MOV.W       L1572,R2   ; H'0570
    00001176 D12A                   MOV.L       L1572+4,R1 ; _symtab
    00001178 6312                   MOV.L       @R1,R3
    0000117A 332C                   ADD         R2,R3
    0000117C              L1442:                            
    0000117C 8438                   MOV.B       @(8,R3),R0
    0000117E 2008                   TST         R0,R0
    00001180 8B0A                   BF          L1439
    00001182 8448                   MOV.B       @(8,R4),R0
    00001184 2008                   TST         R0,R0
    00001186 8B01                   BF          L1441
    00001188 A004                   BRA         L1443
    0000118A 5241                   MOV.L       @(4,R4),R2
    0000118C              L1441:                            
    0000118C 9346                   MOV.W       L1572,R3   ; H'0570
    0000118E D124                   MOV.L       L1572+4,R1 ; _symtab
    00001190 6212                   MOV.L       @R1,R2
    00001192 323C                   ADD         R3,R2
    00001194              L1443:                            
    00001194 A004                   BRA         L1444
    00001196 6222                   MOV.L       @R2,R2
    00001198              L1439:                            
    00001198 9340                   MOV.W       L1572,R3   ; H'0570
    0000119A D121                   MOV.L       L1572+4,R1 ; _symtab




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000119C 6212                   MOV.L       @R1,R2
    0000119E 323C                   ADD         R3,R2
    000011A0              L1444:                            
    000011A0 2B22                   MOV.L       R2,@R11
      multiply.c   537                    EXPO = caddr(stack[i]);
    000011A2 6452                   MOV.L       @R5,R4
    000011A4 8448                   MOV.B       @(8,R4),R0
    000011A6 2008                   TST         R0,R0
    000011A8 8B01                   BF          L1447
    000011AA A004                   BRA         L1452
    000011AC 5341                   MOV.L       @(4,R4),R3
    000011AE              L1447:                            
    000011AE 9235                   MOV.W       L1572,R2   ; H'0570
    000011B0 D11B                   MOV.L       L1572+4,R1 ; _symtab
    000011B2 6312                   MOV.L       @R1,R3
    000011B4 332C                   ADD         R2,R3
    000011B6              L1452:                            
    000011B6 8438                   MOV.B       @(8,R3),R0
    000011B8 2008                   TST         R0,R0
    000011BA 8B0B                   BF          L1446
    000011BC 8448                   MOV.B       @(8,R4),R0
    000011BE 2008                   TST         R0,R0
    000011C0 8B01                   BF          L1448
    000011C2 A004                   BRA         L1453
    000011C4 5241                   MOV.L       @(4,R4),R2
    000011C6              L1448:                            
    000011C6 9329                   MOV.W       L1572,R3   ; H'0570
    000011C8 D115                   MOV.L       L1572+4,R1 ; _symtab
    000011CA 6212                   MOV.L       @R1,R2
    000011CC 323C                   ADD         R3,R2
    000011CE              L1453:                            
    000011CE 5121                   MOV.L       @(4,R2),R1
    000011D0 A004                   BRA         L1454
    000011D2 0009                   NOP
    000011D4              L1446:                            
    000011D4 9322                   MOV.W       L1572,R3   ; H'0570
    000011D6 D012                   MOV.L       L1572+4,R0 ; _symtab
    000011D8 6102                   MOV.L       @R0,R1
    000011DA 313C                   ADD         R3,R1
    000011DC              L1454:                            
    000011DC 8418                   MOV.B       @(8,R1),R0
    000011DE 2008                   TST         R0,R0
    000011E0 8B20                   BF          L1445
    000011E2 8448                   MOV.B       @(8,R4),R0
    000011E4 2008                   TST         R0,R0
    000011E6 8B01                   BF          L1450
    000011E8 A004                   BRA         L1455
    000011EA 5341                   MOV.L       @(4,R4),R3
    000011EC              L1450:                            
    000011EC 9216                   MOV.W       L1572,R2   ; H'0570
    000011EE D10C                   MOV.L       L1572+4,R1 ; _symtab
    000011F0 6312                   MOV.L       @R1,R3
    000011F2 332C                   ADD         R2,R3
    000011F4              L1455:                            
    000011F4 8438                   MOV.B       @(8,R3),R0
    000011F6 2008                   TST         R0,R0
    000011F8 8B0A                   BF          L1449




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000011FA 8448                   MOV.B       @(8,R4),R0
    000011FC 2008                   TST         R0,R0
    000011FE 8B01                   BF          L1451
    00001200 A004                   BRA         L1456
    00001202 5241                   MOV.L       @(4,R4),R2
    00001204              L1451:                            
    00001204 930A                   MOV.W       L1572,R3   ; H'0570
    00001206 D106                   MOV.L       L1572+4,R1 ; _symtab
    00001208 6212                   MOV.L       @R1,R2
    0000120A 323C                   ADD         R3,R2
    0000120C              L1456:                            
    0000120C A004                   BRA         L1457
    0000120E 5221                   MOV.L       @(4,R2),R2
    00001210              L1449:                            
    00001210 9304                   MOV.W       L1572,R3   ; H'0570
    00001212 D103                   MOV.L       L1572+4,R1 ; _symtab
    00001214 6212                   MOV.L       @R1,R2
    00001216 323C                   ADD         R3,R2
    00001218              L1457:                            
    00001218 A008                   BRA         L1458
    0000121A 6322                   MOV.L       @R2,R3
    0000121C              L1572:                            
    0000121C 0570                   .DATA.W     H'0570
    0000121E 0000                   .DATA.W     0
    00001220 <00000000>             .DATA.L     _symtab
    00001224              L1445:                            
    00001224 9281                   MOV.W       L1573,R2   ; H'0570
    00001226 D141                   MOV.L       L1573+2,R1 ; _symtab
    00001228 6312                   MOV.L       @R1,R3
    0000122A 332C                   ADD         R2,R3
    0000122C              L1458:                            
    0000122C 2C32                   MOV.L       R3,@R12
      multiply.c   538    
      multiply.c   539                    // exponent must be negative
      multiply.c   540    
      multiply.c   541                    if (!isnegativenumber(EXPO))
    0000122E 6433                   MOV         R3,R4
    00001230 D33F                   MOV.L       L1573+6,R3 ; _isnegativenumber
    00001232 430B                   JSR         @R3
    00001234 0009                   NOP
    00001236 2008                   TST         R0,R0
    00001238 8926                   BT          L1438
      multiply.c   542                            continue;
      multiply.c   543    
      multiply.c   544                    // numerator divisible by BASE?
      multiply.c   545    
      multiply.c   546                    push(A);
    0000123A 4E0B                   JSR         @R14
    0000123C 6482                   MOV.L       @R8,R4
      multiply.c   547                    push(BASE);
    0000123E 4E0B                   JSR         @R14
    00001240 64B2                   MOV.L       @R11,R4
      multiply.c   548                    divide();
    00001242 BE65                   BSR         _divide
    00001244 0009                   NOP
      multiply.c   549    
      multiply.c   550                    TMP = pop();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001246 490B                   JSR         @R9
    00001248 0009                   NOP
    0000124A 2A02                   MOV.L       R0,@R10
      multiply.c   551    
      multiply.c   552                    if (!isinteger(TMP))
    0000124C D339                   MOV.L       L1573+10,R3; _isinteger
    0000124E 430B                   JSR         @R3
    00001250 6403                   MOV         R0,R4
    00001252 2008                   TST         R0,R0
    00001254 8918                   BT          L1438
      multiply.c   553                            continue;
      multiply.c   554    
      multiply.c   555                    // reduce numerator
      multiply.c   556    
      multiply.c   557                    A = TMP;
    00001256 62A2                   MOV.L       @R10,R2
      multiply.c   558    
      multiply.c   559                    // invert radical
      multiply.c   560    
      multiply.c   561                    push_symbol(POWER);
    00001258 D337                   MOV.L       L1573+14,R3; _push_symbol
    0000125A 2822                   MOV.L       R2,@R8
    0000125C 430B                   JSR         @R3
    0000125E E454                   MOV         #84,R4
      multiply.c   562                    push(BASE);
    00001260 4E0B                   JSR         @R14
    00001262 64B2                   MOV.L       @R11,R4
      multiply.c   563                    push(one);
    00001264 D235                   MOV.L       L1573+18,R2; _one
    00001266 4E0B                   JSR         @R14
    00001268 6422                   MOV.L       @R2,R4
      multiply.c   564                    push(EXPO);
    0000126A 4E0B                   JSR         @R14
    0000126C 64C2                   MOV.L       @R12,R4
      multiply.c   565                    add();
    0000126E D334                   MOV.L       L1573+22,R3; _add
    00001270 430B                   JSR         @R3
    00001272 0009                   NOP
      multiply.c   566                    list(3);
    00001274 D233                   MOV.L       L1573+26,R2; _list
    00001276 420B                   JSR         @R2
    00001278 E403                   MOV         #3,R4
      multiply.c   567                    stack[i] = pop();
    0000127A 63D2                   MOV.L       @R13,R3
    0000127C 60F2                   MOV.L       @R15,R0
    0000127E 303C                   ADD         R3,R0
    00001280 490B                   JSR         @R9
    00001282 2F06                   MOV.L       R0,@-R15
    00001284 62F6                   MOV.L       @R15+,R2
    00001286 2202                   MOV.L       R0,@R2
    00001288              L1438:                            
    00001288 53F1                   MOV.L       @(4,R15),R3
    0000128A 7301                   ADD         #1,R3
    0000128C 1F31                   MOV.L       R3,@(4,R15)
    0000128E 62F2                   MOV.L       @R15,R2
    00001290 7204                   ADD         #4,R2
    00001292 2F22                   MOV.L       R2,@R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001294 51F3                   MOV.L       @(12,R15),R1
    00001296 7104                   ADD         #4,R1
    00001298 1F13                   MOV.L       R1,@(12,R15)
    0000129A 53F2                   MOV.L       @(8,R15),R3
    0000129C 7304                   ADD         #4,R3
    0000129E 1F32                   MOV.L       R3,@(8,R15)
    000012A0              L1432:                            
    000012A0 D329                   MOV.L       L1573+30,R3; _tos
    000012A2 6232                   MOV.L       @R3,R2
    000012A4 51F1                   MOV.L       @(4,R15),R1
    000012A6 3123                   CMP/GE      R2,R1
    000012A8 8901                   BT          L1574
    000012AA AF1E                   BRA         L1433
    000012AC 0009                   NOP
    000012AE              L1574:                            
    000012AE              L1436:                            
      multiply.c   568            }
      multiply.c   569    
      multiply.c   570            // denominator
      multiply.c   571    
      multiply.c   572            push(stack[h]);
    000012AE 63D2                   MOV.L       @R13,R3
    000012B0 50F4                   MOV.L       @(16,R15),R0
    000012B2 4E0B                   JSR         @R14
    000012B4 043E                   MOV.L       @(R0,R3),R4
      multiply.c   573            mp_denominator();
    000012B6 D325                   MOV.L       L1573+34,R3; _mp_denominator
    000012B8 430B                   JSR         @R3
    000012BA 0009                   NOP
      multiply.c   574            B = pop();
    000012BC 490B                   JSR         @R9
    000012BE 0009                   NOP
    000012C0 D223                   MOV.L       L1573+38,R2; _p2
    000012C2 2202                   MOV.L       R0,@R2
      multiply.c   575    
      multiply.c   576            for (i = h + 1; i < tos; i++) {
    000012C4 53F5                   MOV.L       @(20,R15),R3
    000012C6 1F31                   MOV.L       R3,@(4,R15)
    000012C8 6433                   MOV         R3,R4
    000012CA 4408                   SHLL2       R4
    000012CC 1F42                   MOV.L       R4,@(8,R15)
    000012CE 2F42                   MOV.L       R4,@R15
    000012D0 A0C8                   BRA         L1461
    000012D2 1F43                   MOV.L       R4,@(12,R15)
    000012D4              L1462:                            
      multiply.c   577    
      multiply.c   578                    if (isplusone(B))
    000012D4 D21E                   MOV.L       L1573+38,R2; _p2
    000012D6 D31F                   MOV.L       L1573+42,R3; _isplusone
    000012D8 430B                   JSR         @R3
    000012DA 6422                   MOV.L       @R2,R4
    000012DC 2008                   TST         R0,R0
    000012DE 8901                   BT          L1575
    000012E0 A0C7                   BRA         L1464
    000012E2 0009                   NOP
    000012E4              L1575:                            
      multiply.c   579                            break;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      multiply.c   580    
      multiply.c   581                    if (!__is_radical_number(stack[i]))
    000012E4 61D2                   MOV.L       @R13,R1
    000012E6 50F3                   MOV.L       @(12,R15),R0
    000012E8 B0E6                   BSR         __$__is_radical_number
    000012EA 041E                   MOV.L       @(R0,R1),R4
    000012EC 2008                   TST         R0,R0
    000012EE 8B01                   BF          L1576
    000012F0 A0AC                   BRA         L1466
    000012F2 0009                   NOP
    000012F4              L1576:                            
      multiply.c   582                            continue;
      multiply.c   583    
      multiply.c   584                    BASE = cadr(stack[i]);
    000012F4 63D2                   MOV.L       @R13,R3
    000012F6 65F2                   MOV.L       @R15,R5
    000012F8 353C                   ADD         R3,R5
    000012FA 6452                   MOV.L       @R5,R4
    000012FC 8448                   MOV.B       @(8,R4),R0
    000012FE 2008                   TST         R0,R0
    00001300 8B01                   BF          L1468
    00001302 A004                   BRA         L1470
    00001304 5341                   MOV.L       @(4,R4),R3
    00001306              L1468:                            
    00001306 9210                   MOV.W       L1573,R2   ; H'0570
    00001308 D108                   MOV.L       L1573+2,R1 ; _symtab
    0000130A 6312                   MOV.L       @R1,R3
    0000130C 332C                   ADD         R2,R3
    0000130E              L1470:                            
    0000130E 8438                   MOV.B       @(8,R3),R0
    00001310 2008                   TST         R0,R0
    00001312 8B21                   BF          L1467
    00001314 8448                   MOV.B       @(8,R4),R0
    00001316 2008                   TST         R0,R0
    00001318 8B01                   BF          L1469
    0000131A A004                   BRA         L1471
    0000131C 5241                   MOV.L       @(4,R4),R2
    0000131E              L1469:                            
    0000131E 9304                   MOV.W       L1573,R3   ; H'0570
    00001320 D102                   MOV.L       L1573+2,R1 ; _symtab
    00001322 6212                   MOV.L       @R1,R2
    00001324 323C                   ADD         R3,R2
    00001326              L1471:                            
    00001326 A01B                   BRA         L1472
    00001328 6222                   MOV.L       @R2,R2
    0000132A              L1573:                            
    0000132A 0570                   .DATA.W     H'0570
    0000132C <00000000>             .DATA.L     _symtab
    00001330 <00000000>             .DATA.L     _isnegativenumber
    00001334 <00000000>             .DATA.L     _isinteger
    00001338 <00000000>             .DATA.L     _push_symbol
    0000133C <00000000>             .DATA.L     _one
    00001340 <00000000>             .DATA.L     _add
    00001344 <00000000>             .DATA.L     _list
    00001348 <00000000>             .DATA.L     _tos
    0000134C <00000000>             .DATA.L     _mp_denominator
    00001350 <00000000>             .DATA.L     _p2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001354 <00000000>             .DATA.L     _isplusone
    00001358              L1467:                            
    00001358 9340                   MOV.W       L1577,R3   ; H'0570
    0000135A D121                   MOV.L       L1577+4,R1 ; _symtab
    0000135C 6212                   MOV.L       @R1,R2
    0000135E 323C                   ADD         R3,R2
    00001360              L1472:                            
    00001360 2B22                   MOV.L       R2,@R11
      multiply.c   585                    EXPO = caddr(stack[i]);
    00001362 6452                   MOV.L       @R5,R4
    00001364 8448                   MOV.B       @(8,R4),R0
    00001366 2008                   TST         R0,R0
    00001368 8B01                   BF          L1475
    0000136A A004                   BRA         L1480
    0000136C 5341                   MOV.L       @(4,R4),R3
    0000136E              L1475:                            
    0000136E 9235                   MOV.W       L1577,R2   ; H'0570
    00001370 D11B                   MOV.L       L1577+4,R1 ; _symtab
    00001372 6312                   MOV.L       @R1,R3
    00001374 332C                   ADD         R2,R3
    00001376              L1480:                            
    00001376 8438                   MOV.B       @(8,R3),R0
    00001378 2008                   TST         R0,R0
    0000137A 8B0B                   BF          L1474
    0000137C 8448                   MOV.B       @(8,R4),R0
    0000137E 2008                   TST         R0,R0
    00001380 8B01                   BF          L1476
    00001382 A004                   BRA         L1481
    00001384 5241                   MOV.L       @(4,R4),R2
    00001386              L1476:                            
    00001386 9329                   MOV.W       L1577,R3   ; H'0570
    00001388 D115                   MOV.L       L1577+4,R1 ; _symtab
    0000138A 6212                   MOV.L       @R1,R2
    0000138C 323C                   ADD         R3,R2
    0000138E              L1481:                            
    0000138E 5121                   MOV.L       @(4,R2),R1
    00001390 A004                   BRA         L1482
    00001392 0009                   NOP
    00001394              L1474:                            
    00001394 9322                   MOV.W       L1577,R3   ; H'0570
    00001396 D012                   MOV.L       L1577+4,R0 ; _symtab
    00001398 6102                   MOV.L       @R0,R1
    0000139A 313C                   ADD         R3,R1
    0000139C              L1482:                            
    0000139C 8418                   MOV.B       @(8,R1),R0
    0000139E 2008                   TST         R0,R0
    000013A0 8B20                   BF          L1473
    000013A2 8448                   MOV.B       @(8,R4),R0
    000013A4 2008                   TST         R0,R0
    000013A6 8B01                   BF          L1478
    000013A8 A004                   BRA         L1483
    000013AA 5341                   MOV.L       @(4,R4),R3
    000013AC              L1478:                            
    000013AC 9216                   MOV.W       L1577,R2   ; H'0570
    000013AE D10C                   MOV.L       L1577+4,R1 ; _symtab
    000013B0 6312                   MOV.L       @R1,R3
    000013B2 332C                   ADD         R2,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000013B4              L1483:                            
    000013B4 8438                   MOV.B       @(8,R3),R0
    000013B6 2008                   TST         R0,R0
    000013B8 8B0A                   BF          L1477
    000013BA 8448                   MOV.B       @(8,R4),R0
    000013BC 2008                   TST         R0,R0
    000013BE 8B01                   BF          L1479
    000013C0 A004                   BRA         L1484
    000013C2 5241                   MOV.L       @(4,R4),R2
    000013C4              L1479:                            
    000013C4 930A                   MOV.W       L1577,R3   ; H'0570
    000013C6 D106                   MOV.L       L1577+4,R1 ; _symtab
    000013C8 6212                   MOV.L       @R1,R2
    000013CA 323C                   ADD         R3,R2
    000013CC              L1484:                            
    000013CC A004                   BRA         L1485
    000013CE 5221                   MOV.L       @(4,R2),R2
    000013D0              L1477:                            
    000013D0 9304                   MOV.W       L1577,R3   ; H'0570
    000013D2 D103                   MOV.L       L1577+4,R1 ; _symtab
    000013D4 6212                   MOV.L       @R1,R2
    000013D6 323C                   ADD         R3,R2
    000013D8              L1485:                            
    000013D8 A008                   BRA         L1486
    000013DA 6322                   MOV.L       @R2,R3
    000013DC              L1577:                            
    000013DC 0570                   .DATA.W     H'0570
    000013DE 0000                   .DATA.W     0
    000013E0 <00000000>             .DATA.L     _symtab
    000013E4              L1473:                            
    000013E4 928D                   MOV.W       L1578,R2   ; H'0570
    000013E6 D148                   MOV.L       L1578+6,R1 ; _symtab
    000013E8 6312                   MOV.L       @R1,R3
    000013EA 332C                   ADD         R2,R3
    000013EC              L1486:                            
    000013EC 2C32                   MOV.L       R3,@R12
      multiply.c   586    
      multiply.c   587                    // exponent must be positive
      multiply.c   588    
      multiply.c   589                    if (isnegativenumber(EXPO))
    000013EE 6433                   MOV         R3,R4
    000013F0 D346                   MOV.L       L1578+10,R3; _isnegativenumber
    000013F2 430B                   JSR         @R3
    000013F4 0009                   NOP
    000013F6 2008                   TST         R0,R0
    000013F8 8B28                   BF          L1466
      multiply.c   590                            continue;
      multiply.c   591    
      multiply.c   592                    // denominator divisible by BASE?
      multiply.c   593    
      multiply.c   594                    push(B);
    000013FA D245                   MOV.L       L1578+14,R2; _p2
    000013FC 4E0B                   JSR         @R14
    000013FE 6422                   MOV.L       @R2,R4
      multiply.c   595                    push(BASE);
    00001400 4E0B                   JSR         @R14
    00001402 64B2                   MOV.L       @R11,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      multiply.c   596                    divide();
    00001404 BD84                   BSR         _divide
    00001406 0009                   NOP
      multiply.c   597    
      multiply.c   598                    TMP = pop();
    00001408 490B                   JSR         @R9
    0000140A 0009                   NOP
    0000140C 2A02                   MOV.L       R0,@R10
      multiply.c   599    
      multiply.c   600                    if (!isinteger(TMP))
    0000140E D241                   MOV.L       L1578+18,R2; _isinteger
    00001410 420B                   JSR         @R2
    00001412 6403                   MOV         R0,R4
    00001414 2008                   TST         R0,R0
    00001416 8919                   BT          L1466
      multiply.c   601                            continue;
      multiply.c   602    
      multiply.c   603                    // reduce denominator
      multiply.c   604    
      multiply.c   605                    B = TMP;
    00001418 63A2                   MOV.L       @R10,R3
    0000141A D23D                   MOV.L       L1578+14,R2; _p2
    0000141C 2232                   MOV.L       R3,@R2
      multiply.c   606    
      multiply.c   607                    // invert radical
      multiply.c   608    
      multiply.c   609                    push_symbol(POWER);
    0000141E D33E                   MOV.L       L1578+22,R3; _push_symbol
    00001420 430B                   JSR         @R3
    00001422 E454                   MOV         #84,R4
      multiply.c   610                    push(BASE);
    00001424 4E0B                   JSR         @R14
    00001426 64B2                   MOV.L       @R11,R4
      multiply.c   611                    push(EXPO);
    00001428 4E0B                   JSR         @R14
    0000142A 64C2                   MOV.L       @R12,R4
      multiply.c   612                    push(one);
    0000142C D23B                   MOV.L       L1578+26,R2; _one
    0000142E 4E0B                   JSR         @R14
    00001430 6422                   MOV.L       @R2,R4
      multiply.c   613                    subtract();
    00001432 D33B                   MOV.L       L1578+30,R3; _subtract
    00001434 430B                   JSR         @R3
    00001436 0009                   NOP
      multiply.c   614                    list(3);
    00001438 D23A                   MOV.L       L1578+34,R2; _list
    0000143A 420B                   JSR         @R2
    0000143C E403                   MOV         #3,R4
      multiply.c   615                    stack[i] = pop();
    0000143E 63D2                   MOV.L       @R13,R3
    00001440 50F2                   MOV.L       @(8,R15),R0
    00001442 303C                   ADD         R3,R0
    00001444 490B                   JSR         @R9
    00001446 2F06                   MOV.L       R0,@-R15
    00001448 62F6                   MOV.L       @R15+,R2
    0000144A 2202                   MOV.L       R0,@R2
    0000144C              L1466:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000144C 53F1                   MOV.L       @(4,R15),R3
    0000144E 7301                   ADD         #1,R3
    00001450 1F31                   MOV.L       R3,@(4,R15)
    00001452 52F2                   MOV.L       @(8,R15),R2
    00001454 7204                   ADD         #4,R2
    00001456 1F22                   MOV.L       R2,@(8,R15)
    00001458 61F2                   MOV.L       @R15,R1
    0000145A 7104                   ADD         #4,R1
    0000145C 2F12                   MOV.L       R1,@R15
    0000145E 53F3                   MOV.L       @(12,R15),R3
    00001460 7304                   ADD         #4,R3
    00001462 1F33                   MOV.L       R3,@(12,R15)
    00001464              L1461:                            
    00001464 D330                   MOV.L       L1578+38,R3; _tos
    00001466 6232                   MOV.L       @R3,R2
    00001468 51F1                   MOV.L       @(4,R15),R1
    0000146A 3123                   CMP/GE      R2,R1
    0000146C 8901                   BT          L1579
    0000146E AF31                   BRA         L1462
    00001470 0009                   NOP
    00001472              L1579:                            
    00001472              L1464:                            
      multiply.c   616            }
      multiply.c   617    
      multiply.c   618            // reconstitute the coefficient
      multiply.c   619    
      multiply.c   620            push(A);
    00001472 4E0B                   JSR         @R14
    00001474 6482                   MOV.L       @R8,R4
      multiply.c   621            push(B);
    00001476 D326                   MOV.L       L1578+14,R3; _p2
    00001478 4E0B                   JSR         @R14
    0000147A 6432                   MOV.L       @R3,R4
      multiply.c   622            divide();
    0000147C BD48                   BSR         _divide
    0000147E 0009                   NOP
      multiply.c   623            stack[h] = pop();
    00001480 61D2                   MOV.L       @R13,R1
    00001482 50F4                   MOV.L       @(16,R15),R0
    00001484 301C                   ADD         R1,R0
    00001486 490B                   JSR         @R9
    00001488 2F06                   MOV.L       R0,@-R15
    0000148A 63F6                   MOV.L       @R15+,R3
      multiply.c   624    
      multiply.c   625            restore();
    0000148C D227                   MOV.L       L1578+42,R2; _restore
    0000148E 2302                   MOV.L       R0,@R3
    00001490 7F18                   ADD         #24,R15
    00001492 4F26                   LDS.L       @R15+,PR
    00001494 68F6                   MOV.L       @R15+,R8
    00001496 69F6                   MOV.L       @R15+,R9
    00001498 6AF6                   MOV.L       @R15+,R10
    0000149A 6BF6                   MOV.L       @R15+,R11
    0000149C 6CF6                   MOV.L       @R15+,R12
    0000149E 6DF6                   MOV.L       @R15+,R13
    000014A0 422B                   JMP         @R2
    000014A2 6EF6                   MOV.L       @R15+,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014A4              L1426:                            
      multiply.c   626    }
    000014A4 7F18                   ADD         #24,R15
    000014A6 4F26                   LDS.L       @R15+,PR
    000014A8 68F6                   MOV.L       @R15+,R8
    000014AA 69F6                   MOV.L       @R15+,R9
    000014AC 6AF6                   MOV.L       @R15+,R10
    000014AE 6BF6                   MOV.L       @R15+,R11
    000014B0 6CF6                   MOV.L       @R15+,R12
    000014B2 6DF6                   MOV.L       @R15+,R13
    000014B4 000B                   RTS
    000014B6 6EF6                   MOV.L       @R15+,R14
      multiply.c   627    
      multiply.c   628    // don't include i
      multiply.c   629    
      multiply.c   630    static int
      multiply.c   631    __is_radical_number(U *p)
    000014B8              __$__is_radical_number:          ; function: __is_radical_number
                                                           ; frame size=12
    000014B8 2FE6                   MOV.L       R14,@-R15
    000014BA 6E43                   MOV         R4,R14
    000014BC 2FD6                   MOV.L       R13,@-R15
    000014BE 4F22                   STS.L       PR,@-R15
      multiply.c   632    {
      multiply.c   633            // don't use i
      multiply.c   634    
      multiply.c   635            if (car(p) == symbol(POWER) && isnum(cadr(p)) && isnum(caddr(p)) && !isminusone(cadr(p)))
    000014C0 DD11                   MOV.L       L1578+6,R13; _symtab
    000014C2 84E8                   MOV.B       @(8,R14),R0
    000014C4 2008                   TST         R0,R0
    000014C6 8B01                   BF          L1490
    000014C8 A004                   BRA         L1516
    000014CA 63E2                   MOV.L       @R14,R3
    000014CC              L1490:                            
    000014CC 9219                   MOV.W       L1578,R2   ; H'0570
    000014CE D10E                   MOV.L       L1578+6,R1 ; _symtab
    000014D0 6312                   MOV.L       @R1,R3
    000014D2 332C                   ADD         R2,R3
    000014D4              L1516:                            
    000014D4 9216                   MOV.W       L1578+2,R2 ; H'03F0
    000014D6 60D2                   MOV.L       @R13,R0
    000014D8 302C                   ADD         R2,R0
    000014DA 3300                   CMP/EQ      R0,R3
    000014DC 8901                   BT          L1580
    000014DE A0E9                   BRA         L1489
    000014E0 0009                   NOP
    000014E2              L1580:                            
    000014E2 84E8                   MOV.B       @(8,R14),R0
    000014E4 2008                   TST         R0,R0
    000014E6 8B01                   BF          L1493
    000014E8 A003                   BRA         L1517
    000014EA 50E1                   MOV.L       @(4,R14),R0
    000014EC              L1493:                            
    000014EC 9309                   MOV.W       L1578,R3   ; H'0570
    000014EE 60D2                   MOV.L       @R13,R0
    000014F0 303C                   ADD         R3,R0
    000014F2              L1517:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014F2 8408                   MOV.B       @(8,R0),R0
    000014F4 2008                   TST         R0,R0
    000014F6 8B20                   BF          L1492
    000014F8 84E8                   MOV.B       @(8,R14),R0
    000014FA 2008                   TST         R0,R0
    000014FC 8B18                   BF          L1494
    000014FE A01A                   BRA         L1518
    00001500 50E1                   MOV.L       @(4,R14),R0
    00001502              L1578:                            
    00001502 0570                   .DATA.W     H'0570
    00001504 03F0                   .DATA.W     H'03F0
    00001506 0000                   .DATA.W     0
    00001508 <00000000>             .DATA.L     _symtab
    0000150C <00000000>             .DATA.L     _isnegativenumber
    00001510 <00000000>             .DATA.L     _p2
    00001514 <00000000>             .DATA.L     _isinteger
    00001518 <00000000>             .DATA.L     _push_symbol
    0000151C <00000000>             .DATA.L     _one
    00001520 <00000000>             .DATA.L     _subtract
    00001524 <00000000>             .DATA.L     _list
    00001528 <00000000>             .DATA.L     _tos
    0000152C <00000000>             .DATA.L     _restore
    00001530              L1494:                            
    00001530 935D                   MOV.W       L1581,R3   ; H'0570
    00001532 60D2                   MOV.L       @R13,R0
    00001534 303C                   ADD         R3,R0
    00001536              L1518:                            
    00001536 A003                   BRA         L1519
    00001538 6002                   MOV.L       @R0,R0
    0000153A              L1492:                            
    0000153A 9358                   MOV.W       L1581,R3   ; H'0570
    0000153C 60D2                   MOV.L       @R13,R0
    0000153E 303C                   ADD         R3,R0
    00001540              L1519:                            
    00001540 8408                   MOV.B       @(8,R0),R0
    00001542 600C                   EXTU.B      R0,R0
    00001544 8801                   CMP/EQ      #1,R0
    00001546 891D                   BT          L1491
    00001548 84E8                   MOV.B       @(8,R14),R0
    0000154A 2008                   TST         R0,R0
    0000154C 8B01                   BF          L1496
    0000154E A003                   BRA         L1520
    00001550 50E1                   MOV.L       @(4,R14),R0
    00001552              L1496:                            
    00001552 934C                   MOV.W       L1581,R3   ; H'0570
    00001554 60D2                   MOV.L       @R13,R0
    00001556 303C                   ADD         R3,R0
    00001558              L1520:                            
    00001558 8408                   MOV.B       @(8,R0),R0
    0000155A 2008                   TST         R0,R0
    0000155C 8B09                   BF          L1495
    0000155E 84E8                   MOV.B       @(8,R14),R0
    00001560 2008                   TST         R0,R0
    00001562 8B01                   BF          L1497
    00001564 A003                   BRA         L1521
    00001566 50E1                   MOV.L       @(4,R14),R0
    00001568              L1497:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001568 9341                   MOV.W       L1581,R3   ; H'0570
    0000156A 60D2                   MOV.L       @R13,R0
    0000156C 303C                   ADD         R3,R0
    0000156E              L1521:                            
    0000156E A003                   BRA         L1522
    00001570 6002                   MOV.L       @R0,R0
    00001572              L1495:                            
    00001572 933C                   MOV.W       L1581,R3   ; H'0570
    00001574 60D2                   MOV.L       @R13,R0
    00001576 303C                   ADD         R3,R0
    00001578              L1522:                            
    00001578 8408                   MOV.B       @(8,R0),R0
    0000157A 600C                   EXTU.B      R0,R0
    0000157C 8802                   CMP/EQ      #2,R0
    0000157E 8901                   BT          L1582
    00001580 A098                   BRA         L1489
    00001582 0009                   NOP
    00001584              L1582:                            
    00001584              L1491:                            
    00001584 84E8                   MOV.B       @(8,R14),R0
    00001586 2008                   TST         R0,R0
    00001588 8B01                   BF          L1501
    0000158A A003                   BRA         L1523
    0000158C 50E1                   MOV.L       @(4,R14),R0
    0000158E              L1501:                            
    0000158E 932E                   MOV.W       L1581,R3   ; H'0570
    00001590 60D2                   MOV.L       @R13,R0
    00001592 303C                   ADD         R3,R0
    00001594              L1523:                            
    00001594 8408                   MOV.B       @(8,R0),R0
    00001596 2008                   TST         R0,R0
    00001598 8B09                   BF          L1500
    0000159A 84E8                   MOV.B       @(8,R14),R0
    0000159C 2008                   TST         R0,R0
    0000159E 8B01                   BF          L1502
    000015A0 A003                   BRA         L1524
    000015A2 50E1                   MOV.L       @(4,R14),R0
    000015A4              L1502:                            
    000015A4 9323                   MOV.W       L1581,R3   ; H'0570
    000015A6 60D2                   MOV.L       @R13,R0
    000015A8 303C                   ADD         R3,R0
    000015AA              L1524:                            
    000015AA A003                   BRA         L1525
    000015AC 5001                   MOV.L       @(4,R0),R0
    000015AE              L1500:                            
    000015AE 931E                   MOV.W       L1581,R3   ; H'0570
    000015B0 60D2                   MOV.L       @R13,R0
    000015B2 303C                   ADD         R3,R0
    000015B4              L1525:                            
    000015B4 8408                   MOV.B       @(8,R0),R0
    000015B6 2008                   TST         R0,R0
    000015B8 8B1A                   BF          L1499
    000015BA 84E8                   MOV.B       @(8,R14),R0
    000015BC 2008                   TST         R0,R0
    000015BE 8B01                   BF          L1504
    000015C0 A003                   BRA         L1526
    000015C2 50E1                   MOV.L       @(4,R14),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000015C4              L1504:                            
    000015C4 9313                   MOV.W       L1581,R3   ; H'0570
    000015C6 60D2                   MOV.L       @R13,R0
    000015C8 303C                   ADD         R3,R0
    000015CA              L1526:                            
    000015CA 8408                   MOV.B       @(8,R0),R0
    000015CC 2008                   TST         R0,R0
    000015CE 8B09                   BF          L1503
    000015D0 84E8                   MOV.B       @(8,R14),R0
    000015D2 2008                   TST         R0,R0
    000015D4 8B01                   BF          L1505
    000015D6 A003                   BRA         L1527
    000015D8 50E1                   MOV.L       @(4,R14),R0
    000015DA              L1505:                            
    000015DA 9308                   MOV.W       L1581,R3   ; H'0570
    000015DC 60D2                   MOV.L       @R13,R0
    000015DE 303C                   ADD         R3,R0
    000015E0              L1527:                            
    000015E0 A003                   BRA         L1528
    000015E2 5001                   MOV.L       @(4,R0),R0
    000015E4              L1503:                            
    000015E4 9303                   MOV.W       L1581,R3   ; H'0570
    000015E6 60D2                   MOV.L       @R13,R0
    000015E8 303C                   ADD         R3,R0
    000015EA              L1528:                            
    000015EA A004                   BRA         L1529
    000015EC 6002                   MOV.L       @R0,R0
    000015EE              L1581:                            
    000015EE 0570                   .DATA.W     H'0570
    000015F0              L1499:                            
    000015F0 9365                   MOV.W       L1583,R3   ; H'0570
    000015F2 60D2                   MOV.L       @R13,R0
    000015F4 303C                   ADD         R3,R0
    000015F6              L1529:                            
    000015F6 8408                   MOV.B       @(8,R0),R0
    000015F8 600C                   EXTU.B      R0,R0
    000015FA 8801                   CMP/EQ      #1,R0
    000015FC 893B                   BT          L1498
    000015FE 84E8                   MOV.B       @(8,R14),R0
    00001600 2008                   TST         R0,R0
    00001602 8B01                   BF          L1508
    00001604 A003                   BRA         L1530
    00001606 50E1                   MOV.L       @(4,R14),R0
    00001608              L1508:                            
    00001608 9359                   MOV.W       L1583,R3   ; H'0570
    0000160A 60D2                   MOV.L       @R13,R0
    0000160C 303C                   ADD         R3,R0
    0000160E              L1530:                            
    0000160E 8408                   MOV.B       @(8,R0),R0
    00001610 2008                   TST         R0,R0
    00001612 8B09                   BF          L1507
    00001614 84E8                   MOV.B       @(8,R14),R0
    00001616 2008                   TST         R0,R0
    00001618 8B01                   BF          L1509
    0000161A A003                   BRA         L1531
    0000161C 50E1                   MOV.L       @(4,R14),R0
    0000161E              L1509:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000161E 934E                   MOV.W       L1583,R3   ; H'0570
    00001620 60D2                   MOV.L       @R13,R0
    00001622 303C                   ADD         R3,R0
    00001624              L1531:                            
    00001624 A003                   BRA         L1532
    00001626 5001                   MOV.L       @(4,R0),R0
    00001628              L1507:                            
    00001628 9349                   MOV.W       L1583,R3   ; H'0570
    0000162A 60D2                   MOV.L       @R13,R0
    0000162C 303C                   ADD         R3,R0
    0000162E              L1532:                            
    0000162E 8408                   MOV.B       @(8,R0),R0
    00001630 2008                   TST         R0,R0
    00001632 8B19                   BF          L1506
    00001634 84E8                   MOV.B       @(8,R14),R0
    00001636 2008                   TST         R0,R0
    00001638 8B01                   BF          L1511
    0000163A A003                   BRA         L1533
    0000163C 50E1                   MOV.L       @(4,R14),R0
    0000163E              L1511:                            
    0000163E 933E                   MOV.W       L1583,R3   ; H'0570
    00001640 60D2                   MOV.L       @R13,R0
    00001642 303C                   ADD         R3,R0
    00001644              L1533:                            
    00001644 8408                   MOV.B       @(8,R0),R0
    00001646 2008                   TST         R0,R0
    00001648 8B09                   BF          L1510
    0000164A 84E8                   MOV.B       @(8,R14),R0
    0000164C 2008                   TST         R0,R0
    0000164E 8B01                   BF          L1512
    00001650 A003                   BRA         L1534
    00001652 50E1                   MOV.L       @(4,R14),R0
    00001654              L1512:                            
    00001654 9333                   MOV.W       L1583,R3   ; H'0570
    00001656 60D2                   MOV.L       @R13,R0
    00001658 303C                   ADD         R3,R0
    0000165A              L1534:                            
    0000165A A003                   BRA         L1535
    0000165C 5001                   MOV.L       @(4,R0),R0
    0000165E              L1510:                            
    0000165E 932E                   MOV.W       L1583,R3   ; H'0570
    00001660 60D2                   MOV.L       @R13,R0
    00001662 303C                   ADD         R3,R0
    00001664              L1535:                            
    00001664 A003                   BRA         L1536
    00001666 6002                   MOV.L       @R0,R0
    00001668              L1506:                            
    00001668 9329                   MOV.W       L1583,R3   ; H'0570
    0000166A 60D2                   MOV.L       @R13,R0
    0000166C 303C                   ADD         R3,R0
    0000166E              L1536:                            
    0000166E 8408                   MOV.B       @(8,R0),R0
    00001670 600C                   EXTU.B      R0,R0
    00001672 8802                   CMP/EQ      #2,R0
    00001674 8B1E                   BF          L1489
    00001676              L1498:                            
    00001676 84E8                   MOV.B       @(8,R14),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001678 2008                   TST         R0,R0
    0000167A 8B01                   BF          L1514
    0000167C A003                   BRA         L1537
    0000167E 54E1                   MOV.L       @(4,R14),R4
    00001680              L1514:                            
    00001680 931D                   MOV.W       L1583,R3   ; H'0570
    00001682 64D2                   MOV.L       @R13,R4
    00001684 343C                   ADD         R3,R4
    00001686              L1537:                            
    00001686 8448                   MOV.B       @(8,R4),R0
    00001688 2008                   TST         R0,R0
    0000168A 8B09                   BF          L1513
    0000168C 84E8                   MOV.B       @(8,R14),R0
    0000168E 2008                   TST         R0,R0
    00001690 8B01                   BF          L1515
    00001692 A003                   BRA         L1538
    00001694 54E1                   MOV.L       @(4,R14),R4
    00001696              L1515:                            
    00001696 9312                   MOV.W       L1583,R3   ; H'0570
    00001698 64D2                   MOV.L       @R13,R4
    0000169A 343C                   ADD         R3,R4
    0000169C              L1538:                            
    0000169C A003                   BRA         L1539
    0000169E 6442                   MOV.L       @R4,R4
    000016A0              L1513:                            
    000016A0 930D                   MOV.W       L1583,R3   ; H'0570
    000016A2 64D2                   MOV.L       @R13,R4
    000016A4 343C                   ADD         R3,R4
    000016A6              L1539:                            
    000016A6 D306                   MOV.L       L1583+2,R3 ; _isminusone
    000016A8 430B                   JSR         @R3
    000016AA 0009                   NOP
    000016AC 2008                   TST         R0,R0
    000016AE 8B01                   BF          L1489
      multiply.c   636                    return 1;
    000016B0 A001                   BRA         L1540
    000016B2 E001                   MOV         #1,R0
    000016B4              L1489:                            
      multiply.c   637            else
      multiply.c   638                    return 0;
    000016B4 E000                   MOV         #0,R0
      multiply.c   639    }
    000016B6              L1540:                            
    000016B6 4F26                   LDS.L       @R15+,PR
    000016B8 6DF6                   MOV.L       @R15+,R13
    000016BA 000B                   RTS
    000016BC 6EF6                   MOV.L       @R15+,R14
    000016BE              L1583:                            
    000016BE 0570                   .DATA.W     H'0570
    000016C0 <00000000>             .DATA.L     _isminusone
C   00000000              L1062:
    00000000 6573636170             .SDATA      "escape key stop"
             65206B6579   
             2073746F70   
    0000000F 00                     .DATA.B     H'00
    00000010              L1083:
    00000010 696E746572             .SDATA      "internal error 2"




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             6E616C2065   
             72726F7220   
             32           
    00000020 00                     .DATA.B     H'00
D   00000000              _gp:                             ; static: gp
    00000000 0000000000             .DATA.L     H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000001,H'FFFFFFFA,H'FFFFFFF9,H'FFFFFFF8,H'FFFFFFFD,H'FFFFFFFC,
             0000000000 +                       H'FFFFFFFB,H'0000000D,H'0000000E,H'0000000F,H'FFFFFFF0,H'00000009,H'0000000A,
             0000000000 +                       H'0000000B,H'FFFFFFF4,H'00000000,H'00000000,H'00000006,H'FFFFFFFF,H'FFFFFFF5,
             0000000000 +                       H'0000000A,H'FFFFFFFE,H'FFFFFFF1,H'0000000E,H'0000000C,H'FFFFFFFB,H'00000004,
             0000000000 +                       H'FFFFFFF7,H'00000010,H'FFFFFFF8,H'00000007,H'FFFFFFF3,H'00000000,H'00000000,
             0000000000 +                       H'00000007,H'0000000B,H'FFFFFFFF,H'FFFFFFF7,H'0000000F,H'FFFFFFFE,H'FFFFFFF3,
             0000000000 +                       H'00000005,H'0000000C,H'FFFFFFFD,H'FFFFFFF6,H'00000008,H'00000010,H'FFFFFFFA,
             0000000000 +                       H'FFFFFFF2,H'00000000,H'00000000,H'00000008,H'FFFFFFF6,H'00000009,H'FFFFFFFF,
             0000000000 +                       H'FFFFFFF2,H'0000000D,H'FFFFFFFE,H'FFFFFFFC,H'00000003,H'0000000C,H'FFFFFFF5,
             0000000000 +                       H'FFFFFFF9,H'00000006,H'00000010,H'FFFFFFF1,H'00000000,H'00000000,H'00000003,
             0000000000 +                       H'00000002,H'0000000F,H'FFFFFFF2,H'00000001,H'0000000B,H'FFFFFFF6,H'00000010,
             0000000000 +                       H'FFFFFFF8,H'00000007,H'0000000D,H'0000000C,H'FFFFFFFB,H'00000004,H'00000009,
             0000000000 +                       H'00000000,H'00000000,H'00000004,H'FFFFFFF1,H'00000002,H'0000000D,H'FFFFFFF5,
             0000000000 +                       H'00000001,H'00000009,H'00000008,H'00000010,H'FFFFFFFA,H'0000000E,H'00000005,
             0000000000 +                       H'0000000C,H'FFFFFFFD,H'0000000A,H'00000000,H'00000000,H'00000005,H'0000000E,
             0000000000 +                       H'FFFFFFF3,H'00000002,H'0000000A,H'FFFFFFF7,H'00000001,H'FFFFFFF9,H'00000006,
             0000000000 +                       H'00000010,H'0000000F,H'FFFFFFFC,H'00000003,H'0000000C,H'0000000B,H'00000000,
             0000000000 +                       H'00000000,H'0000000D,H'0000000C,H'FFFFFFFB,H'00000004,H'00000010,H'FFFFFFF8,
             0000000000 +                       H'00000007,H'FFFFFFFF,H'FFFFFFF5,H'0000000A,H'FFFFFFFD,H'FFFFFFFE,H'FFFFFFF1,
             0000000000 +                       H'0000000E,H'FFFFFFFA,H'00000000,H'00000000,H'0000000E,H'00000005,H'0000000C,
             0000000000 +                       H'FFFFFFFD,H'00000008,H'00000010,H'FFFFFFFA,H'0000000B,H'FFFFFFFF,H'FFFFFFF7,
             0000000000 +                       H'FFFFFFFC,H'0000000F,H'FFFFFFFE,H'FFFFFFF3,H'FFFFFFF9,H'00000000,H'00000000,
             0000000000 +                       H'0000000F,H'FFFFFFFC,H'00000003,H'0000000C,H'FFFFFFF9,H'00000006,H'00000010,
             0000000000 +                       H'FFFFFFF6,H'00000009,H'FFFFFFFF,H'FFFFFFFB,H'FFFFFFF2,H'0000000D,H'FFFFFFFE,
             000001FFFF +                       H'FFFFFFF8,H'00000000,H'00000000,H'00000010,H'FFFFFFF7,H'FFFFFFF6,H'FFFFFFF5,
             FFFAFFFFFF +                       H'FFFFFFF3,H'FFFFFFF2
             F9FFFFFFF8   
             FFFFFFFDFF   
             FFFFFCFFFF   
             FFFB000000   
             0D0000000E   
             0000000FFF   
             FFFFF00000   
             0009000000   
             0A0000000B   
             FFFFFFF400   
             0000000000   
             0000000000   
             06FFFFFFFF   
             FFFFFFF500   
             00000AFFFF   
             FFFEFFFFFF   
             F10000000E   
             0000000CFF   
             FFFFFB0000   
             0004FFFFFF   
             F700000010   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             FFFFFFF800   
             000007FFFF   
             FFF3000000   
             0000000000   
             0000000700   
             00000BFFFF   
             FFFFFFFFFF   
             F70000000F   
             FFFFFFFEFF   
             FFFFF30000   
             0005000000   
             0CFFFFFFFD   
             FFFFFFF600   
             0000080000   
             0010FFFFFF   
             FAFFFFFFF2   
             0000000000   
             0000000000   
             0008FFFFFF   
             F600000009   
             FFFFFFFFFF   
             FFFFF20000   
             000DFFFFFF   
             FEFFFFFFFC   
             0000000300   
             00000CFFFF   
             FFF5FFFFFF   
             F900000006   
             00000010FF   
             FFFFF10000   
             0000000000   
             0000000003   
             0000000200   
             00000FFFFF   
             FFF2000000   
             010000000B   
             FFFFFFF600   
             000010FFFF   
             FFF8000000   
             070000000D   
             0000000CFF   
             FFFFFB0000   
             0004000000   
             0900000000   
             0000000000   
             000004FFFF   
             FFF1000000   
             020000000D   
             FFFFFFF500   
             0000010000   
             0009000000   
             0800000010   
             FFFFFFFA00   
             00000E0000   
             0005000000   
             0CFFFFFFFD   
             0000000A00   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             050000000E   
             FFFFFFF300   
             0000020000   
             000AFFFFFF   
             F700000001   
             FFFFFFF900   
             0000060000   
             0010000000   
             0FFFFFFFFC   
             0000000300   
             00000C0000   
             000B000000   
             0000000000   
             0000000D00   
             00000CFFFF   
             FFFB000000   
             0400000010   
             FFFFFFF800   
             000007FFFF   
             FFFFFFFFFF   
             F50000000A   
             FFFFFFFDFF   
             FFFFFEFFFF   
             FFF1000000   
             0EFFFFFFFA   
             0000000000   
             0000000000   
             000E000000   
             050000000C   
             FFFFFFFD00   
             0000080000   
             0010FFFFFF   
             FA0000000B   
             FFFFFFFFFF   
             FFFFF7FFFF   
             FFFC000000   
             0FFFFFFFFE   
             FFFFFFF3FF   
             FFFFF90000   
             0000000000   
             000000000F   
             FFFFFFFC00   
             0000030000   
             000CFFFFFF   
             F900000006   
             00000010FF   
             FFFFF60000   
             0009FFFFFF   
             FFFFFFFFFB   
             FFFFFFF200   
             00000DFFFF   
             FFFEFFFFFF   
             F800000000   
             0000000000   
             000010FFFF   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             FFF7FFFFFF   
             F6FFFFFFF5   
             FFFFFFF3FF   
             FFFFF2       
    00000350 FFFFFFF1FF             .DATA.L     H'FFFFFFF1,H'FFFFFFFD,H'FFFFFFFC,H'FFFFFFFB,H'00000001,H'FFFFFFFA,H'FFFFFFF9,
             FFFFFDFFFF +                       H'FFFFFFF8,H'00000002,H'00000000,H'00000000,H'00000009,H'FFFFFFF0,H'00000008,
             FFFCFFFFFF +                       H'FFFFFFF9,H'FFFFFFF4,H'00000005,H'FFFFFFFC,H'FFFFFFFE,H'FFFFFFF1,H'0000000E,
             FB00000001 +                       H'00000006,H'FFFFFFFF,H'FFFFFFF5,H'0000000A,H'00000003,H'00000000,H'00000000,
             FFFFFFFAFF +                       H'0000000A,H'FFFFFFF8,H'FFFFFFF0,H'00000006,H'FFFFFFFB,H'FFFFFFF4,H'00000003,
             FFFFF9FFFF +                       H'0000000F,H'FFFFFFFE,H'FFFFFFF3,H'00000007,H'0000000B,H'FFFFFFFF,H'FFFFFFF7,
             FFF8000000 +                       H'00000004,H'00000000,H'00000000,H'0000000B,H'00000007,H'FFFFFFFA,H'FFFFFFF0,
             0200000000 +                       H'00000004,H'FFFFFFFD,H'FFFFFFF4,H'FFFFFFF2,H'0000000D,H'FFFFFFFE,H'00000008,
             0000000000 +                       H'FFFFFFF6,H'00000009,H'FFFFFFFF,H'00000005,H'00000000,H'00000000,H'0000000C,
             000009FFFF +                       H'0000000D,H'0000000E,H'0000000F,H'00000009,H'0000000A,H'0000000B,H'FFFFFFFA,
             FFF0000000 +                       H'FFFFFFF9,H'FFFFFFF8,H'FFFFFFFE,H'FFFFFFFD,H'FFFFFFFC,H'FFFFFFFB,H'FFFFFFFF
             08FFFFFFF9   
             FFFFFFF400   
             000005FFFF   
             FFFCFFFFFF   
             FEFFFFFFF1   
             0000000E00   
             000006FFFF   
             FFFFFFFFFF   
             F50000000A   
             0000000300   
             0000000000   
             0000000000   
             0AFFFFFFF8   
             FFFFFFF000   
             000006FFFF   
             FFFBFFFFFF   
             F400000003   
             0000000FFF   
             FFFFFEFFFF   
             FFF3000000   
             070000000B   
             FFFFFFFFFF   
             FFFFF70000   
             0004000000   
             0000000000   
             0000000B00   
             000007FFFF   
             FFFAFFFFFF   
             F000000004   
             FFFFFFFDFF   
             FFFFF4FFFF   
             FFF2000000   
             0DFFFFFFFE   
             00000008FF   
             FFFFF60000   
             0009FFFFFF   
             FF00000005   
             0000000000   
             0000000000   
             000C000000   
             0D0000000E   
             0000000F00   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000090000   
             000A000000   
             0BFFFFFFFA   
             FFFFFFF9FF   
             FFFFF8FFFF   
             FFFEFFFFFF   
             FDFFFFFFFC   
             FFFFFFFBFF   
             FFFFFF       




















































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:19  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      639



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000016C4 Byte(s)
CONSTANT SECTION (C):                               00000021 Byte(s)
DATA     SECTION (D):                               00000484 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00001B69 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           42
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          13
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           464






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkB5EA.tmp 

