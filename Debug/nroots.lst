SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\nroots.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        nroots.c     1    // find the roots of a polynomial numerically
        nroots.c     2    
        nroots.c     3    #include "stdafx.h"
        nroots.c     4    #include "defs.h"
        nroots.c     5    
        nroots.c     6    #define YMAX 101
        nroots.c     7    #define DELTA 1.0e-6
        nroots.c     8    #define EPSILON 1.0e-9
        nroots.c     9    #define ABS(z) sqrt((z).r * (z).r + (z).i * (z).i)
        nroots.c    10    #define RANDOM (4.0 * (double) rand() / (double) RAND_MAX - 2.0)
        nroots.c    11    
        nroots.c    12    static struct {
        nroots.c    13            double r, i;
        nroots.c    14    } a, b, x, y, fa, fb, dx, df, c[YMAX];
        nroots.c    15    
        nroots.c    16    void
        nroots.c    17    eval_nroots(void)
P   00000000              _eval_nroots:                    ; function: eval_nroots
                                                           ; frame size=68
                                                           ; used runtime library name:
                                                           ; __ltd
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 2FB6                   MOV.L       R11,@-R15
    00000008 2FA6                   MOV.L       R10,@-R15
    0000000A 2F96                   MOV.L       R9,@-R15
    0000000C 2F86                   MOV.L       R8,@-R15
    0000000E 4F22                   STS.L       PR,@-R15
        nroots.c    18    {
        nroots.c    19            int h, i, k, n;
        nroots.c    20    
        nroots.c    21            push(cadr(p1));
    00000010 DC32                   MOV.L       L1173+4,R12; _push
    00000012 7FF0                   ADD         #-16,R15
    00000014 DE32                   MOV.L       L1173+8,R14; _p1
    00000016 64E2                   MOV.L       @R14,R4
    00000018 8448                   MOV.B       @(8,R4),R0
    0000001A 2008                   TST         R0,R0
    0000001C 8B02                   BF          L1119
    0000001E 64E2                   MOV.L       @R14,R4
    00000020 A004                   BRA         L1121
    00000022 5441                   MOV.L       @(4,R4),R4
    00000024              L1119:                            
    00000024 9358                   MOV.W       L1173,R3   ; H'0570
    00000026 D22F                   MOV.L       L1173+12,R2; _symtab
    00000028 6422                   MOV.L       @R2,R4
    0000002A 343C                   ADD         R3,R4
    0000002C              L1121:                            
    0000002C 8448                   MOV.B       @(8,R4),R0
    0000002E 2008                   TST         R0,R0
    00000030 8B0C                   BF          L1118
    00000032 64E2                   MOV.L       @R14,R4
    00000034 8448                   MOV.B       @(8,R4),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000036 2008                   TST         R0,R0
    00000038 8B02                   BF          L1120
    0000003A 64E2                   MOV.L       @R14,R4
    0000003C A004                   BRA         L1122
    0000003E 5441                   MOV.L       @(4,R4),R4
    00000040              L1120:                            
    00000040 934A                   MOV.W       L1173,R3   ; H'0570
    00000042 D228                   MOV.L       L1173+12,R2; _symtab
    00000044 6422                   MOV.L       @R2,R4
    00000046 343C                   ADD         R3,R4
    00000048              L1122:                            
    00000048 A004                   BRA         L1123
    0000004A 6442                   MOV.L       @R4,R4
    0000004C              L1118:                            
    0000004C 9344                   MOV.W       L1173,R3   ; H'0570
    0000004E D225                   MOV.L       L1173+12,R2; _symtab
    00000050 6422                   MOV.L       @R2,R4
    00000052 343C                   ADD         R3,R4
    00000054              L1123:                            
    00000054 4C0B                   JSR         @R12
    00000056 0009                   NOP
        nroots.c    22            eval();
    00000058 D323                   MOV.L       L1173+16,R3; _eval
    0000005A 430B                   JSR         @R3
    0000005C 0009                   NOP
        nroots.c    23    
        nroots.c    24            push(caddr(p1));
    0000005E 64E2                   MOV.L       @R14,R4
    00000060 8448                   MOV.B       @(8,R4),R0
    00000062 2008                   TST         R0,R0
    00000064 8B02                   BF          L1126
    00000066 64E2                   MOV.L       @R14,R4
    00000068 A004                   BRA         L1131
    0000006A 5441                   MOV.L       @(4,R4),R4
    0000006C              L1126:                            
    0000006C 9334                   MOV.W       L1173,R3   ; H'0570
    0000006E D21D                   MOV.L       L1173+12,R2; _symtab
    00000070 6422                   MOV.L       @R2,R4
    00000072 343C                   ADD         R3,R4
    00000074              L1131:                            
    00000074 8448                   MOV.B       @(8,R4),R0
    00000076 2008                   TST         R0,R0
    00000078 8B0C                   BF          L1125
    0000007A 64E2                   MOV.L       @R14,R4
    0000007C 8448                   MOV.B       @(8,R4),R0
    0000007E 2008                   TST         R0,R0
    00000080 8B02                   BF          L1127
    00000082 64E2                   MOV.L       @R14,R4
    00000084 A004                   BRA         L1132
    00000086 5441                   MOV.L       @(4,R4),R4
    00000088              L1127:                            
    00000088 9326                   MOV.W       L1173,R3   ; H'0570
    0000008A D216                   MOV.L       L1173+12,R2; _symtab
    0000008C 6422                   MOV.L       @R2,R4
    0000008E 343C                   ADD         R3,R4
    00000090              L1132:                            
    00000090 A004                   BRA         L1133




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000092 5441                   MOV.L       @(4,R4),R4
    00000094              L1125:                            
    00000094 9320                   MOV.W       L1173,R3   ; H'0570
    00000096 D213                   MOV.L       L1173+12,R2; _symtab
    00000098 6422                   MOV.L       @R2,R4
    0000009A 343C                   ADD         R3,R4
    0000009C              L1133:                            
    0000009C 8448                   MOV.B       @(8,R4),R0
    0000009E 2008                   TST         R0,R0
    000000A0 8B2A                   BF          L1124
    000000A2 64E2                   MOV.L       @R14,R4
    000000A4 8448                   MOV.B       @(8,R4),R0
    000000A6 2008                   TST         R0,R0
    000000A8 8B02                   BF          L1129
    000000AA 64E2                   MOV.L       @R14,R4
    000000AC A004                   BRA         L1134
    000000AE 5441                   MOV.L       @(4,R4),R4
    000000B0              L1129:                            
    000000B0 9312                   MOV.W       L1173,R3   ; H'0570
    000000B2 D20C                   MOV.L       L1173+12,R2; _symtab
    000000B4 6422                   MOV.L       @R2,R4
    000000B6 343C                   ADD         R3,R4
    000000B8              L1134:                            
    000000B8 8448                   MOV.B       @(8,R4),R0
    000000BA 2008                   TST         R0,R0
    000000BC 8B16                   BF          L1128
    000000BE 64E2                   MOV.L       @R14,R4
    000000C0 8448                   MOV.B       @(8,R4),R0
    000000C2 2008                   TST         R0,R0
    000000C4 8B02                   BF          L1130
    000000C6 64E2                   MOV.L       @R14,R4
    000000C8 A004                   BRA         L1135
    000000CA 5441                   MOV.L       @(4,R4),R4
    000000CC              L1130:                            
    000000CC 9304                   MOV.W       L1173,R3   ; H'0570
    000000CE D205                   MOV.L       L1173+12,R2; _symtab
    000000D0 6422                   MOV.L       @R2,R4
    000000D2 343C                   ADD         R3,R4
    000000D4              L1135:                            
    000000D4 A00E                   BRA         L1136
    000000D6 5441                   MOV.L       @(4,R4),R4
    000000D8              L1173:                            
    000000D8 0570                   .DATA.W     H'0570
    000000DA 0000                   .DATA.W     0
    000000DC <00000000>             .DATA.L     _push
    000000E0 <00000000>             .DATA.L     _p1
    000000E4 <00000000>             .DATA.L     _symtab
    000000E8 <00000000>             .DATA.L     _eval
    000000EC              L1128:                            
    000000EC 931E                   MOV.W       L1174,R3   ; H'0570
    000000EE D210                   MOV.L       L1174+4,R2 ; _symtab
    000000F0 6422                   MOV.L       @R2,R4
    000000F2 343C                   ADD         R3,R4
    000000F4              L1136:                            
    000000F4 A004                   BRA         L1137
    000000F6 6442                   MOV.L       @R4,R4
    000000F8              L1124:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000F8 9318                   MOV.W       L1174,R3   ; H'0570
    000000FA D20D                   MOV.L       L1174+4,R2 ; _symtab
    000000FC 6422                   MOV.L       @R2,R4
    000000FE 343C                   ADD         R3,R4
    00000100              L1137:                            
    00000100 4C0B                   JSR         @R12
    00000102 0009                   NOP
        nroots.c    25            eval();
    00000104 D30B                   MOV.L       L1174+8,R3 ; _eval
    00000106 430B                   JSR         @R3
    00000108 0009                   NOP
        nroots.c    26            p2 = pop();
    0000010A D80B                   MOV.L       L1174+12,R8; _pop
    0000010C DD0B                   MOV.L       L1174+16,R13; _p2
    0000010E 480B                   JSR         @R8
    00000110 0009                   NOP
    00000112 6403                   MOV         R0,R4
    00000114 930A                   MOV.W       L1174,R3   ; H'0570
    00000116 2D02                   MOV.L       R0,@R13
    00000118 D105                   MOV.L       L1174+4,R1 ; _symtab
    0000011A 6212                   MOV.L       @R1,R2
    0000011C 323C                   ADD         R3,R2
    0000011E 3420                   CMP/EQ      R2,R4
    00000120 8B10                   BF          L1138
        nroots.c    27            if (p2 == symbol(NIL))
        nroots.c    28                    guess();
    00000122 D107                   MOV.L       L1174+20,R1; _guess
    00000124 410B                   JSR         @R1
    00000126 0009                   NOP
    00000128 A00E                   BRA         L1139
    0000012A 0009                   NOP
    0000012C              L1174:                            
    0000012C 0570                   .DATA.W     H'0570
    0000012E 0000                   .DATA.W     0
    00000130 <00000000>             .DATA.L     _symtab
    00000134 <00000000>             .DATA.L     _eval
    00000138 <00000000>             .DATA.L     _pop
    0000013C <00000000>             .DATA.L     _p2
    00000140 <00000000>             .DATA.L     _guess
    00000144              L1138:                            
        nroots.c    29            else
        nroots.c    30                    push(p2);
    00000144 4C0B                   JSR         @R12
    00000146 0009                   NOP
    00000148              L1139:                            
        nroots.c    31    
        nroots.c    32            p2 = pop();
    00000148 480B                   JSR         @R8
    0000014A 0009                   NOP
        nroots.c    33            p1 = pop();
    0000014C 480B                   JSR         @R8
    0000014E 2D02                   MOV.L       R0,@R13
    00000150 2E02                   MOV.L       R0,@R14
        nroots.c    34    
        nroots.c    35            if (!ispoly(p1, p2))
    00000152 65D2                   MOV.L       @R13,R5
    00000154 D276                   MOV.L       L1175,R2   ; _ispoly




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000156 420B                   JSR         @R2
    00000158 6403                   MOV         R0,R4
    0000015A 2008                   TST         R0,R0
    0000015C 8B03                   BF          L1140
        nroots.c    36                    stop("nroots: polynomial?");
    0000015E D475                   MOV.L       L1175+4,R4 ; L1072
    00000160 D275                   MOV.L       L1175+8,R2 ; _stop
    00000162 420B                   JSR         @R2
    00000164 0009                   NOP
    00000166              L1140:                            
        nroots.c    37    
        nroots.c    38            // mark the stack
        nroots.c    39    
        nroots.c    40            h = tos;
    00000166 D275                   MOV.L       L1175+12,R2; _tos
    00000168 6322                   MOV.L       @R2,R3
    0000016A 1F32                   MOV.L       R3,@(8,R15)
        nroots.c    41    
        nroots.c    42            // get the coefficients
        nroots.c    43    
        nroots.c    44            push(p1);
    0000016C 4C0B                   JSR         @R12
    0000016E 64E2                   MOV.L       @R14,R4
        nroots.c    45            push(p2);
    00000170 4C0B                   JSR         @R12
    00000172 64D2                   MOV.L       @R13,R4
        nroots.c    46            n = coeff();
    00000174 D372                   MOV.L       L1175+16,R3; _coeff
    00000176 430B                   JSR         @R3
    00000178 0009                   NOP
        nroots.c    47            if (n > YMAX)
    0000017A E365                   MOV         #101,R3
    0000017C 3037                   CMP/GT      R3,R0
    0000017E 8F04                   BF/S        L1141
    00000180 2F02                   MOV.L       R0,@R15
        nroots.c    48                    stop("nroots: degree?");
    00000182 D470                   MOV.L       L1175+20,R4; L1073
    00000184 D36C                   MOV.L       L1175+8,R3 ; _stop
    00000186 430B                   JSR         @R3
    00000188 0009                   NOP
    0000018A              L1141:                            
        nroots.c    49    
        nroots.c    50            // convert the coefficients to real and imaginary doubles
        nroots.c    51    
        nroots.c    52            for (i = 0; i < n; i++) {
    0000018A E200                   MOV         #0,R2
    0000018C D96E                   MOV.L       L1175+24,R9; __$c
    0000018E 1F21                   MOV.L       R2,@(4,R15)
    00000190 5BF2                   MOV.L       @(8,R15),R11
    00000192 4B08                   SHLL2       R11
    00000194 1FB3                   MOV.L       R11,@(12,R15)
    00000196 DA6D                   MOV.L       L1175+28,R10; _stack
    00000198 63F2                   MOV.L       @R15,R3
    0000019A 4315                   CMP/PL      R3
    0000019C 8B40                   BF          L1142
    0000019E              L1143:                            
        nroots.c    53                    push(stack[h + i]);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000019E 60A2                   MOV.L       @R10,R0
    000001A0 4C0B                   JSR         @R12
    000001A2 04BE                   MOV.L       @(R0,R11),R4
        nroots.c    54                    real();
    000001A4 D36A                   MOV.L       L1175+32,R3; _real
    000001A6 430B                   JSR         @R3
    000001A8 0009                   NOP
        nroots.c    55                    yyfloat();
    000001AA D26A                   MOV.L       L1175+36,R2; _yyfloat
    000001AC 420B                   JSR         @R2
    000001AE 0009                   NOP
        nroots.c    56                    eval();
    000001B0 D369                   MOV.L       L1175+40,R3; _eval
    000001B2 430B                   JSR         @R3
    000001B4 0009                   NOP
        nroots.c    57                    p1 = pop();
    000001B6 480B                   JSR         @R8
    000001B8 0009                   NOP
    000001BA 2E02                   MOV.L       R0,@R14
        nroots.c    58                    push(stack[h + i]);
    000001BC 60A2                   MOV.L       @R10,R0
    000001BE 4C0B                   JSR         @R12
    000001C0 04BE                   MOV.L       @(R0,R11),R4
        nroots.c    59                    imag();
    000001C2 D266                   MOV.L       L1175+44,R2; _imag
    000001C4 420B                   JSR         @R2
    000001C6 0009                   NOP
        nroots.c    60                    yyfloat();
    000001C8 D362                   MOV.L       L1175+36,R3; _yyfloat
    000001CA 430B                   JSR         @R3
    000001CC 0009                   NOP
        nroots.c    61                    eval();
    000001CE D262                   MOV.L       L1175+40,R2; _eval
    000001D0 420B                   JSR         @R2
    000001D2 0009                   NOP
        nroots.c    62                    p2 = pop();
    000001D4 480B                   JSR         @R8
    000001D6 0009                   NOP
    000001D8 2D02                   MOV.L       R0,@R13
        nroots.c    63                    if (!isdouble(p1) || !isdouble(p2))
    000001DA 60E2                   MOV.L       @R14,R0
    000001DC 8408                   MOV.B       @(8,R0),R0
    000001DE 600C                   EXTU.B      R0,R0
    000001E0 8802                   CMP/EQ      #2,R0
    000001E2 8B04                   BF          L1145
    000001E4 60D2                   MOV.L       @R13,R0
    000001E6 8408                   MOV.B       @(8,R0),R0
    000001E8 600C                   EXTU.B      R0,R0
    000001EA 8802                   CMP/EQ      #2,R0
    000001EC 8903                   BT          L1144
    000001EE              L1145:                            
        nroots.c    64                            stop("nroots: coefficients?");
    000001EE D45C                   MOV.L       L1175+48,R4; L1075
    000001F0 D251                   MOV.L       L1175+8,R2 ; _stop
    000001F2 420B                   JSR         @R2
    000001F4 0009                   NOP
    000001F6              L1144:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        nroots.c    65                    c[i].r = p1->u.d;
    000001F6 6193                   MOV         R9,R1
    000001F8 62E2                   MOV.L       @R14,R2
    000001FA 7910                   ADD         #16,R9
    000001FC 6022                   MOV.L       @R2,R0
    000001FE 2102                   MOV.L       R0,@R1
    00000200 5021                   MOV.L       @(4,R2),R0
    00000202 1101                   MOV.L       R0,@(4,R1)
        nroots.c    66                    c[i].i = p2->u.d;
    00000204 62D2                   MOV.L       @R13,R2
    00000206 7108                   ADD         #8,R1
    00000208 6323                   MOV         R2,R3
    0000020A 6032                   MOV.L       @R3,R0
    0000020C 2102                   MOV.L       R0,@R1
    0000020E 5031                   MOV.L       @(4,R3),R0
    00000210 1101                   MOV.L       R0,@(4,R1)
    00000212 53F1                   MOV.L       @(4,R15),R3
    00000214 7301                   ADD         #1,R3
    00000216 1F31                   MOV.L       R3,@(4,R15)
    00000218 62F2                   MOV.L       @R15,R2
    0000021A 3323                   CMP/GE      R2,R3
    0000021C 8FBF                   BF/S        L1143
    0000021E 7B04                   ADD         #4,R11
    00000220              L1142:                            
        nroots.c    67            }
        nroots.c    68    
        nroots.c    69            // pop the coefficients
        nroots.c    70    
        nroots.c    71            tos = h;
    00000220 53F2                   MOV.L       @(8,R15),R3
    00000222 D146                   MOV.L       L1175+12,R1; _tos
    00000224 2132                   MOV.L       R3,@R1
        nroots.c    72    
        nroots.c    73            // n is the number of coefficients, n = deg(p) + 1
        nroots.c    74    
        nroots.c    75            monic(n);
    00000226 B0B3                   BSR         _monic
    00000228 64F2                   MOV.L       @R15,R4
        nroots.c    76    
        nroots.c    77            for (k = n; k > 1; k--) {
    0000022A E901                   MOV         #1,R9
    0000022C DD4E                   MOV.L       L1175+56,R13; __$a
    0000022E 6BF2                   MOV.L       @R15,R11
    00000230 D84C                   MOV.L       L1175+52,R8; _fabs
    00000232 3B97                   CMP/GT      R9,R11
    00000234 8B49                   BF          L1146
    00000236              L1147:                            
        nroots.c    78                    findroot(k);
    00000236 B148                   BSR         _findroot
    00000238 64B3                   MOV         R11,R4
        nroots.c    79                    if (fabs(a.r) < DELTA)
    0000023A 7FF8                   ADD         #-8,R15
    0000023C 53D1                   MOV.L       @(4,R13),R3
    0000023E E208                   MOV         #8,R2
    00000240 2F36                   MOV.L       R3,@-R15
    00000242 63D2                   MOV.L       @R13,R3
    00000244 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000246 32FC                   ADD         R15,R2
    00000248 480B                   JSR         @R8
    0000024A 2F26                   MOV.L       R2,@-R15
    0000024C D147                   MOV.L       L1175+60,R1; H'A0B5ED8D
    0000024E 7F0C                   ADD         #12,R15
    00000250 D348                   MOV.L       L1175+68,R3; __ltd
    00000252 2F16                   MOV.L       R1,@-R15
    00000254 D146                   MOV.L       L1175+64,R1; H'3EB0C6F7
    00000256 430B                   JSR         @R3
    00000258 2F16                   MOV.L       R1,@-R15
    0000025A 8800                   CMP/EQ      #0,R0
    0000025C 8D04                   BT/S        L1148
        nroots.c    80                            a.r = 0.0;
        nroots.c    81                    if (fabs(a.i) < DELTA)
    0000025E 7FF8                   ADD         #-8,R15
    00000260 62D3                   MOV         R13,R2
    00000262 E100                   MOV         #0,R1
    00000264 2212                   MOV.L       R1,@R2
    00000266 1211                   MOV.L       R1,@(4,R2)
    00000268              L1148:                            
    00000268 53D3                   MOV.L       @(12,R13),R3
    0000026A E208                   MOV         #8,R2
    0000026C 2F36                   MOV.L       R3,@-R15
    0000026E 53D2                   MOV.L       @(8,R13),R3
    00000270 2F36                   MOV.L       R3,@-R15
    00000272 32FC                   ADD         R15,R2
    00000274 480B                   JSR         @R8
    00000276 2F26                   MOV.L       R2,@-R15
    00000278 D13C                   MOV.L       L1175+60,R1; H'A0B5ED8D
    0000027A 7F0C                   ADD         #12,R15
    0000027C D33D                   MOV.L       L1175+68,R3; __ltd
    0000027E 2F16                   MOV.L       R1,@-R15
    00000280 D13B                   MOV.L       L1175+64,R1; H'3EB0C6F7
    00000282 430B                   JSR         @R3
    00000284 2F16                   MOV.L       R1,@-R15
    00000286 8800                   CMP/EQ      #0,R0
    00000288 8904                   BT          L1149
        nroots.c    82                            a.i = 0.0;
    0000028A 62D3                   MOV         R13,R2
    0000028C 7208                   ADD         #8,R2
    0000028E E100                   MOV         #0,R1
    00000290 2212                   MOV.L       R1,@R2
    00000292 1211                   MOV.L       R1,@(4,R2)
    00000294              L1149:                            
        nroots.c    83                    push_double(a.r);
    00000294 53D1                   MOV.L       @(4,R13),R3
    00000296 2F36                   MOV.L       R3,@-R15
    00000298 63D2                   MOV.L       @R13,R3
    0000029A D237                   MOV.L       L1175+72,R2; _push_double
    0000029C 420B                   JSR         @R2
    0000029E 2F36                   MOV.L       R3,@-R15
        nroots.c    84                    push_double(a.i);
    000002A0 51D3                   MOV.L       @(12,R13),R1
    000002A2 2F16                   MOV.L       R1,@-R15
    000002A4 51D2                   MOV.L       @(8,R13),R1
    000002A6 D334                   MOV.L       L1175+72,R3; _push_double
    000002A8 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002AA 2F16                   MOV.L       R1,@-R15
        nroots.c    85                    push(imaginaryunit);
    000002AC D233                   MOV.L       L1175+76,R2; _imaginaryunit
    000002AE 7F10                   ADD         #16,R15
    000002B0 4C0B                   JSR         @R12
    000002B2 6422                   MOV.L       @R2,R4
        nroots.c    86                    multiply();
    000002B4 D332                   MOV.L       L1175+80,R3; _multiply
    000002B6 430B                   JSR         @R3
    000002B8 0009                   NOP
        nroots.c    87                    add();
    000002BA D132                   MOV.L       L1175+84,R1; _add
    000002BC 410B                   JSR         @R1
    000002BE 0009                   NOP
        nroots.c    88                    divpoly_int(k);
    000002C0 B532                   BSR         _divpoly_int
    000002C2 64B3                   MOV         R11,R4
    000002C4 7BFF                   ADD         #-1,R11
    000002C6 3B97                   CMP/GT      R9,R11
    000002C8 89B5                   BT          L1147
    000002CA              L1146:                            
        nroots.c    89            }
        nroots.c    90    
        nroots.c    91            // now make n equal to the number of roots
        nroots.c    92    
        nroots.c    93            n = tos - h;
    000002CA 53F2                   MOV.L       @(8,R15),R3
    000002CC D21B                   MOV.L       L1175+12,R2; _tos
    000002CE 6D22                   MOV.L       @R2,R13
    000002D0 3D38                   SUB         R3,R13
        nroots.c    94    
        nroots.c    95            if (n > 1) {
    000002D2 3D97                   CMP/GT      R9,R13
    000002D4 8B22                   BF          L1150
        nroots.c    96                    sort_stack(n);
    000002D6 D22C                   MOV.L       L1175+88,R2; _sort_stack
    000002D8 420B                   JSR         @R2
    000002DA 64D3                   MOV         R13,R4
        nroots.c    97                    p1 = alloc_tensor(n);
    000002DC D32B                   MOV.L       L1175+92,R3; _alloc_tensor
    000002DE 430B                   JSR         @R3
    000002E0 64D3                   MOV         R13,R4
        nroots.c    98                    p1->u.tensor->ndim = 1;
    000002E2 6203                   MOV         R0,R2
    000002E4 2E02                   MOV.L       R0,@R14
        nroots.c    99                    p1->u.tensor->dim[0] = n;
        nroots.c   100                    for (i = 0; i < n; i++)
    000002E6 E600                   MOV         #0,R6
    000002E8 6322                   MOV.L       @R2,R3
    000002EA 4D15                   CMP/PL      R13
    000002EC 2392                   MOV.L       R9,@R3
    000002EE 62E2                   MOV.L       @R14,R2
    000002F0 6322                   MOV.L       @R2,R3
    000002F2 13D1                   MOV.L       R13,@(4,R3)
    000002F4 54F3                   MOV.L       @(12,R15),R4
    000002F6 8F0C                   BF/S        L1151
    000002F8 6563                   MOV         R6,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002FA              L1152:                            
    000002FA 7601                   ADD         #1,R6
        nroots.c   101                            p1->u.tensor->elem[i] = stack[h + i];
    000002FC 60E2                   MOV.L       @R14,R0
    000002FE 36D3                   CMP/GE      R13,R6
    00000300 6302                   MOV.L       @R0,R3
    00000302 7368                   ADD         #104,R3
    00000304 60A2                   MOV.L       @R10,R0
    00000306 335C                   ADD         R5,R3
    00000308 024E                   MOV.L       @(R0,R4),R2
    0000030A 7404                   ADD         #4,R4
    0000030C 2322                   MOV.L       R2,@R3
    0000030E 8FF4                   BF/S        L1152
    00000310 7504                   ADD         #4,R5
    00000312              L1151:                            
        nroots.c   102                    tos = h;
    00000312 52F2                   MOV.L       @(8,R15),R2
    00000314 D309                   MOV.L       L1175+12,R3; _tos
    00000316 2322                   MOV.L       R2,@R3
        nroots.c   103                    push(p1);
    00000318 4C0B                   JSR         @R12
    0000031A 64E2                   MOV.L       @R14,R4
    0000031C              L1150:                            
        nroots.c   104            }
        nroots.c   105    }
    0000031C 7F10                   ADD         #16,R15
    0000031E 4F26                   LDS.L       @R15+,PR
    00000320 68F6                   MOV.L       @R15+,R8
    00000322 69F6                   MOV.L       @R15+,R9
    00000324 6AF6                   MOV.L       @R15+,R10
    00000326 6BF6                   MOV.L       @R15+,R11
    00000328 6CF6                   MOV.L       @R15+,R12
    0000032A 6DF6                   MOV.L       @R15+,R13
    0000032C 000B                   RTS
    0000032E 6EF6                   MOV.L       @R15+,R14
    00000330              L1175:                            
    00000330 <00000000>             .DATA.L     _ispoly
    00000334 <00000000>             .DATA.L     L1072
    00000338 <00000000>             .DATA.L     _stop
    0000033C <00000000>             .DATA.L     _tos
    00000340 <00000000>             .DATA.L     _coeff
    00000344 <00000000>             .DATA.L     L1073
    00000348 <00000000>             .DATA.L     __$c
    0000034C <00000000>             .DATA.L     _stack
    00000350 <00000000>             .DATA.L     _real
    00000354 <00000000>             .DATA.L     _yyfloat
    00000358 <00000000>             .DATA.L     _eval
    0000035C <00000000>             .DATA.L     _imag
    00000360 <00000000>             .DATA.L     L1075
    00000364 <00000000>             .DATA.L     _fabs
    00000368 <00000000>             .DATA.L     __$a
    0000036C A0B5ED8D               .DATA.L     H'A0B5ED8D
    00000370 3EB0C6F7               .DATA.L     H'3EB0C6F7
    00000374 <00000000>             .DATA.L     __ltd
    00000378 <00000000>             .DATA.L     _push_double
    0000037C <00000000>             .DATA.L     _imaginaryunit
    00000380 <00000000>             .DATA.L     _multiply




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000384 <00000000>             .DATA.L     _add
    00000388 <00000000>             .DATA.L     _sort_stack
    0000038C <00000000>             .DATA.L     _alloc_tensor
        nroots.c   106    
        nroots.c   107    // divide the polynomial by its leading coefficient
        nroots.c   108    
        nroots.c   109    void
        nroots.c   110    monic(int n)
    00000390              _monic:                          ; function: monic
                                                           ; frame size=60
                                                           ; used runtime library name:
                                                           ; __addd, __subdr, __muld, __divdr, __quick_evn_mvn
    00000390 2FE6                   MOV.L       R14,@-R15
        nroots.c   111    {
        nroots.c   112            int k;
        nroots.c   113            double t;
        nroots.c   114            y = c[n - 1];
    00000392 6E43                   MOV         R4,R14
    00000394 D376                   MOV.L       L1176+10,R3; __quick_evn_mvn
    00000396 7EFF                   ADD         #-1,R14
    00000398 4F22                   STS.L       PR,@-R15
    0000039A 62E3                   MOV         R14,R2
    0000039C D672                   MOV.L       L1176+2,R6 ; __$c
    0000039E 7FF8                   ADD         #-8,R15
    000003A0 D572                   MOV.L       L1176+6,R5 ; __$y
    000003A2 4208                   SHLL2       R2
    000003A4 4208                   SHLL2       R2
    000003A6 326C                   ADD         R6,R2
    000003A8 6153                   MOV         R5,R1
    000003AA 430B                   JSR         @R3
    000003AC E010                   MOV         #16,R0
        nroots.c   115            t = y.r * y.r + y.i * y.i;
    000003AE 7FF8                   ADD         #-8,R15
    000003B0 5151                   MOV.L       @(4,R5),R1
    000003B2 2F16                   MOV.L       R1,@-R15
    000003B4 6152                   MOV.L       @R5,R1
    000003B6 2F16                   MOV.L       R1,@-R15
    000003B8 5351                   MOV.L       @(4,R5),R3
    000003BA 2F36                   MOV.L       R3,@-R15
    000003BC 6352                   MOV.L       @R5,R3
    000003BE 2F36                   MOV.L       R3,@-R15
    000003C0 D16C                   MOV.L       L1176+14,R1; __muld
    000003C2 62F3                   MOV         R15,R2
    000003C4 7210                   ADD         #16,R2
    000003C6 410B                   JSR         @R1
    000003C8 2F26                   MOV.L       R2,@-R15
    000003CA 7FF8                   ADD         #-8,R15
    000003CC D169                   MOV.L       L1176+14,R1; __muld
    000003CE 5353                   MOV.L       @(12,R5),R3
    000003D0 2F36                   MOV.L       R3,@-R15
    000003D2 5352                   MOV.L       @(8,R5),R3
    000003D4 2F36                   MOV.L       R3,@-R15
    000003D6 5253                   MOV.L       @(12,R5),R2
    000003D8 2F26                   MOV.L       R2,@-R15
    000003DA 5252                   MOV.L       @(8,R5),R2
    000003DC 2F26                   MOV.L       R2,@-R15
    000003DE 63F3                   MOV         R15,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003E0 7310                   ADD         #16,R3
    000003E2 410B                   JSR         @R1
    000003E4 2F36                   MOV.L       R3,@-R15
    000003E6 60F3                   MOV         R15,R0
    000003E8 D263                   MOV.L       L1176+18,R2; __addd
    000003EA 7010                   ADD         #16,R0
    000003EC 420B                   JSR         @R2
    000003EE 2F06                   MOV.L       R0,@-R15
        nroots.c   116            for (k = 0; k < n - 1; k++) {
    000003F0 E700                   MOV         #0,R7
    000003F2 E400                   MOV         #0,R4
    000003F4 4E15                   CMP/PL      R14
    000003F6 8F56                   BF/S        L1153
    000003F8 346C                   ADD         R6,R4
    000003FA              L1154:                            
        nroots.c   117                    c[k].r = (c[k].r * y.r + c[k].i * y.i) / t;
    000003FA 7FF0                   ADD         #-16,R15
    000003FC D15D                   MOV.L       L1176+14,R1; __muld
    000003FE 5241                   MOV.L       @(4,R4),R2
    00000400 2F26                   MOV.L       R2,@-R15
    00000402 6242                   MOV.L       @R4,R2
    00000404 2F26                   MOV.L       R2,@-R15
    00000406 5351                   MOV.L       @(4,R5),R3
    00000408 2F36                   MOV.L       R3,@-R15
    0000040A 6352                   MOV.L       @R5,R3
    0000040C 2F36                   MOV.L       R3,@-R15
    0000040E 62F3                   MOV         R15,R2
    00000410 7210                   ADD         #16,R2
    00000412 410B                   JSR         @R1
    00000414 2F26                   MOV.L       R2,@-R15
    00000416 7FF8                   ADD         #-8,R15
    00000418 D156                   MOV.L       L1176+14,R1; __muld
    0000041A 5343                   MOV.L       @(12,R4),R3
    0000041C 2F36                   MOV.L       R3,@-R15
    0000041E 5342                   MOV.L       @(8,R4),R3
    00000420 2F36                   MOV.L       R3,@-R15
    00000422 5253                   MOV.L       @(12,R5),R2
    00000424 2F26                   MOV.L       R2,@-R15
    00000426 5252                   MOV.L       @(8,R5),R2
    00000428 2F26                   MOV.L       R2,@-R15
    0000042A 63F3                   MOV         R15,R3
    0000042C 7310                   ADD         #16,R3
    0000042E 410B                   JSR         @R1
    00000430 2F36                   MOV.L       R3,@-R15
    00000432 62F3                   MOV         R15,R2
    00000434 D050                   MOV.L       L1176+18,R0; __addd
    00000436 7210                   ADD         #16,R2
    00000438 400B                   JSR         @R0
    0000043A 2F26                   MOV.L       R2,@-R15
    0000043C 53F3                   MOV.L       @(12,R15),R3
    0000043E 2F36                   MOV.L       R3,@-R15
    00000440 53F3                   MOV.L       @(12,R15),R3
    00000442 2F36                   MOV.L       R3,@-R15
    00000444 D24D                   MOV.L       L1176+22,R2; __divdr
    00000446 420B                   JSR         @R2
    00000448 2F46                   MOV.L       R4,@-R15
        nroots.c   118                    c[k].i = (c[k].i * y.r - c[k].r * y.i) / t;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000044A 7FF0                   ADD         #-16,R15
    0000044C D149                   MOV.L       L1176+14,R1; __muld
    0000044E 5343                   MOV.L       @(12,R4),R3
    00000450 2F36                   MOV.L       R3,@-R15
    00000452 5342                   MOV.L       @(8,R4),R3
    00000454 2F36                   MOV.L       R3,@-R15
    00000456 5251                   MOV.L       @(4,R5),R2
    00000458 2F26                   MOV.L       R2,@-R15
    0000045A 6252                   MOV.L       @R5,R2
    0000045C 2F26                   MOV.L       R2,@-R15
    0000045E 63F3                   MOV         R15,R3
    00000460 7310                   ADD         #16,R3
    00000462 410B                   JSR         @R1
    00000464 2F36                   MOV.L       R3,@-R15
    00000466 7FF8                   ADD         #-8,R15
    00000468 D142                   MOV.L       L1176+14,R1; __muld
    0000046A 5241                   MOV.L       @(4,R4),R2
    0000046C 2F26                   MOV.L       R2,@-R15
    0000046E 6242                   MOV.L       @R4,R2
    00000470 2F26                   MOV.L       R2,@-R15
    00000472 5353                   MOV.L       @(12,R5),R3
    00000474 2F36                   MOV.L       R3,@-R15
    00000476 5352                   MOV.L       @(8,R5),R3
    00000478 2F36                   MOV.L       R3,@-R15
    0000047A 62F3                   MOV         R15,R2
    0000047C 7210                   ADD         #16,R2
    0000047E 410B                   JSR         @R1
    00000480 2F26                   MOV.L       R2,@-R15
    00000482 63F3                   MOV         R15,R3
    00000484 D03E                   MOV.L       L1176+26,R0; __subdr
    00000486 7310                   ADD         #16,R3
    00000488 400B                   JSR         @R0
    0000048A 2F36                   MOV.L       R3,@-R15
    0000048C 52F3                   MOV.L       @(12,R15),R2
    0000048E E108                   MOV         #8,R1
    00000490 D33A                   MOV.L       L1176+22,R3; __divdr
    00000492 314C                   ADD         R4,R1
    00000494 2F26                   MOV.L       R2,@-R15
    00000496 52F3                   MOV.L       @(12,R15),R2
    00000498 2F26                   MOV.L       R2,@-R15
    0000049A 430B                   JSR         @R3
    0000049C 2F16                   MOV.L       R1,@-R15
    0000049E 7701                   ADD         #1,R7
    000004A0 37E3                   CMP/GE      R14,R7
    000004A2 8FAA                   BF/S        L1154
    000004A4 7410                   ADD         #16,R4
    000004A6              L1153:                            
        nroots.c   119            }
        nroots.c   120            c[n - 1].r = 1.0;
    000004A6 64E3                   MOV         R14,R4
    000004A8 D236                   MOV.L       L1176+30,R2; H'3FF00000
    000004AA 4408                   SHLL2       R4
    000004AC 4408                   SHLL2       R4
    000004AE 346C                   ADD         R6,R4
    000004B0 6343                   MOV         R4,R3
        nroots.c   121            c[n - 1].i = 0.0;
    000004B2 6133                   MOV         R3,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004B4 2322                   MOV.L       R2,@R3
    000004B6 7108                   ADD         #8,R1
    000004B8 E200                   MOV         #0,R2
    000004BA 6023                   MOV         R2,R0
    000004BC 1321                   MOV.L       R2,@(4,R3)
    000004BE 2122                   MOV.L       R2,@R1
    000004C0 1101                   MOV.L       R0,@(4,R1)
        nroots.c   122    }
    000004C2 7F08                   ADD         #8,R15
    000004C4 4F26                   LDS.L       @R15+,PR
    000004C6 000B                   RTS
    000004C8 6EF6                   MOV.L       @R15+,R14
        nroots.c   123    
        nroots.c   124    // uses the secant method
        nroots.c   125    
        nroots.c   126    void
        nroots.c   127    findroot(int n)
    000004CA              _findroot:                       ; function: findroot
                                                           ; frame size=112
                                                           ; used runtime library name:
                                                           ; __addd, __subdr, __muld, __divdr, __itod, __ned, __ltd, __quick_evn_mvn
    000004CA 2FE6                   MOV.L       R14,@-R15
    000004CC 2FD6                   MOV.L       R13,@-R15
    000004CE 2FC6                   MOV.L       R12,@-R15
    000004D0 2FB6                   MOV.L       R11,@-R15
    000004D2 2FA6                   MOV.L       R10,@-R15
    000004D4 2F96                   MOV.L       R9,@-R15
    000004D6 2F86                   MOV.L       R8,@-R15
    000004D8 4F22                   STS.L       PR,@-R15
    000004DA 7FEC                   ADD         #-20,R15
        nroots.c   128    {
        nroots.c   129            int j, k;
        nroots.c   130            double t;
        nroots.c   131    
        nroots.c   132            if (ABS(c[0]) < DELTA) {
    000004DC DC2A                   MOV.L       L1176+34,R12; __$a
    000004DE 1F41                   MOV.L       R4,@(4,R15)
    000004E0 DE21                   MOV.L       L1176+2,R14; __$c
    000004E2 7FE8                   ADD         #-24,R15
    000004E4 D123                   MOV.L       L1176+14,R1; __muld
    000004E6 53E1                   MOV.L       @(4,R14),R3
    000004E8 2F36                   MOV.L       R3,@-R15
    000004EA 63E2                   MOV.L       @R14,R3
    000004EC 2F36                   MOV.L       R3,@-R15
    000004EE 52E1                   MOV.L       @(4,R14),R2
    000004F0 2F26                   MOV.L       R2,@-R15
    000004F2 62E2                   MOV.L       @R14,R2
    000004F4 2F26                   MOV.L       R2,@-R15
    000004F6 63F3                   MOV         R15,R3
    000004F8 7310                   ADD         #16,R3
    000004FA 410B                   JSR         @R1
    000004FC 2F36                   MOV.L       R3,@-R15
    000004FE 7FF8                   ADD         #-8,R15
    00000500 D11C                   MOV.L       L1176+14,R1; __muld
    00000502 52E3                   MOV.L       @(12,R14),R2
    00000504 2F26                   MOV.L       R2,@-R15
    00000506 52E2                   MOV.L       @(8,R14),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000508 2F26                   MOV.L       R2,@-R15
    0000050A 53E3                   MOV.L       @(12,R14),R3
    0000050C 2F36                   MOV.L       R3,@-R15
    0000050E 53E2                   MOV.L       @(8,R14),R3
    00000510 2F36                   MOV.L       R3,@-R15
    00000512 62F3                   MOV         R15,R2
    00000514 7210                   ADD         #16,R2
    00000516 410B                   JSR         @R1
    00000518 2F26                   MOV.L       R2,@-R15
    0000051A 63F3                   MOV         R15,R3
    0000051C D016                   MOV.L       L1176+18,R0; __addd
    0000051E 7310                   ADD         #16,R3
    00000520 400B                   JSR         @R0
    00000522 2F36                   MOV.L       R3,@-R15
    00000524 D119                   MOV.L       L1176+38,R1; _sqrt
    00000526 E208                   MOV         #8,R2
    00000528 32FC                   ADD         R15,R2
    0000052A 410B                   JSR         @R1
    0000052C 2F26                   MOV.L       R2,@-R15
    0000052E 7F0C                   ADD         #12,R15
    00000530 D217                   MOV.L       L1176+42,R2; H'A0B5ED8D
    00000532 2F26                   MOV.L       R2,@-R15
    00000534 D217                   MOV.L       L1176+46,R2; H'3EB0C6F7
    00000536 D318                   MOV.L       L1176+50,R3; __ltd
    00000538 430B                   JSR         @R3
    0000053A 2F26                   MOV.L       R2,@-R15
    0000053C 8800                   CMP/EQ      #0,R0
    0000053E 8909                   BT          L1155
        nroots.c   133                    a.r = 0.0;
    00000540 62C3                   MOV         R12,R2
    00000542 E100                   MOV         #0,R1
    00000544 2212                   MOV.L       R1,@R2
        nroots.c   134                    a.i = 0.0;
    00000546 6323                   MOV         R2,R3
    00000548 1211                   MOV.L       R1,@(4,R2)
    0000054A 6013                   MOV         R1,R0
    0000054C 7308                   ADD         #8,R3
    0000054E 2312                   MOV.L       R1,@R3
        nroots.c   135                    return;
    00000550 A2A5                   BRA         L1156
    00000552 1301                   MOV.L       R0,@(4,R3)
    00000554              L1155:                            
        nroots.c   136            }
        nroots.c   137    
        nroots.c   138            for (j = 0; j < 100; j++) {
    00000554 D805                   MOV.L       L1176+6,R8 ; __$y
    00000556 E300                   MOV         #0,R3
    00000558 D910                   MOV.L       L1176+54,R9; __$dx
    0000055A DA11                   MOV.L       L1176+58,R10; __$b
    0000055C DB11                   MOV.L       L1176+62,R11; __$df
    0000055E DD12                   MOV.L       L1176+66,R13; __$fa
    00000560 DE12                   MOV.L       L1176+70,R14; __$fb
    00000562 A28A                   BRA         L1157
    00000564 1F32                   MOV.L       R3,@(8,R15)
    00000566              L1176:                            
    00000566 0000                   .DATA.W     0
    00000568 <00000000>             .DATA.L     __$c




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000056C <00000000>             .DATA.L     __$y
    00000570 <00000000>             .DATA.L     __quick_evn_mvn
    00000574 <00000000>             .DATA.L     __muld
    00000578 <00000000>             .DATA.L     __addd
    0000057C <00000000>             .DATA.L     __divdr
    00000580 <00000000>             .DATA.L     __subdr
    00000584 3FF00000               .DATA.L     H'3FF00000
    00000588 <00000000>             .DATA.L     __$a
    0000058C <00000000>             .DATA.L     _sqrt
    00000590 A0B5ED8D               .DATA.L     H'A0B5ED8D
    00000594 3EB0C6F7               .DATA.L     H'3EB0C6F7
    00000598 <00000000>             .DATA.L     __ltd
    0000059C <00000000>             .DATA.L     __$dx
    000005A0 <00000000>             .DATA.L     __$b
    000005A4 <00000000>             .DATA.L     __$df
    000005A8 <00000000>             .DATA.L     __$fa
    000005AC <00000000>             .DATA.L     __$fb
    000005B0              L1158:                            
        nroots.c   139    
        nroots.c   140                    a.r = RANDOM;
    000005B0 D1DA                   MOV.L       L1177,R1   ; _rand
    000005B2 410B                   JSR         @R1
    000005B4 7FF0                   ADD         #-16,R15
    000005B6 7FF8                   ADD         #-8,R15
    000005B8 D2D9                   MOV.L       L1177+4,R2 ; __itod
    000005BA 420B                   JSR         @R2
    000005BC 2FF6                   MOV.L       R15,@-R15
    000005BE E300                   MOV         #0,R3
    000005C0 D1D9                   MOV.L       L1177+12,R1; __muld
    000005C2 2F36                   MOV.L       R3,@-R15
    000005C4 D3D7                   MOV.L       L1177+8,R3 ; H'40100000
    000005C6 2F36                   MOV.L       R3,@-R15
    000005C8 62F3                   MOV         R15,R2
    000005CA 7210                   ADD         #16,R2
    000005CC 410B                   JSR         @R1
    000005CE 2F26                   MOV.L       R2,@-R15
    000005D0 D1D7                   MOV.L       L1177+20,R1; __divdr
    000005D2 E300                   MOV         #0,R3
    000005D4 2F36                   MOV.L       R3,@-R15
    000005D6 D3D5                   MOV.L       L1177+16,R3; H'40DFFFC0
    000005D8 2F36                   MOV.L       R3,@-R15
    000005DA 62F3                   MOV         R15,R2
    000005DC 7210                   ADD         #16,R2
    000005DE 410B                   JSR         @R1
    000005E0 2F26                   MOV.L       R2,@-R15
    000005E2 E300                   MOV         #0,R3
    000005E4 D2D4                   MOV.L       L1177+28,R2; __addd
    000005E6 2F36                   MOV.L       R3,@-R15
    000005E8 D3D2                   MOV.L       L1177+24,R3; H'C0000000
    000005EA 2F36                   MOV.L       R3,@-R15
    000005EC 420B                   JSR         @R2
    000005EE 2FC6                   MOV.L       R12,@-R15
        nroots.c   141                    a.i = RANDOM;
    000005F0 D3CA                   MOV.L       L1177,R3   ; _rand
    000005F2 430B                   JSR         @R3
    000005F4 7FF0                   ADD         #-16,R15
    000005F6 7FF8                   ADD         #-8,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005F8 D1C9                   MOV.L       L1177+4,R1 ; __itod
    000005FA 410B                   JSR         @R1
    000005FC 2FF6                   MOV.L       R15,@-R15
    000005FE E300                   MOV         #0,R3
    00000600 D1C9                   MOV.L       L1177+12,R1; __muld
    00000602 2F36                   MOV.L       R3,@-R15
    00000604 D3C7                   MOV.L       L1177+8,R3 ; H'40100000
    00000606 2F36                   MOV.L       R3,@-R15
    00000608 62F3                   MOV         R15,R2
    0000060A 7210                   ADD         #16,R2
    0000060C 410B                   JSR         @R1
    0000060E 2F26                   MOV.L       R2,@-R15
    00000610 D1C7                   MOV.L       L1177+20,R1; __divdr
    00000612 E300                   MOV         #0,R3
    00000614 2F36                   MOV.L       R3,@-R15
    00000616 D3C5                   MOV.L       L1177+16,R3; H'40DFFFC0
    00000618 2F36                   MOV.L       R3,@-R15
    0000061A 62F3                   MOV         R15,R2
    0000061C 7210                   ADD         #16,R2
    0000061E 410B                   JSR         @R1
    00000620 2F26                   MOV.L       R2,@-R15
    00000622 E300                   MOV         #0,R3
    00000624 D2C4                   MOV.L       L1177+28,R2; __addd
    00000626 E108                   MOV         #8,R1
    00000628 2F36                   MOV.L       R3,@-R15
    0000062A 31CC                   ADD         R12,R1
    0000062C D3C1                   MOV.L       L1177+24,R3; H'C0000000
    0000062E 2F36                   MOV.L       R3,@-R15
    00000630 420B                   JSR         @R2
    00000632 2F16                   MOV.L       R1,@-R15
        nroots.c   142    
        nroots.c   143                    compute_fa(n);
    00000634 B24A                   BSR         _compute_fa
    00000636 54F1                   MOV.L       @(4,R15),R4
        nroots.c   144    
        nroots.c   145                    b = a;
    00000638 D3C0                   MOV.L       L1177+32,R3; __quick_evn_mvn
    0000063A 61A3                   MOV         R10,R1
    0000063C 62C3                   MOV         R12,R2
    0000063E 430B                   JSR         @R3
    00000640 E010                   MOV         #16,R0
        nroots.c   146                    fb = fa;
    00000642 61E3                   MOV         R14,R1
    00000644 D3BD                   MOV.L       L1177+32,R3; __quick_evn_mvn
    00000646 62D3                   MOV         R13,R2
    00000648 430B                   JSR         @R3
    0000064A E010                   MOV         #16,R0
        nroots.c   147    
        nroots.c   148                    a.r = RANDOM;
    0000064C D2B3                   MOV.L       L1177,R2   ; _rand
    0000064E 420B                   JSR         @R2
    00000650 7FF0                   ADD         #-16,R15
    00000652 7FF8                   ADD         #-8,R15
    00000654 D1B2                   MOV.L       L1177+4,R1 ; __itod
    00000656 410B                   JSR         @R1
    00000658 2FF6                   MOV.L       R15,@-R15
    0000065A E300                   MOV         #0,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000065C D1B2                   MOV.L       L1177+12,R1; __muld
    0000065E 2F36                   MOV.L       R3,@-R15
    00000660 D3B0                   MOV.L       L1177+8,R3 ; H'40100000
    00000662 2F36                   MOV.L       R3,@-R15
    00000664 62F3                   MOV         R15,R2
    00000666 7210                   ADD         #16,R2
    00000668 410B                   JSR         @R1
    0000066A 2F26                   MOV.L       R2,@-R15
    0000066C D1B0                   MOV.L       L1177+20,R1; __divdr
    0000066E E300                   MOV         #0,R3
    00000670 2F36                   MOV.L       R3,@-R15
    00000672 D3AE                   MOV.L       L1177+16,R3; H'40DFFFC0
    00000674 2F36                   MOV.L       R3,@-R15
    00000676 62F3                   MOV         R15,R2
    00000678 7210                   ADD         #16,R2
    0000067A 410B                   JSR         @R1
    0000067C 2F26                   MOV.L       R2,@-R15
    0000067E E300                   MOV         #0,R3
    00000680 D2AD                   MOV.L       L1177+28,R2; __addd
    00000682 2F36                   MOV.L       R3,@-R15
    00000684 D3AB                   MOV.L       L1177+24,R3; H'C0000000
    00000686 2F36                   MOV.L       R3,@-R15
    00000688 420B                   JSR         @R2
    0000068A 2FC6                   MOV.L       R12,@-R15
        nroots.c   149                    a.i = RANDOM;
    0000068C D3A3                   MOV.L       L1177,R3   ; _rand
    0000068E 430B                   JSR         @R3
    00000690 7FF0                   ADD         #-16,R15
    00000692 7FF8                   ADD         #-8,R15
    00000694 D1A2                   MOV.L       L1177+4,R1 ; __itod
    00000696 410B                   JSR         @R1
    00000698 2FF6                   MOV.L       R15,@-R15
    0000069A E300                   MOV         #0,R3
    0000069C D1A2                   MOV.L       L1177+12,R1; __muld
    0000069E 2F36                   MOV.L       R3,@-R15
    000006A0 D3A0                   MOV.L       L1177+8,R3 ; H'40100000
    000006A2 2F36                   MOV.L       R3,@-R15
    000006A4 62F3                   MOV         R15,R2
    000006A6 7210                   ADD         #16,R2
    000006A8 410B                   JSR         @R1
    000006AA 2F26                   MOV.L       R2,@-R15
    000006AC D1A0                   MOV.L       L1177+20,R1; __divdr
    000006AE E300                   MOV         #0,R3
    000006B0 2F36                   MOV.L       R3,@-R15
    000006B2 D39E                   MOV.L       L1177+16,R3; H'40DFFFC0
    000006B4 2F36                   MOV.L       R3,@-R15
    000006B6 62F3                   MOV         R15,R2
    000006B8 7210                   ADD         #16,R2
    000006BA 410B                   JSR         @R1
    000006BC 2F26                   MOV.L       R2,@-R15
    000006BE E300                   MOV         #0,R3
    000006C0 D29D                   MOV.L       L1177+28,R2; __addd
    000006C2 E108                   MOV         #8,R1
    000006C4 2F36                   MOV.L       R3,@-R15
    000006C6 31CC                   ADD         R12,R1
    000006C8 D39A                   MOV.L       L1177+24,R3; H'C0000000
    000006CA 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006CC 420B                   JSR         @R2
    000006CE 2F16                   MOV.L       R1,@-R15
        nroots.c   150    
        nroots.c   151                    for (k = 0; k < 1000; k++) {
    000006D0 E300                   MOV         #0,R3
    000006D2 2F32                   MOV.L       R3,@R15
    000006D4              L1160:                            
        nroots.c   152    
        nroots.c   153                            compute_fa(n);
    000006D4 B1FA                   BSR         _compute_fa
    000006D6 54F1                   MOV.L       @(4,R15),R4
        nroots.c   154    
        nroots.c   155                            if (ABS(fa) < EPSILON)
    000006D8 D193                   MOV.L       L1177+12,R1; __muld
    000006DA 7FE8                   ADD         #-24,R15
    000006DC 52D1                   MOV.L       @(4,R13),R2
    000006DE 2F26                   MOV.L       R2,@-R15
    000006E0 62D2                   MOV.L       @R13,R2
    000006E2 2F26                   MOV.L       R2,@-R15
    000006E4 53D1                   MOV.L       @(4,R13),R3
    000006E6 2F36                   MOV.L       R3,@-R15
    000006E8 63D2                   MOV.L       @R13,R3
    000006EA 2F36                   MOV.L       R3,@-R15
    000006EC 62F3                   MOV         R15,R2
    000006EE 7210                   ADD         #16,R2
    000006F0 410B                   JSR         @R1
    000006F2 2F26                   MOV.L       R2,@-R15
    000006F4 D18C                   MOV.L       L1177+12,R1; __muld
    000006F6 7FF8                   ADD         #-8,R15
    000006F8 53D3                   MOV.L       @(12,R13),R3
    000006FA 2F36                   MOV.L       R3,@-R15
    000006FC 53D2                   MOV.L       @(8,R13),R3
    000006FE 2F36                   MOV.L       R3,@-R15
    00000700 52D3                   MOV.L       @(12,R13),R2
    00000702 2F26                   MOV.L       R2,@-R15
    00000704 52D2                   MOV.L       @(8,R13),R2
    00000706 2F26                   MOV.L       R2,@-R15
    00000708 63F3                   MOV         R15,R3
    0000070A 7310                   ADD         #16,R3
    0000070C 410B                   JSR         @R1
    0000070E 2F36                   MOV.L       R3,@-R15
    00000710 D089                   MOV.L       L1177+28,R0; __addd
    00000712 62F3                   MOV         R15,R2
    00000714 7210                   ADD         #16,R2
    00000716 400B                   JSR         @R0
    00000718 2F26                   MOV.L       R2,@-R15
    0000071A E308                   MOV         #8,R3
    0000071C D188                   MOV.L       L1177+36,R1; _sqrt
    0000071E 33FC                   ADD         R15,R3
    00000720 410B                   JSR         @R1
    00000722 2F36                   MOV.L       R3,@-R15
    00000724 D387                   MOV.L       L1177+40,R3; H'E826D695
    00000726 7F0C                   ADD         #12,R15
    00000728 D288                   MOV.L       L1177+48,R2; __ltd
    0000072A 2F36                   MOV.L       R3,@-R15
    0000072C D386                   MOV.L       L1177+44,R3; H'3E112E0B
    0000072E 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000730 2F36                   MOV.L       R3,@-R15
    00000732 8800                   CMP/EQ      #0,R0
    00000734 8901                   BT          L1178
    00000736 A1B2                   BRA         L1156
    00000738 0009                   NOP
    0000073A              L1178:                            
        nroots.c   156                                    return;
        nroots.c   157    
        nroots.c   158                            if (ABS(fa) < ABS(fb)) {
    0000073A 7FE8                   ADD         #-24,R15
    0000073C D17A                   MOV.L       L1177+12,R1; __muld
    0000073E 53D1                   MOV.L       @(4,R13),R3
    00000740 2F36                   MOV.L       R3,@-R15
    00000742 63D2                   MOV.L       @R13,R3
    00000744 2F36                   MOV.L       R3,@-R15
    00000746 52D1                   MOV.L       @(4,R13),R2
    00000748 2F26                   MOV.L       R2,@-R15
    0000074A 62D2                   MOV.L       @R13,R2
    0000074C 2F26                   MOV.L       R2,@-R15
    0000074E 63F3                   MOV         R15,R3
    00000750 7310                   ADD         #16,R3
    00000752 410B                   JSR         @R1
    00000754 2F36                   MOV.L       R3,@-R15
    00000756 7FF8                   ADD         #-8,R15
    00000758 D173                   MOV.L       L1177+12,R1; __muld
    0000075A 52D3                   MOV.L       @(12,R13),R2
    0000075C 2F26                   MOV.L       R2,@-R15
    0000075E 52D2                   MOV.L       @(8,R13),R2
    00000760 2F26                   MOV.L       R2,@-R15
    00000762 53D3                   MOV.L       @(12,R13),R3
    00000764 2F36                   MOV.L       R3,@-R15
    00000766 53D2                   MOV.L       @(8,R13),R3
    00000768 2F36                   MOV.L       R3,@-R15
    0000076A 62F3                   MOV         R15,R2
    0000076C 7210                   ADD         #16,R2
    0000076E 410B                   JSR         @R1
    00000770 2F26                   MOV.L       R2,@-R15
    00000772 63F3                   MOV         R15,R3
    00000774 D070                   MOV.L       L1177+28,R0; __addd
    00000776 7310                   ADD         #16,R3
    00000778 400B                   JSR         @R0
    0000077A 2F36                   MOV.L       R3,@-R15
    0000077C D170                   MOV.L       L1177+36,R1; _sqrt
    0000077E E208                   MOV         #8,R2
    00000780 32FC                   ADD         R15,R2
    00000782 410B                   JSR         @R1
    00000784 2F26                   MOV.L       R2,@-R15
    00000786 7FF4                   ADD         #-12,R15
    00000788 D167                   MOV.L       L1177+12,R1; __muld
    0000078A 52E1                   MOV.L       @(4,R14),R2
    0000078C 2F26                   MOV.L       R2,@-R15
    0000078E 62E2                   MOV.L       @R14,R2
    00000790 2F26                   MOV.L       R2,@-R15
    00000792 53E1                   MOV.L       @(4,R14),R3
    00000794 2F36                   MOV.L       R3,@-R15
    00000796 63E2                   MOV.L       @R14,R3
    00000798 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000079A 62F3                   MOV         R15,R2
    0000079C 7210                   ADD         #16,R2
    0000079E 410B                   JSR         @R1
    000007A0 2F26                   MOV.L       R2,@-R15
    000007A2 7FF8                   ADD         #-8,R15
    000007A4 D160                   MOV.L       L1177+12,R1; __muld
    000007A6 53E3                   MOV.L       @(12,R14),R3
    000007A8 2F36                   MOV.L       R3,@-R15
    000007AA 53E2                   MOV.L       @(8,R14),R3
    000007AC 2F36                   MOV.L       R3,@-R15
    000007AE 52E3                   MOV.L       @(12,R14),R2
    000007B0 2F26                   MOV.L       R2,@-R15
    000007B2 52E2                   MOV.L       @(8,R14),R2
    000007B4 2F26                   MOV.L       R2,@-R15
    000007B6 63F3                   MOV         R15,R3
    000007B8 7310                   ADD         #16,R3
    000007BA 410B                   JSR         @R1
    000007BC 2F36                   MOV.L       R3,@-R15
    000007BE 62F3                   MOV         R15,R2
    000007C0 D05D                   MOV.L       L1177+28,R0; __addd
    000007C2 7210                   ADD         #16,R2
    000007C4 400B                   JSR         @R0
    000007C6 2F26                   MOV.L       R2,@-R15
    000007C8 D15D                   MOV.L       L1177+36,R1; _sqrt
    000007CA E308                   MOV         #8,R3
    000007CC 33FC                   ADD         R15,R3
    000007CE 410B                   JSR         @R1
    000007D0 2F36                   MOV.L       R3,@-R15
    000007D2 D35E                   MOV.L       L1177+48,R3; __ltd
    000007D4 430B                   JSR         @R3
    000007D6 7F0C                   ADD         #12,R15
    000007D8 8800                   CMP/EQ      #0,R0
    000007DA 891D                   BT          L1162
        nroots.c   159                                    x = a;
    000007DC D15C                   MOV.L       L1177+52,R1; __$x
    000007DE 62C3                   MOV         R12,R2
    000007E0 D356                   MOV.L       L1177+32,R3; __quick_evn_mvn
    000007E2 430B                   JSR         @R3
    000007E4 E010                   MOV         #16,R0
        nroots.c   160                                    a = b;
    000007E6 61C3                   MOV         R12,R1
    000007E8 D354                   MOV.L       L1177+32,R3; __quick_evn_mvn
    000007EA 62A3                   MOV         R10,R2
    000007EC 430B                   JSR         @R3
    000007EE E010                   MOV         #16,R0
        nroots.c   161                                    b = x;
    000007F0 D257                   MOV.L       L1177+52,R2; __$x
    000007F2 61A3                   MOV         R10,R1
    000007F4 D351                   MOV.L       L1177+32,R3; __quick_evn_mvn
    000007F6 430B                   JSR         @R3
    000007F8 E010                   MOV         #16,R0
        nroots.c   162                                    x = fa;
    000007FA 62D3                   MOV         R13,R2
    000007FC D34F                   MOV.L       L1177+32,R3; __quick_evn_mvn
    000007FE D154                   MOV.L       L1177+52,R1; __$x
    00000800 430B                   JSR         @R3
    00000802 E010                   MOV         #16,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        nroots.c   163                                    fa = fb;
    00000804 D34D                   MOV.L       L1177+32,R3; __quick_evn_mvn
    00000806 61D3                   MOV         R13,R1
    00000808 62E3                   MOV         R14,R2
    0000080A 430B                   JSR         @R3
    0000080C E010                   MOV         #16,R0
        nroots.c   164                                    fb = x;
    0000080E 61E3                   MOV         R14,R1
    00000810 D24F                   MOV.L       L1177+52,R2; __$x
    00000812 D34A                   MOV.L       L1177+32,R3; __quick_evn_mvn
    00000814 430B                   JSR         @R3
    00000816 E010                   MOV         #16,R0
    00000818              L1162:                            
        nroots.c   165                            }
        nroots.c   166    
        nroots.c   167                            // dx = b - a
        nroots.c   168    
        nroots.c   169                            dx.r = b.r - a.r;
    00000818 52A1                   MOV.L       @(4,R10),R2
    0000081A 2F26                   MOV.L       R2,@-R15
    0000081C 62A2                   MOV.L       @R10,R2
    0000081E 2F26                   MOV.L       R2,@-R15
    00000820 53C1                   MOV.L       @(4,R12),R3
    00000822 2F36                   MOV.L       R3,@-R15
    00000824 63C2                   MOV.L       @R12,R3
    00000826 2F36                   MOV.L       R3,@-R15
    00000828 D24A                   MOV.L       L1177+56,R2; __subdr
    0000082A 420B                   JSR         @R2
    0000082C 2F96                   MOV.L       R9,@-R15
        nroots.c   170                            dx.i = b.i - a.i;
    0000082E E108                   MOV         #8,R1
    00000830 53A3                   MOV.L       @(12,R10),R3
    00000832 319C                   ADD         R9,R1
    00000834 2F36                   MOV.L       R3,@-R15
    00000836 53A2                   MOV.L       @(8,R10),R3
    00000838 2F36                   MOV.L       R3,@-R15
    0000083A 52C3                   MOV.L       @(12,R12),R2
    0000083C D345                   MOV.L       L1177+56,R3; __subdr
    0000083E 2F26                   MOV.L       R2,@-R15
    00000840 52C2                   MOV.L       @(8,R12),R2
    00000842 2F26                   MOV.L       R2,@-R15
    00000844 430B                   JSR         @R3
    00000846 2F16                   MOV.L       R1,@-R15
        nroots.c   171    
        nroots.c   172                            // df = fb - fa
        nroots.c   173    
        nroots.c   174                            df.r = fb.r - fa.r;
    00000848 52E1                   MOV.L       @(4,R14),R2
    0000084A 2F26                   MOV.L       R2,@-R15
    0000084C 62E2                   MOV.L       @R14,R2
    0000084E 2F26                   MOV.L       R2,@-R15
    00000850 53D1                   MOV.L       @(4,R13),R3
    00000852 2F36                   MOV.L       R3,@-R15
    00000854 63D2                   MOV.L       @R13,R3
    00000856 2F36                   MOV.L       R3,@-R15
    00000858 D23E                   MOV.L       L1177+56,R2; __subdr
    0000085A 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000085C 2FB6                   MOV.L       R11,@-R15
        nroots.c   175                            df.i = fb.i - fa.i;
    0000085E E108                   MOV         #8,R1
    00000860 53E3                   MOV.L       @(12,R14),R3
    00000862 31BC                   ADD         R11,R1
    00000864 2F36                   MOV.L       R3,@-R15
    00000866 53E2                   MOV.L       @(8,R14),R3
    00000868 2F36                   MOV.L       R3,@-R15
    0000086A 52D3                   MOV.L       @(12,R13),R2
    0000086C D339                   MOV.L       L1177+56,R3; __subdr
    0000086E 2F26                   MOV.L       R2,@-R15
    00000870 52D2                   MOV.L       @(8,R13),R2
    00000872 2F26                   MOV.L       R2,@-R15
    00000874 430B                   JSR         @R3
    00000876 2F16                   MOV.L       R1,@-R15
        nroots.c   176    
        nroots.c   177                            // y = dx / df
        nroots.c   178    
        nroots.c   179                            t = df.r * df.r + df.i * df.i;
    00000878 D12B                   MOV.L       L1177+12,R1; __muld
    0000087A 7FF8                   ADD         #-8,R15
    0000087C 52B1                   MOV.L       @(4,R11),R2
    0000087E 2F26                   MOV.L       R2,@-R15
    00000880 62B2                   MOV.L       @R11,R2
    00000882 2F26                   MOV.L       R2,@-R15
    00000884 53B1                   MOV.L       @(4,R11),R3
    00000886 2F36                   MOV.L       R3,@-R15
    00000888 63B2                   MOV.L       @R11,R3
    0000088A 2F36                   MOV.L       R3,@-R15
    0000088C 62F3                   MOV         R15,R2
    0000088E 7210                   ADD         #16,R2
    00000890 410B                   JSR         @R1
    00000892 2F26                   MOV.L       R2,@-R15
    00000894 D124                   MOV.L       L1177+12,R1; __muld
    00000896 7FF8                   ADD         #-8,R15
    00000898 53B3                   MOV.L       @(12,R11),R3
    0000089A 2F36                   MOV.L       R3,@-R15
    0000089C 53B2                   MOV.L       @(8,R11),R3
    0000089E 2F36                   MOV.L       R3,@-R15
    000008A0 52B3                   MOV.L       @(12,R11),R2
    000008A2 2F26                   MOV.L       R2,@-R15
    000008A4 52B2                   MOV.L       @(8,R11),R2
    000008A6 2F26                   MOV.L       R2,@-R15
    000008A8 63F3                   MOV         R15,R3
    000008AA 7310                   ADD         #16,R3
    000008AC 410B                   JSR         @R1
    000008AE 2F36                   MOV.L       R3,@-R15
    000008B0 D221                   MOV.L       L1177+28,R2; __addd
    000008B2 60F3                   MOV         R15,R0
    000008B4 701C                   ADD         #28,R0
    000008B6 420B                   JSR         @R2
    000008B8 2F06                   MOV.L       R0,@-R15
        nroots.c   180    
        nroots.c   181                            if (t == 0.0)
    000008BA E200                   MOV         #0,R2
    000008BC 53F4                   MOV.L       @(16,R15),R3
    000008BE 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008C0 53F4                   MOV.L       @(16,R15),R3
    000008C2 2F36                   MOV.L       R3,@-R15
    000008C4 2F26                   MOV.L       R2,@-R15
    000008C6 D324                   MOV.L       L1177+60,R3; __ned
    000008C8 430B                   JSR         @R3
    000008CA 2F26                   MOV.L       R2,@-R15
    000008CC 8800                   CMP/EQ      #0,R0
    000008CE 8B01                   BF          L1179
    000008D0 A0D0                   BRA         L1159
    000008D2 0009                   NOP
    000008D4              L1179:                            
        nroots.c   182                                    break;
        nroots.c   183    
        nroots.c   184                            y.r = (dx.r * df.r + dx.i * df.i) / t;
    000008D4 7FF0                   ADD         #-16,R15
    000008D6 5191                   MOV.L       @(4,R9),R1
    000008D8 2F16                   MOV.L       R1,@-R15
    000008DA 6192                   MOV.L       @R9,R1
    000008DC 2F16                   MOV.L       R1,@-R15
    000008DE 53B1                   MOV.L       @(4,R11),R3
    000008E0 D111                   MOV.L       L1177+12,R1; __muld
    000008E2 2F36                   MOV.L       R3,@-R15
    000008E4 63B2                   MOV.L       @R11,R3
    000008E6 2F36                   MOV.L       R3,@-R15
    000008E8 62F3                   MOV         R15,R2
    000008EA 7210                   ADD         #16,R2
    000008EC 410B                   JSR         @R1
    000008EE 2F26                   MOV.L       R2,@-R15
    000008F0 D10D                   MOV.L       L1177+12,R1; __muld
    000008F2 7FF8                   ADD         #-8,R15
    000008F4 5393                   MOV.L       @(12,R9),R3
    000008F6 2F36                   MOV.L       R3,@-R15
    000008F8 5392                   MOV.L       @(8,R9),R3
    000008FA 2F36                   MOV.L       R3,@-R15
    000008FC 52B3                   MOV.L       @(12,R11),R2
    000008FE 2F26                   MOV.L       R2,@-R15
    00000900 52B2                   MOV.L       @(8,R11),R2
    00000902 2F26                   MOV.L       R2,@-R15
    00000904 63F3                   MOV         R15,R3
    00000906 7310                   ADD         #16,R3
    00000908 410B                   JSR         @R1
    0000090A 2F36                   MOV.L       R3,@-R15
    0000090C D00A                   MOV.L       L1177+28,R0; __addd
    0000090E 62F3                   MOV         R15,R2
    00000910 7210                   ADD         #16,R2
    00000912 400B                   JSR         @R0
    00000914 2F26                   MOV.L       R2,@-R15
    00000916 53F6                   MOV.L       @(24,R15),R3
    00000918 A020                   BRA         L1172
    0000091A 0009                   NOP
    0000091C              L1177:                            
    0000091C <00000000>             .DATA.L     _rand
    00000920 <00000000>             .DATA.L     __itod
    00000924 40100000               .DATA.L     H'40100000
    00000928 <00000000>             .DATA.L     __muld
    0000092C 40DFFFC0               .DATA.L     H'40DFFFC0
    00000930 <00000000>             .DATA.L     __divdr




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000934 C0000000               .DATA.L     H'C0000000
    00000938 <00000000>             .DATA.L     __addd
    0000093C <00000000>             .DATA.L     __quick_evn_mvn
    00000940 <00000000>             .DATA.L     _sqrt
    00000944 E826D695               .DATA.L     H'E826D695
    00000948 3E112E0B               .DATA.L     H'3E112E0B
    0000094C <00000000>             .DATA.L     __ltd
    00000950 <00000000>             .DATA.L     __$x
    00000954 <00000000>             .DATA.L     __subdr
    00000958 <00000000>             .DATA.L     __ned
    0000095C              L1172:                            
    0000095C 2F36                   MOV.L       R3,@-R15
    0000095E 53F6                   MOV.L       @(24,R15),R3
    00000960 D254                   MOV.L       L1180+2,R2 ; __divdr
    00000962 2F36                   MOV.L       R3,@-R15
    00000964 420B                   JSR         @R2
    00000966 2F86                   MOV.L       R8,@-R15
        nroots.c   185                            y.i = (dx.i * df.r - dx.r * df.i) / t;
    00000968 D153                   MOV.L       L1180+6,R1 ; __muld
    0000096A 7FF0                   ADD         #-16,R15
    0000096C 5393                   MOV.L       @(12,R9),R3
    0000096E 2F36                   MOV.L       R3,@-R15
    00000970 5392                   MOV.L       @(8,R9),R3
    00000972 2F36                   MOV.L       R3,@-R15
    00000974 52B1                   MOV.L       @(4,R11),R2
    00000976 2F26                   MOV.L       R2,@-R15
    00000978 62B2                   MOV.L       @R11,R2
    0000097A 2F26                   MOV.L       R2,@-R15
    0000097C 63F3                   MOV         R15,R3
    0000097E 7310                   ADD         #16,R3
    00000980 410B                   JSR         @R1
    00000982 2F36                   MOV.L       R3,@-R15
    00000984 D14C                   MOV.L       L1180+6,R1 ; __muld
    00000986 7FF8                   ADD         #-8,R15
    00000988 5291                   MOV.L       @(4,R9),R2
    0000098A 2F26                   MOV.L       R2,@-R15
    0000098C 6292                   MOV.L       @R9,R2
    0000098E 2F26                   MOV.L       R2,@-R15
    00000990 53B3                   MOV.L       @(12,R11),R3
    00000992 2F36                   MOV.L       R3,@-R15
    00000994 53B2                   MOV.L       @(8,R11),R3
    00000996 2F36                   MOV.L       R3,@-R15
    00000998 62F3                   MOV         R15,R2
    0000099A 7210                   ADD         #16,R2
    0000099C 410B                   JSR         @R1
    0000099E 2F26                   MOV.L       R2,@-R15
    000009A0 D046                   MOV.L       L1180+10,R0; __subdr
    000009A2 63F3                   MOV         R15,R3
    000009A4 7310                   ADD         #16,R3
    000009A6 400B                   JSR         @R0
    000009A8 2F36                   MOV.L       R3,@-R15
    000009AA E108                   MOV         #8,R1
    000009AC D341                   MOV.L       L1180+2,R3 ; __divdr
    000009AE 318C                   ADD         R8,R1
    000009B0 52F6                   MOV.L       @(24,R15),R2
    000009B2 2F26                   MOV.L       R2,@-R15
    000009B4 52F6                   MOV.L       @(24,R15),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009B6 2F26                   MOV.L       R2,@-R15
    000009B8 430B                   JSR         @R3
    000009BA 2F16                   MOV.L       R1,@-R15
        nroots.c   186    
        nroots.c   187                            // a = b - y * fb
        nroots.c   188    
        nroots.c   189                            a.r = b.r - (y.r * fb.r - y.i * fb.i);
    000009BC D13E                   MOV.L       L1180+6,R1 ; __muld
    000009BE 7FF8                   ADD         #-8,R15
    000009C0 52A1                   MOV.L       @(4,R10),R2
    000009C2 2F26                   MOV.L       R2,@-R15
    000009C4 62A2                   MOV.L       @R10,R2
    000009C6 2F26                   MOV.L       R2,@-R15
    000009C8 7FF8                   ADD         #-8,R15
    000009CA 5381                   MOV.L       @(4,R8),R3
    000009CC 2F36                   MOV.L       R3,@-R15
    000009CE 6382                   MOV.L       @R8,R3
    000009D0 2F36                   MOV.L       R3,@-R15
    000009D2 52E1                   MOV.L       @(4,R14),R2
    000009D4 2F26                   MOV.L       R2,@-R15
    000009D6 62E2                   MOV.L       @R14,R2
    000009D8 2F26                   MOV.L       R2,@-R15
    000009DA 63F3                   MOV         R15,R3
    000009DC 7310                   ADD         #16,R3
    000009DE 410B                   JSR         @R1
    000009E0 2F36                   MOV.L       R3,@-R15
    000009E2 62F3                   MOV         R15,R2
    000009E4 D035                   MOV.L       L1180+10,R0; __subdr
    000009E6 7210                   ADD         #16,R2
    000009E8 400B                   JSR         @R0
    000009EA 2F26                   MOV.L       R2,@-R15
    000009EC D132                   MOV.L       L1180+6,R1 ; __muld
    000009EE 7FF8                   ADD         #-8,R15
    000009F0 5383                   MOV.L       @(12,R8),R3
    000009F2 2F36                   MOV.L       R3,@-R15
    000009F4 5382                   MOV.L       @(8,R8),R3
    000009F6 2F36                   MOV.L       R3,@-R15
    000009F8 52E3                   MOV.L       @(12,R14),R2
    000009FA 2F26                   MOV.L       R2,@-R15
    000009FC 52E2                   MOV.L       @(8,R14),R2
    000009FE 2F26                   MOV.L       R2,@-R15
    00000A00 63F3                   MOV         R15,R3
    00000A02 7310                   ADD         #16,R3
    00000A04 410B                   JSR         @R1
    00000A06 2F36                   MOV.L       R3,@-R15
    00000A08 D22D                   MOV.L       L1180+14,R2; __addd
    00000A0A 420B                   JSR         @R2
    00000A0C 2FC6                   MOV.L       R12,@-R15
        nroots.c   190                            a.i = b.i - (y.r * fb.i + y.i * fb.r);
    00000A0E 7FF8                   ADD         #-8,R15
    00000A10 D129                   MOV.L       L1180+6,R1 ; __muld
    00000A12 53A3                   MOV.L       @(12,R10),R3
    00000A14 2F36                   MOV.L       R3,@-R15
    00000A16 53A2                   MOV.L       @(8,R10),R3
    00000A18 2F36                   MOV.L       R3,@-R15
    00000A1A 7FF8                   ADD         #-8,R15
    00000A1C 5281                   MOV.L       @(4,R8),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A1E 2F26                   MOV.L       R2,@-R15
    00000A20 6282                   MOV.L       @R8,R2
    00000A22 2F26                   MOV.L       R2,@-R15
    00000A24 53E3                   MOV.L       @(12,R14),R3
    00000A26 2F36                   MOV.L       R3,@-R15
    00000A28 53E2                   MOV.L       @(8,R14),R3
    00000A2A 2F36                   MOV.L       R3,@-R15
    00000A2C 62F3                   MOV         R15,R2
    00000A2E 7210                   ADD         #16,R2
    00000A30 410B                   JSR         @R1
    00000A32 2F26                   MOV.L       R2,@-R15
    00000A34 D021                   MOV.L       L1180+10,R0; __subdr
    00000A36 63F3                   MOV         R15,R3
    00000A38 7310                   ADD         #16,R3
    00000A3A 400B                   JSR         @R0
    00000A3C 2F36                   MOV.L       R3,@-R15
    00000A3E 7FF8                   ADD         #-8,R15
    00000A40 D11D                   MOV.L       L1180+6,R1 ; __muld
    00000A42 5283                   MOV.L       @(12,R8),R2
    00000A44 2F26                   MOV.L       R2,@-R15
    00000A46 5282                   MOV.L       @(8,R8),R2
    00000A48 2F26                   MOV.L       R2,@-R15
    00000A4A 53E1                   MOV.L       @(4,R14),R3
    00000A4C 2F36                   MOV.L       R3,@-R15
    00000A4E 63E2                   MOV.L       @R14,R3
    00000A50 2F36                   MOV.L       R3,@-R15
    00000A52 62F3                   MOV         R15,R2
    00000A54 7210                   ADD         #16,R2
    00000A56 410B                   JSR         @R1
    00000A58 2F26                   MOV.L       R2,@-R15
    00000A5A E008                   MOV         #8,R0
    00000A5C D317                   MOV.L       L1180+10,R3; __subdr
    00000A5E 30CC                   ADD         R12,R0
    00000A60 430B                   JSR         @R3
    00000A62 2F06                   MOV.L       R0,@-R15
    00000A64 62F2                   MOV.L       @R15,R2
    00000A66 7201                   ADD         #1,R2
    00000A68 9323                   MOV.W       L1180,R3   ; H'03E8
    00000A6A 3233                   CMP/GE      R3,R2
    00000A6C 8D02                   BT/S        L1181
    00000A6E 2F22                   MOV.L       R2,@R15
    00000A70 AE30                   BRA         L1160
    00000A72 0009                   NOP
    00000A74              L1181:                            
    00000A74              L1159:                            
    00000A74 52F2                   MOV.L       @(8,R15),R2
    00000A76 7201                   ADD         #1,R2
    00000A78 1F22                   MOV.L       R2,@(8,R15)
    00000A7A              L1157:                            
    00000A7A E364                   MOV         #100,R3
    00000A7C 51F2                   MOV.L       @(8,R15),R1
    00000A7E 3133                   CMP/GE      R3,R1
    00000A80 8901                   BT          L1182
    00000A82 AD95                   BRA         L1158
    00000A84 0009                   NOP
    00000A86              L1182:                            
        nroots.c   191                    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        nroots.c   192            }
        nroots.c   193    
        nroots.c   194            stop("nroots: convergence error");
    00000A86 7F14                   ADD         #20,R15
    00000A88 D30F                   MOV.L       L1180+22,R3; _stop
    00000A8A D40E                   MOV.L       L1180+18,R4; L1092
    00000A8C 4F26                   LDS.L       @R15+,PR
    00000A8E 68F6                   MOV.L       @R15+,R8
    00000A90 69F6                   MOV.L       @R15+,R9
    00000A92 6AF6                   MOV.L       @R15+,R10
    00000A94 6BF6                   MOV.L       @R15+,R11
    00000A96 6CF6                   MOV.L       @R15+,R12
    00000A98 6DF6                   MOV.L       @R15+,R13
    00000A9A 432B                   JMP         @R3
    00000A9C 6EF6                   MOV.L       @R15+,R14
    00000A9E              L1156:                            
        nroots.c   195    }
    00000A9E 7F14                   ADD         #20,R15
    00000AA0 4F26                   LDS.L       @R15+,PR
    00000AA2 68F6                   MOV.L       @R15+,R8
    00000AA4 69F6                   MOV.L       @R15+,R9
    00000AA6 6AF6                   MOV.L       @R15+,R10
    00000AA8 6BF6                   MOV.L       @R15+,R11
    00000AAA 6CF6                   MOV.L       @R15+,R12
    00000AAC 6DF6                   MOV.L       @R15+,R13
    00000AAE 000B                   RTS
    00000AB0 6EF6                   MOV.L       @R15+,R14
    00000AB2              L1180:                            
    00000AB2 03E8                   .DATA.W     H'03E8
    00000AB4 <00000000>             .DATA.L     __divdr
    00000AB8 <00000000>             .DATA.L     __muld
    00000ABC <00000000>             .DATA.L     __subdr
    00000AC0 <00000000>             .DATA.L     __addd
    00000AC4 <00000000>             .DATA.L     L1092
    00000AC8 <00000000>             .DATA.L     _stop
        nroots.c   196    
        nroots.c   197    void
        nroots.c   198    compute_fa(int n)
    00000ACC              _compute_fa:                     ; function: compute_fa
                                                           ; frame size=80
                                                           ; used runtime library name:
                                                           ; __addd, __subdr, __muld
    00000ACC 2FE6                   MOV.L       R14,@-R15
    00000ACE 2FD6                   MOV.L       R13,@-R15
    00000AD0 2FC6                   MOV.L       R12,@-R15
    00000AD2 4F22                   STS.L       PR,@-R15
        nroots.c   199    {
        nroots.c   200            int k;
        nroots.c   201            double t;
        nroots.c   202    
        nroots.c   203            // x = a
        nroots.c   204    
        nroots.c   205            x.r = a.r;
    00000AD4 D68D                   MOV.L       L1183,R6   ; __$a
    00000AD6 7FF4                   ADD         #-12,R15
    00000AD8 D58D                   MOV.L       L1183+4,R5 ; __$x
    00000ADA 6363                   MOV         R6,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        nroots.c   206            x.i = a.i;
        nroots.c   207    
        nroots.c   208            // fa = c0 + c1 * x
        nroots.c   209    
        nroots.c   210            fa.r = c[0].r + c[1].r * x.r - c[1].i * x.i;
    00000ADC DC8D                   MOV.L       L1183+8,R12; __$c
    00000ADE 6253                   MOV         R5,R2
    00000AE0 DE8D                   MOV.L       L1183+12,R14; __$fa
    00000AE2 6033                   MOV         R3,R0
    00000AE4 6132                   MOV.L       @R3,R1
    00000AE6 7008                   ADD         #8,R0
    00000AE8 2212                   MOV.L       R1,@R2
    00000AEA 5131                   MOV.L       @(4,R3),R1
    00000AEC 1211                   MOV.L       R1,@(4,R2)
    00000AEE 6323                   MOV         R2,R3
    00000AF0 6202                   MOV.L       @R0,R2
    00000AF2 7308                   ADD         #8,R3
    00000AF4 2322                   MOV.L       R2,@R3
    00000AF6 5201                   MOV.L       @(4,R0),R2
    00000AF8 1321                   MOV.L       R2,@(4,R3)
    00000AFA 7FF8                   ADD         #-8,R15
    00000AFC 63C3                   MOV         R12,R3
    00000AFE 1F32                   MOV.L       R3,@(8,R15)
    00000B00 5231                   MOV.L       @(4,R3),R2
    00000B02 2F26                   MOV.L       R2,@-R15
    00000B04 6232                   MOV.L       @R3,R2
    00000B06 2F26                   MOV.L       R2,@-R15
    00000B08 7FF8                   ADD         #-8,R15
    00000B0A 6733                   MOV         R3,R7
    00000B0C D083                   MOV.L       L1183+16,R0; __muld
    00000B0E 7710                   ADD         #16,R7
    00000B10 5171                   MOV.L       @(4,R7),R1
    00000B12 2F16                   MOV.L       R1,@-R15
    00000B14 6172                   MOV.L       @R7,R1
    00000B16 2F16                   MOV.L       R1,@-R15
    00000B18 5251                   MOV.L       @(4,R5),R2
    00000B1A 2F26                   MOV.L       R2,@-R15
    00000B1C 6252                   MOV.L       @R5,R2
    00000B1E 2F26                   MOV.L       R2,@-R15
    00000B20 61F3                   MOV         R15,R1
    00000B22 7110                   ADD         #16,R1
    00000B24 400B                   JSR         @R0
    00000B26 2F16                   MOV.L       R1,@-R15
    00000B28 D27D                   MOV.L       L1183+20,R2; __addd
    00000B2A 63F3                   MOV         R15,R3
    00000B2C 7310                   ADD         #16,R3
    00000B2E 420B                   JSR         @R2
    00000B30 2F36                   MOV.L       R3,@-R15
    00000B32 7FF8                   ADD         #-8,R15
    00000B34 5173                   MOV.L       @(12,R7),R1
    00000B36 2F16                   MOV.L       R1,@-R15
    00000B38 5172                   MOV.L       @(8,R7),R1
    00000B3A 2F16                   MOV.L       R1,@-R15
    00000B3C 5353                   MOV.L       @(12,R5),R3
    00000B3E 2F36                   MOV.L       R3,@-R15
    00000B40 5352                   MOV.L       @(8,R5),R3
    00000B42 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B44 D175                   MOV.L       L1183+16,R1; __muld
    00000B46 62F3                   MOV         R15,R2
    00000B48 7210                   ADD         #16,R2
    00000B4A 410B                   JSR         @R1
    00000B4C 2F26                   MOV.L       R2,@-R15
    00000B4E D375                   MOV.L       L1183+24,R3; __subdr
    00000B50 430B                   JSR         @R3
    00000B52 2FE6                   MOV.L       R14,@-R15
        nroots.c   211            fa.i = c[0].i + c[1].r * x.i + c[1].i * x.r;
    00000B54 D071                   MOV.L       L1183+16,R0; __muld
    00000B56 7FF8                   ADD         #-8,R15
    00000B58 52F2                   MOV.L       @(8,R15),R2
    00000B5A 5323                   MOV.L       @(12,R2),R3
    00000B5C 2F36                   MOV.L       R3,@-R15
    00000B5E 5322                   MOV.L       @(8,R2),R3
    00000B60 2F36                   MOV.L       R3,@-R15
    00000B62 7FF8                   ADD         #-8,R15
    00000B64 5171                   MOV.L       @(4,R7),R1
    00000B66 2F16                   MOV.L       R1,@-R15
    00000B68 6172                   MOV.L       @R7,R1
    00000B6A 2F16                   MOV.L       R1,@-R15
    00000B6C 5353                   MOV.L       @(12,R5),R3
    00000B6E 2F36                   MOV.L       R3,@-R15
    00000B70 5352                   MOV.L       @(8,R5),R3
    00000B72 2F36                   MOV.L       R3,@-R15
    00000B74 61F3                   MOV         R15,R1
    00000B76 7110                   ADD         #16,R1
    00000B78 400B                   JSR         @R0
    00000B7A 2F16                   MOV.L       R1,@-R15
    00000B7C D268                   MOV.L       L1183+20,R2; __addd
    00000B7E 63F3                   MOV         R15,R3
    00000B80 7310                   ADD         #16,R3
    00000B82 420B                   JSR         @R2
    00000B84 2F36                   MOV.L       R3,@-R15
    00000B86 7FF8                   ADD         #-8,R15
    00000B88 5173                   MOV.L       @(12,R7),R1
    00000B8A 2F16                   MOV.L       R1,@-R15
    00000B8C 5172                   MOV.L       @(8,R7),R1
    00000B8E 2F16                   MOV.L       R1,@-R15
    00000B90 5351                   MOV.L       @(4,R5),R3
    00000B92 2F36                   MOV.L       R3,@-R15
    00000B94 6352                   MOV.L       @R5,R3
    00000B96 2F36                   MOV.L       R3,@-R15
    00000B98 D160                   MOV.L       L1183+16,R1; __muld
    00000B9A 62F3                   MOV         R15,R2
    00000B9C 7210                   ADD         #16,R2
    00000B9E 410B                   JSR         @R1
    00000BA0 2F26                   MOV.L       R2,@-R15
    00000BA2 E008                   MOV         #8,R0
    00000BA4 D35E                   MOV.L       L1183+20,R3; __addd
    00000BA6 30EC                   ADD         R14,R0
    00000BA8 430B                   JSR         @R3
    00000BAA 2F06                   MOV.L       R0,@-R15
        nroots.c   212    
        nroots.c   213            for (k = 2; k < n; k++) {
    00000BAC ED02                   MOV         #2,R13
    00000BAE E720                   MOV         #32,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BB0 3D43                   CMP/GE      R4,R13
    00000BB2 8F02                   BF/S        L1184
    00000BB4 37CC                   ADD         R12,R7
    00000BB6 A0A3                   BRA         L1165
    00000BB8 0009                   NOP
    00000BBA              L1184:                            
    00000BBA              L1166:                            
        nroots.c   214    
        nroots.c   215                    // x = a * x
        nroots.c   216    
        nroots.c   217                    t = a.r * x.r - a.i * x.i;
    00000BBA 7FF8                   ADD         #-8,R15
    00000BBC D157                   MOV.L       L1183+16,R1; __muld
    00000BBE 5261                   MOV.L       @(4,R6),R2
    00000BC0 2F26                   MOV.L       R2,@-R15
    00000BC2 6262                   MOV.L       @R6,R2
    00000BC4 2F26                   MOV.L       R2,@-R15
    00000BC6 5351                   MOV.L       @(4,R5),R3
    00000BC8 2F36                   MOV.L       R3,@-R15
    00000BCA 6352                   MOV.L       @R5,R3
    00000BCC 2F36                   MOV.L       R3,@-R15
    00000BCE 62F3                   MOV         R15,R2
    00000BD0 7210                   ADD         #16,R2
    00000BD2 410B                   JSR         @R1
    00000BD4 2F26                   MOV.L       R2,@-R15
    00000BD6 7FF8                   ADD         #-8,R15
    00000BD8 D150                   MOV.L       L1183+16,R1; __muld
    00000BDA 5363                   MOV.L       @(12,R6),R3
    00000BDC 2F36                   MOV.L       R3,@-R15
    00000BDE 5362                   MOV.L       @(8,R6),R3
    00000BE0 2F36                   MOV.L       R3,@-R15
    00000BE2 5253                   MOV.L       @(12,R5),R2
    00000BE4 2F26                   MOV.L       R2,@-R15
    00000BE6 5252                   MOV.L       @(8,R5),R2
    00000BE8 2F26                   MOV.L       R2,@-R15
    00000BEA 63F3                   MOV         R15,R3
    00000BEC 7310                   ADD         #16,R3
    00000BEE 410B                   JSR         @R1
    00000BF0 2F36                   MOV.L       R3,@-R15
    00000BF2 60F3                   MOV         R15,R0
    00000BF4 D24B                   MOV.L       L1183+24,R2; __subdr
    00000BF6 7014                   ADD         #20,R0
    00000BF8 420B                   JSR         @R2
    00000BFA 2F06                   MOV.L       R0,@-R15
        nroots.c   218                    x.i = a.r * x.i + a.i * x.r;
    00000BFC D147                   MOV.L       L1183+16,R1; __muld
    00000BFE 7FF8                   ADD         #-8,R15
    00000C00 5361                   MOV.L       @(4,R6),R3
    00000C02 2F36                   MOV.L       R3,@-R15
    00000C04 6362                   MOV.L       @R6,R3
    00000C06 2F36                   MOV.L       R3,@-R15
    00000C08 5253                   MOV.L       @(12,R5),R2
    00000C0A 2F26                   MOV.L       R2,@-R15
    00000C0C 5252                   MOV.L       @(8,R5),R2
    00000C0E 2F26                   MOV.L       R2,@-R15
    00000C10 63F3                   MOV         R15,R3
    00000C12 7310                   ADD         #16,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C14 410B                   JSR         @R1
    00000C16 2F36                   MOV.L       R3,@-R15
    00000C18 D140                   MOV.L       L1183+16,R1; __muld
    00000C1A 7FF8                   ADD         #-8,R15
    00000C1C 5263                   MOV.L       @(12,R6),R2
    00000C1E 2F26                   MOV.L       R2,@-R15
    00000C20 5262                   MOV.L       @(8,R6),R2
    00000C22 2F26                   MOV.L       R2,@-R15
    00000C24 5351                   MOV.L       @(4,R5),R3
    00000C26 2F36                   MOV.L       R3,@-R15
    00000C28 6352                   MOV.L       @R5,R3
    00000C2A 2F36                   MOV.L       R3,@-R15
    00000C2C 62F3                   MOV         R15,R2
    00000C2E 7210                   ADD         #16,R2
    00000C30 410B                   JSR         @R1
    00000C32 2F26                   MOV.L       R2,@-R15
    00000C34 D33A                   MOV.L       L1183+20,R3; __addd
    00000C36 E008                   MOV         #8,R0
    00000C38 305C                   ADD         R5,R0
    00000C3A 430B                   JSR         @R3
    00000C3C 2F06                   MOV.L       R0,@-R15
        nroots.c   219                    x.r = t;
    00000C3E 62F3                   MOV         R15,R2
    00000C40 7204                   ADD         #4,R2
    00000C42 6153                   MOV         R5,R1
    00000C44 6322                   MOV.L       @R2,R3
    00000C46 2132                   MOV.L       R3,@R1
    00000C48 5321                   MOV.L       @(4,R2),R3
    00000C4A 1131                   MOV.L       R3,@(4,R1)
        nroots.c   220    
        nroots.c   221                    // fa += c[k] * x
        nroots.c   222    
        nroots.c   223                    fa.r += c[k].r * x.r - c[k].i * x.i;
    00000C4C 50E1                   MOV.L       @(4,R14),R0
    00000C4E 2F06                   MOV.L       R0,@-R15
    00000C50 60E2                   MOV.L       @R14,R0
    00000C52 2F06                   MOV.L       R0,@-R15
    00000C54 D131                   MOV.L       L1183+16,R1; __muld
    00000C56 7FF0                   ADD         #-16,R15
    00000C58 5371                   MOV.L       @(4,R7),R3
    00000C5A 2F36                   MOV.L       R3,@-R15
    00000C5C 6372                   MOV.L       @R7,R3
    00000C5E 2F36                   MOV.L       R3,@-R15
    00000C60 5251                   MOV.L       @(4,R5),R2
    00000C62 2F26                   MOV.L       R2,@-R15
    00000C64 6252                   MOV.L       @R5,R2
    00000C66 2F26                   MOV.L       R2,@-R15
    00000C68 63F3                   MOV         R15,R3
    00000C6A 7310                   ADD         #16,R3
    00000C6C 410B                   JSR         @R1
    00000C6E 2F36                   MOV.L       R3,@-R15
    00000C70 D12A                   MOV.L       L1183+16,R1; __muld
    00000C72 7FF8                   ADD         #-8,R15
    00000C74 5273                   MOV.L       @(12,R7),R2
    00000C76 2F26                   MOV.L       R2,@-R15
    00000C78 5272                   MOV.L       @(8,R7),R2
    00000C7A 2F26                   MOV.L       R2,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C7C 5353                   MOV.L       @(12,R5),R3
    00000C7E 2F36                   MOV.L       R3,@-R15
    00000C80 5352                   MOV.L       @(8,R5),R3
    00000C82 2F36                   MOV.L       R3,@-R15
    00000C84 62F3                   MOV         R15,R2
    00000C86 7210                   ADD         #16,R2
    00000C88 410B                   JSR         @R1
    00000C8A 2F26                   MOV.L       R2,@-R15
    00000C8C D025                   MOV.L       L1183+24,R0; __subdr
    00000C8E 63F3                   MOV         R15,R3
    00000C90 7310                   ADD         #16,R3
    00000C92 400B                   JSR         @R0
    00000C94 2F36                   MOV.L       R3,@-R15
    00000C96 62E3                   MOV         R14,R2
    00000C98 D221                   MOV.L       L1183+20,R2; __addd
    00000C9A 420B                   JSR         @R2
    00000C9C 2FE6                   MOV.L       R14,@-R15
        nroots.c   224                    fa.i += c[k].r * x.i + c[k].i * x.r;
    00000C9E 53E3                   MOV.L       @(12,R14),R3
    00000CA0 D11E                   MOV.L       L1183+16,R1; __muld
    00000CA2 2F36                   MOV.L       R3,@-R15
    00000CA4 53E2                   MOV.L       @(8,R14),R3
    00000CA6 2F36                   MOV.L       R3,@-R15
    00000CA8 7FF0                   ADD         #-16,R15
    00000CAA 5271                   MOV.L       @(4,R7),R2
    00000CAC 2F26                   MOV.L       R2,@-R15
    00000CAE 6272                   MOV.L       @R7,R2
    00000CB0 2F26                   MOV.L       R2,@-R15
    00000CB2 5353                   MOV.L       @(12,R5),R3
    00000CB4 2F36                   MOV.L       R3,@-R15
    00000CB6 5352                   MOV.L       @(8,R5),R3
    00000CB8 2F36                   MOV.L       R3,@-R15
    00000CBA 62F3                   MOV         R15,R2
    00000CBC 7210                   ADD         #16,R2
    00000CBE 410B                   JSR         @R1
    00000CC0 2F26                   MOV.L       R2,@-R15
    00000CC2 7FF8                   ADD         #-8,R15
    00000CC4 D115                   MOV.L       L1183+16,R1; __muld
    00000CC6 5373                   MOV.L       @(12,R7),R3
    00000CC8 2F36                   MOV.L       R3,@-R15
    00000CCA 5372                   MOV.L       @(8,R7),R3
    00000CCC 2F36                   MOV.L       R3,@-R15
    00000CCE 5251                   MOV.L       @(4,R5),R2
    00000CD0 2F26                   MOV.L       R2,@-R15
    00000CD2 6252                   MOV.L       @R5,R2
    00000CD4 2F26                   MOV.L       R2,@-R15
    00000CD6 63F3                   MOV         R15,R3
    00000CD8 7310                   ADD         #16,R3
    00000CDA 410B                   JSR         @R1
    00000CDC 2F36                   MOV.L       R3,@-R15
    00000CDE 62F3                   MOV         R15,R2
    00000CE0 D00F                   MOV.L       L1183+20,R0; __addd
    00000CE2 7210                   ADD         #16,R2
    00000CE4 400B                   JSR         @R0
    00000CE6 2F26                   MOV.L       R2,@-R15
    00000CE8 63E3                   MOV         R14,R3
    00000CEA 7308                   ADD         #8,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CEC 2F36                   MOV.L       R3,@-R15
    00000CEE D30C                   MOV.L       L1183+20,R3; __addd
    00000CF0 430B                   JSR         @R3
    00000CF2 0009                   NOP
    00000CF4 7D01                   ADD         #1,R13
    00000CF6 3D43                   CMP/GE      R4,R13
    00000CF8 8D02                   BT/S        L1185
    00000CFA 7710                   ADD         #16,R7
    00000CFC AF5D                   BRA         L1166
    00000CFE 0009                   NOP
    00000D00              L1185:                            
    00000D00              L1165:                            
        nroots.c   225            }
        nroots.c   226    }
    00000D00 7F0C                   ADD         #12,R15
    00000D02 4F26                   LDS.L       @R15+,PR
    00000D04 6CF6                   MOV.L       @R15+,R12
    00000D06 6DF6                   MOV.L       @R15+,R13
    00000D08 000B                   RTS
    00000D0A 6EF6                   MOV.L       @R15+,R14
    00000D0C              L1183:                            
    00000D0C <00000000>             .DATA.L     __$a
    00000D10 <00000000>             .DATA.L     __$x
    00000D14 <00000000>             .DATA.L     __$c
    00000D18 <00000000>             .DATA.L     __$fa
    00000D1C <00000000>             .DATA.L     __muld
    00000D20 <00000000>             .DATA.L     __addd
    00000D24 <00000000>             .DATA.L     __subdr
        nroots.c   227    
        nroots.c   228    // divide the polynomial by x - a
        nroots.c   229    
        nroots.c   230    void
        nroots.c   231    divpoly_int(int n)
    00000D28              _divpoly_int:                    ; function: divpoly_int
                                                           ; frame size=68
                                                           ; used runtime library name:
                                                           ; __addd, __subdr, __muld, __gtd
    00000D28 2FE6                   MOV.L       R14,@-R15
    00000D2A 2FD6                   MOV.L       R13,@-R15
    00000D2C 2FC6                   MOV.L       R12,@-R15
        nroots.c   232    {
        nroots.c   233            int k;
        nroots.c   234            for (k = n - 1; k > 0; k--) {
    00000D2E 6D43                   MOV         R4,R13
    00000D30 4F22                   STS.L       PR,@-R15
    00000D32 7DFF                   ADD         #-1,R13
    00000D34 DC5C                   MOV.L       L1186+2,R12; __$c
    00000D36 67D3                   MOV         R13,R7
    00000D38 64D3                   MOV         R13,R4
    00000D3A 4408                   SHLL2       R4
    00000D3C 4408                   SHLL2       R4
    00000D3E 65C3                   MOV         R12,R5
    00000D40 66D3                   MOV         R13,R6
    00000D42 76FF                   ADD         #-1,R6
    00000D44 4608                   SHLL2       R6
    00000D46 4608                   SHLL2       R6
    00000D48 365C                   ADD         R5,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D4A 4715                   CMP/PL      R7
    00000D4C D557                   MOV.L       L1186+6,R5 ; __$a
    00000D4E 8F59                   BF/S        L1167
    00000D50 34CC                   ADD         R12,R4
    00000D52              L1168:                            
        nroots.c   235                    c[k - 1].r += c[k].r * a.r - c[k].i * a.i;
    00000D52 5261                   MOV.L       @(4,R6),R2
    00000D54 D156                   MOV.L       L1186+10,R1; __muld
    00000D56 2F26                   MOV.L       R2,@-R15
    00000D58 6262                   MOV.L       @R6,R2
    00000D5A 2F26                   MOV.L       R2,@-R15
    00000D5C 7FF0                   ADD         #-16,R15
    00000D5E 5341                   MOV.L       @(4,R4),R3
    00000D60 2F36                   MOV.L       R3,@-R15
    00000D62 6342                   MOV.L       @R4,R3
    00000D64 2F36                   MOV.L       R3,@-R15
    00000D66 5251                   MOV.L       @(4,R5),R2
    00000D68 2F26                   MOV.L       R2,@-R15
    00000D6A 6252                   MOV.L       @R5,R2
    00000D6C 2F26                   MOV.L       R2,@-R15
    00000D6E 63F3                   MOV         R15,R3
    00000D70 7310                   ADD         #16,R3
    00000D72 410B                   JSR         @R1
    00000D74 2F36                   MOV.L       R3,@-R15
    00000D76 7FF8                   ADD         #-8,R15
    00000D78 D14D                   MOV.L       L1186+10,R1; __muld
    00000D7A 5243                   MOV.L       @(12,R4),R2
    00000D7C 2F26                   MOV.L       R2,@-R15
    00000D7E 5242                   MOV.L       @(8,R4),R2
    00000D80 2F26                   MOV.L       R2,@-R15
    00000D82 5353                   MOV.L       @(12,R5),R3
    00000D84 2F36                   MOV.L       R3,@-R15
    00000D86 5352                   MOV.L       @(8,R5),R3
    00000D88 2F36                   MOV.L       R3,@-R15
    00000D8A 62F3                   MOV         R15,R2
    00000D8C 7210                   ADD         #16,R2
    00000D8E 410B                   JSR         @R1
    00000D90 2F26                   MOV.L       R2,@-R15
    00000D92 63F3                   MOV         R15,R3
    00000D94 D047                   MOV.L       L1186+14,R0; __subdr
    00000D96 7310                   ADD         #16,R3
    00000D98 400B                   JSR         @R0
    00000D9A 2F36                   MOV.L       R3,@-R15
    00000D9C 6263                   MOV         R6,R2
    00000D9E D246                   MOV.L       L1186+18,R2; __addd
    00000DA0 420B                   JSR         @R2
    00000DA2 2F66                   MOV.L       R6,@-R15
        nroots.c   236                    c[k - 1].i += c[k].i * a.r + c[k].r * a.i;
    00000DA4 5363                   MOV.L       @(12,R6),R3
    00000DA6 2F36                   MOV.L       R3,@-R15
    00000DA8 5362                   MOV.L       @(8,R6),R3
    00000DAA 2F36                   MOV.L       R3,@-R15
    00000DAC D140                   MOV.L       L1186+10,R1; __muld
    00000DAE 7FF0                   ADD         #-16,R15
    00000DB0 5243                   MOV.L       @(12,R4),R2
    00000DB2 2F26                   MOV.L       R2,@-R15
    00000DB4 5242                   MOV.L       @(8,R4),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DB6 2F26                   MOV.L       R2,@-R15
    00000DB8 5351                   MOV.L       @(4,R5),R3
    00000DBA 2F36                   MOV.L       R3,@-R15
    00000DBC 6352                   MOV.L       @R5,R3
    00000DBE 2F36                   MOV.L       R3,@-R15
    00000DC0 62F3                   MOV         R15,R2
    00000DC2 7210                   ADD         #16,R2
    00000DC4 410B                   JSR         @R1
    00000DC6 2F26                   MOV.L       R2,@-R15
    00000DC8 D139                   MOV.L       L1186+10,R1; __muld
    00000DCA 7FF8                   ADD         #-8,R15
    00000DCC 5341                   MOV.L       @(4,R4),R3
    00000DCE 2F36                   MOV.L       R3,@-R15
    00000DD0 6342                   MOV.L       @R4,R3
    00000DD2 2F36                   MOV.L       R3,@-R15
    00000DD4 5253                   MOV.L       @(12,R5),R2
    00000DD6 2F26                   MOV.L       R2,@-R15
    00000DD8 5252                   MOV.L       @(8,R5),R2
    00000DDA 2F26                   MOV.L       R2,@-R15
    00000DDC 63F3                   MOV         R15,R3
    00000DDE 7310                   ADD         #16,R3
    00000DE0 410B                   JSR         @R1
    00000DE2 2F36                   MOV.L       R3,@-R15
    00000DE4 D034                   MOV.L       L1186+18,R0; __addd
    00000DE6 62F3                   MOV         R15,R2
    00000DE8 7210                   ADD         #16,R2
    00000DEA 400B                   JSR         @R0
    00000DEC 2F26                   MOV.L       R2,@-R15
    00000DEE 6363                   MOV         R6,R3
    00000DF0 7308                   ADD         #8,R3
    00000DF2 2F36                   MOV.L       R3,@-R15
    00000DF4 D330                   MOV.L       L1186+18,R3; __addd
    00000DF6 430B                   JSR         @R3
    00000DF8 0009                   NOP
    00000DFA 77FF                   ADD         #-1,R7
    00000DFC 74F0                   ADD         #-16,R4
    00000DFE 4715                   CMP/PL      R7
    00000E00 8DA7                   BT/S        L1168
    00000E02 76F0                   ADD         #-16,R6
    00000E04              L1167:                            
        nroots.c   237            }
        nroots.c   238            if (ABS(c[0]) > DELTA)
    00000E04 D12A                   MOV.L       L1186+10,R1; __muld
    00000E06 7FE8                   ADD         #-24,R15
    00000E08 6EC3                   MOV         R12,R14
    00000E0A 53E1                   MOV.L       @(4,R14),R3
    00000E0C 2F36                   MOV.L       R3,@-R15
    00000E0E 63E2                   MOV.L       @R14,R3
    00000E10 2F36                   MOV.L       R3,@-R15
    00000E12 52E1                   MOV.L       @(4,R14),R2
    00000E14 2F26                   MOV.L       R2,@-R15
    00000E16 62E2                   MOV.L       @R14,R2
    00000E18 2F26                   MOV.L       R2,@-R15
    00000E1A 63F3                   MOV         R15,R3
    00000E1C 7310                   ADD         #16,R3
    00000E1E 410B                   JSR         @R1
    00000E20 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E22 7FF8                   ADD         #-8,R15
    00000E24 D122                   MOV.L       L1186+10,R1; __muld
    00000E26 52E3                   MOV.L       @(12,R14),R2
    00000E28 2F26                   MOV.L       R2,@-R15
    00000E2A 52E2                   MOV.L       @(8,R14),R2
    00000E2C 2F26                   MOV.L       R2,@-R15
    00000E2E 53E3                   MOV.L       @(12,R14),R3
    00000E30 2F36                   MOV.L       R3,@-R15
    00000E32 53E2                   MOV.L       @(8,R14),R3
    00000E34 2F36                   MOV.L       R3,@-R15
    00000E36 62F3                   MOV         R15,R2
    00000E38 7210                   ADD         #16,R2
    00000E3A 410B                   JSR         @R1
    00000E3C 2F26                   MOV.L       R2,@-R15
    00000E3E 63F3                   MOV         R15,R3
    00000E40 D01D                   MOV.L       L1186+18,R0; __addd
    00000E42 7310                   ADD         #16,R3
    00000E44 400B                   JSR         @R0
    00000E46 2F36                   MOV.L       R3,@-R15
    00000E48 D11C                   MOV.L       L1186+22,R1; _sqrt
    00000E4A E208                   MOV         #8,R2
    00000E4C 32FC                   ADD         R15,R2
    00000E4E 410B                   JSR         @R1
    00000E50 2F26                   MOV.L       R2,@-R15
    00000E52 7F0C                   ADD         #12,R15
    00000E54 D21A                   MOV.L       L1186+26,R2; H'A0B5ED8D
    00000E56 2F26                   MOV.L       R2,@-R15
    00000E58 D21A                   MOV.L       L1186+30,R2; H'3EB0C6F7
    00000E5A D31B                   MOV.L       L1186+34,R3; __gtd
    00000E5C 430B                   JSR         @R3
    00000E5E 2F26                   MOV.L       R2,@-R15
    00000E60 8800                   CMP/EQ      #0,R0
    00000E62 8903                   BT          L1169
        nroots.c   239                    stop("nroots: residual error");
    00000E64 D419                   MOV.L       L1186+38,R4; L1102
    00000E66 D21A                   MOV.L       L1186+42,R2; _stop
    00000E68 420B                   JSR         @R2
    00000E6A 0009                   NOP
    00000E6C              L1169:                            
        nroots.c   240            for (k = 0; k < n - 1; k++) {
    00000E6C E500                   MOV         #0,R5
    00000E6E E400                   MOV         #0,R4
    00000E70 4D15                   CMP/PL      R13
    00000E72 8F13                   BF/S        L1170
    00000E74 34CC                   ADD         R12,R4
    00000E76              L1171:                            
        nroots.c   241                    c[k].r = c[k + 1].r;
    00000E76 6643                   MOV         R4,R6
    00000E78 7610                   ADD         #16,R6
    00000E7A 6263                   MOV         R6,R2
    00000E7C 6122                   MOV.L       @R2,R1
        nroots.c   242                    c[k].i = c[k + 1].i;
    00000E7E 6023                   MOV         R2,R0
    00000E80 6343                   MOV         R4,R3
    00000E82 7008                   ADD         #8,R0
    00000E84 2312                   MOV.L       R1,@R3
    00000E86 7501                   ADD         #1,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E88 5121                   MOV.L       @(4,R2),R1
    00000E8A 35D3                   CMP/GE      R13,R5
    00000E8C 1311                   MOV.L       R1,@(4,R3)
    00000E8E 7308                   ADD         #8,R3
    00000E90 6202                   MOV.L       @R0,R2
    00000E92 2322                   MOV.L       R2,@R3
    00000E94 5201                   MOV.L       @(4,R0),R2
    00000E96 1321                   MOV.L       R2,@(4,R3)
    00000E98 8FED                   BF/S        L1171
    00000E9A 7410                   ADD         #16,R4
    00000E9C              L1170:                            
        nroots.c   243            }
        nroots.c   244    }
    00000E9C 4F26                   LDS.L       @R15+,PR
    00000E9E 6CF6                   MOV.L       @R15+,R12
    00000EA0 6DF6                   MOV.L       @R15+,R13
    00000EA2 000B                   RTS
    00000EA4 6EF6                   MOV.L       @R15+,R14
    00000EA6              L1186:                            
    00000EA6 0000                   .DATA.W     0
    00000EA8 <00000000>             .DATA.L     __$c
    00000EAC <00000000>             .DATA.L     __$a
    00000EB0 <00000000>             .DATA.L     __muld
    00000EB4 <00000000>             .DATA.L     __subdr
    00000EB8 <00000000>             .DATA.L     __addd
    00000EBC <00000000>             .DATA.L     _sqrt
    00000EC0 A0B5ED8D               .DATA.L     H'A0B5ED8D
    00000EC4 3EB0C6F7               .DATA.L     H'3EB0C6F7
    00000EC8 <00000000>             .DATA.L     __gtd
    00000ECC <00000000>             .DATA.L     L1102
    00000ED0 <00000000>             .DATA.L     _stop
C   00000000              L1072:
    00000000 6E726F6F74             .SDATA      "nroots: polynomial?"
             733A20706F   
             6C796E6F6D   
             69616C3F     
    00000013 00                     .DATA.B     H'00
    00000014              L1073:
    00000014 6E726F6F74             .SDATA      "nroots: degree?"
             733A206465   
             677265653F   
    00000023 00                     .DATA.B     H'00
    00000024              L1075:
    00000024 6E726F6F74             .SDATA      "nroots: coefficients?"
             733A20636F   
             6566666963   
             69656E7473   
             3F           
    00000039 00                     .DATA.B     H'00
    0000003A 00000002               .RES.W      1
    0000003C              L1092:
    0000003C 6E726F6F74             .SDATA      "nroots: convergence error"
             733A20636F   
             6E76657267   
             656E636520   
             6572726F72   
    00000055 00                     .DATA.B     H'00




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000056 00000002               .RES.W      1
    00000058              L1102:
    00000058 6E726F6F74             .SDATA      "nroots: residual error"
             733A207265   
             7369647561   
             6C20657272   
             6F72         
    0000006E 00                     .DATA.B     H'00
B   00000000              __$a:                            ; static: a
    00000000 00000010               .RES.L      4
    00000010              __$b:                            ; static: b
    00000010 00000010               .RES.L      4
    00000020              __$x:                            ; static: x
    00000020 00000010               .RES.L      4
    00000030              __$y:                            ; static: y
    00000030 00000010               .RES.L      4
    00000040              __$fa:                           ; static: fa
    00000040 00000010               .RES.L      4
    00000050              __$fb:                           ; static: fb
    00000050 00000010               .RES.L      4
    00000060              __$dx:                           ; static: dx
    00000060 00000010               .RES.L      4
    00000070              __$df:                           ; static: df
    00000070 00000010               .RES.L      4
    00000080              __$c:                            ; static: c
    00000080 00000650               .RES.L      404



































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:20  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      244



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000ED4 Byte(s)
CONSTANT SECTION (C):                               0000006F Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               000006D0 Byte(s)

 TOTAL PROGRAM SIZE: 00001613 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           33
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           5
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           109






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkB7BF.tmp 

