SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\power.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         power.c     1    /* Power function
         power.c     2    
         power.c     3            Input:          push    Base
         power.c     4    
         power.c     5                            push    Exponent
         power.c     6    
         power.c     7            Output:         Result on stack
         power.c     8    */
         power.c     9    
         power.c    10    #include "stdafx.h"
         power.c    11    #include "defs.h"
         power.c    12    
         power.c    13    void
         power.c    14    eval_power(void)
P   00000000              _eval_power:                     ; function: eval_power
                                                           ; frame size=8
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 4F22                   STS.L       PR,@-R15
         power.c    15    {
         power.c    16            push(cadr(p1));
    00000004 DE34                   MOV.L       L1299+2,R14; _p1
    00000006 64E2                   MOV.L       @R14,R4
    00000008 8448                   MOV.B       @(8,R4),R0
    0000000A 2008                   TST         R0,R0
    0000000C 8B02                   BF          L1151
    0000000E 64E2                   MOV.L       @R14,R4
    00000010 A004                   BRA         L1153
    00000012 5441                   MOV.L       @(4,R4),R4
    00000014              L1151:                            
    00000014 935F                   MOV.W       L1299,R3   ; H'0570
    00000016 D231                   MOV.L       L1299+6,R2 ; _symtab
    00000018 6422                   MOV.L       @R2,R4
    0000001A 343C                   ADD         R3,R4
    0000001C              L1153:                            
    0000001C 8448                   MOV.B       @(8,R4),R0
    0000001E 2008                   TST         R0,R0
    00000020 8B0C                   BF          L1150
    00000022 64E2                   MOV.L       @R14,R4
    00000024 8448                   MOV.B       @(8,R4),R0
    00000026 2008                   TST         R0,R0
    00000028 8B02                   BF          L1152
    0000002A 64E2                   MOV.L       @R14,R4
    0000002C A004                   BRA         L1154
    0000002E 5441                   MOV.L       @(4,R4),R4
    00000030              L1152:                            
    00000030 9351                   MOV.W       L1299,R3   ; H'0570
    00000032 D22A                   MOV.L       L1299+6,R2 ; _symtab
    00000034 6422                   MOV.L       @R2,R4
    00000036 343C                   ADD         R3,R4
    00000038              L1154:                            
    00000038 A004                   BRA         L1155
    0000003A 6442                   MOV.L       @R4,R4
    0000003C              L1150:                            
    0000003C 934B                   MOV.W       L1299,R3   ; H'0570




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000003E D227                   MOV.L       L1299+6,R2 ; _symtab
    00000040 6422                   MOV.L       @R2,R4
    00000042 343C                   ADD         R3,R4
    00000044              L1155:                            
    00000044 D326                   MOV.L       L1299+10,R3; _push
    00000046 430B                   JSR         @R3
    00000048 0009                   NOP
         power.c    17            eval();
    0000004A D226                   MOV.L       L1299+14,R2; _eval
    0000004C 420B                   JSR         @R2
    0000004E 0009                   NOP
         power.c    18            push(caddr(p1));
    00000050 64E2                   MOV.L       @R14,R4
    00000052 8448                   MOV.B       @(8,R4),R0
    00000054 2008                   TST         R0,R0
    00000056 8B02                   BF          L1158
    00000058 64E2                   MOV.L       @R14,R4
    0000005A A004                   BRA         L1163
    0000005C 5441                   MOV.L       @(4,R4),R4
    0000005E              L1158:                            
    0000005E 933A                   MOV.W       L1299,R3   ; H'0570
    00000060 D21E                   MOV.L       L1299+6,R2 ; _symtab
    00000062 6422                   MOV.L       @R2,R4
    00000064 343C                   ADD         R3,R4
    00000066              L1163:                            
    00000066 8448                   MOV.B       @(8,R4),R0
    00000068 2008                   TST         R0,R0
    0000006A 8B0C                   BF          L1157
    0000006C 64E2                   MOV.L       @R14,R4
    0000006E 8448                   MOV.B       @(8,R4),R0
    00000070 2008                   TST         R0,R0
    00000072 8B02                   BF          L1159
    00000074 64E2                   MOV.L       @R14,R4
    00000076 A004                   BRA         L1164
    00000078 5441                   MOV.L       @(4,R4),R4
    0000007A              L1159:                            
    0000007A 932C                   MOV.W       L1299,R3   ; H'0570
    0000007C D217                   MOV.L       L1299+6,R2 ; _symtab
    0000007E 6422                   MOV.L       @R2,R4
    00000080 343C                   ADD         R3,R4
    00000082              L1164:                            
    00000082 A004                   BRA         L1165
    00000084 5441                   MOV.L       @(4,R4),R4
    00000086              L1157:                            
    00000086 9326                   MOV.W       L1299,R3   ; H'0570
    00000088 D214                   MOV.L       L1299+6,R2 ; _symtab
    0000008A 6422                   MOV.L       @R2,R4
    0000008C 343C                   ADD         R3,R4
    0000008E              L1165:                            
    0000008E 8448                   MOV.B       @(8,R4),R0
    00000090 2008                   TST         R0,R0
    00000092 8B29                   BF          L1156
    00000094 64E2                   MOV.L       @R14,R4
    00000096 8448                   MOV.B       @(8,R4),R0
    00000098 2008                   TST         R0,R0
    0000009A 8B02                   BF          L1161
    0000009C 64E2                   MOV.L       @R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000009E A004                   BRA         L1166
    000000A0 5441                   MOV.L       @(4,R4),R4
    000000A2              L1161:                            
    000000A2 9318                   MOV.W       L1299,R3   ; H'0570
    000000A4 D20D                   MOV.L       L1299+6,R2 ; _symtab
    000000A6 6422                   MOV.L       @R2,R4
    000000A8 343C                   ADD         R3,R4
    000000AA              L1166:                            
    000000AA 8448                   MOV.B       @(8,R4),R0
    000000AC 2008                   TST         R0,R0
    000000AE 8B0C                   BF          L1160
    000000B0 64E2                   MOV.L       @R14,R4
    000000B2 8448                   MOV.B       @(8,R4),R0
    000000B4 2008                   TST         R0,R0
    000000B6 8B02                   BF          L1162
    000000B8 64E2                   MOV.L       @R14,R4
    000000BA A004                   BRA         L1167
    000000BC 5441                   MOV.L       @(4,R4),R4
    000000BE              L1162:                            
    000000BE 930A                   MOV.W       L1299,R3   ; H'0570
    000000C0 D206                   MOV.L       L1299+6,R2 ; _symtab
    000000C2 6422                   MOV.L       @R2,R4
    000000C4 343C                   ADD         R3,R4
    000000C6              L1167:                            
    000000C6 A004                   BRA         L1168
    000000C8 5441                   MOV.L       @(4,R4),R4
    000000CA              L1160:                            
    000000CA 9304                   MOV.W       L1299,R3   ; H'0570
    000000CC D203                   MOV.L       L1299+6,R2 ; _symtab
    000000CE 6422                   MOV.L       @R2,R4
    000000D0 343C                   ADD         R3,R4
    000000D2              L1168:                            
    000000D2 A00D                   BRA         L1169
    000000D4 6442                   MOV.L       @R4,R4
    000000D6              L1299:                            
    000000D6 0570                   .DATA.W     H'0570
    000000D8 <00000000>             .DATA.L     _p1
    000000DC <00000000>             .DATA.L     _symtab
    000000E0 <00000000>             .DATA.L     _push
    000000E4 <00000000>             .DATA.L     _eval
    000000E8              L1156:                            
    000000E8 9377                   MOV.W       L1300,R3   ; H'0570
    000000EA D23D                   MOV.L       L1300+6,R2 ; _symtab
    000000EC 6422                   MOV.L       @R2,R4
    000000EE 343C                   ADD         R3,R4
    000000F0              L1169:                            
    000000F0 D33C                   MOV.L       L1300+10,R3; _push
    000000F2 430B                   JSR         @R3
    000000F4 0009                   NOP
         power.c    19            eval();
    000000F6 D23C                   MOV.L       L1300+14,R2; _eval
    000000F8 420B                   JSR         @R2
    000000FA 0009                   NOP
         power.c    20            power();
    000000FC 4F26                   LDS.L       @R15+,PR
    000000FE 6EF6                   MOV.L       @R15+,R14
         power.c    21    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         power.c    22    
         power.c    23    void
         power.c    24    power(void)
    00000100              _power:                          ; function: power
                                                           ; frame size=4
    00000100 4F22                   STS.L       PR,@-R15
         power.c    25    {
         power.c    26            save();
    00000102 D33A                   MOV.L       L1300+18,R3; _save
    00000104 430B                   JSR         @R3
    00000106 0009                   NOP
         power.c    27            yypower();
    00000108 B003                   BSR         _yypower
    0000010A 0009                   NOP
         power.c    28            restore();
    0000010C D338                   MOV.L       L1300+22,R3; _restore
    0000010E 432B                   JMP         @R3
    00000110 4F26                   LDS.L       @R15+,PR
         power.c    29    }
         power.c    30    
         power.c    31    void
         power.c    32    yypower(void)
    00000112              _yypower:                        ; function: yypower
                                                           ; frame size=52
    00000112 2FE6                   MOV.L       R14,@-R15
    00000114 2FD6                   MOV.L       R13,@-R15
    00000116 2FC6                   MOV.L       R12,@-R15
    00000118 2FB6                   MOV.L       R11,@-R15
    0000011A 2FA6                   MOV.L       R10,@-R15
    0000011C 2F96                   MOV.L       R9,@-R15
    0000011E 2F86                   MOV.L       R8,@-R15
    00000120 4F22                   STS.L       PR,@-R15
    00000122 DB34                   MOV.L       L1300+26,R11; _multiply
         power.c    33    {
         power.c    34            int n;
         power.c    35    
         power.c    36            p2 = pop();
    00000124 D934                   MOV.L       L1300+30,R9; _pop
    00000126 DC35                   MOV.L       L1300+34,R12; _p2
    00000128 490B                   JSR         @R9
    0000012A 0009                   NOP
         power.c    37            p1 = pop();
    0000012C DE34                   MOV.L       L1300+38,R14; _p1
    0000012E 490B                   JSR         @R9
    00000130 2C02                   MOV.L       R0,@R12
    00000132 6403                   MOV         R0,R4
    00000134 2E02                   MOV.L       R0,@R14
    00000136 DD2B                   MOV.L       L1300+10,R13; _push
    00000138 8448                   MOV.B       @(8,R4),R0
    0000013A 600C                   EXTU.B      R0,R0
    0000013C 8801                   CMP/EQ      #1,R0
    0000013E 8B13                   BF          L1170
    00000140 D32E                   MOV.L       L1300+34,R3; _p2
    00000142 6032                   MOV.L       @R3,R0
    00000144 8408                   MOV.B       @(8,R0),R0
    00000146 600C                   EXTU.B      R0,R0
    00000148 8801                   CMP/EQ      #1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000014A 8B0D                   BF          L1170
         power.c    38    
         power.c    39            // both base and exponent are rational numbers?
         power.c    40    
         power.c    41            if (isrational(p1) && isrational(p2)) {
         power.c    42                    push(p1);
    0000014C 4D0B                   JSR         @R13
    0000014E 0009                   NOP
         power.c    43                    push(p2);
    00000150 4D0B                   JSR         @R13
    00000152 64C2                   MOV.L       @R12,R4
         power.c    44                    qpow();
    00000154 4F26                   LDS.L       @R15+,PR
    00000156 68F6                   MOV.L       @R15+,R8
    00000158 D32A                   MOV.L       L1300+42,R3; _qpow
    0000015A 69F6                   MOV.L       @R15+,R9
    0000015C 6AF6                   MOV.L       @R15+,R10
    0000015E 6BF6                   MOV.L       @R15+,R11
    00000160 6CF6                   MOV.L       @R15+,R12
    00000162 6DF6                   MOV.L       @R15+,R13
    00000164 432B                   JMP         @R3
    00000166 6EF6                   MOV.L       @R15+,R14
    00000168              L1170:                            
    00000168 68C2                   MOV.L       @R12,R8
    0000016A 8448                   MOV.B       @(8,R4),R0
    0000016C 600C                   EXTU.B      R0,R0
    0000016E 8801                   CMP/EQ      #1,R0
    00000170 8D03                   BT/S        L1173
    00000172 6503                   MOV         R0,R5
    00000174 6053                   MOV         R5,R0
    00000176 8802                   CMP/EQ      #2,R0
    00000178 8B15                   BF          L1172
    0000017A              L1173:                            
    0000017A 8488                   MOV.B       @(8,R8),R0
    0000017C 600C                   EXTU.B      R0,R0
    0000017E 8801                   CMP/EQ      #1,R0
    00000180 8903                   BT          L1174
    00000182 8488                   MOV.B       @(8,R8),R0
    00000184 600C                   EXTU.B      R0,R0
    00000186 8802                   CMP/EQ      #2,R0
    00000188 8B0D                   BF          L1172
    0000018A              L1174:                            
         power.c    45                    return;
         power.c    46            }
         power.c    47    
         power.c    48            // both base and exponent are either rational or double?
         power.c    49    
         power.c    50            if (isnum(p1) && isnum(p2)) {
         power.c    51                    push(p1);
    0000018A 4D0B                   JSR         @R13
    0000018C 0009                   NOP
         power.c    52                    push(p2);
    0000018E 4D0B                   JSR         @R13
    00000190 64C2                   MOV.L       @R12,R4
         power.c    53                    dpow();
    00000192 4F26                   LDS.L       @R15+,PR
    00000194 D21C                   MOV.L       L1300+46,R2; _dpow




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000196 68F6                   MOV.L       @R15+,R8
    00000198 69F6                   MOV.L       @R15+,R9
    0000019A 6AF6                   MOV.L       @R15+,R10
    0000019C 6BF6                   MOV.L       @R15+,R11
    0000019E 6CF6                   MOV.L       @R15+,R12
    000001A0 6DF6                   MOV.L       @R15+,R13
    000001A2 422B                   JMP         @R2
    000001A4 6EF6                   MOV.L       @R15+,R14
    000001A6              L1172:                            
         power.c    54                    return;
         power.c    55            }
         power.c    56    
         power.c    57            if (istensor(p1)) {
    000001A6 8448                   MOV.B       @(8,R4),R0
    000001A8 600C                   EXTU.B      R0,R0
    000001AA 8804                   CMP/EQ      #4,R0
    000001AC 8B09                   BF          L1175
         power.c    58                    power_tensor();
    000001AE 4F26                   LDS.L       @R15+,PR
    000001B0 D216                   MOV.L       L1300+50,R2; _power_tensor
    000001B2 68F6                   MOV.L       @R15+,R8
    000001B4 69F6                   MOV.L       @R15+,R9
    000001B6 6AF6                   MOV.L       @R15+,R10
    000001B8 6BF6                   MOV.L       @R15+,R11
    000001BA 6CF6                   MOV.L       @R15+,R12
    000001BC 6DF6                   MOV.L       @R15+,R13
    000001BE 422B                   JMP         @R2
    000001C0 6EF6                   MOV.L       @R15+,R14
    000001C2              L1175:                            
    000001C2 960B                   MOV.W       L1300+2,R6 ; H'05AC
    000001C4 DA06                   MOV.L       L1300+6,R10; _symtab
    000001C6 65A2                   MOV.L       @R10,R5
    000001C8 6353                   MOV         R5,R3
    000001CA 336C                   ADD         R6,R3
    000001CC 3430                   CMP/EQ      R3,R4
    000001CE 8B45                   BF          L1176
    000001D0 8488                   MOV.B       @(8,R8),R0
    000001D2 2008                   TST         R0,R0
    000001D4 8B1C                   BF          L1177
    000001D6 A01D                   BRA         L1178
    000001D8 6382                   MOV.L       @R8,R3
    000001DA              L1300:                            
    000001DA 0570                   .DATA.W     H'0570
    000001DC 05AC                   .DATA.W     H'05AC
    000001DE 0000                   .DATA.W     0
    000001E0 <00000000>             .DATA.L     _symtab
    000001E4 <00000000>             .DATA.L     _push
    000001E8 <00000000>             .DATA.L     _eval
    000001EC <00000000>             .DATA.L     _save
    000001F0 <00000000>             .DATA.L     _restore
    000001F4 <00000000>             .DATA.L     _multiply
    000001F8 <00000000>             .DATA.L     _pop
    000001FC <00000000>             .DATA.L     _p2
    00000200 <00000000>             .DATA.L     _p1
    00000204 <00000000>             .DATA.L     _qpow
    00000208 <00000000>             .DATA.L     _dpow
    0000020C <00000000>             .DATA.L     _power_tensor




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000210              L1177:                            
    00000210 9369                   MOV.W       L1301,R3   ; H'0570
    00000212 335C                   ADD         R5,R3
    00000214              L1178:                            
    00000214 9168                   MOV.W       L1301+2,R1 ; H'0360
    00000216 315C                   ADD         R5,R1
    00000218 3310                   CMP/EQ      R1,R3
    0000021A 8B1F                   BF          L1176
         power.c    59                    return;
         power.c    60            }
         power.c    61    
         power.c    62            if (p1 == symbol(E) && car(p2) == symbol(LOG)) {
         power.c    63                    push(cadr(p2));
    0000021C 64C2                   MOV.L       @R12,R4
    0000021E 8448                   MOV.B       @(8,R4),R0
    00000220 2008                   TST         R0,R0
    00000222 8B02                   BF          L1180
    00000224 64C2                   MOV.L       @R12,R4
    00000226 A004                   BRA         L1182
    00000228 5441                   MOV.L       @(4,R4),R4
    0000022A              L1180:                            
    0000022A 935C                   MOV.W       L1301,R3   ; H'0570
    0000022C D22F                   MOV.L       L1301+6,R2 ; _symtab
    0000022E 6422                   MOV.L       @R2,R4
    00000230 343C                   ADD         R3,R4
    00000232              L1182:                            
    00000232 8448                   MOV.B       @(8,R4),R0
    00000234 2008                   TST         R0,R0
    00000236 8B0C                   BF          L1179
    00000238 64C2                   MOV.L       @R12,R4
    0000023A 8448                   MOV.B       @(8,R4),R0
    0000023C 2008                   TST         R0,R0
    0000023E 8B02                   BF          L1181
    00000240 64C2                   MOV.L       @R12,R4
    00000242 A004                   BRA         L1183
    00000244 5441                   MOV.L       @(4,R4),R4
    00000246              L1181:                            
    00000246 934E                   MOV.W       L1301,R3   ; H'0570
    00000248 D228                   MOV.L       L1301+6,R2 ; _symtab
    0000024A 6422                   MOV.L       @R2,R4
    0000024C 343C                   ADD         R3,R4
    0000024E              L1183:                            
    0000024E A031                   BRA         L1293
    00000250 6442                   MOV.L       @R4,R4
    00000252              L1179:                            
    00000252 9348                   MOV.W       L1301,R3   ; H'0570
    00000254 D225                   MOV.L       L1301+6,R2 ; _symtab
    00000256 6422                   MOV.L       @R2,R4
         power.c    64                    return;
    00000258 A02C                   BRA         L1293
    0000025A 343C                   ADD         R3,R4
    0000025C              L1176:                            
         power.c    65            }
         power.c    66    
         power.c    67            if (p1 == symbol(E) && isdouble(p2)) {
    0000025C 356C                   ADD         R6,R5
    0000025E 3450                   CMP/EQ      R5,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000260 8B12                   BF          L1185
    00000262 8488                   MOV.B       @(8,R8),R0
    00000264 600C                   EXTU.B      R0,R0
    00000266 8802                   CMP/EQ      #2,R0
    00000268 8B0E                   BF          L1185
         power.c    68                    push_double(exp(p2->u.d));
    0000026A 7FF8                   ADD         #-8,R15
    0000026C D120                   MOV.L       L1301+10,R1; _exp
    0000026E E308                   MOV         #8,R3
    00000270 5281                   MOV.L       @(4,R8),R2
    00000272 2F26                   MOV.L       R2,@-R15
    00000274 6282                   MOV.L       @R8,R2
    00000276 2F26                   MOV.L       R2,@-R15
    00000278 33FC                   ADD         R15,R3
    0000027A 410B                   JSR         @R1
    0000027C 2F36                   MOV.L       R3,@-R15
    0000027E D31D                   MOV.L       L1301+14,R3; _push_double
    00000280 430B                   JSR         @R3
    00000282 7F0C                   ADD         #12,R15
         power.c    69                    return;
    00000284 A25E                   BRA         L1171
    00000286 7F08                   ADD         #8,R15
    00000288              L1185:                            
         power.c    70            }
         power.c    71    
         power.c    72            //      1 ^ a           ->      1
         power.c    73    
         power.c    74            //      a ^ 0           ->      1
         power.c    75    
         power.c    76            if (equal(p1, one) || iszero(p2)) {
    00000288 D81B                   MOV.L       L1301+18,R8; _one
    0000028A 6582                   MOV.L       @R8,R5
    0000028C D21B                   MOV.L       L1301+22,R2; _equal
    0000028E 420B                   JSR         @R2
    00000290 64E2                   MOV.L       @R14,R4
    00000292 2008                   TST         R0,R0
    00000294 8B05                   BF          L1187
    00000296 D21A                   MOV.L       L1301+26,R2; _p2
    00000298 D31A                   MOV.L       L1301+30,R3; _iszero
    0000029A 430B                   JSR         @R3
    0000029C 6422                   MOV.L       @R2,R4
    0000029E 2008                   TST         R0,R0
    000002A0 8901                   BT          L1186
    000002A2              L1187:                            
         power.c    77                    push(one);
         power.c    78                    return;
    000002A2 A007                   BRA         L1293
    000002A4 6482                   MOV.L       @R8,R4
    000002A6              L1186:                            
         power.c    79            }
         power.c    80    
         power.c    81            //      a ^ 1           ->      a
         power.c    82    
         power.c    83            if (equal(p2, one)) {
    000002A6 6582                   MOV.L       @R8,R5
    000002A8 D314                   MOV.L       L1301+22,R3; _equal
    000002AA 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002AC 64C2                   MOV.L       @R12,R4
    000002AE 2008                   TST         R0,R0
    000002B0 8904                   BT          L1188
         power.c    84                    push(p1);
    000002B2 64E2                   MOV.L       @R14,R4
         power.c    85                    return;
    000002B4              L1293:                            
    000002B4 4D0B                   JSR         @R13
    000002B6 0009                   NOP
    000002B8 A244                   BRA         L1171
    000002BA 0009                   NOP
    000002BC              L1188:                            
    000002BC 65E2                   MOV.L       @R14,R5
    000002BE 8458                   MOV.B       @(8,R5),R0
    000002C0 2008                   TST         R0,R0
    000002C2 8F02                   BF/S        L1190
    000002C4 66A2                   MOV.L       @R10,R6
    000002C6 A003                   BRA         L1191
    000002C8 6352                   MOV.L       @R5,R3
    000002CA              L1190:                            
    000002CA 920C                   MOV.W       L1301,R2   ; H'0570
    000002CC 63A2                   MOV.L       @R10,R3
    000002CE 332C                   ADD         R2,R3
    000002D0              L1191:                            
    000002D0 900B                   MOV.W       L1301+4,R0 ; H'0384
    000002D2 306C                   ADD         R6,R0
    000002D4 3300                   CMP/EQ      R0,R3
    000002D6 8B5F                   BF          L1189
         power.c    86            }
         power.c    87    
         power.c    88            //      (a * b) ^ c     ->      (a ^ c) * (b ^ c)
         power.c    89    
         power.c    90            if (car(p1) == symbol(MULTIPLY)) {
         power.c    91                    p1 = cdr(p1);
    000002D8 63E2                   MOV.L       @R14,R3
    000002DA 8438                   MOV.B       @(8,R3),R0
    000002DC 2008                   TST         R0,R0
    000002DE 8B13                   BF          L1192
    000002E0 62E2                   MOV.L       @R14,R2
    000002E2 A015                   BRA         L1193
    000002E4 5221                   MOV.L       @(4,R2),R2
    000002E6              L1301:                            
    000002E6 0570                   .DATA.W     H'0570
    000002E8 0360                   .DATA.W     H'0360
    000002EA 0384                   .DATA.W     H'0384
    000002EC <00000000>             .DATA.L     _symtab
    000002F0 <00000000>             .DATA.L     _exp
    000002F4 <00000000>             .DATA.L     _push_double
    000002F8 <00000000>             .DATA.L     _one
    000002FC <00000000>             .DATA.L     _equal
    00000300 <00000000>             .DATA.L     _p2
    00000304 <00000000>             .DATA.L     _iszero
    00000308              L1192:                            
    00000308 936C                   MOV.W       L1302,R3   ; H'0570
    0000030A D137                   MOV.L       L1302+4,R1 ; _symtab
    0000030C 6212                   MOV.L       @R1,R2
    0000030E 323C                   ADD         R3,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000310              L1193:                            
    00000310 2E22                   MOV.L       R2,@R14
         power.c    92                    push(car(p1));
    00000312 6423                   MOV         R2,R4
    00000314 8448                   MOV.B       @(8,R4),R0
    00000316 2008                   TST         R0,R0
    00000318 8B02                   BF          L1194
    0000031A 64E2                   MOV.L       @R14,R4
    0000031C A004                   BRA         L1195
    0000031E 6442                   MOV.L       @R4,R4
    00000320              L1194:                            
    00000320 9360                   MOV.W       L1302,R3   ; H'0570
    00000322 D231                   MOV.L       L1302+4,R2 ; _symtab
    00000324 6422                   MOV.L       @R2,R4
    00000326 343C                   ADD         R3,R4
    00000328              L1195:                            
    00000328 4D0B                   JSR         @R13
    0000032A 0009                   NOP
         power.c    93                    push(p2);
    0000032C 4D0B                   JSR         @R13
    0000032E 64C2                   MOV.L       @R12,R4
         power.c    94                    power();
    00000330 BEE6                   BSR         _power
    00000332 0009                   NOP
         power.c    95                    p1 = cdr(p1);
    00000334 63E2                   MOV.L       @R14,R3
    00000336 8438                   MOV.B       @(8,R3),R0
    00000338 2008                   TST         R0,R0
    0000033A 8B02                   BF          L1196
    0000033C 62E2                   MOV.L       @R14,R2
    0000033E A024                   BRA         L1294
    00000340 5221                   MOV.L       @(4,R2),R2
    00000342              L1196:                            
    00000342 934F                   MOV.W       L1302,R3   ; H'0570
    00000344 D128                   MOV.L       L1302+4,R1 ; _symtab
    00000346 6212                   MOV.L       @R1,R2
    00000348 323C                   ADD         R3,R2
         power.c    96                    while (iscons(p1)) {
    0000034A A01E                   BRA         L1294
    0000034C 0009                   NOP
    0000034E              L1199:                            
         power.c    97                            push(car(p1));
    0000034E 64E2                   MOV.L       @R14,R4
    00000350 8448                   MOV.B       @(8,R4),R0
    00000352 2008                   TST         R0,R0
    00000354 8B02                   BF          L1200
    00000356 64E2                   MOV.L       @R14,R4
    00000358 A004                   BRA         L1201
    0000035A 6442                   MOV.L       @R4,R4
    0000035C              L1200:                            
    0000035C 9342                   MOV.W       L1302,R3   ; H'0570
    0000035E D222                   MOV.L       L1302+4,R2 ; _symtab
    00000360 6422                   MOV.L       @R2,R4
    00000362 343C                   ADD         R3,R4
    00000364              L1201:                            
    00000364 4D0B                   JSR         @R13
    00000366 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         power.c    98                            push(p2);
    00000368 4D0B                   JSR         @R13
    0000036A 64C2                   MOV.L       @R12,R4
         power.c    99                            power();
    0000036C BEC8                   BSR         _power
    0000036E 0009                   NOP
         power.c   100                            multiply();
    00000370 4B0B                   JSR         @R11
    00000372 0009                   NOP
         power.c   101                            p1 = cdr(p1);
    00000374 63E2                   MOV.L       @R14,R3
    00000376 8438                   MOV.B       @(8,R3),R0
    00000378 2008                   TST         R0,R0
    0000037A 8B02                   BF          L1202
    0000037C 62E2                   MOV.L       @R14,R2
    0000037E A004                   BRA         L1294
    00000380 5221                   MOV.L       @(4,R2),R2
    00000382              L1202:                            
    00000382 932F                   MOV.W       L1302,R3   ; H'0570
    00000384 D118                   MOV.L       L1302+4,R1 ; _symtab
    00000386 6212                   MOV.L       @R1,R2
    00000388 323C                   ADD         R3,R2
    0000038A              L1294:                            
    0000038A 6323                   MOV         R2,R3
    0000038C 2E22                   MOV.L       R2,@R14
    0000038E 8438                   MOV.B       @(8,R3),R0
    00000390 2008                   TST         R0,R0
    00000392 89DC                   BT          L1199
         power.c   102                    }
         power.c   103                    return;
    00000394 A1D6                   BRA         L1171
    00000396 0009                   NOP
    00000398              L1189:                            
         power.c   104            }
         power.c   105    
         power.c   106            //      (a ^ b) ^ c     ->      a ^ (b * c)
         power.c   107    
         power.c   108            if (car(p1) == symbol(POWER)) {
    00000398 8458                   MOV.B       @(8,R5),R0
    0000039A 2008                   TST         R0,R0
    0000039C 8B01                   BF          L1205
    0000039E A002                   BRA         L1206
    000003A0 6252                   MOV.L       @R5,R2
    000003A2              L1205:                            
    000003A2 921F                   MOV.W       L1302,R2   ; H'0570
    000003A4 326C                   ADD         R6,R2
    000003A6              L1206:                            
    000003A6 931E                   MOV.W       L1302+2,R3 ; H'03F0
    000003A8 336C                   ADD         R6,R3
    000003AA 3230                   CMP/EQ      R3,R2
    000003AC 8B73                   BF          L1204
         power.c   109                    push(cadr(p1));
    000003AE 64E2                   MOV.L       @R14,R4
    000003B0 8448                   MOV.B       @(8,R4),R0
    000003B2 2008                   TST         R0,R0
    000003B4 8B02                   BF          L1208
    000003B6 64E2                   MOV.L       @R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003B8 A004                   BRA         L1210
    000003BA 5441                   MOV.L       @(4,R4),R4
    000003BC              L1208:                            
    000003BC 9312                   MOV.W       L1302,R3   ; H'0570
    000003BE D20A                   MOV.L       L1302+4,R2 ; _symtab
    000003C0 6422                   MOV.L       @R2,R4
    000003C2 343C                   ADD         R3,R4
    000003C4              L1210:                            
    000003C4 8448                   MOV.B       @(8,R4),R0
    000003C6 2008                   TST         R0,R0
    000003C8 8B10                   BF          L1207
    000003CA 64E2                   MOV.L       @R14,R4
    000003CC 8448                   MOV.B       @(8,R4),R0
    000003CE 2008                   TST         R0,R0
    000003D0 8B02                   BF          L1209
    000003D2 64E2                   MOV.L       @R14,R4
    000003D4 A004                   BRA         L1211
    000003D6 5441                   MOV.L       @(4,R4),R4
    000003D8              L1209:                            
    000003D8 9304                   MOV.W       L1302,R3   ; H'0570
    000003DA D203                   MOV.L       L1302+4,R2 ; _symtab
    000003DC 6422                   MOV.L       @R2,R4
    000003DE 343C                   ADD         R3,R4
    000003E0              L1211:                            
    000003E0 A008                   BRA         L1212
    000003E2 6442                   MOV.L       @R4,R4
    000003E4              L1302:                            
    000003E4 0570                   .DATA.W     H'0570
    000003E6 03F0                   .DATA.W     H'03F0
    000003E8 <00000000>             .DATA.L     _symtab
    000003EC              L1207:                            
    000003EC 935E                   MOV.W       L1303,R3   ; H'0570
    000003EE D230                   MOV.L       L1303+4,R2 ; _symtab
    000003F0 6422                   MOV.L       @R2,R4
    000003F2 343C                   ADD         R3,R4
    000003F4              L1212:                            
    000003F4 4D0B                   JSR         @R13
    000003F6 0009                   NOP
         power.c   110                    push(caddr(p1));
    000003F8 64E2                   MOV.L       @R14,R4
    000003FA 8448                   MOV.B       @(8,R4),R0
    000003FC 2008                   TST         R0,R0
    000003FE 8B02                   BF          L1215
    00000400 64E2                   MOV.L       @R14,R4
    00000402 A004                   BRA         L1220
    00000404 5441                   MOV.L       @(4,R4),R4
    00000406              L1215:                            
    00000406 9351                   MOV.W       L1303,R3   ; H'0570
    00000408 D229                   MOV.L       L1303+4,R2 ; _symtab
    0000040A 6422                   MOV.L       @R2,R4
    0000040C 343C                   ADD         R3,R4
    0000040E              L1220:                            
    0000040E 8448                   MOV.B       @(8,R4),R0
    00000410 2008                   TST         R0,R0
    00000412 8B0C                   BF          L1214
    00000414 64E2                   MOV.L       @R14,R4
    00000416 8448                   MOV.B       @(8,R4),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000418 2008                   TST         R0,R0
    0000041A 8B02                   BF          L1216
    0000041C 64E2                   MOV.L       @R14,R4
    0000041E A004                   BRA         L1221
    00000420 5441                   MOV.L       @(4,R4),R4
    00000422              L1216:                            
    00000422 9343                   MOV.W       L1303,R3   ; H'0570
    00000424 D222                   MOV.L       L1303+4,R2 ; _symtab
    00000426 6422                   MOV.L       @R2,R4
    00000428 343C                   ADD         R3,R4
    0000042A              L1221:                            
    0000042A A004                   BRA         L1222
    0000042C 5441                   MOV.L       @(4,R4),R4
    0000042E              L1214:                            
    0000042E 933D                   MOV.W       L1303,R3   ; H'0570
    00000430 D21F                   MOV.L       L1303+4,R2 ; _symtab
    00000432 6422                   MOV.L       @R2,R4
    00000434 343C                   ADD         R3,R4
    00000436              L1222:                            
    00000436 8448                   MOV.B       @(8,R4),R0
    00000438 2008                   TST         R0,R0
    0000043A 8B20                   BF          L1213
    0000043C 64E2                   MOV.L       @R14,R4
    0000043E 8448                   MOV.B       @(8,R4),R0
    00000440 2008                   TST         R0,R0
    00000442 8B02                   BF          L1218
    00000444 64E2                   MOV.L       @R14,R4
    00000446 A004                   BRA         L1223
    00000448 5441                   MOV.L       @(4,R4),R4
    0000044A              L1218:                            
    0000044A 932F                   MOV.W       L1303,R3   ; H'0570
    0000044C D218                   MOV.L       L1303+4,R2 ; _symtab
    0000044E 6422                   MOV.L       @R2,R4
    00000450 343C                   ADD         R3,R4
    00000452              L1223:                            
    00000452 8448                   MOV.B       @(8,R4),R0
    00000454 2008                   TST         R0,R0
    00000456 8B0C                   BF          L1217
    00000458 64E2                   MOV.L       @R14,R4
    0000045A 8448                   MOV.B       @(8,R4),R0
    0000045C 2008                   TST         R0,R0
    0000045E 8B02                   BF          L1219
    00000460 64E2                   MOV.L       @R14,R4
    00000462 A004                   BRA         L1224
    00000464 5441                   MOV.L       @(4,R4),R4
    00000466              L1219:                            
    00000466 9321                   MOV.W       L1303,R3   ; H'0570
    00000468 D211                   MOV.L       L1303+4,R2 ; _symtab
    0000046A 6422                   MOV.L       @R2,R4
    0000046C 343C                   ADD         R3,R4
    0000046E              L1224:                            
    0000046E A004                   BRA         L1225
    00000470 5441                   MOV.L       @(4,R4),R4
    00000472              L1217:                            
    00000472 931B                   MOV.W       L1303,R3   ; H'0570
    00000474 D20E                   MOV.L       L1303+4,R2 ; _symtab
    00000476 6422                   MOV.L       @R2,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000478 343C                   ADD         R3,R4
    0000047A              L1225:                            
    0000047A A004                   BRA         L1226
    0000047C 6442                   MOV.L       @R4,R4
    0000047E              L1213:                            
    0000047E 9315                   MOV.W       L1303,R3   ; H'0570
    00000480 D20B                   MOV.L       L1303+4,R2 ; _symtab
    00000482 6422                   MOV.L       @R2,R4
    00000484 343C                   ADD         R3,R4
    00000486              L1226:                            
    00000486 4D0B                   JSR         @R13
    00000488 0009                   NOP
         power.c   111                    push(p2);
    0000048A 4D0B                   JSR         @R13
    0000048C 64C2                   MOV.L       @R12,R4
    0000048E              L1295:                            
         power.c   112                    multiply();
         power.c   113                    power();
         power.c   114                    return;
         power.c   115            }
         power.c   116    
         power.c   117            //      (a + b) ^ n     ->      (a + b) * (a + b) ...
         power.c   118    
         power.c   119            if (expanding && isadd(p1) && isnum(p2)) {
         power.c   120                    push(p2);
         power.c   121                    n = pop_integer();
         power.c   122                    if (n > 1) {
         power.c   123                            power_sum(n);
         power.c   124                            return;
         power.c   125                    }
         power.c   126            }
         power.c   127    
         power.c   128            //      sin(x) ^ 2n -> (1 - cos(x) ^ 2) ^ n
         power.c   129    
         power.c   130            if (trigmode == 1 && car(p1) == symbol(SIN) && iseveninteger(p2)) {
         power.c   131                    push_integer(1);
         power.c   132                    push(cadr(p1));
         power.c   133                    cosine();
         power.c   134                    push_integer(2);
         power.c   135                    power();
         power.c   136                    subtract();
         power.c   137                    push(p2);
         power.c   138                    push_rational(1, 2);
         power.c   139                    multiply();
    0000048E 4B0B                   JSR         @R11
    00000490 0009                   NOP
    00000492 A10E                   BRA         L1107
    00000494 0009                   NOP
    00000496              L1204:                            
    00000496 D307                   MOV.L       L1303+8,R3 ; _expanding
    00000498 6232                   MOV.L       @R3,R2
    0000049A 2228                   TST         R2,R2
    0000049C 8D2B                   BT/S        L1227
    0000049E 64C2                   MOV.L       @R12,R4
    000004A0 8458                   MOV.B       @(8,R5),R0
    000004A2 2008                   TST         R0,R0
    000004A4 8F08                   BF/S        L1228




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004A6 6163                   MOV         R6,R1
    000004A8 A008                   BRA         L1230
    000004AA 6252                   MOV.L       @R5,R2
    000004AC              L1303:                            
    000004AC 0570                   .DATA.W     H'0570
    000004AE 0000                   .DATA.W     0
    000004B0 <00000000>             .DATA.L     _symtab
    000004B4 <00000000>             .DATA.L     _expanding
    000004B8              L1228:                            
    000004B8 9262                   MOV.W       L1304,R2   ; H'0570
    000004BA 326C                   ADD         R6,R2
    000004BC              L1230:                            
    000004BC 710C                   ADD         #12,R1
    000004BE 3210                   CMP/EQ      R1,R2
    000004C0 8B19                   BF          L1227
    000004C2 8448                   MOV.B       @(8,R4),R0
    000004C4 600C                   EXTU.B      R0,R0
    000004C6 8801                   CMP/EQ      #1,R0
    000004C8 8903                   BT          L1229
    000004CA 8448                   MOV.B       @(8,R4),R0
    000004CC 600C                   EXTU.B      R0,R0
    000004CE 8802                   CMP/EQ      #2,R0
    000004D0 8B11                   BF          L1227
    000004D2              L1229:                            
    000004D2 4D0B                   JSR         @R13
    000004D4 0009                   NOP
    000004D6 D22B                   MOV.L       L1304+4,R2 ; _pop_integer
    000004D8 420B                   JSR         @R2
    000004DA 0009                   NOP
    000004DC 6403                   MOV         R0,R4
    000004DE E301                   MOV         #1,R3
    000004E0 3437                   CMP/GT      R3,R4
    000004E2 8B08                   BF          L1227
    000004E4 4F26                   LDS.L       @R15+,PR
    000004E6 68F6                   MOV.L       @R15+,R8
    000004E8 69F6                   MOV.L       @R15+,R9
    000004EA 6AF6                   MOV.L       @R15+,R10
    000004EC 6BF6                   MOV.L       @R15+,R11
    000004EE 6CF6                   MOV.L       @R15+,R12
    000004F0 6DF6                   MOV.L       @R15+,R13
    000004F2 A130                   BRA         _power_sum
    000004F4 6EF6                   MOV.L       @R15+,R14
    000004F6              L1227:                            
    000004F6 D824                   MOV.L       L1304+8,R8 ; _push_integer
    000004F8 D324                   MOV.L       L1304+12,R3; _trigmode
    000004FA 6032                   MOV.L       @R3,R0
    000004FC 8801                   CMP/EQ      #1,R0
    000004FE 8B51                   BF          L1232
    00000500 D123                   MOV.L       L1304+16,R1; _p1
    00000502 6212                   MOV.L       @R1,R2
    00000504 8428                   MOV.B       @(8,R2),R0
    00000506 2008                   TST         R0,R0
    00000508 8B02                   BF          L1233
    0000050A 6212                   MOV.L       @R1,R2
    0000050C A004                   BRA         L1234
    0000050E 6122                   MOV.L       @R2,R1
    00000510              L1233:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000510 9236                   MOV.W       L1304,R2   ; H'0570
    00000512 D020                   MOV.L       L1304+20,R0; _symtab
    00000514 6102                   MOV.L       @R0,R1
    00000516 312C                   ADD         R2,R1
    00000518              L1234:                            
    00000518 9333                   MOV.W       L1304+2,R3 ; H'0498
    0000051A D01E                   MOV.L       L1304+20,R0; _symtab
    0000051C 6202                   MOV.L       @R0,R2
    0000051E 323C                   ADD         R3,R2
    00000520 3120                   CMP/EQ      R2,R1
    00000522 8B3F                   BF          L1232
    00000524 D21C                   MOV.L       L1304+24,R2; _p2
    00000526 D31D                   MOV.L       L1304+28,R3; _iseveninteger
    00000528 430B                   JSR         @R3
    0000052A 6422                   MOV.L       @R2,R4
    0000052C 2008                   TST         R0,R0
    0000052E 8939                   BT          L1232
    00000530 480B                   JSR         @R8
    00000532 E401                   MOV         #1,R4
    00000534 64E2                   MOV.L       @R14,R4
    00000536 8448                   MOV.B       @(8,R4),R0
    00000538 2008                   TST         R0,R0
    0000053A 8B02                   BF          L1236
    0000053C 64E2                   MOV.L       @R14,R4
    0000053E A004                   BRA         L1238
    00000540 5441                   MOV.L       @(4,R4),R4
    00000542              L1236:                            
    00000542 931D                   MOV.W       L1304,R3   ; H'0570
    00000544 D213                   MOV.L       L1304+20,R2; _symtab
    00000546 6422                   MOV.L       @R2,R4
    00000548 343C                   ADD         R3,R4
    0000054A              L1238:                            
    0000054A 8448                   MOV.B       @(8,R4),R0
    0000054C 2008                   TST         R0,R0
    0000054E 8B0C                   BF          L1235
    00000550 64E2                   MOV.L       @R14,R4
    00000552 8448                   MOV.B       @(8,R4),R0
    00000554 2008                   TST         R0,R0
    00000556 8B02                   BF          L1237
    00000558 64E2                   MOV.L       @R14,R4
    0000055A A004                   BRA         L1239
    0000055C 5441                   MOV.L       @(4,R4),R4
    0000055E              L1237:                            
    0000055E 930F                   MOV.W       L1304,R3   ; H'0570
    00000560 D20C                   MOV.L       L1304+20,R2; _symtab
    00000562 6422                   MOV.L       @R2,R4
    00000564 343C                   ADD         R3,R4
    00000566              L1239:                            
    00000566 A004                   BRA         L1240
    00000568 6442                   MOV.L       @R4,R4
    0000056A              L1235:                            
    0000056A 9309                   MOV.W       L1304,R3   ; H'0570
    0000056C D209                   MOV.L       L1304+20,R2; _symtab
    0000056E 6422                   MOV.L       @R2,R4
    00000570 343C                   ADD         R3,R4
    00000572              L1240:                            
    00000572 4D0B                   JSR         @R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000574 0009                   NOP
    00000576 D30A                   MOV.L       L1304+32,R3; _cosine
    00000578 430B                   JSR         @R3
    0000057A 0009                   NOP
    0000057C A054                   BRA         L1110
    0000057E 0009                   NOP
    00000580              L1304:                            
    00000580 0570                   .DATA.W     H'0570
    00000582 0498                   .DATA.W     H'0498
    00000584 <00000000>             .DATA.L     _pop_integer
    00000588 <00000000>             .DATA.L     _push_integer
    0000058C <00000000>             .DATA.L     _trigmode
    00000590 <00000000>             .DATA.L     _p1
    00000594 <00000000>             .DATA.L     _symtab
    00000598 <00000000>             .DATA.L     _p2
    0000059C <00000000>             .DATA.L     _iseveninteger
    000005A0 <00000000>             .DATA.L     _cosine
    000005A4              L1232:                            
         power.c   140                    power();
         power.c   141                    return;
         power.c   142            }
         power.c   143    
         power.c   144            //      cos(x) ^ 2n -> (1 - sin(x) ^ 2) ^ n
         power.c   145    
         power.c   146            if (trigmode == 2 && car(p1) == symbol(COS) && iseveninteger(p2)) {
    000005A4 D229                   MOV.L       L1305+6,R2 ; _trigmode
    000005A6 6022                   MOV.L       @R2,R0
    000005A8 8802                   CMP/EQ      #2,R0
    000005AA 8B5F                   BF          L1241
    000005AC D128                   MOV.L       L1305+10,R1; _p1
    000005AE 6312                   MOV.L       @R1,R3
    000005B0 8438                   MOV.B       @(8,R3),R0
    000005B2 2008                   TST         R0,R0
    000005B4 8B02                   BF          L1242
    000005B6 6312                   MOV.L       @R1,R3
    000005B8 A004                   BRA         L1243
    000005BA 6132                   MOV.L       @R3,R1
    000005BC              L1242:                            
    000005BC 9343                   MOV.W       L1305,R3   ; H'0570
    000005BE D025                   MOV.L       L1305+14,R0; _symtab
    000005C0 6102                   MOV.L       @R0,R1
    000005C2 313C                   ADD         R3,R1
    000005C4              L1243:                            
    000005C4 9340                   MOV.W       L1305+2,R3 ; H'0120
    000005C6 D023                   MOV.L       L1305+14,R0; _symtab
    000005C8 6202                   MOV.L       @R0,R2
    000005CA 323C                   ADD         R3,R2
    000005CC 3120                   CMP/EQ      R2,R1
    000005CE 8B4D                   BF          L1241
    000005D0 D221                   MOV.L       L1305+18,R2; _p2
    000005D2 D322                   MOV.L       L1305+22,R3; _iseveninteger
    000005D4 430B                   JSR         @R3
    000005D6 6422                   MOV.L       @R2,R4
    000005D8 2008                   TST         R0,R0
    000005DA 8947                   BT          L1241
         power.c   147                    push_integer(1);
    000005DC 480B                   JSR         @R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005DE E401                   MOV         #1,R4
         power.c   148                    push(cadr(p1));
    000005E0 64E2                   MOV.L       @R14,R4
    000005E2 8448                   MOV.B       @(8,R4),R0
    000005E4 2008                   TST         R0,R0
    000005E6 8B02                   BF          L1245
    000005E8 64E2                   MOV.L       @R14,R4
    000005EA A004                   BRA         L1247
    000005EC 5441                   MOV.L       @(4,R4),R4
    000005EE              L1245:                            
    000005EE 932A                   MOV.W       L1305,R3   ; H'0570
    000005F0 D218                   MOV.L       L1305+14,R2; _symtab
    000005F2 6422                   MOV.L       @R2,R4
    000005F4 343C                   ADD         R3,R4
    000005F6              L1247:                            
    000005F6 8448                   MOV.B       @(8,R4),R0
    000005F8 2008                   TST         R0,R0
    000005FA 8B0C                   BF          L1244
    000005FC 64E2                   MOV.L       @R14,R4
    000005FE 8448                   MOV.B       @(8,R4),R0
    00000600 2008                   TST         R0,R0
    00000602 8B02                   BF          L1246
    00000604 64E2                   MOV.L       @R14,R4
    00000606 A004                   BRA         L1248
    00000608 5441                   MOV.L       @(4,R4),R4
    0000060A              L1246:                            
    0000060A 931C                   MOV.W       L1305,R3   ; H'0570
    0000060C D211                   MOV.L       L1305+14,R2; _symtab
    0000060E 6422                   MOV.L       @R2,R4
    00000610 343C                   ADD         R3,R4
    00000612              L1248:                            
    00000612 A004                   BRA         L1249
    00000614 6442                   MOV.L       @R4,R4
    00000616              L1244:                            
    00000616 9316                   MOV.W       L1305,R3   ; H'0570
    00000618 D20E                   MOV.L       L1305+14,R2; _symtab
    0000061A 6422                   MOV.L       @R2,R4
    0000061C 343C                   ADD         R3,R4
    0000061E              L1249:                            
    0000061E 4D0B                   JSR         @R13
    00000620 0009                   NOP
         power.c   149                    sine();
    00000622 D30F                   MOV.L       L1305+26,R3; _sine
    00000624 430B                   JSR         @R3
    00000626 0009                   NOP
    00000628              L1110:
         power.c   150                    push_integer(2);
    00000628 480B                   JSR         @R8
    0000062A E402                   MOV         #2,R4
         power.c   151                    power();
    0000062C BD68                   BSR         _power
    0000062E 0009                   NOP
         power.c   152                    subtract();
    00000630 D30C                   MOV.L       L1305+30,R3; _subtract
    00000632 430B                   JSR         @R3
    00000634 0009                   NOP
         power.c   153                    push(p2);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000636 4D0B                   JSR         @R13
    00000638 64C2                   MOV.L       @R12,R4
         power.c   154                    push_rational(1, 2);
    0000063A E502                   MOV         #2,R5
    0000063C D20A                   MOV.L       L1305+34,R2; _push_rational
    0000063E 420B                   JSR         @R2
    00000640 E401                   MOV         #1,R4
    00000642 AF24                   BRA         L1295
    00000644 0009                   NOP
    00000646              L1305:                            
    00000646 0570                   .DATA.W     H'0570
    00000648 0120                   .DATA.W     H'0120
    0000064A 0000                   .DATA.W     0
    0000064C <00000000>             .DATA.L     _trigmode
    00000650 <00000000>             .DATA.L     _p1
    00000654 <00000000>             .DATA.L     _symtab
    00000658 <00000000>             .DATA.L     _p2
    0000065C <00000000>             .DATA.L     _iseveninteger
    00000660 <00000000>             .DATA.L     _sine
    00000664 <00000000>             .DATA.L     _subtract
    00000668 <00000000>             .DATA.L     _push_rational
    0000066C              L1241:                            
         power.c   155                    multiply();
         power.c   156                    power();
         power.c   157                    return;
         power.c   158            }
         power.c   159    
         power.c   160            // complex number? (just number, not expression)
         power.c   161    
         power.c   162            if (iscomplexnumber(p1)) {
    0000066C D24A                   MOV.L       L1306+4,R2 ; _iscomplexnumber
    0000066E 420B                   JSR         @R2
    00000670 64E2                   MOV.L       @R14,R4
    00000672 2008                   TST         R0,R0
    00000674 8950                   BT          L1250
         power.c   163    
         power.c   164                    // integer power?
         power.c   165    
         power.c   166                    // n will be negative here, positive n already handled
         power.c   167    
         power.c   168                    if (isinteger(p2)) {
    00000676 D249                   MOV.L       L1306+8,R2 ; _isinteger
    00000678 420B                   JSR         @R2
    0000067A 64C2                   MOV.L       @R12,R4
    0000067C 2008                   TST         R0,R0
    0000067E 8921                   BT          L1251
         power.c   169    
         power.c   170                            //               /        \  n
         power.c   171                            //         -n   |  a - ib  |
         power.c   172                            // (a + ib)   = | -------- |
         power.c   173                            //              |   2   2  |
         power.c   174                            //               \ a + b  /
         power.c   175    
         power.c   176                            push(p1);
    00000680 4D0B                   JSR         @R13
    00000682 64E2                   MOV.L       @R14,R4
         power.c   177                            conjugate();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000684 D246                   MOV.L       L1306+12,R2; _conjugate
    00000686 420B                   JSR         @R2
    00000688 0009                   NOP
         power.c   178                            p3 = pop();
    0000068A DA46                   MOV.L       L1306+16,R10; _p3
    0000068C 490B                   JSR         @R9
    0000068E 0009                   NOP
    00000690 2A02                   MOV.L       R0,@R10
         power.c   179                            push(p3);
    00000692 4D0B                   JSR         @R13
    00000694 6403                   MOV         R0,R4
         power.c   180                            push(p3);
    00000696 4D0B                   JSR         @R13
    00000698 64A2                   MOV.L       @R10,R4
         power.c   181                            push(p1);
    0000069A 4D0B                   JSR         @R13
    0000069C 64E2                   MOV.L       @R14,R4
         power.c   182                            multiply();
    0000069E 4B0B                   JSR         @R11
    000006A0 0009                   NOP
         power.c   183                            divide();
    000006A2 D341                   MOV.L       L1306+20,R3; _divide
    000006A4 430B                   JSR         @R3
    000006A6 0009                   NOP
         power.c   184                            push(p2);
    000006A8 4D0B                   JSR         @R13
    000006AA 64C2                   MOV.L       @R12,R4
         power.c   185                            negate();
    000006AC D23F                   MOV.L       L1306+24,R2; _negate
    000006AE 420B                   JSR         @R2
    000006B0 0009                   NOP
    000006B2              L1107:
         power.c   186                            power();
    000006B2 4F26                   LDS.L       @R15+,PR
    000006B4 68F6                   MOV.L       @R15+,R8
    000006B6 69F6                   MOV.L       @R15+,R9
    000006B8 6AF6                   MOV.L       @R15+,R10
    000006BA 6BF6                   MOV.L       @R15+,R11
    000006BC 6CF6                   MOV.L       @R15+,R12
    000006BE 6DF6                   MOV.L       @R15+,R13
    000006C0 AD1E                   BRA         _power
    000006C2 6EF6                   MOV.L       @R15+,R14
    000006C4              L1251:                            
         power.c   187                            return;
         power.c   188                    }
         power.c   189    
         power.c   190                    // noninteger or floating power?
         power.c   191    
         power.c   192                    if (isnum(p2)) {
    000006C4 64C2                   MOV.L       @R12,R4
    000006C6 8448                   MOV.B       @(8,R4),R0
    000006C8 600C                   EXTU.B      R0,R0
    000006CA 8801                   CMP/EQ      #1,R0
    000006CC 8D03                   BT/S        L1253
    000006CE 6403                   MOV         R0,R4
    000006D0 6043                   MOV         R4,R0
    000006D2 8802                   CMP/EQ      #2,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006D4 8B20                   BF          L1250
    000006D6              L1253:                            
         power.c   193    
         power.c   194    #if 1                   // use polar form
         power.c   195                            push(p1);
    000006D6 4D0B                   JSR         @R13
    000006D8 64E2                   MOV.L       @R14,R4
         power.c   196                            mag();
    000006DA D335                   MOV.L       L1306+28,R3; _mag
    000006DC 430B                   JSR         @R3
    000006DE 0009                   NOP
         power.c   197                            push(p2);
    000006E0 4D0B                   JSR         @R13
    000006E2 64C2                   MOV.L       @R12,R4
         power.c   198                            power();
    000006E4 BD0C                   BSR         _power
    000006E6 0009                   NOP
         power.c   199                            push_integer(-1);
    000006E8 480B                   JSR         @R8
    000006EA E4FF                   MOV         #-1,R4
         power.c   200                            push(p1);
    000006EC 4D0B                   JSR         @R13
    000006EE 64E2                   MOV.L       @R14,R4
         power.c   201                            arg();
    000006F0 D330                   MOV.L       L1306+32,R3; _arg
    000006F2 430B                   JSR         @R3
    000006F4 0009                   NOP
         power.c   202                            push(p2);
    000006F6 4D0B                   JSR         @R13
    000006F8 64C2                   MOV.L       @R12,R4
         power.c   203                            multiply();
    000006FA 4B0B                   JSR         @R11
    000006FC 0009                   NOP
         power.c   204                            push(symbol(PI));
    000006FE 9349                   MOV.W       L1306,R3   ; H'05F4
    00000700 64A2                   MOV.L       @R10,R4
    00000702 4D0B                   JSR         @R13
    00000704 343C                   ADD         R3,R4
         power.c   205                            divide();
    00000706 D228                   MOV.L       L1306+20,R2; _divide
    00000708 420B                   JSR         @R2
    0000070A 0009                   NOP
         power.c   206                            power();
    0000070C BCF8                   BSR         _power
    0000070E 0009                   NOP
         power.c   207                            multiply();
    00000710 4B0B                   JSR         @R11
    00000712 0009                   NOP
         power.c   208    
         power.c   209    #else                   // use exponential form
         power.c   210                            push(p1);
         power.c   211                            mag();
         power.c   212                            push(p2);
         power.c   213                            power();
         power.c   214                            push(symbol(E));
         power.c   215                            push(p1);
         power.c   216                            arg();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         power.c   217                            push(p2);
         power.c   218                            multiply();
         power.c   219                            push(imaginaryunit);
         power.c   220                            multiply();
         power.c   221                            power();
         power.c   222                            multiply();
         power.c   223    #endif
         power.c   224                            return;
    00000714 A016                   BRA         L1171
    00000716 0009                   NOP
    00000718              L1250:                            
         power.c   225                    }
         power.c   226            }
         power.c   227    
         power.c   228            if (simplify_polar())
    00000718 B150                   BSR         _simplify_polar
    0000071A 0009                   NOP
    0000071C 2008                   TST         R0,R0
    0000071E 8B11                   BF          L1171
         power.c   229                    return;
         power.c   230    
         power.c   231            push_symbol(POWER);
    00000720 D225                   MOV.L       L1306+36,R2; _push_symbol
    00000722 420B                   JSR         @R2
    00000724 E454                   MOV         #84,R4
         power.c   232            push(p1);
    00000726 4D0B                   JSR         @R13
    00000728 64E2                   MOV.L       @R14,R4
         power.c   233            push(p2);
    0000072A 4D0B                   JSR         @R13
    0000072C 64C2                   MOV.L       @R12,R4
         power.c   234            list(3);
    0000072E E403                   MOV         #3,R4
    00000730 4F26                   LDS.L       @R15+,PR
    00000732 68F6                   MOV.L       @R15+,R8
    00000734 D321                   MOV.L       L1306+40,R3; _list
    00000736 69F6                   MOV.L       @R15+,R9
    00000738 6AF6                   MOV.L       @R15+,R10
    0000073A 6BF6                   MOV.L       @R15+,R11
    0000073C 6CF6                   MOV.L       @R15+,R12
    0000073E 6DF6                   MOV.L       @R15+,R13
    00000740 432B                   JMP         @R3
    00000742 6EF6                   MOV.L       @R15+,R14
    00000744              L1171:                            
         power.c   235    }
    00000744 4F26                   LDS.L       @R15+,PR
    00000746 68F6                   MOV.L       @R15+,R8
    00000748 69F6                   MOV.L       @R15+,R9
    0000074A 6AF6                   MOV.L       @R15+,R10
    0000074C 6BF6                   MOV.L       @R15+,R11
    0000074E 6CF6                   MOV.L       @R15+,R12
    00000750 6DF6                   MOV.L       @R15+,R13
    00000752 000B                   RTS
    00000754 6EF6                   MOV.L       @R15+,R14
         power.c   236    
         power.c   237    //-----------------------------------------------------------------------------
         power.c   238    //




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         power.c   239    //      Compute the power of a sum
         power.c   240    //
         power.c   241    //      Input:          p1      sum
         power.c   242    //
         power.c   243    //                      n       exponent
         power.c   244    //
         power.c   245    //      Output:         Result on stack
         power.c   246    //
         power.c   247    //      Note:
         power.c   248    //
         power.c   249    //      Uses the multinomial series (see Math World)
         power.c   250    //
         power.c   251    //                          n              n!          n1   n2       nk
         power.c   252    //      (a1 + a2 + ... + ak)  = sum (--------------- a1   a2   ... ak  )
         power.c   253    //                                   n1! n2! ... nk!
         power.c   254    //
         power.c   255    //      The sum is over all n1 ... nk such that n1 + n2 + ... + nk = n.
         power.c   256    //
         power.c   257    //-----------------------------------------------------------------------------
         power.c   258    
         power.c   259    // first index is the term number 0..k-1, second index is the exponent 0..n
         power.c   260    
         power.c   261    #define A(i, j) frame[(i) * (n + 1) + (j)]
         power.c   262    
         power.c   263    void
         power.c   264    power_sum(int n)
    00000756              _power_sum:                      ; function: power_sum
                                                           ; frame size=48
    00000756 2FE6                   MOV.L       R14,@-R15
    00000758 2FD6                   MOV.L       R13,@-R15
    0000075A 2FC6                   MOV.L       R12,@-R15
    0000075C 2FB6                   MOV.L       R11,@-R15
    0000075E 6C43                   MOV         R4,R12
         power.c   265    {
         power.c   266            int *a, i, j, k;
         power.c   267    
         power.c   268            // number of terms in the sum
         power.c   269    
         power.c   270            k = length(p1) - 1;
    00000760 DE17                   MOV.L       L1306+44,R14; _p1
    00000762 2FA6                   MOV.L       R10,@-R15
    00000764 2F96                   MOV.L       R9,@-R15
    00000766 2F86                   MOV.L       R8,@-R15
    00000768 4F22                   STS.L       PR,@-R15
    0000076A 4F12                   STS.L       MACL,@-R15
    0000076C D315                   MOV.L       L1306+48,R3; _length
    0000076E 7FF8                   ADD         #-8,R15
    00000770 430B                   JSR         @R3
    00000772 64E2                   MOV.L       @R14,R4
         power.c   271    
         power.c   272            // local frame
         power.c   273    
         power.c   274            push_frame(k * (n + 1));
    00000774 D314                   MOV.L       L1306+52,R3; _push_frame
    00000776 6A03                   MOV         R0,R10
    00000778 7AFF                   ADD         #-1,R10
    0000077A 64C3                   MOV         R12,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000077C 7401                   ADD         #1,R4
    0000077E 2F42                   MOV.L       R4,@R15
    00000780 04A7                   MUL.L       R10,R4
    00000782 430B                   JSR         @R3
    00000784 041A                   STS         MACL,R4
         power.c   275    
         power.c   276            // array of powers
         power.c   277    
         power.c   278            p1 = cdr(p1);
    00000786 63E2                   MOV.L       @R14,R3
    00000788 8438                   MOV.B       @(8,R3),R0
    0000078A 2008                   TST         R0,R0
    0000078C 8B1E                   BF          L1255
    0000078E 62E2                   MOV.L       @R14,R2
    00000790 A020                   BRA         L1256
    00000792 5221                   MOV.L       @(4,R2),R2
    00000794              L1306:                            
    00000794 05F4                   .DATA.W     H'05F4
    00000796 0000                   .DATA.W     0
    00000798 <00000000>             .DATA.L     _iscomplexnumber
    0000079C <00000000>             .DATA.L     _isinteger
    000007A0 <00000000>             .DATA.L     _conjugate
    000007A4 <00000000>             .DATA.L     _p3
    000007A8 <00000000>             .DATA.L     _divide
    000007AC <00000000>             .DATA.L     _negate
    000007B0 <00000000>             .DATA.L     _mag
    000007B4 <00000000>             .DATA.L     _arg
    000007B8 <00000000>             .DATA.L     _push_symbol
    000007BC <00000000>             .DATA.L     _list
    000007C0 <00000000>             .DATA.L     _p1
    000007C4 <00000000>             .DATA.L     _length
    000007C8 <00000000>             .DATA.L     _push_frame
    000007CC              L1255:                            
    000007CC 936D                   MOV.W       L1307,R3   ; H'0570
    000007CE D137                   MOV.L       L1307+2,R1 ; _symtab
    000007D0 6212                   MOV.L       @R1,R2
    000007D2 323C                   ADD         R3,R2
    000007D4              L1256:                            
    000007D4 2E22                   MOV.L       R2,@R14
         power.c   279            for (i = 0; i < k; i++) {
    000007D6 E800                   MOV         #0,R8
    000007D8 D935                   MOV.L       L1307+6,R9 ; _pop
    000007DA A034                   BRA         L1257
    000007DC 6B83                   MOV         R8,R11
    000007DE              L1258:                            
         power.c   280                    for (j = 0; j <= n; j++) {
    000007DE 6D83                   MOV         R8,R13
    000007E0 62F2                   MOV.L       @R15,R2
    000007E2 4C11                   CMP/PZ      R12
    000007E4 02B7                   MUL.L       R11,R2
    000007E6 021A                   STS         MACL,R2
    000007E8 8F20                   BF/S        L1259
    000007EA 1F21                   MOV.L       R2,@(4,R15)
    000007EC              L1260:                            
         power.c   281                            push(car(p1));
    000007EC 64E2                   MOV.L       @R14,R4
    000007EE 8448                   MOV.B       @(8,R4),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007F0 2008                   TST         R0,R0
    000007F2 8B02                   BF          L1261
    000007F4 64E2                   MOV.L       @R14,R4
    000007F6 A004                   BRA         L1262
    000007F8 6442                   MOV.L       @R4,R4
    000007FA              L1261:                            
    000007FA 9356                   MOV.W       L1307,R3   ; H'0570
    000007FC D22B                   MOV.L       L1307+2,R2 ; _symtab
    000007FE 6422                   MOV.L       @R2,R4
    00000800 343C                   ADD         R3,R4
    00000802              L1262:                            
    00000802 D32C                   MOV.L       L1307+10,R3; _push
    00000804 430B                   JSR         @R3
    00000806 0009                   NOP
         power.c   282                            push_integer(j);
    00000808 D22B                   MOV.L       L1307+14,R2; _push_integer
    0000080A 420B                   JSR         @R2
    0000080C 64D3                   MOV         R13,R4
         power.c   283                            power();
    0000080E BC77                   BSR         _power
    00000810 0009                   NOP
         power.c   284                            A(i, j) = pop();
    00000812 52F1                   MOV.L       @(4,R15),R2
    00000814 D329                   MOV.L       L1307+18,R3; _frame
    00000816 32DC                   ADD         R13,R2
    00000818 6032                   MOV.L       @R3,R0
    0000081A 4208                   SHLL2       R2
    0000081C 302C                   ADD         R2,R0
    0000081E 490B                   JSR         @R9
    00000820 2F06                   MOV.L       R0,@-R15
    00000822 7D01                   ADD         #1,R13
    00000824 61F6                   MOV.L       @R15+,R1
    00000826 3DC7                   CMP/GT      R12,R13
    00000828 8FE0                   BF/S        L1260
    0000082A 2102                   MOV.L       R0,@R1
    0000082C              L1259:                            
         power.c   285                    }
         power.c   286                    p1 = cdr(p1);
    0000082C 63E2                   MOV.L       @R14,R3
    0000082E 8438                   MOV.B       @(8,R3),R0
    00000830 2008                   TST         R0,R0
    00000832 8B02                   BF          L1263
    00000834 62E2                   MOV.L       @R14,R2
    00000836 A004                   BRA         L1264
    00000838 5221                   MOV.L       @(4,R2),R2
    0000083A              L1263:                            
    0000083A 9336                   MOV.W       L1307,R3   ; H'0570
    0000083C D11B                   MOV.L       L1307+2,R1 ; _symtab
    0000083E 6212                   MOV.L       @R1,R2
    00000840 323C                   ADD         R3,R2
    00000842              L1264:                            
    00000842 7B01                   ADD         #1,R11
    00000844 2E22                   MOV.L       R2,@R14
    00000846              L1257:                            
    00000846 3BA3                   CMP/GE      R10,R11
    00000848 8BC9                   BF          L1258
         power.c   287            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         power.c   288    
         power.c   289            push_integer(n);
    0000084A D21B                   MOV.L       L1307+14,R2; _push_integer
    0000084C 420B                   JSR         @R2
    0000084E 64C3                   MOV         R12,R4
         power.c   290            factorial();
    00000850 D31B                   MOV.L       L1307+22,R3; _factorial
    00000852 430B                   JSR         @R3
    00000854 0009                   NOP
         power.c   291            p1 = pop();
    00000856 490B                   JSR         @R9
    00000858 0009                   NOP
         power.c   292    
         power.c   293            a = (int *) malloc(k * sizeof (int));
    0000085A 64A3                   MOV         R10,R4
    0000085C D219                   MOV.L       L1307+26,R2; _malloc
    0000085E 2E02                   MOV.L       R0,@R14
    00000860 420B                   JSR         @R2
    00000862 4408                   SHLL2       R4
    00000864 6E03                   MOV         R0,R14
         power.c   294    
         power.c   295            if (a == NULL)
    00000866 2EE8                   TST         R14,R14
    00000868 8B03                   BF          L1265
         power.c   296                    stop("malloc failure");
    0000086A D417                   MOV.L       L1307+30,R4; L1087
    0000086C D217                   MOV.L       L1307+34,R2; _stop
    0000086E 420B                   JSR         @R2
    00000870 0009                   NOP
    00000872              L1265:                            
         power.c   297    
         power.c   298            push(zero);
    00000872 D317                   MOV.L       L1307+38,R3; _zero
    00000874 D20F                   MOV.L       L1307+10,R2; _push
    00000876 420B                   JSR         @R2
    00000878 6432                   MOV.L       @R3,R4
         power.c   299    
         power.c   300            multinomial_sum(k, n, a, 0, n);
    0000087A E700                   MOV         #0,R7
    0000087C 2FC6                   MOV.L       R12,@-R15
    0000087E 66E3                   MOV         R14,R6
    00000880 65C3                   MOV         R12,R5
    00000882 B02B                   BSR         _multinomial_sum
    00000884 64A3                   MOV         R10,R4
         power.c   301    
         power.c   302            free(a);
    00000886 D213                   MOV.L       L1307+42,R2; _free
    00000888 420B                   JSR         @R2
    0000088A 64E3                   MOV         R14,R4
         power.c   303    
         power.c   304            pop_frame(k * (n + 1));
    0000088C 54F1                   MOV.L       @(4,R15),R4
    0000088E 7F0C                   ADD         #12,R15
    00000890 D311                   MOV.L       L1307+46,R3; _pop_frame
    00000892 04A7                   MUL.L       R10,R4
    00000894 041A                   STS         MACL,R4
    00000896 4F16                   LDS.L       @R15+,MACL




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000898 4F26                   LDS.L       @R15+,PR
    0000089A 68F6                   MOV.L       @R15+,R8
    0000089C 69F6                   MOV.L       @R15+,R9
    0000089E 6AF6                   MOV.L       @R15+,R10
    000008A0 6BF6                   MOV.L       @R15+,R11
    000008A2 6CF6                   MOV.L       @R15+,R12
    000008A4 6DF6                   MOV.L       @R15+,R13
    000008A6 432B                   JMP         @R3
    000008A8 6EF6                   MOV.L       @R15+,R14
    000008AA              L1307:                            
    000008AA 0570                   .DATA.W     H'0570
    000008AC <00000000>             .DATA.L     _symtab
    000008B0 <00000000>             .DATA.L     _pop
    000008B4 <00000000>             .DATA.L     _push
    000008B8 <00000000>             .DATA.L     _push_integer
    000008BC <00000000>             .DATA.L     _frame
    000008C0 <00000000>             .DATA.L     _factorial
    000008C4 <00000000>             .DATA.L     _malloc
    000008C8 <00000000>             .DATA.L     L1087
    000008CC <00000000>             .DATA.L     _stop
    000008D0 <00000000>             .DATA.L     _zero
    000008D4 <00000000>             .DATA.L     _free
    000008D8 <00000000>             .DATA.L     _pop_frame
         power.c   305    }
         power.c   306    
         power.c   307    //-----------------------------------------------------------------------------
         power.c   308    //
         power.c   309    //      Compute multinomial sum
         power.c   310    //
         power.c   311    //      Input:          k       number of factors
         power.c   312    //
         power.c   313    //                      n       overall exponent
         power.c   314    //
         power.c   315    //                      a       partition array
         power.c   316    //
         power.c   317    //                      i       partition array index
         power.c   318    //
         power.c   319    //                      m       partition remainder
         power.c   320    //
         power.c   321    //                      p1      n!
         power.c   322    //
         power.c   323    //                      A       factor array
         power.c   324    //
         power.c   325    //      Output:         Result on stack
         power.c   326    //
         power.c   327    //      Note:
         power.c   328    //
         power.c   329    //      Uses recursive descent to fill the partition array.
         power.c   330    //
         power.c   331    //-----------------------------------------------------------------------------
         power.c   332    
         power.c   333    void
         power.c   334    multinomial_sum(int k, int n, int *a, int i, int m)
    000008DC              _multinomial_sum:                ; function: multinomial_sum
                                                           ; frame size=44
    000008DC 2FE6                   MOV.L       R14,@-R15
    000008DE 6343                   MOV         R4,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008E0 2FD6                   MOV.L       R13,@-R15
    000008E2 6E43                   MOV         R4,R14
    000008E4 2FC6                   MOV.L       R12,@-R15
    000008E6 73FF                   ADD         #-1,R3
    000008E8 2FB6                   MOV.L       R11,@-R15
    000008EA 3733                   CMP/GE      R3,R7
    000008EC 2FA6                   MOV.L       R10,@-R15
    000008EE 6B63                   MOV         R6,R11
    000008F0 2F96                   MOV.L       R9,@-R15
    000008F2 6A53                   MOV         R5,R10
    000008F4 2F86                   MOV.L       R8,@-R15
    000008F6 6973                   MOV         R7,R9
    000008F8 4F22                   STS.L       PR,@-R15
    000008FA 4908                   SHLL2       R9
    000008FC 4F12                   STS.L       MACL,@-R15
    000008FE 7FFC                   ADD         #-4,R15
    00000900 5CFA                   MOV.L       @(40,R15),R12
    00000902 8D14                   BT/S        L1266
    00000904 39BC                   ADD         R11,R9
         power.c   335    {
         power.c   336            int j;
         power.c   337    
         power.c   338            if (i < k - 1) {
         power.c   339                    for (j = 0; j <= m; j++) {
    00000906 ED00                   MOV         #0,R13
    00000908 6873                   MOV         R7,R8
    0000090A 4C11                   CMP/PZ      R12
    0000090C 8F4B                   BF/S        L1269
    0000090E 7801                   ADD         #1,R8
    00000910              L1268:                            
         power.c   340                            a[i] = j;
    00000910 29D2                   MOV.L       R13,@R9
         power.c   341                            multinomial_sum(k, n, a, i + 1, m - j);
    00000912 62C3                   MOV         R12,R2
    00000914 32D8                   SUB         R13,R2
    00000916 6783                   MOV         R8,R7
    00000918 2F26                   MOV.L       R2,@-R15
    0000091A 66B3                   MOV         R11,R6
    0000091C 65A3                   MOV         R10,R5
    0000091E BFDD                   BSR         _multinomial_sum
    00000920 64E3                   MOV         R14,R4
    00000922 7D01                   ADD         #1,R13
    00000924 3DC7                   CMP/GT      R12,R13
    00000926 8FF3                   BF/S        L1268
    00000928 7F04                   ADD         #4,R15
         power.c   342                    }
         power.c   343                    return;
    0000092A A03C                   BRA         L1269
    0000092C 0009                   NOP
    0000092E              L1266:                            
         power.c   344            }
         power.c   345    
         power.c   346            a[i] = m;
    0000092E 29C2                   MOV.L       R12,@R9
         power.c   347    
         power.c   348            // coefficient
         power.c   349    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         power.c   350            push(p1);
    00000930 D93C                   MOV.L       L1308+2,R9 ; _push
    00000932 D33D                   MOV.L       L1308+6,R3 ; _p1
    00000934 490B                   JSR         @R9
    00000936 6432                   MOV.L       @R3,R4
         power.c   351    
         power.c   352            for (j = 0; j < k; j++) {
    00000938 D83C                   MOV.L       L1308+10,R8; _factorial
    0000093A 4E15                   CMP/PL      R14
    0000093C EC00                   MOV         #0,R12
    0000093E ED00                   MOV         #0,R13
    00000940 3DBC                   ADD         R11,R13
    00000942 DB3B                   MOV.L       L1308+14,R11; _push_integer
    00000944 8F0A                   BF/S        L1270
    00000946 2FD2                   MOV.L       R13,@R15
    00000948              L1271:                            
         power.c   353                    push_integer(a[j]);
    00000948 4B0B                   JSR         @R11
    0000094A 64D6                   MOV.L       @R13+,R4
         power.c   354                    factorial();
    0000094C 480B                   JSR         @R8
    0000094E 0009                   NOP
         power.c   355                    divide();
    00000950 D238                   MOV.L       L1308+18,R2; _divide
    00000952 420B                   JSR         @R2
    00000954 0009                   NOP
    00000956 7C01                   ADD         #1,R12
    00000958 3CE3                   CMP/GE      R14,R12
    0000095A 8BF5                   BF          L1271
    0000095C              L1270:                            
         power.c   356            }
         power.c   357    
         power.c   358            // factors
         power.c   359    
         power.c   360            for (j = 0; j < k; j++) {
    0000095C D836                   MOV.L       L1308+22,R8; _frame
    0000095E 4E15                   CMP/PL      R14
    00000960 EB00                   MOV         #0,R11
    00000962 6DA3                   MOV         R10,R13
    00000964 7D01                   ADD         #1,R13
    00000966 0DB7                   MUL.L       R11,R13
    00000968 0D1A                   STS         MACL,R13
    0000096A 8F10                   BF/S        L1272
    0000096C 6CF2                   MOV.L       @R15,R12
    0000096E              L1273:                            
         power.c   361                    push(A(j, a[j]));
    0000096E 60C6                   MOV.L       @R12+,R0
    00000970 6382                   MOV.L       @R8,R3
    00000972 30DC                   ADD         R13,R0
    00000974 4008                   SHLL2       R0
    00000976 490B                   JSR         @R9
    00000978 043E                   MOV.L       @(R0,R3),R4
         power.c   362                    multiply();
    0000097A D230                   MOV.L       L1308+26,R2; _multiply
    0000097C 420B                   JSR         @R2
    0000097E 0009                   NOP
    00000980 7B01                   ADD         #1,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000982 63D3                   MOV         R13,R3
    00000984 33AC                   ADD         R10,R3
    00000986 6D33                   MOV         R3,R13
    00000988 3BE3                   CMP/GE      R14,R11
    0000098A 8FF0                   BF/S        L1273
    0000098C 7D01                   ADD         #1,R13
    0000098E              L1272:                            
         power.c   363            }
         power.c   364    
         power.c   365            add();
    0000098E 7F04                   ADD         #4,R15
    00000990 D32B                   MOV.L       L1308+30,R3; _add
    00000992 4F16                   LDS.L       @R15+,MACL
    00000994 4F26                   LDS.L       @R15+,PR
    00000996 68F6                   MOV.L       @R15+,R8
    00000998 69F6                   MOV.L       @R15+,R9
    0000099A 6AF6                   MOV.L       @R15+,R10
    0000099C 6BF6                   MOV.L       @R15+,R11
    0000099E 6CF6                   MOV.L       @R15+,R12
    000009A0 6DF6                   MOV.L       @R15+,R13
    000009A2 432B                   JMP         @R3
    000009A4 6EF6                   MOV.L       @R15+,R14
    000009A6              L1269:                            
         power.c   366    }
    000009A6 7F04                   ADD         #4,R15
    000009A8 4F16                   LDS.L       @R15+,MACL
    000009AA 4F26                   LDS.L       @R15+,PR
    000009AC 68F6                   MOV.L       @R15+,R8
    000009AE 69F6                   MOV.L       @R15+,R9
    000009B0 6AF6                   MOV.L       @R15+,R10
    000009B2 6BF6                   MOV.L       @R15+,R11
    000009B4 6CF6                   MOV.L       @R15+,R12
    000009B6 6DF6                   MOV.L       @R15+,R13
    000009B8 000B                   RTS
    000009BA 6EF6                   MOV.L       @R15+,R14
         power.c   367    
         power.c   368    // exp(n/2 i pi) ?
         power.c   369    
         power.c   370    // p2 is the exponent expression
         power.c   371    
         power.c   372    // clobbers p3
         power.c   373    
         power.c   374    int
         power.c   375    simplify_polar(void)
    000009BC              _simplify_polar:                 ; function: simplify_polar
                                                           ; frame size=24
    000009BC 2FE6                   MOV.L       R14,@-R15
    000009BE 2FD6                   MOV.L       R13,@-R15
    000009C0 2FC6                   MOV.L       R12,@-R15
    000009C2 2FB6                   MOV.L       R11,@-R15
    000009C4 2FA6                   MOV.L       R10,@-R15
    000009C6 4F22                   STS.L       PR,@-R15
         power.c   376    {
         power.c   377            int n;
         power.c   378    
         power.c   379            n = isquarterturn(p2);
    000009C8 DB1E                   MOV.L       L1308+34,R11; _isquarterturn




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009CA DC1F                   MOV.L       L1308+38,R12; _p2
    000009CC 4B0B                   JSR         @R11
    000009CE 64C2                   MOV.L       @R12,R4
    000009D0 DA17                   MOV.L       L1308+14,R10; _push_integer
    000009D2 8800                   CMP/EQ      #0,R0
    000009D4 DD13                   MOV.L       L1308+2,R13; _push
    000009D6 6503                   MOV         R0,R5
    000009D8 D31C                   MOV.L       L1308+42,R3; _imaginaryunit
    000009DA 8D1C                   BT/S        L1274
    000009DC 6432                   MOV.L       @R3,R4
    000009DE 8801                   CMP/EQ      #1,R0
    000009E0 8907                   BT          L1124
    000009E2 8802                   CMP/EQ      #2,R0
    000009E4 8907                   BT          L1125
    000009E6 8803                   CMP/EQ      #3,R0
    000009E8 890A                   BT          L1126
    000009EA 8804                   CMP/EQ      #4,R0
    000009EC 890C                   BT          L1127
    000009EE A012                   BRA         L1274
    000009F0 0009                   NOP
    000009F2              L1124:                           ; case label 
    000009F2 A001                   BRA         L1296
         power.c   380    
         power.c   381            switch(n) {
         power.c   382            case 0:
         power.c   383                    break;
         power.c   384            case 1:
         power.c   385                    push_integer(1);
    000009F4 E401                   MOV         #1,R4
    000009F6              L1125:                           ; case label 
         power.c   386                    return 1;
         power.c   387            case 2:
         power.c   388                    push_integer(-1);
    000009F6 E4FF                   MOV         #-1,R4
    000009F8              L1296:                            
    000009F8 4A0B                   JSR         @R10
    000009FA 0009                   NOP
    000009FC A0A1                   BRA         L1115
    000009FE 0009                   NOP
    00000A00              L1126:                           ; case label 
         power.c   389                    return 1;
         power.c   390            case 3:
         power.c   391                    push(imaginaryunit);
    00000A00 4D0B                   JSR         @R13
    00000A02 0009                   NOP
    00000A04 A09D                   BRA         L1115
    00000A06 0009                   NOP
    00000A08              L1127:                           ; case label 
         power.c   392                    return 1;
         power.c   393            case 4:
         power.c   394                    push(imaginaryunit);
    00000A08 4D0B                   JSR         @R13
    00000A0A 0009                   NOP
         power.c   395                    negate();
    00000A0C D210                   MOV.L       L1308+46,R2; _negate
    00000A0E 420B                   JSR         @R2
    00000A10 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A12 A096                   BRA         L1115
    00000A14 0009                   NOP
    00000A16              L1274:                            
    00000A16 64C2                   MOV.L       @R12,R4
    00000A18 8448                   MOV.B       @(8,R4),R0
    00000A1A 2008                   TST         R0,R0
    00000A1C 8B1A                   BF          L1277
    00000A1E A01D                   BRA         L1278
    00000A20 6242                   MOV.L       @R4,R2
    00000A22              L1308:                            
    00000A22 0000                   .DATA.W     0
    00000A24 <00000000>             .DATA.L     _push
    00000A28 <00000000>             .DATA.L     _p1
    00000A2C <00000000>             .DATA.L     _factorial
    00000A30 <00000000>             .DATA.L     _push_integer
    00000A34 <00000000>             .DATA.L     _divide
    00000A38 <00000000>             .DATA.L     _frame
    00000A3C <00000000>             .DATA.L     _multiply
    00000A40 <00000000>             .DATA.L     _add
    00000A44 <00000000>             .DATA.L     _isquarterturn
    00000A48 <00000000>             .DATA.L     _p2
    00000A4C <00000000>             .DATA.L     _imaginaryunit
    00000A50 <00000000>             .DATA.L     _negate
    00000A54              L1277:                            
    00000A54 935D                   MOV.W       L1309,R3   ; H'0570
    00000A56 D12F                   MOV.L       L1309+2,R1 ; _symtab
    00000A58 6212                   MOV.L       @R1,R2
    00000A5A 323C                   ADD         R3,R2
    00000A5C              L1278:                            
    00000A5C D02D                   MOV.L       L1309+2,R0 ; _symtab
    00000A5E 6302                   MOV.L       @R0,R3
    00000A60 730C                   ADD         #12,R3
    00000A62 3230                   CMP/EQ      R3,R2
    00000A64 8B6F                   BF          L1298
         power.c   396                    return 1;
         power.c   397            }
         power.c   398    
         power.c   399            if (car(p2) == symbol(ADD)) {
         power.c   400                    p3 = cdr(p2);
    00000A66 DE2C                   MOV.L       L1309+6,R14; _p3
    00000A68 63C2                   MOV.L       @R12,R3
    00000A6A 8438                   MOV.B       @(8,R3),R0
    00000A6C 2008                   TST         R0,R0
    00000A6E 8B02                   BF          L1279
    00000A70 62C2                   MOV.L       @R12,R2
    00000A72 A004                   BRA         L1280
    00000A74 5221                   MOV.L       @(4,R2),R2
    00000A76              L1279:                            
    00000A76 934C                   MOV.W       L1309,R3   ; H'0570
    00000A78 D126                   MOV.L       L1309+2,R1 ; _symtab
    00000A7A 6212                   MOV.L       @R1,R2
    00000A7C 323C                   ADD         R3,R2
    00000A7E              L1280:                            
         power.c   401                    while (iscons(p3)) {
    00000A7E A01C                   BRA         L1281
    00000A80 2E22                   MOV.L       R2,@R14
    00000A82              L1282:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         power.c   402                            n = isquarterturn(car(p3));
    00000A82 64E2                   MOV.L       @R14,R4
    00000A84 8448                   MOV.B       @(8,R4),R0
    00000A86 2008                   TST         R0,R0
    00000A88 8B02                   BF          L1283
    00000A8A 64E2                   MOV.L       @R14,R4
    00000A8C A004                   BRA         L1284
    00000A8E 6442                   MOV.L       @R4,R4
    00000A90              L1283:                            
    00000A90 933F                   MOV.W       L1309,R3   ; H'0570
    00000A92 D220                   MOV.L       L1309+2,R2 ; _symtab
    00000A94 6422                   MOV.L       @R2,R4
    00000A96 343C                   ADD         R3,R4
    00000A98              L1284:                            
    00000A98 4B0B                   JSR         @R11
    00000A9A 0009                   NOP
    00000A9C 6503                   MOV         R0,R5
         power.c   403                            if (n)
    00000A9E 2558                   TST         R5,R5
    00000AA0 8B0F                   BF          L1286
         power.c   404                                    break;
         power.c   405                            p3 = cdr(p3);
    00000AA2 62E2                   MOV.L       @R14,R2
    00000AA4 8428                   MOV.B       @(8,R2),R0
    00000AA6 2008                   TST         R0,R0
    00000AA8 8B02                   BF          L1287
    00000AAA 62E2                   MOV.L       @R14,R2
    00000AAC A004                   BRA         L1288
    00000AAE 5321                   MOV.L       @(4,R2),R3
    00000AB0              L1287:                            
    00000AB0 922F                   MOV.W       L1309,R2   ; H'0570
    00000AB2 D118                   MOV.L       L1309+2,R1 ; _symtab
    00000AB4 6312                   MOV.L       @R1,R3
    00000AB6 332C                   ADD         R2,R3
    00000AB8              L1288:                            
    00000AB8 2E32                   MOV.L       R3,@R14
    00000ABA              L1281:                            
    00000ABA 62E2                   MOV.L       @R14,R2
    00000ABC 8428                   MOV.B       @(8,R2),R0
    00000ABE 2008                   TST         R0,R0
    00000AC0 89DF                   BT          L1282
    00000AC2              L1286:                            
    00000AC2 6053                   MOV         R5,R0
    00000AC4 D215                   MOV.L       L1309+10,R2; _imaginaryunit
    00000AC6 8800                   CMP/EQ      #0,R0
    00000AC8 8D3D                   BT/S        L1298
    00000ACA 6422                   MOV.L       @R2,R4
    00000ACC 8801                   CMP/EQ      #1,R0
    00000ACE 8907                   BT          L1129
    00000AD0 8802                   CMP/EQ      #2,R0
    00000AD2 8907                   BT          L1130
    00000AD4 8803                   CMP/EQ      #3,R0
    00000AD6 890A                   BT          L1131
    00000AD8 8804                   CMP/EQ      #4,R0
    00000ADA 890C                   BT          L1132
    00000ADC A010                   BRA         L1289
    00000ADE 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AE0              L1129:                           ; case label 
         power.c   406                    }
         power.c   407                    switch (n) {
         power.c   408                    case 0:
         power.c   409                            return 0;
         power.c   410                    case 1:
         power.c   411                            push_integer(1);
         power.c   412                            break;
    00000AE0 A001                   BRA         L1297
    00000AE2 E401                   MOV         #1,R4
    00000AE4              L1130:                           ; case label 
         power.c   413                    case 2:
         power.c   414                            push_integer(-1);
    00000AE4 E4FF                   MOV         #-1,R4
         power.c   415                            break;
    00000AE6              L1297:                            
    00000AE6 4A0B                   JSR         @R10
    00000AE8 0009                   NOP
    00000AEA A009                   BRA         L1289
    00000AEC 0009                   NOP
    00000AEE              L1131:                           ; case label 
         power.c   416                    case 3:
         power.c   417                            push(imaginaryunit);
    00000AEE 4D0B                   JSR         @R13
    00000AF0 0009                   NOP
         power.c   418                            break;
    00000AF2 A005                   BRA         L1289
    00000AF4 0009                   NOP
    00000AF6              L1132:                           ; case label 
         power.c   419                    case 4:
         power.c   420                            push(imaginaryunit);
    00000AF6 4D0B                   JSR         @R13
    00000AF8 0009                   NOP
         power.c   421                            negate();
    00000AFA D309                   MOV.L       L1309+14,R3; _negate
    00000AFC 430B                   JSR         @R3
    00000AFE 0009                   NOP
         power.c   422                            break;
    00000B00              L1289:                            
         power.c   423                    }
         power.c   424                    push(p2);
    00000B00 4D0B                   JSR         @R13
    00000B02 64C2                   MOV.L       @R12,R4
         power.c   425                    push(car(p3));
    00000B04 64E2                   MOV.L       @R14,R4
    00000B06 8448                   MOV.B       @(8,R4),R0
    00000B08 2008                   TST         R0,R0
    00000B0A 8B0B                   BF          L1290
    00000B0C 64E2                   MOV.L       @R14,R4
    00000B0E A00D                   BRA         L1291
    00000B10 6442                   MOV.L       @R4,R4
    00000B12              L1309:                            
    00000B12 0570                   .DATA.W     H'0570
    00000B14 <00000000>             .DATA.L     _symtab
    00000B18 <00000000>             .DATA.L     _p3
    00000B1C <00000000>             .DATA.L     _imaginaryunit
    00000B20 <00000000>             .DATA.L     _negate




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B24              L1290:                            
    00000B24 9317                   MOV.W       L1310,R3   ; H'0570
    00000B26 D20C                   MOV.L       L1310+2,R2 ; _symtab
    00000B28 6422                   MOV.L       @R2,R4
    00000B2A 343C                   ADD         R3,R4
    00000B2C              L1291:                            
    00000B2C 4D0B                   JSR         @R13
    00000B2E 0009                   NOP
         power.c   426                    subtract();
    00000B30 D30A                   MOV.L       L1310+6,R3 ; _subtract
    00000B32 430B                   JSR         @R3
    00000B34 0009                   NOP
         power.c   427                    exponential();
    00000B36 D20A                   MOV.L       L1310+10,R2; _exponential
    00000B38 420B                   JSR         @R2
    00000B3A 0009                   NOP
         power.c   428                    multiply();
    00000B3C D309                   MOV.L       L1310+14,R3; _multiply
    00000B3E 430B                   JSR         @R3
    00000B40 0009                   NOP
    00000B42              L1115:
         power.c   429                    return 1;
    00000B42 A001                   BRA         L1275
    00000B44 E001                   MOV         #1,R0
    00000B46              L1298:                            
         power.c   430            }
         power.c   431    
         power.c   432            return 0;
    00000B46 E000                   MOV         #0,R0
         power.c   433    }
    00000B48              L1275:                            
    00000B48 4F26                   LDS.L       @R15+,PR
    00000B4A 6AF6                   MOV.L       @R15+,R10
    00000B4C 6BF6                   MOV.L       @R15+,R11
    00000B4E 6CF6                   MOV.L       @R15+,R12
    00000B50 6DF6                   MOV.L       @R15+,R13
    00000B52 000B                   RTS
    00000B54 6EF6                   MOV.L       @R15+,R14
    00000B56              L1310:                            
    00000B56 0570                   .DATA.W     H'0570
    00000B58 <00000000>             .DATA.L     _symtab
    00000B5C <00000000>             .DATA.L     _subtract
    00000B60 <00000000>             .DATA.L     _exponential
    00000B64 <00000000>             .DATA.L     _multiply
C   00000000              L1087:
    00000000 6D616C6C6F             .SDATA      "malloc failure"
             6320666169   
             6C757265     
    0000000E 00                     .DATA.B     H'00












SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:22  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      433



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000B68 Byte(s)
CONSTANT SECTION (C):                               0000000F Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000B77 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           49
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           6
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           217






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkC08B.tmp 

