SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\qpow.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          qpow.c     1    // Rational power function
          qpow.c     2    
          qpow.c     3    #include "stdafx.h"
          qpow.c     4    #include "defs.h"
          qpow.c     5    
          qpow.c     6    static void qpowf(void);
          qpow.c     7    static void normalize_angle(void);
          qpow.c     8    static int is_small_integer(U *);
          qpow.c     9    
          qpow.c    10    void
          qpow.c    11    qpow()
P   00000000              _qpow:                           ; function: qpow
                                                           ; frame size=4
    00000000 4F22                   STS.L       PR,@-R15
          qpow.c    12    {
          qpow.c    13            save();
    00000002 D385                   MOV.L       L1135,R3   ; _save
    00000004 430B                   JSR         @R3
    00000006 0009                   NOP
          qpow.c    14            qpowf();
    00000008 B003                   BSR         __$qpowf
    0000000A 0009                   NOP
          qpow.c    15            restore();
    0000000C D383                   MOV.L       L1135+4,R3 ; _restore
    0000000E 432B                   JMP         @R3
    00000010 4F26                   LDS.L       @R15+,PR
          qpow.c    16    }
          qpow.c    17    
          qpow.c    18    #define BASE p1
          qpow.c    19    #define EXPO p2
          qpow.c    20    
          qpow.c    21    static void
          qpow.c    22    qpowf(void)
    00000012              __$qpowf:                        ; function: qpowf
                                                           ; frame size=40
    00000012 2FE6                   MOV.L       R14,@-R15
    00000014 2FD6                   MOV.L       R13,@-R15
    00000016 2FC6                   MOV.L       R12,@-R15
    00000018 2FB6                   MOV.L       R11,@-R15
    0000001A 2FA6                   MOV.L       R10,@-R15
    0000001C 2F96                   MOV.L       R9,@-R15
    0000001E 2F86                   MOV.L       R8,@-R15
    00000020 4F22                   STS.L       PR,@-R15
    00000022 7FFC                   ADD         #-4,R15
          qpow.c    23    {
          qpow.c    24            int expo;
          qpow.c    25            unsigned int a, b, *t, *x, *y;
          qpow.c    26    
          qpow.c    27            EXPO = pop();
    00000024 DC7E                   MOV.L       L1135+8,R12; _p2
    00000026 D37F                   MOV.L       L1135+12,R3; _pop
    00000028 430B                   JSR         @R3
    0000002A 0009                   NOP
          qpow.c    28            BASE = pop();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000002C DD7E                   MOV.L       L1135+16,R13; _p1
    0000002E D27D                   MOV.L       L1135+12,R2; _pop
    00000030 420B                   JSR         @R2
    00000032 2C02                   MOV.L       R0,@R12
    00000034 2D02                   MOV.L       R0,@R13
          qpow.c    29    
          qpow.c    30            // if base is 1 or exponent is 0 then return 1
          qpow.c    31    
          qpow.c    32            if (isplusone(BASE) || iszero(EXPO)) {
    00000036 D37D                   MOV.L       L1135+20,R3; _isplusone
    00000038 430B                   JSR         @R3
    0000003A 6403                   MOV         R0,R4
    0000003C 2008                   TST         R0,R0
    0000003E 8B05                   BF          L1106
    00000040 D377                   MOV.L       L1135+8,R3 ; _p2
    00000042 D27B                   MOV.L       L1135+24,R2; _iszero
    00000044 420B                   JSR         @R2
    00000046 6432                   MOV.L       @R3,R4
    00000048 2008                   TST         R0,R0
    0000004A 890B                   BT          L1105
    0000004C              L1106:                            
          qpow.c    33                    push_integer(1);
    0000004C D379                   MOV.L       L1135+28,R3; _push_integer
    0000004E E401                   MOV         #1,R4
    00000050 7F04                   ADD         #4,R15
    00000052 4F26                   LDS.L       @R15+,PR
    00000054 68F6                   MOV.L       @R15+,R8
    00000056 69F6                   MOV.L       @R15+,R9
    00000058 6AF6                   MOV.L       @R15+,R10
    0000005A 6BF6                   MOV.L       @R15+,R11
    0000005C 6CF6                   MOV.L       @R15+,R12
    0000005E 6DF6                   MOV.L       @R15+,R13
    00000060 432B                   JMP         @R3
    00000062 6EF6                   MOV.L       @R15+,R14
    00000064              L1105:                            
          qpow.c    34                    return;
          qpow.c    35            }
          qpow.c    36    
          qpow.c    37            // if base is zero then return 0
          qpow.c    38    
          qpow.c    39            if (iszero(BASE)) {
    00000064 DE74                   MOV.L       L1135+32,R14; _push
    00000066 D272                   MOV.L       L1135+24,R2; _iszero
    00000068 420B                   JSR         @R2
    0000006A 64D2                   MOV.L       @R13,R4
    0000006C 2008                   TST         R0,R0
    0000006E 890B                   BT          L1108
          qpow.c    40                    if (isnegativenumber(EXPO))
    00000070 D272                   MOV.L       L1135+36,R2; _isnegativenumber
    00000072 420B                   JSR         @R2
    00000074 64C2                   MOV.L       @R12,R4
    00000076 2008                   TST         R0,R0
    00000078 8903                   BT          L1109
          qpow.c    41                            stop("divide by zero");
    0000007A D471                   MOV.L       L1135+40,R4; L1071
    0000007C D271                   MOV.L       L1135+44,R2; _stop
    0000007E 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000080 0009                   NOP
    00000082              L1109:                            
          qpow.c    42                    push(zero);
    00000082 D371                   MOV.L       L1135+48,R3; _zero
          qpow.c    43                    return;
    00000084 A12C                   BRA         L1133
    00000086 6432                   MOV.L       @R3,R4
    00000088              L1108:                            
          qpow.c    44            }
          qpow.c    45    
          qpow.c    46            // if exponent is 1 then return base
          qpow.c    47    
          qpow.c    48            if (isplusone(EXPO)) {
    00000088 D268                   MOV.L       L1135+20,R2; _isplusone
    0000008A 420B                   JSR         @R2
    0000008C 64C2                   MOV.L       @R12,R4
    0000008E 2008                   TST         R0,R0
    00000090 8901                   BT          L1110
          qpow.c    49                    push(BASE);
          qpow.c    50                    return;
    00000092 A125                   BRA         L1133
    00000094 64D2                   MOV.L       @R13,R4
    00000096              L1110:                            
          qpow.c    51            }
          qpow.c    52    
          qpow.c    53            // if exponent is integer then power
          qpow.c    54    
          qpow.c    55            if (isinteger(EXPO)) {
    00000096 EA01                   MOV         #1,R10
    00000098 DB6D                   MOV.L       L1135+56,R11; _p3
    0000009A D86C                   MOV.L       L1135+52,R8; _mpow
    0000009C D26D                   MOV.L       L1135+60,R2; _isinteger
    0000009E 420B                   JSR         @R2
    000000A0 64C2                   MOV.L       @R12,R4
    000000A2 2008                   TST         R0,R0
    000000A4 8931                   BT          L1111
          qpow.c    56                    push(EXPO);
    000000A6 4E0B                   JSR         @R14
    000000A8 64C2                   MOV.L       @R12,R4
          qpow.c    57                    expo = pop_integer();
    000000AA D26B                   MOV.L       L1135+64,R2; _pop_integer
    000000AC 420B                   JSR         @R2
    000000AE 0009                   NOP
          qpow.c    58                    if (expo == (int) 0x80000000) {
    000000B0 D36A                   MOV.L       L1135+68,R3; H'80000000
    000000B2 6903                   MOV         R0,R9
    000000B4 3930                   CMP/EQ      R3,R9
    000000B6 8B01                   BF          L1136
    000000B8 A09B                   BRA         L1092
    000000BA 0009                   NOP
    000000BC              L1136:                            
          qpow.c    59                            // expo greater than 32 bits
          qpow.c    60                            push_symbol(POWER);
          qpow.c    61                            push(BASE);
          qpow.c    62                            push(EXPO);
          qpow.c    63                            list(3);
          qpow.c    64                            return;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          qpow.c    65                    }
          qpow.c    66                    x = mpow(BASE->u.q.a, abs(expo));
    000000BC D368                   MOV.L       L1135+72,R3; _abs
    000000BE 430B                   JSR         @R3
    000000C0 6493                   MOV         R9,R4
    000000C2 6503                   MOV         R0,R5
    000000C4 64D2                   MOV.L       @R13,R4
    000000C6 480B                   JSR         @R8
    000000C8 6442                   MOV.L       @R4,R4
    000000CA 6C03                   MOV         R0,R12
          qpow.c    67                    y = mpow(BASE->u.q.b, abs(expo));
    000000CC D364                   MOV.L       L1135+72,R3; _abs
    000000CE 430B                   JSR         @R3
    000000D0 6493                   MOV         R9,R4
    000000D2 6503                   MOV         R0,R5
    000000D4 64D2                   MOV.L       @R13,R4
    000000D6 480B                   JSR         @R8
    000000D8 5441                   MOV.L       @(4,R4),R4
          qpow.c    68                    if (expo < 0) {
    000000DA 4911                   CMP/PZ      R9
    000000DC 8D09                   BT/S        L1113
    000000DE 6D03                   MOV         R0,R13
          qpow.c    69                            t = x;
    000000E0 64C3                   MOV         R12,R4
          qpow.c    70                            x = y;
    000000E2 6CD3                   MOV         R13,R12
          qpow.c    71                            y = t;
    000000E4 6D43                   MOV         R4,R13
          qpow.c    72                            MSIGN(x) = MSIGN(y);
    000000E6 62C3                   MOV         R12,R2
    000000E8 72F8                   ADD         #-8,R2
    000000EA 74F8                   ADD         #-8,R4
    000000EC 6342                   MOV.L       @R4,R3
    000000EE 2232                   MOV.L       R3,@R2
          qpow.c    73                            MSIGN(y) = 1;
    000000F0 24A2                   MOV.L       R10,@R4
    000000F2              L1113:                            
          qpow.c    74                    }
          qpow.c    75                    p3 = alloc();
    000000F2 D25C                   MOV.L       L1135+76,R2; _alloc
    000000F4 420B                   JSR         @R2
    000000F6 0009                   NOP
    000000F8 2B02                   MOV.L       R0,@R11
          qpow.c    76                    p3->k = NUM;
    000000FA 6303                   MOV         R0,R3
    000000FC 60A3                   MOV         R10,R0
    000000FE 8038                   MOV.B       R0,@(8,R3)
          qpow.c    77                    p3->u.q.a = x;
    00000100 63B2                   MOV.L       @R11,R3
    00000102 23C2                   MOV.L       R12,@R3
          qpow.c    78                    p3->u.q.b = y;
    00000104 62B2                   MOV.L       @R11,R2
    00000106 A0EA                   BRA         L1093
    00000108 12D1                   MOV.L       R13,@(4,R2)
    0000010A              L1111:                            
          qpow.c    79                    push(p3);
          qpow.c    80                    return;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          qpow.c    81            }
          qpow.c    82    
          qpow.c    83            // from here on out the exponent is NOT an integer
          qpow.c    84    
          qpow.c    85            // if base is -1 then normalize polar angle
          qpow.c    86    
          qpow.c    87            if (isminusone(BASE)) {
    0000010A D257                   MOV.L       L1135+80,R2; _isminusone
    0000010C 420B                   JSR         @R2
    0000010E 64D2                   MOV.L       @R13,R4
    00000110 2008                   TST         R0,R0
    00000112 890B                   BT          L1114
          qpow.c    88                    push(EXPO);
    00000114 4E0B                   JSR         @R14
    00000116 64C2                   MOV.L       @R12,R4
          qpow.c    89                    normalize_angle();
    00000118 7F04                   ADD         #4,R15
    0000011A 4F26                   LDS.L       @R15+,PR
    0000011C 68F6                   MOV.L       @R15+,R8
    0000011E 69F6                   MOV.L       @R15+,R9
    00000120 6AF6                   MOV.L       @R15+,R10
    00000122 6BF6                   MOV.L       @R15+,R11
    00000124 6CF6                   MOV.L       @R15+,R12
    00000126 6DF6                   MOV.L       @R15+,R13
    00000128 A0E6                   BRA         __$normalize_angle
    0000012A 6EF6                   MOV.L       @R15+,R14
    0000012C              L1114:                            
          qpow.c    90                    return;
          qpow.c    91            }
          qpow.c    92    
          qpow.c    93            // if base is negative then (-N)^M -> N^M * (-1)^M
          qpow.c    94    
          qpow.c    95            if (isnegativenumber(BASE)) {
    0000012C D343                   MOV.L       L1135+36,R3; _isnegativenumber
    0000012E 430B                   JSR         @R3
    00000130 64D2                   MOV.L       @R13,R4
    00000132 2008                   TST         R0,R0
    00000134 890F                   BT          L1115
          qpow.c    96                    push(BASE);
    00000136 4E0B                   JSR         @R14
    00000138 64D2                   MOV.L       @R13,R4
          qpow.c    97                    negate();
    0000013A D34C                   MOV.L       L1135+84,R3; _negate
    0000013C 430B                   JSR         @R3
    0000013E 0009                   NOP
          qpow.c    98                    push(EXPO);
    00000140 4E0B                   JSR         @R14
    00000142 64C2                   MOV.L       @R12,R4
          qpow.c    99                    qpow();
    00000144 BF5C                   BSR         _qpow
    00000146 0009                   NOP
          qpow.c   100                    push_integer(-1);
    00000148 D33A                   MOV.L       L1135+28,R3; _push_integer
    0000014A 430B                   JSR         @R3
    0000014C E4FF                   MOV         #-1,R4
          qpow.c   101                    push(EXPO);
    0000014E 4E0B                   JSR         @R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000150 64C2                   MOV.L       @R12,R4
    00000152 A018                   BRA         L1089
    00000154 0009                   NOP
    00000156              L1115:                            
          qpow.c   102                    qpow();
          qpow.c   103                    multiply();
          qpow.c   104                    return;
          qpow.c   105            }
          qpow.c   106    
          qpow.c   107            // if BASE is not an integer then power numerator and denominator
          qpow.c   108    
          qpow.c   109            if (!isinteger(BASE)) {
    00000156 D33F                   MOV.L       L1135+60,R3; _isinteger
    00000158 430B                   JSR         @R3
    0000015A 64D2                   MOV.L       @R13,R4
    0000015C 2008                   TST         R0,R0
    0000015E 8B1F                   BF          L1116
          qpow.c   110                    push(BASE);
    00000160 4E0B                   JSR         @R14
    00000162 64D2                   MOV.L       @R13,R4
          qpow.c   111                    mp_numerator();
    00000164 D342                   MOV.L       L1135+88,R3; _mp_numerator
    00000166 430B                   JSR         @R3
    00000168 0009                   NOP
          qpow.c   112                    push(EXPO);
    0000016A 4E0B                   JSR         @R14
    0000016C 64C2                   MOV.L       @R12,R4
          qpow.c   113                    qpow();
    0000016E BF47                   BSR         _qpow
    00000170 0009                   NOP
          qpow.c   114                    push(BASE);
    00000172 4E0B                   JSR         @R14
    00000174 64D2                   MOV.L       @R13,R4
          qpow.c   115                    mp_denominator();
    00000176 D33F                   MOV.L       L1135+92,R3; _mp_denominator
    00000178 430B                   JSR         @R3
    0000017A 0009                   NOP
          qpow.c   116                    push(EXPO);
    0000017C 4E0B                   JSR         @R14
    0000017E 64C2                   MOV.L       @R12,R4
          qpow.c   117                    negate();
    00000180 D23A                   MOV.L       L1135+84,R2; _negate
    00000182 420B                   JSR         @R2
    00000184 0009                   NOP
    00000186              L1089:
          qpow.c   118                    qpow();
    00000186 BF3B                   BSR         _qpow
    00000188 0009                   NOP
          qpow.c   119                    multiply();
    0000018A 7F04                   ADD         #4,R15
    0000018C D23A                   MOV.L       L1135+96,R2; _multiply
    0000018E 4F26                   LDS.L       @R15+,PR
    00000190 68F6                   MOV.L       @R15+,R8
    00000192 69F6                   MOV.L       @R15+,R9
    00000194 6AF6                   MOV.L       @R15+,R10
    00000196 6BF6                   MOV.L       @R15+,R11
    00000198 6CF6                   MOV.L       @R15+,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000019A 6DF6                   MOV.L       @R15+,R13
    0000019C 422B                   JMP         @R2
    0000019E 6EF6                   MOV.L       @R15+,R14
    000001A0              L1116:                            
          qpow.c   120                    return;
          qpow.c   121            }
          qpow.c   122    
          qpow.c   123            // At this point BASE is a positive integer.
          qpow.c   124    
          qpow.c   125            // If BASE is small then factor it.
          qpow.c   126    
          qpow.c   127            if (is_small_integer(BASE)) {
    000001A0 B109                   BSR         __$is_small_integer
    000001A2 64D2                   MOV.L       @R13,R4
    000001A4 2008                   TST         R0,R0
    000001A6 890E                   BT          L1117
          qpow.c   128                    push(BASE);
    000001A8 4E0B                   JSR         @R14
    000001AA 64D2                   MOV.L       @R13,R4
          qpow.c   129                    push(EXPO);
    000001AC 4E0B                   JSR         @R14
    000001AE 64C2                   MOV.L       @R12,R4
          qpow.c   130                    quickfactor();
    000001B0 D332                   MOV.L       L1135+100,R3; _quickfactor
    000001B2 7F04                   ADD         #4,R15
    000001B4 4F26                   LDS.L       @R15+,PR
    000001B6 68F6                   MOV.L       @R15+,R8
    000001B8 69F6                   MOV.L       @R15+,R9
    000001BA 6AF6                   MOV.L       @R15+,R10
    000001BC 6BF6                   MOV.L       @R15+,R11
    000001BE 6CF6                   MOV.L       @R15+,R12
    000001C0 6DF6                   MOV.L       @R15+,R13
    000001C2 432B                   JMP         @R3
    000001C4 6EF6                   MOV.L       @R15+,R14
    000001C6              L1117:                            
    000001C6 E0FC                   MOV         #-4,R0
    000001C8 64C2                   MOV.L       @R12,R4
    000001CA 6242                   MOV.L       @R4,R2
    000001CC 032E                   MOV.L       @(R0,R2),R3
    000001CE 33A7                   CMP/GT      R10,R3
    000001D0 890F                   BT          L1092
    000001D2 5141                   MOV.L       @(4,R4),R1
    000001D4 031E                   MOV.L       @(R0,R1),R3
    000001D6 33A7                   CMP/GT      R10,R3
    000001D8 890B                   BT          L1092
          qpow.c   131                    return;
          qpow.c   132            }
          qpow.c   133    
          qpow.c   134            // At this point BASE is a positive integer and EXPO is not an integer.
          qpow.c   135    
          qpow.c   136            if (MLENGTH(EXPO->u.q.a) > 1 || MLENGTH(EXPO->u.q.b) > 1) {
          qpow.c   137                    push_symbol(POWER);
          qpow.c   138                    push(BASE);
          qpow.c   139                    push(EXPO);
          qpow.c   140                    list(3);
          qpow.c   141                    return;
          qpow.c   142            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          qpow.c   143    
          qpow.c   144            a = EXPO->u.q.a[0];
    000001DA 6242                   MOV.L       @R4,R2
    000001DC 6322                   MOV.L       @R2,R3
    000001DE 2F32                   MOV.L       R3,@R15
          qpow.c   145            b = EXPO->u.q.b[0];
    000001E0 5541                   MOV.L       @(4,R4),R5
    000001E2 6552                   MOV.L       @R5,R5
          qpow.c   146    
          qpow.c   147            x = mroot(BASE->u.q.a, b);
    000001E4 64D2                   MOV.L       @R13,R4
    000001E6 D326                   MOV.L       L1135+104,R3; _mroot
    000001E8 430B                   JSR         @R3
    000001EA 6442                   MOV.L       @R4,R4
    000001EC 6903                   MOV         R0,R9
          qpow.c   148    
          qpow.c   149            if (x == 0) {
    000001EE 2998                   TST         R9,R9
    000001F0 8B4C                   BF          L1120
    000001F2              L1092:
          qpow.c   150                    push_symbol(POWER);
    000001F2 D324                   MOV.L       L1135+108,R3; _push_symbol
    000001F4 430B                   JSR         @R3
    000001F6 E454                   MOV         #84,R4
          qpow.c   151                    push(BASE);
    000001F8 4E0B                   JSR         @R14
    000001FA 64D2                   MOV.L       @R13,R4
          qpow.c   152                    push(EXPO);
    000001FC 4E0B                   JSR         @R14
    000001FE 64C2                   MOV.L       @R12,R4
          qpow.c   153                    list(3);
    00000200 D221                   MOV.L       L1135+112,R2; _list
    00000202 E403                   MOV         #3,R4
    00000204 7F04                   ADD         #4,R15
    00000206 4F26                   LDS.L       @R15+,PR
    00000208 68F6                   MOV.L       @R15+,R8
    0000020A 69F6                   MOV.L       @R15+,R9
    0000020C 6AF6                   MOV.L       @R15+,R10
    0000020E 6BF6                   MOV.L       @R15+,R11
    00000210 6CF6                   MOV.L       @R15+,R12
    00000212 6DF6                   MOV.L       @R15+,R13
    00000214 422B                   JMP         @R2
    00000216 6EF6                   MOV.L       @R15+,R14
    00000218              L1135:                            
    00000218 <00000000>             .DATA.L     _save
    0000021C <00000000>             .DATA.L     _restore
    00000220 <00000000>             .DATA.L     _p2
    00000224 <00000000>             .DATA.L     _pop
    00000228 <00000000>             .DATA.L     _p1
    0000022C <00000000>             .DATA.L     _isplusone
    00000230 <00000000>             .DATA.L     _iszero
    00000234 <00000000>             .DATA.L     _push_integer
    00000238 <00000000>             .DATA.L     _push
    0000023C <00000000>             .DATA.L     _isnegativenumber
    00000240 <00000000>             .DATA.L     L1071
    00000244 <00000000>             .DATA.L     _stop
    00000248 <00000000>             .DATA.L     _zero




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000024C <00000000>             .DATA.L     _mpow
    00000250 <00000000>             .DATA.L     _p3
    00000254 <00000000>             .DATA.L     _isinteger
    00000258 <00000000>             .DATA.L     _pop_integer
    0000025C 80000000               .DATA.L     H'80000000
    00000260 <00000000>             .DATA.L     _abs
    00000264 <00000000>             .DATA.L     _alloc
    00000268 <00000000>             .DATA.L     _isminusone
    0000026C <00000000>             .DATA.L     _negate
    00000270 <00000000>             .DATA.L     _mp_numerator
    00000274 <00000000>             .DATA.L     _mp_denominator
    00000278 <00000000>             .DATA.L     _multiply
    0000027C <00000000>             .DATA.L     _quickfactor
    00000280 <00000000>             .DATA.L     _mroot
    00000284 <00000000>             .DATA.L     _push_symbol
    00000288 <00000000>             .DATA.L     _list
    0000028C              L1120:                            
          qpow.c   154                    return;
          qpow.c   155            }
          qpow.c   156    
          qpow.c   157            y = mpow(x, a);
    0000028C 65F2                   MOV.L       @R15,R5
    0000028E 480B                   JSR         @R8
    00000290 6493                   MOV         R9,R4
    00000292 6D03                   MOV         R0,R13
          qpow.c   158    
          qpow.c   159            mfree(x);
    00000294 D354                   MOV.L       L1137,R3   ; _mfree
    00000296 430B                   JSR         @R3
    00000298 6493                   MOV         R9,R4
          qpow.c   160    
          qpow.c   161            p3 = alloc();
    0000029A D254                   MOV.L       L1137+4,R2 ; _alloc
    0000029C 420B                   JSR         @R2
    0000029E 0009                   NOP
    000002A0 2B02                   MOV.L       R0,@R11
          qpow.c   162    
          qpow.c   163            p3->k = NUM;
    000002A2 6303                   MOV         R0,R3
    000002A4 60A3                   MOV         R10,R0
    000002A6 8038                   MOV.B       R0,@(8,R3)
          qpow.c   164    
          qpow.c   165            if (MSIGN(EXPO->u.q.a) == -1) {
    000002A8 60C2                   MOV.L       @R12,R0
    000002AA 6302                   MOV.L       @R0,R3
    000002AC E0F8                   MOV         #-8,R0
    000002AE 003E                   MOV.L       @(R0,R3),R0
    000002B0 88FF                   CMP/EQ      #-1,R0
    000002B2 8B09                   BF          L1121
          qpow.c   166                    p3->u.q.a = mint(1);
    000002B4 62B2                   MOV.L       @R11,R2
    000002B6 2F26                   MOV.L       R2,@-R15
    000002B8 D34D                   MOV.L       L1137+8,R3 ; _mint
    000002BA 430B                   JSR         @R3
    000002BC E401                   MOV         #1,R4
    000002BE 61F6                   MOV.L       @R15+,R1
    000002C0 2102                   MOV.L       R0,@R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          qpow.c   167                    p3->u.q.b = y;
    000002C2 63B2                   MOV.L       @R11,R3
    000002C4 A00B                   BRA         L1093
    000002C6 13D1                   MOV.L       R13,@(4,R3)
    000002C8              L1121:                            
          qpow.c   168            } else {
          qpow.c   169                    p3->u.q.a = y;
    000002C8 63B2                   MOV.L       @R11,R3
          qpow.c   170                    p3->u.q.b = mint(1);
    000002CA E104                   MOV         #4,R1
    000002CC 23D2                   MOV.L       R13,@R3
    000002CE 62B2                   MOV.L       @R11,R2
    000002D0 D347                   MOV.L       L1137+8,R3 ; _mint
    000002D2 312C                   ADD         R2,R1
    000002D4 2F16                   MOV.L       R1,@-R15
    000002D6 430B                   JSR         @R3
    000002D8 E401                   MOV         #1,R4
    000002DA 63F6                   MOV.L       @R15+,R3
    000002DC 2302                   MOV.L       R0,@R3
    000002DE              L1093:
          qpow.c   171            }
          qpow.c   172    
          qpow.c   173            push(p3);
    000002DE 64B2                   MOV.L       @R11,R4
          qpow.c   174    }
    000002E0              L1133:                            
    000002E0 4E0B                   JSR         @R14
    000002E2 0009                   NOP
    000002E4 7F04                   ADD         #4,R15
    000002E6 4F26                   LDS.L       @R15+,PR
    000002E8 68F6                   MOV.L       @R15+,R8
    000002EA 69F6                   MOV.L       @R15+,R9
    000002EC 6AF6                   MOV.L       @R15+,R10
    000002EE 6BF6                   MOV.L       @R15+,R11
    000002F0 6CF6                   MOV.L       @R15+,R12
    000002F2 6DF6                   MOV.L       @R15+,R13
    000002F4 000B                   RTS
    000002F6 6EF6                   MOV.L       @R15+,R14
          qpow.c   175    
          qpow.c   176    //-----------------------------------------------------------------------------
          qpow.c   177    //
          qpow.c   178    //      Normalize the angle of unit imaginary, i.e. (-1) ^ N
          qpow.c   179    //
          qpow.c   180    //      Input:          N on stack (must be rational, not float)
          qpow.c   181    //
          qpow.c   182    //      Output:         Result on stack
          qpow.c   183    //
          qpow.c   184    //      Note:
          qpow.c   185    //
          qpow.c   186    //      n = q * d + r
          qpow.c   187    //
          qpow.c   188    //      Example:
          qpow.c   189    //                                              n       d       q       r
          qpow.c   190    //
          qpow.c   191    //      (-1)^(8/3)      ->       (-1)^(2/3)     8       3       2       2
          qpow.c   192    //      (-1)^(7/3)      ->       (-1)^(1/3)     7       3       2       1
          qpow.c   193    //      (-1)^(5/3)      ->      -(-1)^(2/3)     5       3       1       2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          qpow.c   194    //      (-1)^(4/3)      ->      -(-1)^(1/3)     4       3       1       1
          qpow.c   195    //      (-1)^(2/3)      ->       (-1)^(2/3)     2       3       0       2
          qpow.c   196    //      (-1)^(1/3)      ->       (-1)^(1/3)     1       3       0       1
          qpow.c   197    //
          qpow.c   198    //      (-1)^(-1/3)     ->      -(-1)^(2/3)     -1      3       -1      2
          qpow.c   199    //      (-1)^(-2/3)     ->      -(-1)^(1/3)     -2      3       -1      1
          qpow.c   200    //      (-1)^(-4/3)     ->       (-1)^(2/3)     -4      3       -2      2
          qpow.c   201    //      (-1)^(-5/3)     ->       (-1)^(1/3)     -5      3       -2      1
          qpow.c   202    //      (-1)^(-7/3)     ->      -(-1)^(2/3)     -7      3       -3      2
          qpow.c   203    //      (-1)^(-8/3)     ->      -(-1)^(1/3)     -8      3       -3      1
          qpow.c   204    //
          qpow.c   205    //-----------------------------------------------------------------------------
          qpow.c   206    
          qpow.c   207    #define A p1
          qpow.c   208    #define Q p2
          qpow.c   209    #define R p3
          qpow.c   210    
          qpow.c   211    static void
          qpow.c   212    normalize_angle(void)
    000002F8              __$normalize_angle:              ; function: normalize_angle
                                                           ; frame size=24
    000002F8 2FE6                   MOV.L       R14,@-R15
    000002FA 2FD6                   MOV.L       R13,@-R15
    000002FC 2FC6                   MOV.L       R12,@-R15
    000002FE 2FB6                   MOV.L       R11,@-R15
    00000300 2FA6                   MOV.L       R10,@-R15
    00000302 4F22                   STS.L       PR,@-R15
          qpow.c   213    {
          qpow.c   214            save();
    00000304 D33B                   MOV.L       L1137+12,R3; _save
    00000306 430B                   JSR         @R3
    00000308 0009                   NOP
          qpow.c   215    
          qpow.c   216            A = pop();
    0000030A DB3B                   MOV.L       L1137+16,R11; _pop
    0000030C DD3B                   MOV.L       L1137+20,R13; _p1
    0000030E 4B0B                   JSR         @R11
    00000310 0009                   NOP
    00000312 2D02                   MOV.L       R0,@R13
          qpow.c   217    
          qpow.c   218            // integer exponent?
          qpow.c   219    
          qpow.c   220            if (isinteger(A)) {
    00000314 DA3A                   MOV.L       L1137+24,R10; _push_integer
    00000316 D23B                   MOV.L       L1137+28,R2; _isinteger
    00000318 420B                   JSR         @R2
    0000031A 6403                   MOV         R0,R4
    0000031C 2008                   TST         R0,R0
    0000031E 890B                   BT          L1123
          qpow.c   221                    if (A->u.q.a[0] & 1)
    00000320 60D2                   MOV.L       @R13,R0
    00000322 6002                   MOV.L       @R0,R0
    00000324 6002                   MOV.L       @R0,R0
    00000326 C801                   TST         #1,R0
    00000328 8901                   BT          L1124
          qpow.c   222                            push_integer(-1); // odd exponent
    0000032A A001                   BRA         L1134




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000032C E4FF                   MOV         #-1,R4
    0000032E              L1124:                            
          qpow.c   223                    else
          qpow.c   224                            push_integer(1); // even exponent
    0000032E E401                   MOV         #1,R4
    00000330              L1134:                            
    00000330 4A0B                   JSR         @R10
    00000332 0009                   NOP
    00000334 A037                   BRA         L1094
    00000336 0009                   NOP
    00000338              L1123:                            
          qpow.c   225                    restore();
          qpow.c   226                    return;
          qpow.c   227            }
          qpow.c   228    
          qpow.c   229            // floor
          qpow.c   230    
          qpow.c   231            push(A);
    00000338 DC33                   MOV.L       L1137+32,R12; _push
    0000033A 4C0B                   JSR         @R12
    0000033C 64D2                   MOV.L       @R13,R4
          qpow.c   232            bignum_truncate();
    0000033E D233                   MOV.L       L1137+36,R2; _bignum_truncate
    00000340 420B                   JSR         @R2
    00000342 0009                   NOP
          qpow.c   233            Q = pop();
    00000344 DE32                   MOV.L       L1137+40,R14; _p2
    00000346 4B0B                   JSR         @R11
    00000348 0009                   NOP
    0000034A 2E02                   MOV.L       R0,@R14
          qpow.c   234    
          qpow.c   235            if (isnegativenumber(A)) {
    0000034C D331                   MOV.L       L1137+44,R3; _isnegativenumber
    0000034E 430B                   JSR         @R3
    00000350 64D2                   MOV.L       @R13,R4
    00000352 2008                   TST         R0,R0
    00000354 8909                   BT          L1127
          qpow.c   236                    push(Q);
    00000356 4C0B                   JSR         @R12
    00000358 64E2                   MOV.L       @R14,R4
          qpow.c   237                    push_integer(-1);
    0000035A 4A0B                   JSR         @R10
    0000035C E4FF                   MOV         #-1,R4
          qpow.c   238                    add();
    0000035E D32E                   MOV.L       L1137+48,R3; _add
    00000360 430B                   JSR         @R3
    00000362 0009                   NOP
          qpow.c   239                    Q = pop();
    00000364 4B0B                   JSR         @R11
    00000366 0009                   NOP
    00000368 2E02                   MOV.L       R0,@R14
    0000036A              L1127:                            
          qpow.c   240            }
          qpow.c   241    
          qpow.c   242            // remainder (always positive)
          qpow.c   243    
          qpow.c   244            push(A);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000036A 4C0B                   JSR         @R12
    0000036C 64D2                   MOV.L       @R13,R4
          qpow.c   245            push(Q);
    0000036E 4C0B                   JSR         @R12
    00000370 64E2                   MOV.L       @R14,R4
          qpow.c   246            subtract();
    00000372 D22A                   MOV.L       L1137+52,R2; _subtract
    00000374 420B                   JSR         @R2
    00000376 0009                   NOP
          qpow.c   247            R = pop();
    00000378 4B0B                   JSR         @R11
    0000037A 0009                   NOP
    0000037C D328                   MOV.L       L1137+56,R3; _p3
    0000037E 2302                   MOV.L       R0,@R3
          qpow.c   248    
          qpow.c   249            // remainder becomes new angle
          qpow.c   250    
          qpow.c   251            push_symbol(POWER);
    00000380 D228                   MOV.L       L1137+60,R2; _push_symbol
    00000382 420B                   JSR         @R2
    00000384 E454                   MOV         #84,R4
          qpow.c   252            push_integer(-1);
    00000386 4A0B                   JSR         @R10
    00000388 E4FF                   MOV         #-1,R4
          qpow.c   253            push(R);
    0000038A D325                   MOV.L       L1137+56,R3; _p3
    0000038C 4C0B                   JSR         @R12
    0000038E 6432                   MOV.L       @R3,R4
          qpow.c   254            list(3);
    00000390 D225                   MOV.L       L1137+64,R2; _list
    00000392 420B                   JSR         @R2
    00000394 E403                   MOV         #3,R4
          qpow.c   255    
          qpow.c   256            // negate if quotient is odd
          qpow.c   257    
          qpow.c   258            if (Q->u.q.a[0] & 1)
    00000396 60E2                   MOV.L       @R14,R0
    00000398 6002                   MOV.L       @R0,R0
    0000039A 6002                   MOV.L       @R0,R0
    0000039C C801                   TST         #1,R0
    0000039E 8902                   BT          L1094
          qpow.c   259                    negate();
    000003A0 D222                   MOV.L       L1137+68,R2; _negate
    000003A2 420B                   JSR         @R2
    000003A4 0009                   NOP
    000003A6              L1094:
          qpow.c   260    
          qpow.c   261            restore();
    000003A6 4F26                   LDS.L       @R15+,PR
    000003A8 D321                   MOV.L       L1137+72,R3; _restore
    000003AA 6AF6                   MOV.L       @R15+,R10
    000003AC 6BF6                   MOV.L       @R15+,R11
    000003AE 6CF6                   MOV.L       @R15+,R12
    000003B0 6DF6                   MOV.L       @R15+,R13
    000003B2 432B                   JMP         @R3
    000003B4 6EF6                   MOV.L       @R15+,R14
          qpow.c   262    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          qpow.c   263    
          qpow.c   264    static int
          qpow.c   265    is_small_integer(U *p)
    000003B6              __$is_small_integer:             ; function: is_small_integer
                                                           ; frame size=8
    000003B6 2FE6                   MOV.L       R14,@-R15
    000003B8 4F22                   STS.L       PR,@-R15
          qpow.c   266    {
          qpow.c   267            if (isinteger(p) && MLENGTH(p->u.q.a) == 1 && (p->u.q.a[0] & 0x80000000) == 0)
    000003BA D312                   MOV.L       L1137+28,R3; _isinteger
    000003BC 430B                   JSR         @R3
    000003BE 6E43                   MOV         R4,R14
    000003C0 2008                   TST         R0,R0
    000003C2 890D                   BT          L1129
    000003C4 63E2                   MOV.L       @R14,R3
    000003C6 E0FC                   MOV         #-4,R0
    000003C8 003E                   MOV.L       @(R0,R3),R0
    000003CA 8801                   CMP/EQ      #1,R0
    000003CC 8B08                   BF          L1129
    000003CE 62E2                   MOV.L       @R14,R2
    000003D0 D318                   MOV.L       L1137+76,R3; H'80000000
    000003D2 6122                   MOV.L       @R2,R1
    000003D4 2138                   TST         R3,R1
    000003D6 8B03                   BF          L1129
          qpow.c   268                    return 1;
    000003D8 4F26                   LDS.L       @R15+,PR
    000003DA E001                   MOV         #1,R0
    000003DC 000B                   RTS
    000003DE 6EF6                   MOV.L       @R15+,R14
    000003E0              L1129:                            
          qpow.c   269            else
          qpow.c   270                    return 0;
    000003E0 E000                   MOV         #0,R0
          qpow.c   271    }
    000003E2              L1130:                            
    000003E2 4F26                   LDS.L       @R15+,PR
    000003E4 000B                   RTS
    000003E6 6EF6                   MOV.L       @R15+,R14
    000003E8              L1137:                            
    000003E8 <00000000>             .DATA.L     _mfree
    000003EC <00000000>             .DATA.L     _alloc
    000003F0 <00000000>             .DATA.L     _mint
    000003F4 <00000000>             .DATA.L     _save
    000003F8 <00000000>             .DATA.L     _pop
    000003FC <00000000>             .DATA.L     _p1
    00000400 <00000000>             .DATA.L     _push_integer
    00000404 <00000000>             .DATA.L     _isinteger
    00000408 <00000000>             .DATA.L     _push
    0000040C <00000000>             .DATA.L     _bignum_truncate
    00000410 <00000000>             .DATA.L     _p2
    00000414 <00000000>             .DATA.L     _isnegativenumber
    00000418 <00000000>             .DATA.L     _add
    0000041C <00000000>             .DATA.L     _subtract
    00000420 <00000000>             .DATA.L     _p3
    00000424 <00000000>             .DATA.L     _push_symbol
    00000428 <00000000>             .DATA.L     _list
    0000042C <00000000>             .DATA.L     _negate




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000430 <00000000>             .DATA.L     _restore
    00000434 80000000               .DATA.L     H'80000000
C   00000000              L1071:
    00000000 6469766964             .SDATA      "divide by zero"
             6520627920   
             7A65726F     
    0000000E 00                     .DATA.B     H'00






















































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:25  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      271



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000438 Byte(s)
CONSTANT SECTION (C):                               0000000F Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000447 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           32
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           1
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            61






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkCC27.tmp 

