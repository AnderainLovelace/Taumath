SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\roots.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         roots.c     1    #include "stdafx.h"
         roots.c     2    #include "defs.h"
         roots.c     3    
         roots.c     4    extern void sort_stack(int);
         roots.c     5    void roots(void);
         roots.c     6    static void roots2(void);
         roots.c     7    static void roots3(void);
         roots.c     8    static void mini_solve(void);
         roots.c     9    
         roots.c    10    #define POLY p1
         roots.c    11    #define X p2
         roots.c    12    #define A p3
         roots.c    13    #define B p4
         roots.c    14    #define C p5
         roots.c    15    #define Y p6
         roots.c    16    
         roots.c    17    void
         roots.c    18    eval_roots(void)
P   00000000              _eval_roots:                     ; function: eval_roots
                                                           ; frame size=28
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 2FB6                   MOV.L       R11,@-R15
    00000008 2FA6                   MOV.L       R10,@-R15
    0000000A 2F96                   MOV.L       R9,@-R15
    0000000C 4F22                   STS.L       PR,@-R15
    0000000E D933                   MOV.L       L1206+8,R9 ; _pop
    00000010 DA33                   MOV.L       L1206+12,R10; _eval
    00000012 DB34                   MOV.L       L1206+16,R11; _symtab
    00000014 DC34                   MOV.L       L1206+20,R12; _push
    00000016 DD35                   MOV.L       L1206+24,R13; _p1
    00000018 DE35                   MOV.L       L1206+28,R14; _p2
         roots.c    19    {
         roots.c    20            // A == B -> A - B
         roots.c    21    
         roots.c    22            p2 = cadr(p1);
    0000001A 63D2                   MOV.L       @R13,R3
    0000001C 8438                   MOV.B       @(8,R3),R0
    0000001E 2008                   TST         R0,R0
    00000020 8B02                   BF          L1098
    00000022 62D2                   MOV.L       @R13,R2
    00000024 A004                   BRA         L1100
    00000026 5221                   MOV.L       @(4,R2),R2
    00000028              L1098:                            
    00000028 9354                   MOV.W       L1206,R3   ; H'0570
    0000002A D12E                   MOV.L       L1206+16,R1; _symtab
    0000002C 6212                   MOV.L       @R1,R2
    0000002E 323C                   ADD         R3,R2
    00000030              L1100:                            
    00000030 8428                   MOV.B       @(8,R2),R0
    00000032 2008                   TST         R0,R0
    00000034 8B0C                   BF          L1097
    00000036 63D2                   MOV.L       @R13,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000038 8438                   MOV.B       @(8,R3),R0
    0000003A 2008                   TST         R0,R0
    0000003C 8B02                   BF          L1099
    0000003E 62D2                   MOV.L       @R13,R2
    00000040 A004                   BRA         L1101
    00000042 5221                   MOV.L       @(4,R2),R2
    00000044              L1099:                            
    00000044 9346                   MOV.W       L1206,R3   ; H'0570
    00000046 D127                   MOV.L       L1206+16,R1; _symtab
    00000048 6212                   MOV.L       @R1,R2
    0000004A 323C                   ADD         R3,R2
    0000004C              L1101:                            
    0000004C A004                   BRA         L1102
    0000004E 6322                   MOV.L       @R2,R3
    00000050              L1097:                            
    00000050 9240                   MOV.W       L1206,R2   ; H'0570
    00000052 D124                   MOV.L       L1206+16,R1; _symtab
    00000054 6312                   MOV.L       @R1,R3
    00000056 332C                   ADD         R2,R3
    00000058              L1102:                            
    00000058 2E32                   MOV.L       R3,@R14
         roots.c    23    
         roots.c    24            if (car(p2) == symbol(SETQ) || car(p2) == symbol(TESTEQ)) {
    0000005A 6133                   MOV         R3,R1
    0000005C 8418                   MOV.B       @(8,R1),R0
    0000005E 2008                   TST         R0,R0
    00000060 8B02                   BF          L1105
    00000062 62E2                   MOV.L       @R14,R2
    00000064 A004                   BRA         L1107
    00000066 6222                   MOV.L       @R2,R2
    00000068              L1105:                            
    00000068 9334                   MOV.W       L1206,R3   ; H'0570
    0000006A D11E                   MOV.L       L1206+16,R1; _symtab
    0000006C 6212                   MOV.L       @R1,R2
    0000006E 323C                   ADD         R3,R2
    00000070              L1107:                            
    00000070 9331                   MOV.W       L1206+2,R3 ; H'0474
    00000072 60B2                   MOV.L       @R11,R0
    00000074 303C                   ADD         R3,R0
    00000076 3200                   CMP/EQ      R0,R2
    00000078 8944                   BT          L1082
    0000007A 62E2                   MOV.L       @R14,R2
    0000007C 8428                   MOV.B       @(8,R2),R0
    0000007E 2008                   TST         R0,R0
    00000080 8B02                   BF          L1106
    00000082 61E2                   MOV.L       @R14,R1
    00000084 A003                   BRA         L1108
    00000086 6112                   MOV.L       @R1,R1
    00000088              L1106:                            
    00000088 9224                   MOV.W       L1206,R2   ; H'0570
    0000008A 61B2                   MOV.L       @R11,R1
    0000008C 312C                   ADD         R2,R1
    0000008E              L1108:                            
    0000008E 9323                   MOV.W       L1206+4,R3 ; H'0510
    00000090 60B2                   MOV.L       @R11,R0
    00000092 303C                   ADD         R3,R0
    00000094 3100                   CMP/EQ      R0,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000096 8935                   BT          L1082
         roots.c    25                    push(cadr(p2));
         roots.c    26                    eval();
         roots.c    27                    push(caddr(p2));
         roots.c    28                    eval();
         roots.c    29                    subtract();
         roots.c    30            } else {
         roots.c    31                    push(p2);
    00000098 4C0B                   JSR         @R12
    0000009A 64E2                   MOV.L       @R14,R4
         roots.c    32                    eval();
    0000009C 4A0B                   JSR         @R10
    0000009E 0009                   NOP
         roots.c    33                    p2 = pop();
    000000A0 490B                   JSR         @R9
    000000A2 0009                   NOP
    000000A4 2E02                   MOV.L       R0,@R14
         roots.c    34                    if (car(p2) == symbol(SETQ) || car(p2) == symbol(TESTEQ)) {
    000000A6 6203                   MOV         R0,R2
    000000A8 8428                   MOV.B       @(8,R2),R0
    000000AA 2008                   TST         R0,R0
    000000AC 8B02                   BF          L1112
    000000AE 62E2                   MOV.L       @R14,R2
    000000B0 A004                   BRA         L1114
    000000B2 6322                   MOV.L       @R2,R3
    000000B4              L1112:                            
    000000B4 920E                   MOV.W       L1206,R2   ; H'0570
    000000B6 D10B                   MOV.L       L1206+16,R1; _symtab
    000000B8 6312                   MOV.L       @R1,R3
    000000BA 332C                   ADD         R2,R3
    000000BC              L1114:                            
    000000BC 920B                   MOV.W       L1206+2,R2 ; H'0474
    000000BE 60B2                   MOV.L       @R11,R0
    000000C0 302C                   ADD         R2,R0
    000000C2 3300                   CMP/EQ      R0,R3
    000000C4 891E                   BT          L1082
    000000C6 63E2                   MOV.L       @R14,R3
    000000C8 8438                   MOV.B       @(8,R3),R0
    000000CA 2008                   TST         R0,R0
    000000CC 8B12                   BF          L1113
    000000CE 61E2                   MOV.L       @R14,R1
    000000D0 A013                   BRA         L1115
    000000D2 6112                   MOV.L       @R1,R1
    000000D4              L1206:                            
    000000D4 0570                   .DATA.W     H'0570
    000000D6 0474                   .DATA.W     H'0474
    000000D8 0510                   .DATA.W     H'0510
    000000DA 0000                   .DATA.W     0
    000000DC <00000000>             .DATA.L     _pop
    000000E0 <00000000>             .DATA.L     _eval
    000000E4 <00000000>             .DATA.L     _symtab
    000000E8 <00000000>             .DATA.L     _push
    000000EC <00000000>             .DATA.L     _p1
    000000F0 <00000000>             .DATA.L     _p2
    000000F4              L1113:                            
    000000F4 9366                   MOV.W       L1207,R3   ; H'0570
    000000F6 61B2                   MOV.L       @R11,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000F8 313C                   ADD         R3,R1
    000000FA              L1115:                            
    000000FA 9364                   MOV.W       L1207+2,R3 ; H'0510
    000000FC 62B2                   MOV.L       @R11,R2
    000000FE 323C                   ADD         R3,R2
    00000100 3120                   CMP/EQ      R2,R1
    00000102 8B76                   BF          L1110
    00000104              L1082:
         roots.c    35                            push(cadr(p2));
    00000104 64E2                   MOV.L       @R14,R4
    00000106 8448                   MOV.B       @(8,R4),R0
    00000108 2008                   TST         R0,R0
    0000010A 8B02                   BF          L1117
    0000010C 64E2                   MOV.L       @R14,R4
    0000010E A004                   BRA         L1119
    00000110 5441                   MOV.L       @(4,R4),R4
    00000112              L1117:                            
    00000112 9357                   MOV.W       L1207,R3   ; H'0570
    00000114 D22C                   MOV.L       L1207+4,R2 ; _symtab
    00000116 6422                   MOV.L       @R2,R4
    00000118 343C                   ADD         R3,R4
    0000011A              L1119:                            
    0000011A 8448                   MOV.B       @(8,R4),R0
    0000011C 2008                   TST         R0,R0
    0000011E 8B0C                   BF          L1116
    00000120 64E2                   MOV.L       @R14,R4
    00000122 8448                   MOV.B       @(8,R4),R0
    00000124 2008                   TST         R0,R0
    00000126 8B02                   BF          L1118
    00000128 64E2                   MOV.L       @R14,R4
    0000012A A004                   BRA         L1120
    0000012C 5441                   MOV.L       @(4,R4),R4
    0000012E              L1118:                            
    0000012E 9349                   MOV.W       L1207,R3   ; H'0570
    00000130 D225                   MOV.L       L1207+4,R2 ; _symtab
    00000132 6422                   MOV.L       @R2,R4
    00000134 343C                   ADD         R3,R4
    00000136              L1120:                            
    00000136 A004                   BRA         L1121
    00000138 6442                   MOV.L       @R4,R4
    0000013A              L1116:                            
    0000013A 9343                   MOV.W       L1207,R3   ; H'0570
    0000013C D222                   MOV.L       L1207+4,R2 ; _symtab
    0000013E 6422                   MOV.L       @R2,R4
    00000140 343C                   ADD         R3,R4
    00000142              L1121:                            
    00000142 4C0B                   JSR         @R12
    00000144 0009                   NOP
         roots.c    36                            eval();
    00000146 4A0B                   JSR         @R10
    00000148 0009                   NOP
         roots.c    37                            push(caddr(p2));
    0000014A 64E2                   MOV.L       @R14,R4
    0000014C 8448                   MOV.B       @(8,R4),R0
    0000014E 2008                   TST         R0,R0
    00000150 8B02                   BF          L1124
    00000152 64E2                   MOV.L       @R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000154 A004                   BRA         L1129
    00000156 5441                   MOV.L       @(4,R4),R4
    00000158              L1124:                            
    00000158 9334                   MOV.W       L1207,R3   ; H'0570
    0000015A D21B                   MOV.L       L1207+4,R2 ; _symtab
    0000015C 6422                   MOV.L       @R2,R4
    0000015E 343C                   ADD         R3,R4
    00000160              L1129:                            
    00000160 8448                   MOV.B       @(8,R4),R0
    00000162 2008                   TST         R0,R0
    00000164 8B0C                   BF          L1123
    00000166 64E2                   MOV.L       @R14,R4
    00000168 8448                   MOV.B       @(8,R4),R0
    0000016A 2008                   TST         R0,R0
    0000016C 8B02                   BF          L1125
    0000016E 64E2                   MOV.L       @R14,R4
    00000170 A004                   BRA         L1130
    00000172 5441                   MOV.L       @(4,R4),R4
    00000174              L1125:                            
    00000174 9326                   MOV.W       L1207,R3   ; H'0570
    00000176 D214                   MOV.L       L1207+4,R2 ; _symtab
    00000178 6422                   MOV.L       @R2,R4
    0000017A 343C                   ADD         R3,R4
    0000017C              L1130:                            
    0000017C A004                   BRA         L1131
    0000017E 5441                   MOV.L       @(4,R4),R4
    00000180              L1123:                            
    00000180 9320                   MOV.W       L1207,R3   ; H'0570
    00000182 D211                   MOV.L       L1207+4,R2 ; _symtab
    00000184 6422                   MOV.L       @R2,R4
    00000186 343C                   ADD         R3,R4
    00000188              L1131:                            
    00000188 8448                   MOV.B       @(8,R4),R0
    0000018A 2008                   TST         R0,R0
    0000018C 8B24                   BF          L1122
    0000018E 64E2                   MOV.L       @R14,R4
    00000190 8448                   MOV.B       @(8,R4),R0
    00000192 2008                   TST         R0,R0
    00000194 8B02                   BF          L1127
    00000196 64E2                   MOV.L       @R14,R4
    00000198 A004                   BRA         L1132
    0000019A 5441                   MOV.L       @(4,R4),R4
    0000019C              L1127:                            
    0000019C 9312                   MOV.W       L1207,R3   ; H'0570
    0000019E D20A                   MOV.L       L1207+4,R2 ; _symtab
    000001A0 6422                   MOV.L       @R2,R4
    000001A2 343C                   ADD         R3,R4
    000001A4              L1132:                            
    000001A4 8448                   MOV.B       @(8,R4),R0
    000001A6 2008                   TST         R0,R0
    000001A8 8B10                   BF          L1126
    000001AA 64E2                   MOV.L       @R14,R4
    000001AC 8448                   MOV.B       @(8,R4),R0
    000001AE 2008                   TST         R0,R0
    000001B0 8B02                   BF          L1128
    000001B2 64E2                   MOV.L       @R14,R4
    000001B4 A004                   BRA         L1133




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001B6 5441                   MOV.L       @(4,R4),R4
    000001B8              L1128:                            
    000001B8 9304                   MOV.W       L1207,R3   ; H'0570
    000001BA D203                   MOV.L       L1207+4,R2 ; _symtab
    000001BC 6422                   MOV.L       @R2,R4
    000001BE 343C                   ADD         R3,R4
    000001C0              L1133:                            
    000001C0 A008                   BRA         L1134
    000001C2 5441                   MOV.L       @(4,R4),R4
    000001C4              L1207:                            
    000001C4 0570                   .DATA.W     H'0570
    000001C6 0510                   .DATA.W     H'0510
    000001C8 <00000000>             .DATA.L     _symtab
    000001CC              L1126:                            
    000001CC 936C                   MOV.W       L1208,R3   ; H'0570
    000001CE D237                   MOV.L       L1208+4,R2 ; _symtab
    000001D0 6422                   MOV.L       @R2,R4
    000001D2 343C                   ADD         R3,R4
    000001D4              L1134:                            
    000001D4 A004                   BRA         L1135
    000001D6 6442                   MOV.L       @R4,R4
    000001D8              L1122:                            
    000001D8 9366                   MOV.W       L1208,R3   ; H'0570
    000001DA D234                   MOV.L       L1208+4,R2 ; _symtab
    000001DC 6422                   MOV.L       @R2,R4
    000001DE 343C                   ADD         R3,R4
    000001E0              L1135:                            
    000001E0 4C0B                   JSR         @R12
    000001E2 0009                   NOP
         roots.c    38                            eval();
    000001E4 4A0B                   JSR         @R10
    000001E6 0009                   NOP
         roots.c    39                            subtract();
    000001E8 D331                   MOV.L       L1208+8,R3 ; _subtract
    000001EA 430B                   JSR         @R3
    000001EC 0009                   NOP
    000001EE A002                   BRA         L1109
    000001F0 0009                   NOP
    000001F2              L1110:                            
         roots.c    40                    } else
         roots.c    41                            push(p2);
    000001F2 4C0B                   JSR         @R12
    000001F4 64E2                   MOV.L       @R14,R4
    000001F6              L1109:                            
         roots.c    42            }
         roots.c    43    
         roots.c    44            // 2nd arg, x
         roots.c    45    
         roots.c    46            push(caddr(p1));
    000001F6 64D2                   MOV.L       @R13,R4
    000001F8 8448                   MOV.B       @(8,R4),R0
    000001FA 2008                   TST         R0,R0
    000001FC 8B02                   BF          L1139
    000001FE 64D2                   MOV.L       @R13,R4
    00000200 A004                   BRA         L1144
    00000202 5441                   MOV.L       @(4,R4),R4
    00000204              L1139:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000204 9350                   MOV.W       L1208,R3   ; H'0570
    00000206 D229                   MOV.L       L1208+4,R2 ; _symtab
    00000208 6422                   MOV.L       @R2,R4
    0000020A 343C                   ADD         R3,R4
    0000020C              L1144:                            
    0000020C 8448                   MOV.B       @(8,R4),R0
    0000020E 2008                   TST         R0,R0
    00000210 8B0C                   BF          L1138
    00000212 64D2                   MOV.L       @R13,R4
    00000214 8448                   MOV.B       @(8,R4),R0
    00000216 2008                   TST         R0,R0
    00000218 8B02                   BF          L1140
    0000021A 64D2                   MOV.L       @R13,R4
    0000021C A004                   BRA         L1145
    0000021E 5441                   MOV.L       @(4,R4),R4
    00000220              L1140:                            
    00000220 9342                   MOV.W       L1208,R3   ; H'0570
    00000222 D222                   MOV.L       L1208+4,R2 ; _symtab
    00000224 6422                   MOV.L       @R2,R4
    00000226 343C                   ADD         R3,R4
    00000228              L1145:                            
    00000228 A004                   BRA         L1146
    0000022A 5441                   MOV.L       @(4,R4),R4
    0000022C              L1138:                            
    0000022C 933C                   MOV.W       L1208,R3   ; H'0570
    0000022E D21F                   MOV.L       L1208+4,R2 ; _symtab
    00000230 6422                   MOV.L       @R2,R4
    00000232 343C                   ADD         R3,R4
    00000234              L1146:                            
    00000234 8448                   MOV.B       @(8,R4),R0
    00000236 2008                   TST         R0,R0
    00000238 8B20                   BF          L1137
    0000023A 64D2                   MOV.L       @R13,R4
    0000023C 8448                   MOV.B       @(8,R4),R0
    0000023E 2008                   TST         R0,R0
    00000240 8B02                   BF          L1142
    00000242 64D2                   MOV.L       @R13,R4
    00000244 A004                   BRA         L1147
    00000246 5441                   MOV.L       @(4,R4),R4
    00000248              L1142:                            
    00000248 932E                   MOV.W       L1208,R3   ; H'0570
    0000024A D218                   MOV.L       L1208+4,R2 ; _symtab
    0000024C 6422                   MOV.L       @R2,R4
    0000024E 343C                   ADD         R3,R4
    00000250              L1147:                            
    00000250 8448                   MOV.B       @(8,R4),R0
    00000252 2008                   TST         R0,R0
    00000254 8B0C                   BF          L1141
    00000256 64D2                   MOV.L       @R13,R4
    00000258 8448                   MOV.B       @(8,R4),R0
    0000025A 2008                   TST         R0,R0
    0000025C 8B02                   BF          L1143
    0000025E 64D2                   MOV.L       @R13,R4
    00000260 A004                   BRA         L1148
    00000262 5441                   MOV.L       @(4,R4),R4
    00000264              L1143:                            
    00000264 9320                   MOV.W       L1208,R3   ; H'0570




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000266 D211                   MOV.L       L1208+4,R2 ; _symtab
    00000268 6422                   MOV.L       @R2,R4
    0000026A 343C                   ADD         R3,R4
    0000026C              L1148:                            
    0000026C A004                   BRA         L1149
    0000026E 5441                   MOV.L       @(4,R4),R4
    00000270              L1141:                            
    00000270 931A                   MOV.W       L1208,R3   ; H'0570
    00000272 D20E                   MOV.L       L1208+4,R2 ; _symtab
    00000274 6422                   MOV.L       @R2,R4
    00000276 343C                   ADD         R3,R4
    00000278              L1149:                            
    00000278 A004                   BRA         L1150
    0000027A 6442                   MOV.L       @R4,R4
    0000027C              L1137:                            
    0000027C 9314                   MOV.W       L1208,R3   ; H'0570
    0000027E D20B                   MOV.L       L1208+4,R2 ; _symtab
    00000280 6422                   MOV.L       @R2,R4
    00000282 343C                   ADD         R3,R4
    00000284              L1150:                            
    00000284 4C0B                   JSR         @R12
    00000286 0009                   NOP
         roots.c    47            eval();
    00000288 4A0B                   JSR         @R10
    0000028A 0009                   NOP
         roots.c    48            p2 = pop();
    0000028C 490B                   JSR         @R9
    0000028E 0009                   NOP
    00000290 2E02                   MOV.L       R0,@R14
         roots.c    49            if (p2 == symbol(NIL))
    00000292 6103                   MOV         R0,R1
    00000294 9308                   MOV.W       L1208,R3   ; H'0570
    00000296 62B2                   MOV.L       @R11,R2
    00000298 323C                   ADD         R3,R2
    0000029A 3120                   CMP/EQ      R2,R1
    0000029C 8B0C                   BF          L1151
         roots.c    50                    guess();
    0000029E D205                   MOV.L       L1208+12,R2; _guess
    000002A0 420B                   JSR         @R2
    000002A2 0009                   NOP
    000002A4 A00A                   BRA         L1152
    000002A6 0009                   NOP
    000002A8              L1208:                            
    000002A8 0570                   .DATA.W     H'0570
    000002AA 0000                   .DATA.W     0
    000002AC <00000000>             .DATA.L     _symtab
    000002B0 <00000000>             .DATA.L     _subtract
    000002B4 <00000000>             .DATA.L     _guess
    000002B8              L1151:                            
         roots.c    51            else
         roots.c    52                    push(p2);
    000002B8 4C0B                   JSR         @R12
    000002BA 64E2                   MOV.L       @R14,R4
    000002BC              L1152:                            
         roots.c    53    
         roots.c    54            p2 = pop();
    000002BC 490B                   JSR         @R9




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002BE 0009                   NOP
         roots.c    55            p1 = pop();
    000002C0 490B                   JSR         @R9
    000002C2 2E02                   MOV.L       R0,@R14
    000002C4 2D02                   MOV.L       R0,@R13
         roots.c    56    
         roots.c    57            if (!ispoly(p1, p2))
    000002C6 65E2                   MOV.L       @R14,R5
    000002C8 D23F                   MOV.L       L1209,R2   ; _ispoly
    000002CA 420B                   JSR         @R2
    000002CC 6403                   MOV         R0,R4
    000002CE 2008                   TST         R0,R0
    000002D0 8B03                   BF          L1153
         roots.c    58                    stop("roots: 1st argument is not a polynomial");
    000002D2 D43E                   MOV.L       L1209+4,R4 ; L1065
    000002D4 D23E                   MOV.L       L1209+8,R2 ; _stop
    000002D6 420B                   JSR         @R2
    000002D8 0009                   NOP
    000002DA              L1153:                            
         roots.c    59    
         roots.c    60            push(p1);
    000002DA 4C0B                   JSR         @R12
    000002DC 64D2                   MOV.L       @R13,R4
         roots.c    61            push(p2);
    000002DE 4C0B                   JSR         @R12
    000002E0 64E2                   MOV.L       @R14,R4
         roots.c    62    
         roots.c    63            roots();
    000002E2 4F26                   LDS.L       @R15+,PR
    000002E4 69F6                   MOV.L       @R15+,R9
    000002E6 6AF6                   MOV.L       @R15+,R10
    000002E8 6BF6                   MOV.L       @R15+,R11
    000002EA 6CF6                   MOV.L       @R15+,R12
    000002EC 6DF6                   MOV.L       @R15+,R13
    000002EE 6EF6                   MOV.L       @R15+,R14
         roots.c    64    }
         roots.c    65    
         roots.c    66    void
         roots.c    67    roots(void)
    000002F0              _roots:                          ; function: roots
                                                           ; frame size=20
    000002F0 2FE6                   MOV.L       R14,@-R15
    000002F2 2FD6                   MOV.L       R13,@-R15
    000002F4 2FC6                   MOV.L       R12,@-R15
    000002F6 2FB6                   MOV.L       R11,@-R15
    000002F8 4F22                   STS.L       PR,@-R15
         roots.c    68    {
         roots.c    69            int h, i, n;
         roots.c    70            h = tos - 2;
    000002FA DB36                   MOV.L       L1209+12,R11; _tos
    000002FC 6CB2                   MOV.L       @R11,R12
         roots.c    71            roots2();
    000002FE B041                   BSR         __$roots2
    00000300 7CFE                   ADD         #-2,R12
         roots.c    72            n = tos - h;
    00000302 6EB2                   MOV.L       @R11,R14
    00000304 3EC8                   SUB         R12,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         roots.c    73            if (n == 0)
    00000306 2EE8                   TST         R14,R14
    00000308 8B03                   BF          L1154
         roots.c    74                    stop("roots: the polynomial is not factorable, try nroots");
    0000030A D433                   MOV.L       L1209+16,R4; L1070
    0000030C D330                   MOV.L       L1209+8,R3 ; _stop
    0000030E 430B                   JSR         @R3
    00000310 0009                   NOP
    00000312              L1154:                            
         roots.c    75            if (n == 1)
    00000312 60E3                   MOV         R14,R0
    00000314 8801                   CMP/EQ      #1,R0
    00000316 892F                   BT          L1156
         roots.c    76                    return;
         roots.c    77            sort_stack(n);
    00000318 D330                   MOV.L       L1209+20,R3; _sort_stack
    0000031A 430B                   JSR         @R3
    0000031C 64E3                   MOV         R14,R4
         roots.c    78            save();
    0000031E D230                   MOV.L       L1209+24,R2; _save
    00000320 420B                   JSR         @R2
    00000322 0009                   NOP
         roots.c    79            p1 = alloc_tensor(n);
    00000324 DD2F                   MOV.L       L1209+28,R13; _p1
    00000326 D330                   MOV.L       L1209+32,R3; _alloc_tensor
    00000328 430B                   JSR         @R3
    0000032A 64E3                   MOV         R14,R4
    0000032C 2D02                   MOV.L       R0,@R13
         roots.c    80            p1->u.tensor->ndim = 1;
    0000032E 6203                   MOV         R0,R2
         roots.c    81            p1->u.tensor->dim[0] = n;
         roots.c    82            for (i = 0; i < n; i++)
    00000330 D72E                   MOV.L       L1209+36,R7; _stack
    00000332 4E15                   CMP/PL      R14
    00000334 6322                   MOV.L       @R2,R3
    00000336 E101                   MOV         #1,R1
    00000338 2312                   MOV.L       R1,@R3
    0000033A E600                   MOV         #0,R6
    0000033C 63D2                   MOV.L       @R13,R3
    0000033E 65C3                   MOV         R12,R5
    00000340 6232                   MOV.L       @R3,R2
    00000342 4508                   SHLL2       R5
    00000344 12E1                   MOV.L       R14,@(4,R2)
    00000346 8F0C                   BF/S        L1157
    00000348 6463                   MOV         R6,R4
    0000034A              L1158:                            
    0000034A 7601                   ADD         #1,R6
         roots.c    83                    p1->u.tensor->elem[i] = stack[h + i];
    0000034C 60D2                   MOV.L       @R13,R0
    0000034E 36E3                   CMP/GE      R14,R6
    00000350 6302                   MOV.L       @R0,R3
    00000352 7368                   ADD         #104,R3
    00000354 6072                   MOV.L       @R7,R0
    00000356 334C                   ADD         R4,R3
    00000358 025E                   MOV.L       @(R0,R5),R2
    0000035A 7504                   ADD         #4,R5
    0000035C 2322                   MOV.L       R2,@R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000035E 8FF4                   BF/S        L1158
    00000360 7404                   ADD         #4,R4
    00000362              L1157:                            
         roots.c    84            tos = h;
    00000362 2BC2                   MOV.L       R12,@R11
         roots.c    85            push(p1);
    00000364 D222                   MOV.L       L1209+40,R2; _push
    00000366 420B                   JSR         @R2
    00000368 64D2                   MOV.L       @R13,R4
         roots.c    86            restore();
    0000036A 4F26                   LDS.L       @R15+,PR
    0000036C D321                   MOV.L       L1209+44,R3; _restore
    0000036E 6BF6                   MOV.L       @R15+,R11
    00000370 6CF6                   MOV.L       @R15+,R12
    00000372 6DF6                   MOV.L       @R15+,R13
    00000374 432B                   JMP         @R3
    00000376 6EF6                   MOV.L       @R15+,R14
    00000378              L1156:                            
         roots.c    87    }
    00000378 4F26                   LDS.L       @R15+,PR
    0000037A 6BF6                   MOV.L       @R15+,R11
    0000037C 6CF6                   MOV.L       @R15+,R12
    0000037E 6DF6                   MOV.L       @R15+,R13
    00000380 000B                   RTS
    00000382 6EF6                   MOV.L       @R15+,R14
         roots.c    88    
         roots.c    89    static void
         roots.c    90    roots2(void)
    00000384              __$roots2:                       ; function: roots2
                                                           ; frame size=20
    00000384 2FE6                   MOV.L       R14,@-R15
    00000386 2FD6                   MOV.L       R13,@-R15
    00000388 2FC6                   MOV.L       R12,@-R15
    0000038A 2FB6                   MOV.L       R11,@-R15
    0000038C 4F22                   STS.L       PR,@-R15
         roots.c    91    {
         roots.c    92            save();
    0000038E D314                   MOV.L       L1209+24,R3; _save
    00000390 430B                   JSR         @R3
    00000392 0009                   NOP
         roots.c    93    
         roots.c    94            p2 = pop();
    00000394 DB18                   MOV.L       L1209+48,R11; _pop
    00000396 DC19                   MOV.L       L1209+52,R12; _p2
    00000398 4B0B                   JSR         @R11
    0000039A 0009                   NOP
         roots.c    95            p1 = pop();
    0000039C DE11                   MOV.L       L1209+28,R14; _p1
    0000039E 4B0B                   JSR         @R11
    000003A0 2C02                   MOV.L       R0,@R12
    000003A2 2E02                   MOV.L       R0,@R14
         roots.c    96    
         roots.c    97            push(p1);
    000003A4 DD12                   MOV.L       L1209+40,R13; _push
    000003A6 4D0B                   JSR         @R13
    000003A8 6403                   MOV         R0,R4
         roots.c    98            push(p2);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003AA 4D0B                   JSR         @R13
    000003AC 64C2                   MOV.L       @R12,R4
         roots.c    99            factorpoly();
    000003AE D214                   MOV.L       L1209+56,R2; _factorpoly
    000003B0 420B                   JSR         @R2
    000003B2 0009                   NOP
         roots.c   100    
         roots.c   101            p1 = pop();
    000003B4 4B0B                   JSR         @R11
    000003B6 0009                   NOP
    000003B8 2E02                   MOV.L       R0,@R14
         roots.c   102    
         roots.c   103            if (car(p1) == symbol(MULTIPLY)) {
    000003BA 6203                   MOV         R0,R2
    000003BC 8428                   MOV.B       @(8,R2),R0
    000003BE 2008                   TST         R0,R0
    000003C0 8B20                   BF          L1160
    000003C2 62E2                   MOV.L       @R14,R2
    000003C4 A022                   BRA         L1161
    000003C6 6322                   MOV.L       @R2,R3
    000003C8              L1209:                            
    000003C8 <00000000>             .DATA.L     _ispoly
    000003CC <00000000>             .DATA.L     L1065
    000003D0 <00000000>             .DATA.L     _stop
    000003D4 <00000000>             .DATA.L     _tos
    000003D8 <00000000>             .DATA.L     L1070
    000003DC <00000000>             .DATA.L     _sort_stack
    000003E0 <00000000>             .DATA.L     _save
    000003E4 <00000000>             .DATA.L     _p1
    000003E8 <00000000>             .DATA.L     _alloc_tensor
    000003EC <00000000>             .DATA.L     _stack
    000003F0 <00000000>             .DATA.L     _push
    000003F4 <00000000>             .DATA.L     _restore
    000003F8 <00000000>             .DATA.L     _pop
    000003FC <00000000>             .DATA.L     _p2
    00000400 <00000000>             .DATA.L     _factorpoly
    00000404              L1160:                            
    00000404 9273                   MOV.W       L1210,R2   ; H'0570
    00000406 D13B                   MOV.L       L1210+6,R1 ; _symtab
    00000408 6312                   MOV.L       @R1,R3
    0000040A 332C                   ADD         R2,R3
    0000040C              L1161:                            
    0000040C 9270                   MOV.W       L1210+2,R2 ; H'0384
    0000040E D139                   MOV.L       L1210+6,R1 ; _symtab
    00000410 6012                   MOV.L       @R1,R0
    00000412 302C                   ADD         R2,R0
    00000414 3300                   CMP/EQ      R0,R3
    00000416 8B2F                   BF          L1159
         roots.c   104                    p1 = cdr(p1);
    00000418 63E2                   MOV.L       @R14,R3
    0000041A 8438                   MOV.B       @(8,R3),R0
    0000041C 2008                   TST         R0,R0
    0000041E 8B02                   BF          L1162
    00000420 61E2                   MOV.L       @R14,R1
    00000422 A004                   BRA         L1163
    00000424 5111                   MOV.L       @(4,R1),R1
    00000426              L1162:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000426 9362                   MOV.W       L1210,R3   ; H'0570
    00000428 D032                   MOV.L       L1210+6,R0 ; _symtab
    0000042A 6102                   MOV.L       @R0,R1
    0000042C 313C                   ADD         R3,R1
    0000042E              L1163:                            
         roots.c   105                    while (iscons(p1)) {
    0000042E A01D                   BRA         L1164
    00000430 2E12                   MOV.L       R1,@R14
    00000432              L1165:                            
         roots.c   106                            push(car(p1));
    00000432 64E2                   MOV.L       @R14,R4
    00000434 8448                   MOV.B       @(8,R4),R0
    00000436 2008                   TST         R0,R0
    00000438 8B02                   BF          L1166
    0000043A 64E2                   MOV.L       @R14,R4
    0000043C A004                   BRA         L1167
    0000043E 6442                   MOV.L       @R4,R4
    00000440              L1166:                            
    00000440 9355                   MOV.W       L1210,R3   ; H'0570
    00000442 D22C                   MOV.L       L1210+6,R2 ; _symtab
    00000444 6422                   MOV.L       @R2,R4
    00000446 343C                   ADD         R3,R4
    00000448              L1167:                            
    00000448 4D0B                   JSR         @R13
    0000044A 0009                   NOP
         roots.c   107                            push(p2);
    0000044C 4D0B                   JSR         @R13
    0000044E 64C2                   MOV.L       @R12,R4
         roots.c   108                            roots3();
    00000450 B01F                   BSR         __$roots3
    00000452 0009                   NOP
         roots.c   109                            p1 = cdr(p1);
    00000454 63E2                   MOV.L       @R14,R3
    00000456 8438                   MOV.B       @(8,R3),R0
    00000458 2008                   TST         R0,R0
    0000045A 8B02                   BF          L1168
    0000045C 62E2                   MOV.L       @R14,R2
    0000045E A004                   BRA         L1169
    00000460 5221                   MOV.L       @(4,R2),R2
    00000462              L1168:                            
    00000462 9344                   MOV.W       L1210,R3   ; H'0570
    00000464 D123                   MOV.L       L1210+6,R1 ; _symtab
    00000466 6212                   MOV.L       @R1,R2
    00000468 323C                   ADD         R3,R2
    0000046A              L1169:                            
    0000046A 2E22                   MOV.L       R2,@R14
    0000046C              L1164:                            
    0000046C 63E2                   MOV.L       @R14,R3
    0000046E 8438                   MOV.B       @(8,R3),R0
    00000470 2008                   TST         R0,R0
    00000472 89DE                   BT          L1165
    00000474 A006                   BRA         L1170
    00000476 0009                   NOP
    00000478              L1159:                            
         roots.c   110                    }
         roots.c   111            } else {
         roots.c   112                    push(p1);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000478 4D0B                   JSR         @R13
    0000047A 64E2                   MOV.L       @R14,R4
         roots.c   113                    push(p2);
    0000047C 4D0B                   JSR         @R13
    0000047E 64C2                   MOV.L       @R12,R4
         roots.c   114                    roots3();
    00000480 B007                   BSR         __$roots3
    00000482 0009                   NOP
    00000484              L1170:                            
         roots.c   115            }
         roots.c   116    
         roots.c   117            restore();
    00000484 4F26                   LDS.L       @R15+,PR
    00000486 6BF6                   MOV.L       @R15+,R11
    00000488 D21B                   MOV.L       L1210+10,R2; _restore
    0000048A 6CF6                   MOV.L       @R15+,R12
    0000048C 6DF6                   MOV.L       @R15+,R13
    0000048E 422B                   JMP         @R2
    00000490 6EF6                   MOV.L       @R15+,R14
         roots.c   118    }
         roots.c   119    
         roots.c   120    static void
         roots.c   121    roots3(void)
    00000492              __$roots3:                       ; function: roots3
                                                           ; frame size=20
    00000492 2FE6                   MOV.L       R14,@-R15
    00000494 2FD6                   MOV.L       R13,@-R15
    00000496 2FC6                   MOV.L       R12,@-R15
    00000498 2FB6                   MOV.L       R11,@-R15
    0000049A 4F22                   STS.L       PR,@-R15
         roots.c   122    {
         roots.c   123            save();
    0000049C D317                   MOV.L       L1210+14,R3; _save
    0000049E 430B                   JSR         @R3
    000004A0 0009                   NOP
         roots.c   124            p2 = pop();
    000004A2 DD17                   MOV.L       L1210+18,R13; _p2
    000004A4 D217                   MOV.L       L1210+22,R2; _pop
    000004A6 420B                   JSR         @R2
    000004A8 0009                   NOP
         roots.c   125            p1 = pop();
    000004AA DE17                   MOV.L       L1210+26,R14; _p1
    000004AC D315                   MOV.L       L1210+22,R3; _pop
    000004AE 430B                   JSR         @R3
    000004B0 2D02                   MOV.L       R0,@R13
         roots.c   126            if (car(p1) == symbol(POWER) && ispoly(cadr(p1), p2) && isposint(caddr(p1))) {
    000004B2 6303                   MOV         R0,R3
    000004B4 2E02                   MOV.L       R0,@R14
    000004B6 DB15                   MOV.L       L1210+30,R11; _push
    000004B8 DC0E                   MOV.L       L1210+6,R12; _symtab
    000004BA 8438                   MOV.B       @(8,R3),R0
    000004BC 2008                   TST         R0,R0
    000004BE 8B02                   BF          L1172
    000004C0 62E2                   MOV.L       @R14,R2
    000004C2 A004                   BRA         L1183
    000004C4 6222                   MOV.L       @R2,R2
    000004C6              L1172:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004C6 9312                   MOV.W       L1210,R3   ; H'0570
    000004C8 D10A                   MOV.L       L1210+6,R1 ; _symtab
    000004CA 6212                   MOV.L       @R1,R2
    000004CC 323C                   ADD         R3,R2
    000004CE              L1183:                            
    000004CE 9310                   MOV.W       L1210+4,R3 ; H'03F0
    000004D0 60C2                   MOV.L       @R12,R0
    000004D2 303C                   ADD         R3,R0
    000004D4 3200                   CMP/EQ      R0,R2
    000004D6 8901                   BT          L1211
    000004D8 A0B2                   BRA         L1171
    000004DA 0009                   NOP
    000004DC              L1211:                            
    000004DC D108                   MOV.L       L1210+18,R1; _p2
    000004DE 64E2                   MOV.L       @R14,R4
    000004E0 8448                   MOV.B       @(8,R4),R0
    000004E2 2008                   TST         R0,R0
    000004E4 8F14                   BF/S        L1174
    000004E6 6512                   MOV.L       @R1,R5
    000004E8 64E2                   MOV.L       @R14,R4
    000004EA A014                   BRA         L1184
    000004EC 5441                   MOV.L       @(4,R4),R4
    000004EE              L1210:                            
    000004EE 0570                   .DATA.W     H'0570
    000004F0 0384                   .DATA.W     H'0384
    000004F2 03F0                   .DATA.W     H'03F0
    000004F4 <00000000>             .DATA.L     _symtab
    000004F8 <00000000>             .DATA.L     _restore
    000004FC <00000000>             .DATA.L     _save
    00000500 <00000000>             .DATA.L     _p2
    00000504 <00000000>             .DATA.L     _pop
    00000508 <00000000>             .DATA.L     _p1
    0000050C <00000000>             .DATA.L     _push
    00000510              L1174:                            
    00000510 9264                   MOV.W       L1212,R2   ; H'0570
    00000512 64C2                   MOV.L       @R12,R4
    00000514 342C                   ADD         R2,R4
    00000516              L1184:                            
    00000516 8448                   MOV.B       @(8,R4),R0
    00000518 2008                   TST         R0,R0
    0000051A 8B0B                   BF          L1173
    0000051C 64E2                   MOV.L       @R14,R4
    0000051E 8448                   MOV.B       @(8,R4),R0
    00000520 2008                   TST         R0,R0
    00000522 8B02                   BF          L1175
    00000524 64E2                   MOV.L       @R14,R4
    00000526 A003                   BRA         L1185
    00000528 5441                   MOV.L       @(4,R4),R4
    0000052A              L1175:                            
    0000052A 9357                   MOV.W       L1212,R3   ; H'0570
    0000052C 64C2                   MOV.L       @R12,R4
    0000052E 343C                   ADD         R3,R4
    00000530              L1185:                            
    00000530 A003                   BRA         L1186
    00000532 6442                   MOV.L       @R4,R4
    00000534              L1173:                            
    00000534 9352                   MOV.W       L1212,R3   ; H'0570




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000536 64C2                   MOV.L       @R12,R4
    00000538 343C                   ADD         R3,R4
    0000053A              L1186:                            
    0000053A D329                   MOV.L       L1212+4,R3 ; _ispoly
    0000053C 430B                   JSR         @R3
    0000053E 0009                   NOP
    00000540 2008                   TST         R0,R0
    00000542 8B01                   BF          L1213
    00000544 A07C                   BRA         L1171
    00000546 0009                   NOP
    00000548              L1213:                            
    00000548 D326                   MOV.L       L1212+8,R3 ; _p1
    0000054A 6432                   MOV.L       @R3,R4
    0000054C 8448                   MOV.B       @(8,R4),R0
    0000054E 2008                   TST         R0,R0
    00000550 8B02                   BF          L1178
    00000552 6432                   MOV.L       @R3,R4
    00000554 A004                   BRA         L1187
    00000556 5441                   MOV.L       @(4,R4),R4
    00000558              L1178:                            
    00000558 9240                   MOV.W       L1212,R2   ; H'0570
    0000055A D123                   MOV.L       L1212+12,R1; _symtab
    0000055C 6412                   MOV.L       @R1,R4
    0000055E 342C                   ADD         R2,R4
    00000560              L1187:                            
    00000560 8448                   MOV.B       @(8,R4),R0
    00000562 2008                   TST         R0,R0
    00000564 8B0E                   BF          L1177
    00000566 D31F                   MOV.L       L1212+8,R3 ; _p1
    00000568 6432                   MOV.L       @R3,R4
    0000056A 8448                   MOV.B       @(8,R4),R0
    0000056C 2008                   TST         R0,R0
    0000056E 8B03                   BF          L1179
    00000570 D31C                   MOV.L       L1212+8,R3 ; _p1
    00000572 6432                   MOV.L       @R3,R4
    00000574 A004                   BRA         L1188
    00000576 5441                   MOV.L       @(4,R4),R4
    00000578              L1179:                            
    00000578 9330                   MOV.W       L1212,R3   ; H'0570
    0000057A D21B                   MOV.L       L1212+12,R2; _symtab
    0000057C 6422                   MOV.L       @R2,R4
    0000057E 343C                   ADD         R3,R4
    00000580              L1188:                            
    00000580 A004                   BRA         L1189
    00000582 5441                   MOV.L       @(4,R4),R4
    00000584              L1177:                            
    00000584 932A                   MOV.W       L1212,R3   ; H'0570
    00000586 D218                   MOV.L       L1212+12,R2; _symtab
    00000588 6422                   MOV.L       @R2,R4
    0000058A 343C                   ADD         R3,R4
    0000058C              L1189:                            
    0000058C 8448                   MOV.B       @(8,R4),R0
    0000058E 2008                   TST         R0,R0
    00000590 8B2C                   BF          L1176
    00000592 D314                   MOV.L       L1212+8,R3 ; _p1
    00000594 6432                   MOV.L       @R3,R4
    00000596 8448                   MOV.B       @(8,R4),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000598 2008                   TST         R0,R0
    0000059A 8B03                   BF          L1181
    0000059C D311                   MOV.L       L1212+8,R3 ; _p1
    0000059E 6432                   MOV.L       @R3,R4
    000005A0 A004                   BRA         L1190
    000005A2 5441                   MOV.L       @(4,R4),R4
    000005A4              L1181:                            
    000005A4 931A                   MOV.W       L1212,R3   ; H'0570
    000005A6 D210                   MOV.L       L1212+12,R2; _symtab
    000005A8 6422                   MOV.L       @R2,R4
    000005AA 343C                   ADD         R3,R4
    000005AC              L1190:                            
    000005AC 8448                   MOV.B       @(8,R4),R0
    000005AE 2008                   TST         R0,R0
    000005B0 8B0E                   BF          L1180
    000005B2 D30C                   MOV.L       L1212+8,R3 ; _p1
    000005B4 6432                   MOV.L       @R3,R4
    000005B6 8448                   MOV.B       @(8,R4),R0
    000005B8 2008                   TST         R0,R0
    000005BA 8B03                   BF          L1182
    000005BC D309                   MOV.L       L1212+8,R3 ; _p1
    000005BE 6432                   MOV.L       @R3,R4
    000005C0 A004                   BRA         L1191
    000005C2 5441                   MOV.L       @(4,R4),R4
    000005C4              L1182:                            
    000005C4 930A                   MOV.W       L1212,R3   ; H'0570
    000005C6 D208                   MOV.L       L1212+12,R2; _symtab
    000005C8 6422                   MOV.L       @R2,R4
    000005CA 343C                   ADD         R3,R4
    000005CC              L1191:                            
    000005CC A004                   BRA         L1192
    000005CE 5441                   MOV.L       @(4,R4),R4
    000005D0              L1180:                            
    000005D0 9304                   MOV.W       L1212,R3   ; H'0570
    000005D2 D205                   MOV.L       L1212+12,R2; _symtab
    000005D4 6422                   MOV.L       @R2,R4
    000005D6 343C                   ADD         R3,R4
    000005D8              L1192:                            
    000005D8 A00C                   BRA         L1193
    000005DA 6442                   MOV.L       @R4,R4
    000005DC              L1212:                            
    000005DC 0570                   .DATA.W     H'0570
    000005DE 0000                   .DATA.W     0
    000005E0 <00000000>             .DATA.L     _ispoly
    000005E4 <00000000>             .DATA.L     _p1
    000005E8 <00000000>             .DATA.L     _symtab
    000005EC              L1176:                            
    000005EC 936E                   MOV.W       L1214,R3   ; H'0570
    000005EE D238                   MOV.L       L1214+4,R2 ; _symtab
    000005F0 6422                   MOV.L       @R2,R4
    000005F2 343C                   ADD         R3,R4
    000005F4              L1193:                            
    000005F4 D337                   MOV.L       L1214+8,R3 ; _isposint
    000005F6 430B                   JSR         @R3
    000005F8 0009                   NOP
    000005FA 2008                   TST         R0,R0
    000005FC 8920                   BT          L1171




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         roots.c   127                    push(cadr(p1));
    000005FE 64E2                   MOV.L       @R14,R4
    00000600 8448                   MOV.B       @(8,R4),R0
    00000602 2008                   TST         R0,R0
    00000604 8B02                   BF          L1195
    00000606 64E2                   MOV.L       @R14,R4
    00000608 A004                   BRA         L1197
    0000060A 5441                   MOV.L       @(4,R4),R4
    0000060C              L1195:                            
    0000060C 935E                   MOV.W       L1214,R3   ; H'0570
    0000060E D230                   MOV.L       L1214+4,R2 ; _symtab
    00000610 6422                   MOV.L       @R2,R4
    00000612 343C                   ADD         R3,R4
    00000614              L1197:                            
    00000614 8448                   MOV.B       @(8,R4),R0
    00000616 2008                   TST         R0,R0
    00000618 8B0C                   BF          L1194
    0000061A 64E2                   MOV.L       @R14,R4
    0000061C 8448                   MOV.B       @(8,R4),R0
    0000061E 2008                   TST         R0,R0
    00000620 8B02                   BF          L1196
    00000622 64E2                   MOV.L       @R14,R4
    00000624 A004                   BRA         L1198
    00000626 5441                   MOV.L       @(4,R4),R4
    00000628              L1196:                            
    00000628 9350                   MOV.W       L1214,R3   ; H'0570
    0000062A D229                   MOV.L       L1214+4,R2 ; _symtab
    0000062C 6422                   MOV.L       @R2,R4
    0000062E 343C                   ADD         R3,R4
    00000630              L1198:                            
    00000630 A00D                   BRA         L1205
    00000632 6442                   MOV.L       @R4,R4
    00000634              L1194:                            
    00000634 934A                   MOV.W       L1214,R3   ; H'0570
    00000636 D226                   MOV.L       L1214+4,R2 ; _symtab
    00000638 6422                   MOV.L       @R2,R4
    0000063A 343C                   ADD         R3,R4
    0000063C A007                   BRA         L1205
    0000063E 0009                   NOP
    00000640              L1171:                            
         roots.c   128                    push(p2);
         roots.c   129                    mini_solve();
         roots.c   130            } else if (ispoly(p1, p2)) {
    00000640 65D2                   MOV.L       @R13,R5
    00000642 D325                   MOV.L       L1214+12,R3; _ispoly
    00000644 430B                   JSR         @R3
    00000646 64E2                   MOV.L       @R14,R4
    00000648 2008                   TST         R0,R0
    0000064A 8906                   BT          L1200
         roots.c   131                    push(p1);
    0000064C 64E2                   MOV.L       @R14,R4
    0000064E              L1205:                            
    0000064E 4B0B                   JSR         @R11
    00000650 0009                   NOP
         roots.c   132                    push(p2);
    00000652 4B0B                   JSR         @R11
    00000654 64D2                   MOV.L       @R13,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         roots.c   133                    mini_solve();
    00000656 B007                   BSR         __$mini_solve
    00000658 0009                   NOP
    0000065A              L1200:                            
         roots.c   134            }
         roots.c   135            restore();
    0000065A 4F26                   LDS.L       @R15+,PR
    0000065C D21F                   MOV.L       L1214+16,R2; _restore
    0000065E 6BF6                   MOV.L       @R15+,R11
    00000660 6CF6                   MOV.L       @R15+,R12
    00000662 6DF6                   MOV.L       @R15+,R13
    00000664 422B                   JMP         @R2
    00000666 6EF6                   MOV.L       @R15+,R14
         roots.c   136    }
         roots.c   137    
         roots.c   138    //-----------------------------------------------------------------------------
         roots.c   139    //
         roots.c   140    //      Input:          stack[tos - 2]          polynomial
         roots.c   141    //
         roots.c   142    //                      stack[tos - 1]          dependent symbol
         roots.c   143    //
         roots.c   144    //      Output:         stack                   roots on stack
         roots.c   145    //
         roots.c   146    //                                              (input args are popped first)
         roots.c   147    //
         roots.c   148    //-----------------------------------------------------------------------------
         roots.c   149    
         roots.c   150    static void
         roots.c   151    mini_solve(void)
    00000668              __$mini_solve:                   ; function: mini_solve
                                                           ; frame size=32
    00000668 2FE6                   MOV.L       R14,@-R15
    0000066A 2FD6                   MOV.L       R13,@-R15
    0000066C 2FC6                   MOV.L       R12,@-R15
    0000066E 2FB6                   MOV.L       R11,@-R15
    00000670 2FA6                   MOV.L       R10,@-R15
    00000672 2F96                   MOV.L       R9,@-R15
    00000674 2F86                   MOV.L       R8,@-R15
    00000676 4F22                   STS.L       PR,@-R15
         roots.c   152    {
         roots.c   153            int n;
         roots.c   154    
         roots.c   155            save();
    00000678 D319                   MOV.L       L1214+20,R3; _save
    0000067A 430B                   JSR         @R3
    0000067C 0009                   NOP
         roots.c   156    
         roots.c   157            X = pop();
    0000067E DD19                   MOV.L       L1214+24,R13; _pop
    00000680 4D0B                   JSR         @R13
    00000682 0009                   NOP
    00000684 D218                   MOV.L       L1214+28,R2; _p2
         roots.c   158            POLY = pop();
    00000686 4D0B                   JSR         @R13
    00000688 2202                   MOV.L       R0,@R2
    0000068A D318                   MOV.L       L1214+32,R3; _p1
         roots.c   159    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         roots.c   160            push(POLY);
    0000068C DE18                   MOV.L       L1214+36,R14; _push
    0000068E 2302                   MOV.L       R0,@R3
    00000690 4E0B                   JSR         @R14
    00000692 6403                   MOV         R0,R4
         roots.c   161            push(X);
    00000694 D214                   MOV.L       L1214+28,R2; _p2
    00000696 4E0B                   JSR         @R14
    00000698 6422                   MOV.L       @R2,R4
         roots.c   162    
         roots.c   163            n = coeff();
    0000069A D316                   MOV.L       L1214+40,R3; _coeff
    0000069C 430B                   JSR         @R3
    0000069E 0009                   NOP
         roots.c   164    
         roots.c   165            // AX + B, X = -B/A
         roots.c   166    
         roots.c   167            if (n == 2) {
    000006A0 D815                   MOV.L       L1214+44,R8; _divide
    000006A2 8802                   CMP/EQ      #2,R0
    000006A4 DB15                   MOV.L       L1214+48,R11; _p3
    000006A6 DC16                   MOV.L       L1214+52,R12; _p4
    000006A8 8F2E                   BF/S        L1202
    000006AA 6403                   MOV         R0,R4
         roots.c   168                    A = pop();
    000006AC 4D0B                   JSR         @R13
    000006AE 0009                   NOP
         roots.c   169                    B = pop();
    000006B0 4D0B                   JSR         @R13
    000006B2 2B02                   MOV.L       R0,@R11
    000006B4 2C02                   MOV.L       R0,@R12
         roots.c   170                    push(B);
    000006B6 4E0B                   JSR         @R14
    000006B8 6403                   MOV         R0,R4
         roots.c   171                    push(A);
    000006BA 4E0B                   JSR         @R14
    000006BC 64B2                   MOV.L       @R11,R4
         roots.c   172                    divide();
    000006BE 480B                   JSR         @R8
    000006C0 0009                   NOP
         roots.c   173                    negate();
    000006C2 D310                   MOV.L       L1214+56,R3; _negate
    000006C4 430B                   JSR         @R3
    000006C6 0009                   NOP
    000006C8 A075                   BRA         L1086
    000006CA 0009                   NOP
    000006CC              L1214:                            
    000006CC 0570                   .DATA.W     H'0570
    000006CE 0000                   .DATA.W     0
    000006D0 <00000000>             .DATA.L     _symtab
    000006D4 <00000000>             .DATA.L     _isposint
    000006D8 <00000000>             .DATA.L     _ispoly
    000006DC <00000000>             .DATA.L     _restore
    000006E0 <00000000>             .DATA.L     _save
    000006E4 <00000000>             .DATA.L     _pop
    000006E8 <00000000>             .DATA.L     _p2
    000006EC <00000000>             .DATA.L     _p1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006F0 <00000000>             .DATA.L     _push
    000006F4 <00000000>             .DATA.L     _coeff
    000006F8 <00000000>             .DATA.L     _divide
    000006FC <00000000>             .DATA.L     _p3
    00000700 <00000000>             .DATA.L     _p4
    00000704 <00000000>             .DATA.L     _negate
    00000708              L1202:                            
         roots.c   174                    restore();
         roots.c   175                    return;
         roots.c   176            }
         roots.c   177    
         roots.c   178            // AX^2 + BX + C, X = (-B +/- (B^2 - 4AC)^(1/2)) / (2A)
         roots.c   179    
         roots.c   180            if (n == 3) {
    00000708 6043                   MOV         R4,R0
    0000070A 8803                   CMP/EQ      #3,R0
    0000070C 8B4F                   BF          L1204
         roots.c   181                    A = pop();
    0000070E 4D0B                   JSR         @R13
    00000710 0009                   NOP
         roots.c   182                    B = pop();
    00000712 4D0B                   JSR         @R13
    00000714 2B02                   MOV.L       R0,@R11
         roots.c   183                    C = pop();
    00000716 4D0B                   JSR         @R13
    00000718 2C02                   MOV.L       R0,@R12
    0000071A D32C                   MOV.L       L1215+2,R3 ; _p5
    0000071C 2302                   MOV.L       R0,@R3
         roots.c   184                    push(B);
    0000071E 4E0B                   JSR         @R14
    00000720 64C2                   MOV.L       @R12,R4
         roots.c   185                    push(B);
    00000722 4E0B                   JSR         @R14
    00000724 64C2                   MOV.L       @R12,R4
         roots.c   186                    multiply();
    00000726 DA2A                   MOV.L       L1215+6,R10; _multiply
    00000728 4A0B                   JSR         @R10
    0000072A 0009                   NOP
         roots.c   187                    push_integer(4);
    0000072C D229                   MOV.L       L1215+10,R2; _push_integer
    0000072E 420B                   JSR         @R2
    00000730 E404                   MOV         #4,R4
         roots.c   188                    push(A);
    00000732 4E0B                   JSR         @R14
    00000734 64B2                   MOV.L       @R11,R4
         roots.c   189                    multiply();
    00000736 4A0B                   JSR         @R10
    00000738 0009                   NOP
         roots.c   190                    push(C);
    0000073A D324                   MOV.L       L1215+2,R3 ; _p5
    0000073C 4E0B                   JSR         @R14
    0000073E 6432                   MOV.L       @R3,R4
         roots.c   191                    multiply();
    00000740 4A0B                   JSR         @R10
    00000742 0009                   NOP
         roots.c   192                    subtract();
    00000744 D224                   MOV.L       L1215+14,R2; _subtract




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000746 420B                   JSR         @R2
    00000748 0009                   NOP
         roots.c   193                    push_rational(1, 2);
    0000074A E502                   MOV         #2,R5
    0000074C D323                   MOV.L       L1215+18,R3; _push_rational
    0000074E 430B                   JSR         @R3
    00000750 E401                   MOV         #1,R4
         roots.c   194                    power();
    00000752 D223                   MOV.L       L1215+22,R2; _power
    00000754 420B                   JSR         @R2
    00000756 0009                   NOP
         roots.c   195                    Y = pop();
    00000758 D922                   MOV.L       L1215+26,R9; _p6
    0000075A 4D0B                   JSR         @R13
    0000075C 0009                   NOP
    0000075E 2902                   MOV.L       R0,@R9
         roots.c   196                    push(Y);                        // 1st root
    00000760 4E0B                   JSR         @R14
    00000762 6403                   MOV         R0,R4
         roots.c   197                    push(B);
    00000764 4E0B                   JSR         @R14
    00000766 64C2                   MOV.L       @R12,R4
         roots.c   198                    subtract();
    00000768 D31B                   MOV.L       L1215+14,R3; _subtract
    0000076A 430B                   JSR         @R3
    0000076C 0009                   NOP
         roots.c   199                    push(A);
    0000076E 4E0B                   JSR         @R14
    00000770 64B2                   MOV.L       @R11,R4
         roots.c   200                    divide();
    00000772 480B                   JSR         @R8
    00000774 0009                   NOP
         roots.c   201                    push_rational(1, 2);
    00000776 E502                   MOV         #2,R5
    00000778 D218                   MOV.L       L1215+18,R2; _push_rational
    0000077A 420B                   JSR         @R2
    0000077C E401                   MOV         #1,R4
         roots.c   202                    multiply();
    0000077E 4A0B                   JSR         @R10
    00000780 0009                   NOP
         roots.c   203                    push(Y);                        // 2nd root
    00000782 4E0B                   JSR         @R14
    00000784 6492                   MOV.L       @R9,R4
         roots.c   204                    push(B);
    00000786 4E0B                   JSR         @R14
    00000788 64C2                   MOV.L       @R12,R4
         roots.c   205                    add();
    0000078A D317                   MOV.L       L1215+30,R3; _add
    0000078C 430B                   JSR         @R3
    0000078E 0009                   NOP
         roots.c   206                    negate();
    00000790 D216                   MOV.L       L1215+34,R2; _negate
    00000792 420B                   JSR         @R2
    00000794 0009                   NOP
         roots.c   207                    push(A);
    00000796 4E0B                   JSR         @R14
    00000798 64B2                   MOV.L       @R11,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         roots.c   208                    divide();
    0000079A 480B                   JSR         @R8
    0000079C 0009                   NOP
         roots.c   209                    push_rational(1, 2);
    0000079E E502                   MOV         #2,R5
    000007A0 D30E                   MOV.L       L1215+18,R3; _push_rational
    000007A2 430B                   JSR         @R3
    000007A4 E401                   MOV         #1,R4
         roots.c   210                    multiply();
    000007A6 4A0B                   JSR         @R10
    000007A8 0009                   NOP
    000007AA A004                   BRA         L1086
    000007AC 0009                   NOP
    000007AE              L1204:                            
         roots.c   211                    restore();
         roots.c   212                    return;
         roots.c   213            }
         roots.c   214    
         roots.c   215            tos -= n;
    000007AE D510                   MOV.L       L1215+38,R5; _tos
    000007B0 6352                   MOV.L       @R5,R3
    000007B2 3348                   SUB         R4,R3
    000007B4 2532                   MOV.L       R3,@R5
    000007B6              L1086:
         roots.c   216    
         roots.c   217            restore();
    000007B6 4F26                   LDS.L       @R15+,PR
    000007B8 D20E                   MOV.L       L1215+42,R2; _restore
    000007BA 68F6                   MOV.L       @R15+,R8
    000007BC 69F6                   MOV.L       @R15+,R9
    000007BE 6AF6                   MOV.L       @R15+,R10
    000007C0 6BF6                   MOV.L       @R15+,R11
    000007C2 6CF6                   MOV.L       @R15+,R12
    000007C4 6DF6                   MOV.L       @R15+,R13
    000007C6 422B                   JMP         @R2
    000007C8 6EF6                   MOV.L       @R15+,R14
    000007CA              L1215:                            
    000007CA 0000                   .DATA.W     0
    000007CC <00000000>             .DATA.L     _p5
    000007D0 <00000000>             .DATA.L     _multiply
    000007D4 <00000000>             .DATA.L     _push_integer
    000007D8 <00000000>             .DATA.L     _subtract
    000007DC <00000000>             .DATA.L     _push_rational
    000007E0 <00000000>             .DATA.L     _power
    000007E4 <00000000>             .DATA.L     _p6
    000007E8 <00000000>             .DATA.L     _add
    000007EC <00000000>             .DATA.L     _negate
    000007F0 <00000000>             .DATA.L     _tos
    000007F4 <00000000>             .DATA.L     _restore
         roots.c   218    }
C   00000000              L1065:
    00000000 726F6F7473             .SDATA      "roots: 1st argument is not a polynomial"
             3A20317374   
             2061726775   
             6D656E7420   
             6973206E6F   
             7420612070   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             6F6C796E6F   
             6D69616C     
    00000027 00                     .DATA.B     H'00
    00000028              L1070:
    00000028 726F6F7473             .SDATA      "roots: the polynomial is not factorable, try nroots"
             3A20746865   
             20706F6C79   
             6E6F6D6961   
             6C20697320   
             6E6F742066   
             6163746F72   
             61626C652C   
             2074727920   
             6E726F6F74   
             73           
    0000005B 00                     .DATA.B     H'00













































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:27  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      218



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000007F8 Byte(s)
CONSTANT SECTION (C):                               0000005C Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000854 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           30
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           2
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           147






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkD5D0.tmp 

