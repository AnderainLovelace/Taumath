SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\simplify.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplify.c     1    #include "stdafx.h"
      simplify.c     2    #include "defs.h"
      simplify.c     3    
      simplify.c     4    extern int trigmode;
      simplify.c     5    static void simplify_tensor(void);
      simplify.c     6    static int count(U *);
      simplify.c     7    static int nterms(U *);
      simplify.c     8    static void f1(void);
      simplify.c     9    static void f2(void);
      simplify.c    10    static void f3(void);
      simplify.c    11    static void f4(void);
      simplify.c    12    static void f5(void);
      simplify.c    13    static void f9(void);
      simplify.c    14    
      simplify.c    15    void
      simplify.c    16    eval_simplify(void)
P   00000000              _eval_simplify:                  ; function: eval_simplify
                                                           ; frame size=8
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 4F22                   STS.L       PR,@-R15
      simplify.c    17    {
      simplify.c    18            push(cadr(p1));
    00000004 DE39                   MOV.L       L1162+4,R14; _p1
    00000006 64E2                   MOV.L       @R14,R4
    00000008 8448                   MOV.B       @(8,R4),R0
    0000000A 2008                   TST         R0,R0
    0000000C 8B02                   BF          L1100
    0000000E 64E2                   MOV.L       @R14,R4
    00000010 A004                   BRA         L1102
    00000012 5441                   MOV.L       @(4,R4),R4
    00000014              L1100:                            
    00000014 9368                   MOV.W       L1162,R3   ; H'0570
    00000016 D236                   MOV.L       L1162+8,R2 ; _symtab
    00000018 6422                   MOV.L       @R2,R4
    0000001A 343C                   ADD         R3,R4
    0000001C              L1102:                            
    0000001C 8448                   MOV.B       @(8,R4),R0
    0000001E 2008                   TST         R0,R0
    00000020 8B0C                   BF          L1099
    00000022 64E2                   MOV.L       @R14,R4
    00000024 8448                   MOV.B       @(8,R4),R0
    00000026 2008                   TST         R0,R0
    00000028 8B02                   BF          L1101
    0000002A 64E2                   MOV.L       @R14,R4
    0000002C A004                   BRA         L1103
    0000002E 5441                   MOV.L       @(4,R4),R4
    00000030              L1101:                            
    00000030 935A                   MOV.W       L1162,R3   ; H'0570
    00000032 D22F                   MOV.L       L1162+8,R2 ; _symtab
    00000034 6422                   MOV.L       @R2,R4
    00000036 343C                   ADD         R3,R4
    00000038              L1103:                            
    00000038 A004                   BRA         L1104
    0000003A 6442                   MOV.L       @R4,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000003C              L1099:                            
    0000003C 9354                   MOV.W       L1162,R3   ; H'0570
    0000003E D22C                   MOV.L       L1162+8,R2 ; _symtab
    00000040 6422                   MOV.L       @R2,R4
    00000042 343C                   ADD         R3,R4
    00000044              L1104:                            
    00000044 D32B                   MOV.L       L1162+12,R3; _push
    00000046 430B                   JSR         @R3
    00000048 0009                   NOP
      simplify.c    19            eval();
    0000004A D22B                   MOV.L       L1162+16,R2; _eval
    0000004C 420B                   JSR         @R2
    0000004E 0009                   NOP
      simplify.c    20            simplify();
    00000050 4F26                   LDS.L       @R15+,PR
    00000052 6EF6                   MOV.L       @R15+,R14
      simplify.c    21    }
      simplify.c    22    
      simplify.c    23    void
      simplify.c    24    simplify(void)
    00000054              _simplify:                       ; function: simplify
                                                           ; frame size=4
    00000054 4F22                   STS.L       PR,@-R15
      simplify.c    25    {
      simplify.c    26            save();
    00000056 D329                   MOV.L       L1162+20,R3; _save
    00000058 430B                   JSR         @R3
    0000005A 0009                   NOP
      simplify.c    27            simplify_main();
    0000005C B003                   BSR         _simplify_main
    0000005E 0009                   NOP
      simplify.c    28            restore();
    00000060 D327                   MOV.L       L1162+24,R3; _restore
    00000062 432B                   JMP         @R3
    00000064 4F26                   LDS.L       @R15+,PR
      simplify.c    29    }
      simplify.c    30    
      simplify.c    31    void
      simplify.c    32    simplify_main(void)
    00000066              _simplify_main:                  ; function: simplify_main
                                                           ; frame size=28
    00000066 2FE6                   MOV.L       R14,@-R15
    00000068 2FD6                   MOV.L       R13,@-R15
    0000006A 2FC6                   MOV.L       R12,@-R15
    0000006C 2FB6                   MOV.L       R11,@-R15
    0000006E 2FA6                   MOV.L       R10,@-R15
    00000070 2F86                   MOV.L       R8,@-R15
    00000072 4F22                   STS.L       PR,@-R15
      simplify.c    33    {
      simplify.c    34            p1 = pop();
    00000074 DC23                   MOV.L       L1162+28,R12; _pop
    00000076 DE1D                   MOV.L       L1162+4,R14; _p1
    00000078 4C0B                   JSR         @R12
    0000007A 0009                   NOP
    0000007C 2E02                   MOV.L       R0,@R14
    0000007E 6403                   MOV         R0,R4
    00000080 8448                   MOV.B       @(8,R4),R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000082 600C                   EXTU.B      R0,R0
    00000084 8804                   CMP/EQ      #4,R0
    00000086 8B07                   BF          L1105
      simplify.c    35    
      simplify.c    36            if (istensor(p1)) {
      simplify.c    37                    simplify_tensor();
    00000088 4F26                   LDS.L       @R15+,PR
    0000008A 68F6                   MOV.L       @R15+,R8
    0000008C 6AF6                   MOV.L       @R15+,R10
    0000008E 6BF6                   MOV.L       @R15+,R11
    00000090 6CF6                   MOV.L       @R15+,R12
    00000092 6DF6                   MOV.L       @R15+,R13
    00000094 A05A                   BRA         __$simplify_tensor
    00000096 6EF6                   MOV.L       @R15+,R14
    00000098              L1105:                            
      simplify.c    38                    return;
      simplify.c    39            }
      simplify.c    40    
      simplify.c    41            if (find(p1, symbol(FACTORIAL))) {
    00000098 DB16                   MOV.L       L1162+12,R11; _push
    0000009A 9326                   MOV.W       L1162+2,R3 ; H'0258
    0000009C D214                   MOV.L       L1162+8,R2 ; _symtab
    0000009E 6522                   MOV.L       @R2,R5
    000000A0 D119                   MOV.L       L1162+32,R1; _find
    000000A2 410B                   JSR         @R1
    000000A4 353C                   ADD         R3,R5
    000000A6 2008                   TST         R0,R0
    000000A8 893A                   BT          L1107
      simplify.c    42                    push(p1);
    000000AA 4B0B                   JSR         @R11
    000000AC 64E2                   MOV.L       @R14,R4
      simplify.c    43                    simfac();
    000000AE D217                   MOV.L       L1162+36,R2; _simfac
    000000B0 420B                   JSR         @R2
    000000B2 0009                   NOP
      simplify.c    44                    p2 = pop();
    000000B4 DD16                   MOV.L       L1162+40,R13; _p2
    000000B6 4C0B                   JSR         @R12
    000000B8 0009                   NOP
    000000BA 2D02                   MOV.L       R0,@R13
      simplify.c    45                    push(p1);
    000000BC 4B0B                   JSR         @R11
    000000BE 64E2                   MOV.L       @R14,R4
      simplify.c    46                    rationalize();
    000000C0 D314                   MOV.L       L1162+44,R3; _rationalize
    000000C2 430B                   JSR         @R3
    000000C4 0009                   NOP
      simplify.c    47                    simfac();
    000000C6 D211                   MOV.L       L1162+36,R2; _simfac
    000000C8 420B                   JSR         @R2
    000000CA 0009                   NOP
      simplify.c    48                    p3 = pop();
    000000CC DA12                   MOV.L       L1162+48,R10; _p3
    000000CE 4C0B                   JSR         @R12
    000000D0 0009                   NOP
    000000D2 2A02                   MOV.L       R0,@R10
      simplify.c    49                    if (count(p2) < count(p3))




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000D4 B093                   BSR         __$count
    000000D6 64D2                   MOV.L       @R13,R4
    000000D8 6803                   MOV         R0,R8
    000000DA B090                   BSR         __$count
    000000DC 64A2                   MOV.L       @R10,R4
    000000DE 3803                   CMP/GE      R0,R8
    000000E0 891C                   BT          L1108
      simplify.c    50                            p1 = p2;
    000000E2 62D2                   MOV.L       @R13,R2
    000000E4 A01C                   BRA         L1107
    000000E6 2E22                   MOV.L       R2,@R14
    000000E8              L1162:                            
    000000E8 0570                   .DATA.W     H'0570
    000000EA 0258                   .DATA.W     H'0258
    000000EC <00000000>             .DATA.L     _p1
    000000F0 <00000000>             .DATA.L     _symtab
    000000F4 <00000000>             .DATA.L     _push
    000000F8 <00000000>             .DATA.L     _eval
    000000FC <00000000>             .DATA.L     _save
    00000100 <00000000>             .DATA.L     _restore
    00000104 <00000000>             .DATA.L     _pop
    00000108 <00000000>             .DATA.L     _find
    0000010C <00000000>             .DATA.L     _simfac
    00000110 <00000000>             .DATA.L     _p2
    00000114 <00000000>             .DATA.L     _rationalize
    00000118 <00000000>             .DATA.L     _p3
    0000011C              L1108:                            
      simplify.c    51                    else
      simplify.c    52                            p1 = p3;
    0000011C 61A2                   MOV.L       @R10,R1
    0000011E 2E12                   MOV.L       R1,@R14
    00000120              L1107:                            
      simplify.c    53            }
      simplify.c    54    
      simplify.c    55            f1();
    00000120 B0A7                   BSR         __$f1
    00000122 0009                   NOP
      simplify.c    56            f2();
    00000124 B0D2                   BSR         __$f2
    00000126 0009                   NOP
      simplify.c    57            f3();
    00000128 B10C                   BSR         __$f3
    0000012A 0009                   NOP
      simplify.c    58            f4();
    0000012C B132                   BSR         __$f4
    0000012E 0009                   NOP
      simplify.c    59            f5();
    00000130 B182                   BSR         __$f5
    00000132 0009                   NOP
      simplify.c    60            f9();
    00000134 B1E5                   BSR         __$f9
    00000136 0009                   NOP
      simplify.c    61    
      simplify.c    62            push(p1);
    00000138 4B0B                   JSR         @R11
    0000013A 64E2                   MOV.L       @R14,R4
      simplify.c    63    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000013C 4F26                   LDS.L       @R15+,PR
    0000013E 68F6                   MOV.L       @R15+,R8
    00000140 6AF6                   MOV.L       @R15+,R10
    00000142 6BF6                   MOV.L       @R15+,R11
    00000144 6CF6                   MOV.L       @R15+,R12
    00000146 6DF6                   MOV.L       @R15+,R13
    00000148 000B                   RTS
    0000014A 6EF6                   MOV.L       @R15+,R14
      simplify.c    64    
      simplify.c    65    static void
      simplify.c    66    simplify_tensor(void)
    0000014C              __$simplify_tensor:              ; function: simplify_tensor
                                                           ; frame size=28
    0000014C 2FE6                   MOV.L       R14,@-R15
      simplify.c    67    {
      simplify.c    68            int i;
      simplify.c    69            p2 = alloc_tensor(p1->u.tensor->nelem);
    0000014E E064                   MOV         #100,R0
    00000150 D33A                   MOV.L       L1163+12,R3; _alloc_tensor
    00000152 2FD6                   MOV.L       R13,@-R15
    00000154 2FC6                   MOV.L       R12,@-R15
    00000156 2FB6                   MOV.L       R11,@-R15
    00000158 2FA6                   MOV.L       R10,@-R15
    0000015A 2F96                   MOV.L       R9,@-R15
    0000015C 4F22                   STS.L       PR,@-R15
    0000015E DD35                   MOV.L       L1163+4,R13; _p2
    00000160 DE35                   MOV.L       L1163+8,R14; _p1
    00000162 64E2                   MOV.L       @R14,R4
    00000164 6442                   MOV.L       @R4,R4
    00000166 430B                   JSR         @R3
    00000168 044E                   MOV.L       @(R0,R4),R4
      simplify.c    70            p2->u.tensor->ndim = p1->u.tensor->ndim;
    0000016A 6203                   MOV         R0,R2
    0000016C 2D02                   MOV.L       R0,@R13
      simplify.c    71            for (i = 0; i < p1->u.tensor->ndim; i++)
    0000016E E600                   MOV         #0,R6
    00000170 6322                   MOV.L       @R2,R3
    00000172 61E2                   MOV.L       @R14,R1
    00000174 6212                   MOV.L       @R1,R2
    00000176 6022                   MOV.L       @R2,R0
    00000178 2302                   MOV.L       R0,@R3
    0000017A A00E                   BRA         L1110
    0000017C 6463                   MOV         R6,R4
    0000017E              L1111:                            
      simplify.c    72                    p2->u.tensor->dim[i] = p1->u.tensor->dim[i];
    0000017E 6543                   MOV         R4,R5
    00000180 60D2                   MOV.L       @R13,R0
    00000182 4508                   SHLL2       R5
    00000184 6302                   MOV.L       @R0,R3
    00000186 7401                   ADD         #1,R4
    00000188 60E2                   MOV.L       @R14,R0
    0000018A 7304                   ADD         #4,R3
    0000018C 6002                   MOV.L       @R0,R0
    0000018E 335C                   ADD         R5,R3
    00000190 6203                   MOV         R0,R2
    00000192 7204                   ADD         #4,R2
    00000194 325C                   ADD         R5,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000196 6122                   MOV.L       @R2,R1
    00000198 2312                   MOV.L       R1,@R3
    0000019A              L1110:                            
    0000019A 63E2                   MOV.L       @R14,R3
    0000019C 6232                   MOV.L       @R3,R2
    0000019E 6122                   MOV.L       @R2,R1
    000001A0 3413                   CMP/GE      R1,R4
    000001A2 8BEC                   BF          L1111
      simplify.c    73            for (i = 0; i < p1->u.tensor->nelem; i++) {
    000001A4 D926                   MOV.L       L1163+16,R9; _pop
    000001A6 DB27                   MOV.L       L1163+20,R11; _push
    000001A8 A011                   BRA         L1112
    000001AA 6C63                   MOV         R6,R12
    000001AC              L1113:                            
      simplify.c    74                    push(p1->u.tensor->elem[i]);
    000001AC 60E2                   MOV.L       @R14,R0
    000001AE 6AC3                   MOV         R12,R10
    000001B0 6402                   MOV.L       @R0,R4
    000001B2 4A08                   SHLL2       R10
    000001B4 7468                   ADD         #104,R4
    000001B6 34AC                   ADD         R10,R4
    000001B8 4B0B                   JSR         @R11
    000001BA 6442                   MOV.L       @R4,R4
      simplify.c    75                    simplify();
    000001BC BF4A                   BSR         _simplify
    000001BE 0009                   NOP
      simplify.c    76                    p2->u.tensor->elem[i] = pop();
    000001C0 62D2                   MOV.L       @R13,R2
    000001C2 6122                   MOV.L       @R2,R1
    000001C4 7168                   ADD         #104,R1
    000001C6 490B                   JSR         @R9
    000001C8 3A1C                   ADD         R1,R10
    000001CA 7C01                   ADD         #1,R12
    000001CC 2A02                   MOV.L       R0,@R10
    000001CE              L1112:                            
    000001CE E064                   MOV         #100,R0
    000001D0 63E2                   MOV.L       @R14,R3
    000001D2 6232                   MOV.L       @R3,R2
    000001D4 012E                   MOV.L       @(R0,R2),R1
    000001D6 3C13                   CMP/GE      R1,R12
    000001D8 8BE8                   BF          L1113
      simplify.c    77            }
      simplify.c    78            if (iszero(p2))
    000001DA D21B                   MOV.L       L1163+24,R2; _iszero
    000001DC 420B                   JSR         @R2
    000001DE 64D2                   MOV.L       @R13,R4
    000001E0 2008                   TST         R0,R0
    000001E2 8902                   BT          L1114
      simplify.c    79                    p2 = zero; // null tensor becomes scalar zero
    000001E4 D319                   MOV.L       L1163+28,R3; _zero
    000001E6 6232                   MOV.L       @R3,R2
    000001E8 2D22                   MOV.L       R2,@R13
    000001EA              L1114:                            
      simplify.c    80            push(p2);
    000001EA 4B0B                   JSR         @R11
    000001EC 64D2                   MOV.L       @R13,R4
      simplify.c    81    }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001EE 4F26                   LDS.L       @R15+,PR
    000001F0 69F6                   MOV.L       @R15+,R9
    000001F2 6AF6                   MOV.L       @R15+,R10
    000001F4 6BF6                   MOV.L       @R15+,R11
    000001F6 6CF6                   MOV.L       @R15+,R12
    000001F8 6DF6                   MOV.L       @R15+,R13
    000001FA 000B                   RTS
    000001FC 6EF6                   MOV.L       @R15+,R14
      simplify.c    82    
      simplify.c    83    static int
      simplify.c    84    count(U *p)
    000001FE              __$count:                        ; function: count
                                                           ; frame size=12
    000001FE 2FE6                   MOV.L       R14,@-R15
    00000200 2FD6                   MOV.L       R13,@-R15
    00000202 6E43                   MOV         R4,R14
    00000204 4F22                   STS.L       PR,@-R15
      simplify.c    85    {
      simplify.c    86            int n;
      simplify.c    87            if (iscons(p)) {
    00000206 84E8                   MOV.B       @(8,R14),R0
    00000208 2008                   TST         R0,R0
    0000020A 8B2C                   BF          L1115
      simplify.c    88                    n = 0;
      simplify.c    89                    while (iscons(p)) {
    0000020C A026                   BRA         L1116
    0000020E ED00                   MOV         #0,R13
    00000210              L1117:                            
      simplify.c    90                            n += count(car(p)) + 1;
    00000210 8B01                   BF          L1118
    00000212 A004                   BRA         L1119
    00000214 64E2                   MOV.L       @R14,R4
    00000216              L1118:                            
    00000216 930B                   MOV.W       L1163,R3   ; H'0570
    00000218 D20D                   MOV.L       L1163+32,R2; _symtab
    0000021A 6422                   MOV.L       @R2,R4
    0000021C 343C                   ADD         R3,R4
    0000021E              L1119:                            
    0000021E BFEE                   BSR         __$count
    00000220 0009                   NOP
    00000222 7001                   ADD         #1,R0
    00000224 3D0C                   ADD         R0,R13
      simplify.c    91                            p = cdr(p);
    00000226 84E8                   MOV.B       @(8,R14),R0
    00000228 2008                   TST         R0,R0
    0000022A 8B13                   BF          L1120
    0000022C A016                   BRA         L1116
    0000022E 5EE1                   MOV.L       @(4,R14),R14
    00000230              L1163:                            
    00000230 0570                   .DATA.W     H'0570
    00000232 0000                   .DATA.W     0
    00000234 <00000000>             .DATA.L     _p2
    00000238 <00000000>             .DATA.L     _p1
    0000023C <00000000>             .DATA.L     _alloc_tensor
    00000240 <00000000>             .DATA.L     _pop
    00000244 <00000000>             .DATA.L     _push
    00000248 <00000000>             .DATA.L     _iszero




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000024C <00000000>             .DATA.L     _zero
    00000250 <00000000>             .DATA.L     _symtab
    00000254              L1120:                            
    00000254 9367                   MOV.W       L1164,R3   ; H'0570
    00000256 D234                   MOV.L       L1164+2,R2 ; _symtab
    00000258 6E22                   MOV.L       @R2,R14
    0000025A 3E3C                   ADD         R3,R14
    0000025C              L1116:                            
    0000025C 84E8                   MOV.B       @(8,R14),R0
    0000025E 2008                   TST         R0,R0
    00000260 89D6                   BT          L1117
    00000262 A001                   BRA         L1122
    00000264 0009                   NOP
    00000266              L1115:                            
      simplify.c    92                    }
      simplify.c    93            } else
      simplify.c    94                    n = 1;
    00000266 ED01                   MOV         #1,R13
    00000268              L1122:                            
      simplify.c    95            return n;
      simplify.c    96    }
    00000268 4F26                   LDS.L       @R15+,PR
    0000026A 60D3                   MOV         R13,R0
    0000026C 6DF6                   MOV.L       @R15+,R13
    0000026E 000B                   RTS
    00000270 6EF6                   MOV.L       @R15+,R14
      simplify.c    97    
      simplify.c    98    // try rationalizing
      simplify.c    99    
      simplify.c   100    static void
      simplify.c   101    f1(void)
    00000272              __$f1:                           ; function: f1
                                                           ; frame size=16
    00000272 2FE6                   MOV.L       R14,@-R15
    00000274 2FD6                   MOV.L       R13,@-R15
    00000276 2F86                   MOV.L       R8,@-R15
    00000278 4F22                   STS.L       PR,@-R15
    0000027A DE2C                   MOV.L       L1164+6,R14; _p1
    0000027C 64E2                   MOV.L       @R14,R4
    0000027E 8448                   MOV.B       @(8,R4),R0
    00000280 2008                   TST         R0,R0
    00000282 8B01                   BF          L1125
    00000284 A004                   BRA         L1126
    00000286 6342                   MOV.L       @R4,R3
    00000288              L1125:                            
    00000288 924D                   MOV.W       L1164,R2   ; H'0570
    0000028A D127                   MOV.L       L1164+2,R1 ; _symtab
    0000028C 6312                   MOV.L       @R1,R3
    0000028E 332C                   ADD         R2,R3
    00000290              L1126:                            
    00000290 D025                   MOV.L       L1164+2,R0 ; _symtab
    00000292 6202                   MOV.L       @R0,R2
    00000294 720C                   ADD         #12,R2
    00000296 3320                   CMP/EQ      R2,R3
    00000298 8B13                   BF          L1127
      simplify.c   102    {
      simplify.c   103            if (car(p1) != symbol(ADD))




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplify.c   104                    return;
      simplify.c   105            push(p1);
    0000029A D225                   MOV.L       L1164+10,R2; _push
    0000029C 420B                   JSR         @R2
    0000029E 0009                   NOP
      simplify.c   106            rationalize();
    000002A0 D324                   MOV.L       L1164+14,R3; _rationalize
    000002A2 430B                   JSR         @R3
    000002A4 0009                   NOP
      simplify.c   107            p2 = pop();
    000002A6 DD24                   MOV.L       L1164+18,R13; _p2
    000002A8 D224                   MOV.L       L1164+22,R2; _pop
    000002AA 420B                   JSR         @R2
    000002AC 0009                   NOP
    000002AE 2D02                   MOV.L       R0,@R13
      simplify.c   108            if (count(p2) < count(p1))
    000002B0 BFA5                   BSR         __$count
    000002B2 6403                   MOV         R0,R4
    000002B4 6803                   MOV         R0,R8
    000002B6 BFA2                   BSR         __$count
    000002B8 64E2                   MOV.L       @R14,R4
    000002BA 3803                   CMP/GE      R0,R8
    000002BC 8901                   BT          L1127
      simplify.c   109                    p1 = p2;
    000002BE 62D2                   MOV.L       @R13,R2
    000002C0 2E22                   MOV.L       R2,@R14
      simplify.c   110    }
    000002C2              L1127:                            
    000002C2 4F26                   LDS.L       @R15+,PR
    000002C4 68F6                   MOV.L       @R15+,R8
    000002C6 6DF6                   MOV.L       @R15+,R13
    000002C8 000B                   RTS
    000002CA 6EF6                   MOV.L       @R15+,R14
      simplify.c   111    
      simplify.c   112    // try condensing
      simplify.c   113    
      simplify.c   114    static void
      simplify.c   115    f2(void)
    000002CC              __$f2:                           ; function: f2
                                                           ; frame size=16
    000002CC 2FE6                   MOV.L       R14,@-R15
    000002CE 2FD6                   MOV.L       R13,@-R15
    000002D0 2F86                   MOV.L       R8,@-R15
    000002D2 4F22                   STS.L       PR,@-R15
    000002D4 DE15                   MOV.L       L1164+6,R14; _p1
    000002D6 64E2                   MOV.L       @R14,R4
    000002D8 8448                   MOV.B       @(8,R4),R0
    000002DA 2008                   TST         R0,R0
    000002DC 8B01                   BF          L1130
    000002DE A004                   BRA         L1131
    000002E0 6342                   MOV.L       @R4,R3
    000002E2              L1130:                            
    000002E2 9220                   MOV.W       L1164,R2   ; H'0570
    000002E4 D110                   MOV.L       L1164+2,R1 ; _symtab
    000002E6 6312                   MOV.L       @R1,R3
    000002E8 332C                   ADD         R2,R3
    000002EA              L1131:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002EA D00F                   MOV.L       L1164+2,R0 ; _symtab
    000002EC 6202                   MOV.L       @R0,R2
    000002EE 720C                   ADD         #12,R2
    000002F0 3320                   CMP/EQ      R2,R3
    000002F2 8B13                   BF          L1132
      simplify.c   116    {
      simplify.c   117            if (car(p1) != symbol(ADD))
      simplify.c   118                    return;
      simplify.c   119            push(p1);
    000002F4 D20E                   MOV.L       L1164+10,R2; _push
    000002F6 420B                   JSR         @R2
    000002F8 0009                   NOP
      simplify.c   120            Condense();
    000002FA D311                   MOV.L       L1164+26,R3; _Condense
    000002FC 430B                   JSR         @R3
    000002FE 0009                   NOP
      simplify.c   121            p2 = pop();
    00000300 DD0D                   MOV.L       L1164+18,R13; _p2
    00000302 D20E                   MOV.L       L1164+22,R2; _pop
    00000304 420B                   JSR         @R2
    00000306 0009                   NOP
    00000308 2D02                   MOV.L       R0,@R13
      simplify.c   122            if (count(p2) <= count(p1))
    0000030A BF78                   BSR         __$count
    0000030C 6403                   MOV         R0,R4
    0000030E 6803                   MOV         R0,R8
    00000310 BF75                   BSR         __$count
    00000312 64E2                   MOV.L       @R14,R4
    00000314 3807                   CMP/GT      R0,R8
    00000316 8901                   BT          L1132
      simplify.c   123                    p1 = p2;
    00000318 62D2                   MOV.L       @R13,R2
    0000031A 2E22                   MOV.L       R2,@R14
      simplify.c   124    }
    0000031C              L1132:                            
    0000031C 4F26                   LDS.L       @R15+,PR
    0000031E 68F6                   MOV.L       @R15+,R8
    00000320 6DF6                   MOV.L       @R15+,R13
    00000322 000B                   RTS
    00000324 6EF6                   MOV.L       @R15+,R14
    00000326              L1164:                            
    00000326 0570                   .DATA.W     H'0570
    00000328 <00000000>             .DATA.L     _symtab
    0000032C <00000000>             .DATA.L     _p1
    00000330 <00000000>             .DATA.L     _push
    00000334 <00000000>             .DATA.L     _rationalize
    00000338 <00000000>             .DATA.L     _p2
    0000033C <00000000>             .DATA.L     _pop
    00000340 <00000000>             .DATA.L     _Condense
      simplify.c   125    
      simplify.c   126    // this simplifies forms like (A-B) / (B-A)
      simplify.c   127    
      simplify.c   128    static void
      simplify.c   129    f3(void)
    00000344              __$f3:                           ; function: f3
                                                           ; frame size=16
    00000344 2FE6                   MOV.L       R14,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000346 2FD6                   MOV.L       R13,@-R15
    00000348 2F86                   MOV.L       R8,@-R15
    0000034A 4F22                   STS.L       PR,@-R15
      simplify.c   130    {
      simplify.c   131            push(p1);
    0000034C DE30                   MOV.L       L1165,R14  ; _p1
    0000034E D331                   MOV.L       L1165+4,R3 ; _push
    00000350 430B                   JSR         @R3
    00000352 64E2                   MOV.L       @R14,R4
      simplify.c   132            rationalize();
    00000354 DD30                   MOV.L       L1165+8,R13; _rationalize
    00000356 4D0B                   JSR         @R13
    00000358 0009                   NOP
      simplify.c   133            negate();
    0000035A D230                   MOV.L       L1165+12,R2; _negate
    0000035C 420B                   JSR         @R2
    0000035E 0009                   NOP
      simplify.c   134            rationalize();
    00000360 4D0B                   JSR         @R13
    00000362 0009                   NOP
      simplify.c   135            negate();
    00000364 D32D                   MOV.L       L1165+12,R3; _negate
    00000366 430B                   JSR         @R3
    00000368 0009                   NOP
      simplify.c   136            rationalize();
    0000036A 4D0B                   JSR         @R13
    0000036C 0009                   NOP
      simplify.c   137            p2 = pop();
    0000036E DD2C                   MOV.L       L1165+16,R13; _p2
    00000370 D22C                   MOV.L       L1165+20,R2; _pop
    00000372 420B                   JSR         @R2
    00000374 0009                   NOP
    00000376 2D02                   MOV.L       R0,@R13
      simplify.c   138            if (count(p2) < count(p1))
    00000378 BF41                   BSR         __$count
    0000037A 6403                   MOV         R0,R4
    0000037C 6803                   MOV         R0,R8
    0000037E BF3E                   BSR         __$count
    00000380 64E2                   MOV.L       @R14,R4
    00000382 3803                   CMP/GE      R0,R8
    00000384 8901                   BT          L1134
      simplify.c   139                    p1 = p2;
    00000386 62D2                   MOV.L       @R13,R2
    00000388 2E22                   MOV.L       R2,@R14
    0000038A              L1134:                            
      simplify.c   140    }
    0000038A 4F26                   LDS.L       @R15+,PR
    0000038C 68F6                   MOV.L       @R15+,R8
    0000038E 6DF6                   MOV.L       @R15+,R13
    00000390 000B                   RTS
    00000392 6EF6                   MOV.L       @R15+,R14
      simplify.c   141    
      simplify.c   142    // try expanding denominators
      simplify.c   143    
      simplify.c   144    static void
      simplify.c   145    f4(void)
    00000394              __$f4:                           ; function: f4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=16
    00000394 2FE6                   MOV.L       R14,@-R15
    00000396 2FD6                   MOV.L       R13,@-R15
    00000398 2F86                   MOV.L       R8,@-R15
    0000039A 4F22                   STS.L       PR,@-R15
      simplify.c   146    {
      simplify.c   147            if (iszero(p1))
    0000039C DE1C                   MOV.L       L1165,R14  ; _p1
    0000039E D322                   MOV.L       L1165+24,R3; _iszero
    000003A0 430B                   JSR         @R3
    000003A2 64E2                   MOV.L       @R14,R4
    000003A4 2008                   TST         R0,R0
    000003A6 8B1D                   BF          L1136
      simplify.c   148                    return;
      simplify.c   149            push(p1);
    000003A8 D31A                   MOV.L       L1165+4,R3 ; _push
    000003AA 430B                   JSR         @R3
    000003AC 64E2                   MOV.L       @R14,R4
      simplify.c   150            rationalize();
    000003AE DD1A                   MOV.L       L1165+8,R13; _rationalize
    000003B0 4D0B                   JSR         @R13
    000003B2 0009                   NOP
      simplify.c   151            inverse();
    000003B4 D21D                   MOV.L       L1165+28,R2; _inverse
    000003B6 420B                   JSR         @R2
    000003B8 0009                   NOP
      simplify.c   152            rationalize();
    000003BA 4D0B                   JSR         @R13
    000003BC 0009                   NOP
      simplify.c   153            inverse();
    000003BE D31B                   MOV.L       L1165+28,R3; _inverse
    000003C0 430B                   JSR         @R3
    000003C2 0009                   NOP
      simplify.c   154            rationalize();
    000003C4 4D0B                   JSR         @R13
    000003C6 0009                   NOP
      simplify.c   155            p2 = pop();
    000003C8 DD15                   MOV.L       L1165+16,R13; _p2
    000003CA D216                   MOV.L       L1165+20,R2; _pop
    000003CC 420B                   JSR         @R2
    000003CE 0009                   NOP
    000003D0 2D02                   MOV.L       R0,@R13
      simplify.c   156            if (count(p2) < count(p1))
    000003D2 BF14                   BSR         __$count
    000003D4 6403                   MOV         R0,R4
    000003D6 6803                   MOV         R0,R8
    000003D8 BF11                   BSR         __$count
    000003DA 64E2                   MOV.L       @R14,R4
    000003DC 3803                   CMP/GE      R0,R8
    000003DE 8901                   BT          L1136
      simplify.c   157                    p1 = p2;
    000003E0 62D2                   MOV.L       @R13,R2
    000003E2 2E22                   MOV.L       R2,@R14
      simplify.c   158    }
    000003E4              L1136:                            
    000003E4 4F26                   LDS.L       @R15+,PR
    000003E6 68F6                   MOV.L       @R15+,R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003E8 6DF6                   MOV.L       @R15+,R13
    000003EA 000B                   RTS
    000003EC 6EF6                   MOV.L       @R15+,R14
      simplify.c   159    
      simplify.c   160    // simplifies trig forms
      simplify.c   161    
      simplify.c   162    void
      simplify.c   163    simplify_trig(void)
    000003EE              _simplify_trig:                  ; function: simplify_trig
                                                           ; frame size=4
    000003EE 4F22                   STS.L       PR,@-R15
      simplify.c   164    {
      simplify.c   165            save();
    000003F0 D30F                   MOV.L       L1165+32,R3; _save
    000003F2 430B                   JSR         @R3
    000003F4 0009                   NOP
      simplify.c   166            p1 = pop();
    000003F6 D10B                   MOV.L       L1165+20,R1; _pop
    000003F8 410B                   JSR         @R1
    000003FA 0009                   NOP
    000003FC D304                   MOV.L       L1165,R3   ; _p1
      simplify.c   167            f5();
    000003FE B01B                   BSR         __$f5
    00000400 2302                   MOV.L       R0,@R3
      simplify.c   168            push(p1);
    00000402 D103                   MOV.L       L1165,R1   ; _p1
    00000404 D303                   MOV.L       L1165+4,R3 ; _push
    00000406 430B                   JSR         @R3
    00000408 6412                   MOV.L       @R1,R4
      simplify.c   169            restore();
    0000040A D20A                   MOV.L       L1165+36,R2; _restore
    0000040C 422B                   JMP         @R2
    0000040E 4F26                   LDS.L       @R15+,PR
    00000410              L1165:                            
    00000410 <00000000>             .DATA.L     _p1
    00000414 <00000000>             .DATA.L     _push
    00000418 <00000000>             .DATA.L     _rationalize
    0000041C <00000000>             .DATA.L     _negate
    00000420 <00000000>             .DATA.L     _p2
    00000424 <00000000>             .DATA.L     _pop
    00000428 <00000000>             .DATA.L     _iszero
    0000042C <00000000>             .DATA.L     _inverse
    00000430 <00000000>             .DATA.L     _save
    00000434 <00000000>             .DATA.L     _restore
      simplify.c   170    }
      simplify.c   171    
      simplify.c   172    static void
      simplify.c   173    f5(void)
    00000438              __$f5:                           ; function: f5
                                                           ; frame size=24
    00000438 2FE6                   MOV.L       R14,@-R15
    0000043A 2FD6                   MOV.L       R13,@-R15
    0000043C 2FC6                   MOV.L       R12,@-R15
    0000043E 2FB6                   MOV.L       R11,@-R15
    00000440 2F86                   MOV.L       R8,@-R15
    00000442 4F22                   STS.L       PR,@-R15
      simplify.c   174    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplify.c   175            if (find(p1, symbol(SIN)) == 0 && find(p1, symbol(COS)) == 0)
    00000444 DD36                   MOV.L       L1166+4,R13; _p1
    00000446 9369                   MOV.W       L1166,R3   ; H'0498
    00000448 D236                   MOV.L       L1166+8,R2 ; _symtab
    0000044A 6522                   MOV.L       @R2,R5
    0000044C D136                   MOV.L       L1166+12,R1; _find
    0000044E 353C                   ADD         R3,R5
    00000450 410B                   JSR         @R1
    00000452 64D2                   MOV.L       @R13,R4
    00000454 2008                   TST         R0,R0
    00000456 8B09                   BF          L1138
    00000458 9361                   MOV.W       L1166+2,R3 ; H'0120
    0000045A D232                   MOV.L       L1166+8,R2 ; _symtab
    0000045C D130                   MOV.L       L1166+4,R1 ; _p1
    0000045E 6522                   MOV.L       @R2,R5
    00000460 D231                   MOV.L       L1166+12,R2; _find
    00000462 353C                   ADD         R3,R5
    00000464 420B                   JSR         @R2
    00000466 6412                   MOV.L       @R1,R4
    00000468 2008                   TST         R0,R0
    0000046A 8943                   BT          L1139
    0000046C              L1138:                            
      simplify.c   176                    return;
      simplify.c   177    
      simplify.c   178            p2 = p1;
    0000046C DC2F                   MOV.L       L1166+16,R12; _p2
      simplify.c   179    
      simplify.c   180            trigmode = 1;
    0000046E E301                   MOV         #1,R3
    00000470 62D2                   MOV.L       @R13,R2
    00000472 2C22                   MOV.L       R2,@R12
    00000474 DB2E                   MOV.L       L1166+20,R11; _trigmode
    00000476 2B32                   MOV.L       R3,@R11
      simplify.c   181            push(p2);
    00000478 D22E                   MOV.L       L1166+24,R2; _push
    0000047A 420B                   JSR         @R2
    0000047C 64C2                   MOV.L       @R12,R4
      simplify.c   182            eval();
    0000047E D32E                   MOV.L       L1166+28,R3; _eval
    00000480 430B                   JSR         @R3
    00000482 0009                   NOP
      simplify.c   183            p3 = pop();
    00000484 DE2D                   MOV.L       L1166+32,R14; _p3
    00000486 D22E                   MOV.L       L1166+36,R2; _pop
    00000488 420B                   JSR         @R2
    0000048A 0009                   NOP
    0000048C 2E02                   MOV.L       R0,@R14
      simplify.c   184    
      simplify.c   185            trigmode = 2;
    0000048E E302                   MOV         #2,R3
      simplify.c   186            push(p2);
    00000490 D228                   MOV.L       L1166+24,R2; _push
    00000492 2B32                   MOV.L       R3,@R11
    00000494 420B                   JSR         @R2
    00000496 64C2                   MOV.L       @R12,R4
      simplify.c   187            eval();
    00000498 D327                   MOV.L       L1166+28,R3; _eval




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000049A 430B                   JSR         @R3
    0000049C 0009                   NOP
      simplify.c   188            p4 = pop();
    0000049E DC29                   MOV.L       L1166+40,R12; _p4
    000004A0 D227                   MOV.L       L1166+36,R2; _pop
    000004A2 420B                   JSR         @R2
    000004A4 0009                   NOP
      simplify.c   189    
      simplify.c   190            trigmode = 0;
    000004A6 E300                   MOV         #0,R3
    000004A8 2C02                   MOV.L       R0,@R12
    000004AA 2B32                   MOV.L       R3,@R11
      simplify.c   191    
      simplify.c   192            if (count(p4) < count(p3) || nterms(p4) < nterms(p3))
    000004AC BEA7                   BSR         __$count
    000004AE 64C2                   MOV.L       @R12,R4
    000004B0 6803                   MOV         R0,R8
    000004B2 BEA4                   BSR         __$count
    000004B4 64E2                   MOV.L       @R14,R4
    000004B6 3803                   CMP/GE      R0,R8
    000004B8 8B08                   BF          L1141
    000004BA D222                   MOV.L       L1166+40,R2; _p4
    000004BC B096                   BSR         __$nterms
    000004BE 6422                   MOV.L       @R2,R4
    000004C0 D11E                   MOV.L       L1166+32,R1; _p3
    000004C2 6803                   MOV         R0,R8
    000004C4 B092                   BSR         __$nterms
    000004C6 6412                   MOV.L       @R1,R4
    000004C8 3803                   CMP/GE      R0,R8
    000004CA 8901                   BT          L1140
    000004CC              L1141:                            
      simplify.c   193                    p3 = p4;
    000004CC 62C2                   MOV.L       @R12,R2
    000004CE 2E22                   MOV.L       R2,@R14
    000004D0              L1140:                            
      simplify.c   194    
      simplify.c   195            if (count(p3) < count(p1) || nterms(p3) < nterms(p1))
    000004D0 BE95                   BSR         __$count
    000004D2 64E2                   MOV.L       @R14,R4
    000004D4 6803                   MOV         R0,R8
    000004D6 BE92                   BSR         __$count
    000004D8 64D2                   MOV.L       @R13,R4
    000004DA 3803                   CMP/GE      R0,R8
    000004DC 8B08                   BF          L1143
    000004DE D217                   MOV.L       L1166+32,R2; _p3
    000004E0 B084                   BSR         __$nterms
    000004E2 6422                   MOV.L       @R2,R4
    000004E4 D10E                   MOV.L       L1166+4,R1 ; _p1
    000004E6 6803                   MOV         R0,R8
    000004E8 B080                   BSR         __$nterms
    000004EA 6412                   MOV.L       @R1,R4
    000004EC 3803                   CMP/GE      R0,R8
    000004EE 8901                   BT          L1139
    000004F0              L1143:                            
      simplify.c   196                    p1 = p3;
    000004F0 62E2                   MOV.L       @R14,R2
    000004F2 2D22                   MOV.L       R2,@R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      simplify.c   197    }
    000004F4              L1139:                            
    000004F4 4F26                   LDS.L       @R15+,PR
    000004F6 68F6                   MOV.L       @R15+,R8
    000004F8 6BF6                   MOV.L       @R15+,R11
    000004FA 6CF6                   MOV.L       @R15+,R12
    000004FC 6DF6                   MOV.L       @R15+,R13
    000004FE 000B                   RTS
    00000500 6EF6                   MOV.L       @R15+,R14
      simplify.c   198    
      simplify.c   199    // if it's a sum then try to simplify each term
      simplify.c   200    
      simplify.c   201    static void
      simplify.c   202    f9(void)
    00000502              __$f9:                           ; function: f9
                                                           ; frame size=24
    00000502 2FE6                   MOV.L       R14,@-R15
    00000504 2FD6                   MOV.L       R13,@-R15
    00000506 2FC6                   MOV.L       R12,@-R15
    00000508 2FB6                   MOV.L       R11,@-R15
    0000050A 2F86                   MOV.L       R8,@-R15
    0000050C 4F22                   STS.L       PR,@-R15
    0000050E DD04                   MOV.L       L1166+4,R13; _p1
    00000510 64D2                   MOV.L       @R13,R4
    00000512 8448                   MOV.B       @(8,R4),R0
    00000514 2008                   TST         R0,R0
    00000516 8B17                   BF          L1145
    00000518 A01A                   BRA         L1146
    0000051A 6342                   MOV.L       @R4,R3
    0000051C              L1166:                            
    0000051C 0498                   .DATA.W     H'0498
    0000051E 0120                   .DATA.W     H'0120
    00000520 <00000000>             .DATA.L     _p1
    00000524 <00000000>             .DATA.L     _symtab
    00000528 <00000000>             .DATA.L     _find
    0000052C <00000000>             .DATA.L     _p2
    00000530 <00000000>             .DATA.L     _trigmode
    00000534 <00000000>             .DATA.L     _push
    00000538 <00000000>             .DATA.L     _eval
    0000053C <00000000>             .DATA.L     _p3
    00000540 <00000000>             .DATA.L     _pop
    00000544 <00000000>             .DATA.L     _p4
    00000548              L1145:                            
    00000548 9269                   MOV.W       L1167,R2   ; H'0570
    0000054A D135                   MOV.L       L1167+2,R1 ; _symtab
    0000054C 6312                   MOV.L       @R1,R3
    0000054E 332C                   ADD         R2,R3
    00000550              L1146:                            
    00000550 D033                   MOV.L       L1167+2,R0 ; _symtab
    00000552 6202                   MOV.L       @R0,R2
    00000554 720C                   ADD         #12,R2
    00000556 3320                   CMP/EQ      R2,R3
    00000558 8B41                   BF          L1147
      simplify.c   203    {
      simplify.c   204            if (car(p1) != symbol(ADD))
      simplify.c   205                    return;
      simplify.c   206            push_integer(0);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000055A D232                   MOV.L       L1167+6,R2 ; _push_integer
    0000055C 420B                   JSR         @R2
    0000055E E400                   MOV         #0,R4
      simplify.c   207            p2 = cdr(p1);
    00000560 DE31                   MOV.L       L1167+10,R14; _p2
    00000562 62D2                   MOV.L       @R13,R2
    00000564 8428                   MOV.B       @(8,R2),R0
    00000566 2008                   TST         R0,R0
    00000568 8B02                   BF          L1148
    0000056A 62D2                   MOV.L       @R13,R2
    0000056C A004                   BRA         L1149
    0000056E 5321                   MOV.L       @(4,R2),R3
    00000570              L1148:                            
    00000570 9255                   MOV.W       L1167,R2   ; H'0570
    00000572 D12B                   MOV.L       L1167+2,R1 ; _symtab
    00000574 6312                   MOV.L       @R1,R3
    00000576 332C                   ADD         R2,R3
    00000578              L1149:                            
    00000578 2E32                   MOV.L       R3,@R14
    0000057A DB2C                   MOV.L       L1167+14,R11; _add
    0000057C DC2C                   MOV.L       L1167+18,R12; _push
      simplify.c   208            while (iscons(p2)) {
    0000057E A01D                   BRA         L1150
    00000580 0009                   NOP
    00000582              L1151:                            
      simplify.c   209                    push(car(p2));
    00000582 64E2                   MOV.L       @R14,R4
    00000584 8448                   MOV.B       @(8,R4),R0
    00000586 2008                   TST         R0,R0
    00000588 8B02                   BF          L1152
    0000058A 64E2                   MOV.L       @R14,R4
    0000058C A004                   BRA         L1153
    0000058E 6442                   MOV.L       @R4,R4
    00000590              L1152:                            
    00000590 9345                   MOV.W       L1167,R3   ; H'0570
    00000592 D223                   MOV.L       L1167+2,R2 ; _symtab
    00000594 6422                   MOV.L       @R2,R4
    00000596 343C                   ADD         R3,R4
    00000598              L1153:                            
    00000598 4C0B                   JSR         @R12
    0000059A 0009                   NOP
      simplify.c   210                    simplify();
    0000059C BD5A                   BSR         _simplify
    0000059E 0009                   NOP
      simplify.c   211                    add();
    000005A0 4B0B                   JSR         @R11
    000005A2 0009                   NOP
      simplify.c   212                    p2 = cdr(p2);
    000005A4 63E2                   MOV.L       @R14,R3
    000005A6 8438                   MOV.B       @(8,R3),R0
    000005A8 2008                   TST         R0,R0
    000005AA 8B02                   BF          L1154
    000005AC 62E2                   MOV.L       @R14,R2
    000005AE A004                   BRA         L1155
    000005B0 5221                   MOV.L       @(4,R2),R2
    000005B2              L1154:                            
    000005B2 9334                   MOV.W       L1167,R3   ; H'0570




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005B4 D11A                   MOV.L       L1167+2,R1 ; _symtab
    000005B6 6212                   MOV.L       @R1,R2
    000005B8 323C                   ADD         R3,R2
    000005BA              L1155:                            
    000005BA 2E22                   MOV.L       R2,@R14
    000005BC              L1150:                            
    000005BC 63E2                   MOV.L       @R14,R3
    000005BE 8438                   MOV.B       @(8,R3),R0
    000005C0 2008                   TST         R0,R0
    000005C2 89DE                   BT          L1151
      simplify.c   213            }
      simplify.c   214            p2 = pop();
    000005C4 D21B                   MOV.L       L1167+22,R2; _pop
    000005C6 420B                   JSR         @R2
    000005C8 0009                   NOP
    000005CA 2E02                   MOV.L       R0,@R14
      simplify.c   215            if (count(p2) < count(p1))
    000005CC BE17                   BSR         __$count
    000005CE 6403                   MOV         R0,R4
    000005D0 6803                   MOV         R0,R8
    000005D2 BE14                   BSR         __$count
    000005D4 64D2                   MOV.L       @R13,R4
    000005D6 3803                   CMP/GE      R0,R8
    000005D8 8901                   BT          L1147
      simplify.c   216                    p1 = p2;
    000005DA 62E2                   MOV.L       @R14,R2
    000005DC 2D22                   MOV.L       R2,@R13
      simplify.c   217    }
    000005DE              L1147:                            
    000005DE 4F26                   LDS.L       @R15+,PR
    000005E0 68F6                   MOV.L       @R15+,R8
    000005E2 6BF6                   MOV.L       @R15+,R11
    000005E4 6CF6                   MOV.L       @R15+,R12
    000005E6 6DF6                   MOV.L       @R15+,R13
    000005E8 000B                   RTS
    000005EA 6EF6                   MOV.L       @R15+,R14
      simplify.c   218    
      simplify.c   219    static int
      simplify.c   220    nterms(U *p)
    000005EC              __$nterms:                       ; function: nterms
                                                           ; frame size=4
    000005EC 4F22                   STS.L       PR,@-R15
      simplify.c   221    {
      simplify.c   222            if (car(p) != symbol(ADD))
    000005EE 8448                   MOV.B       @(8,R4),R0
    000005F0 2008                   TST         R0,R0
    000005F2 8B01                   BF          L1158
    000005F4 A004                   BRA         L1159
    000005F6 6342                   MOV.L       @R4,R3
    000005F8              L1158:                            
    000005F8 9211                   MOV.W       L1167,R2   ; H'0570
    000005FA D109                   MOV.L       L1167+2,R1 ; _symtab
    000005FC 6312                   MOV.L       @R1,R3
    000005FE 332C                   ADD         R2,R3
    00000600              L1159:                            
    00000600 D007                   MOV.L       L1167+2,R0 ; _symtab
    00000602 6202                   MOV.L       @R0,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000604 720C                   ADD         #12,R2
    00000606 3320                   CMP/EQ      R2,R3
    00000608 8902                   BT          L1157
      simplify.c   223                    return 1;
    0000060A 4F26                   LDS.L       @R15+,PR
    0000060C 000B                   RTS
    0000060E E001                   MOV         #1,R0
    00000610              L1157:                            
      simplify.c   224            else
      simplify.c   225                    return length(p) - 1;
    00000610 D309                   MOV.L       L1167+26,R3; _length
    00000612 430B                   JSR         @R3
    00000614 0009                   NOP
    00000616 70FF                   ADD         #-1,R0
      simplify.c   226    }
    00000618              L1160:                            
    00000618 4F26                   LDS.L       @R15+,PR
    0000061A 000B                   RTS
    0000061C 0009                   NOP
    0000061E              L1167:                            
    0000061E 0570                   .DATA.W     H'0570
    00000620 <00000000>             .DATA.L     _symtab
    00000624 <00000000>             .DATA.L     _push_integer
    00000628 <00000000>             .DATA.L     _p2
    0000062C <00000000>             .DATA.L     _add
    00000630 <00000000>             .DATA.L     _push
    00000634 <00000000>             .DATA.L     _pop
    00000638 <00000000>             .DATA.L     _length

































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      226



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               0000063C Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 0000063C Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           23
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           4
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            82






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkDC3B.tmp 

