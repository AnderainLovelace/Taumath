SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\sin.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           sin.c     1    // Sine function of numerical and symbolic arguments
           sin.c     2    
           sin.c     3    #include "stdafx.h"
           sin.c     4    #include "defs.h"
           sin.c     5    
           sin.c     6    void
           sin.c     7    eval_sin(void)
P   00000000              _eval_sin:                       ; function: eval_sin
                                                           ; frame size=8
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 4F22                   STS.L       PR,@-R15
           sin.c     8    {
           sin.c     9            push(cadr(p1));
    00000004 DE38                   MOV.L       L1169+4,R14; _p1
    00000006 64E2                   MOV.L       @R14,R4
    00000008 8448                   MOV.B       @(8,R4),R0
    0000000A 2008                   TST         R0,R0
    0000000C 8B02                   BF          L1112
    0000000E 64E2                   MOV.L       @R14,R4
    00000010 A004                   BRA         L1114
    00000012 5441                   MOV.L       @(4,R4),R4
    00000014              L1112:                            
    00000014 9366                   MOV.W       L1169,R3   ; H'0570
    00000016 D235                   MOV.L       L1169+8,R2 ; _symtab
    00000018 6422                   MOV.L       @R2,R4
    0000001A 343C                   ADD         R3,R4
    0000001C              L1114:                            
    0000001C 8448                   MOV.B       @(8,R4),R0
    0000001E 2008                   TST         R0,R0
    00000020 8B0C                   BF          L1111
    00000022 64E2                   MOV.L       @R14,R4
    00000024 8448                   MOV.B       @(8,R4),R0
    00000026 2008                   TST         R0,R0
    00000028 8B02                   BF          L1113
    0000002A 64E2                   MOV.L       @R14,R4
    0000002C A004                   BRA         L1115
    0000002E 5441                   MOV.L       @(4,R4),R4
    00000030              L1113:                            
    00000030 9358                   MOV.W       L1169,R3   ; H'0570
    00000032 D22E                   MOV.L       L1169+8,R2 ; _symtab
    00000034 6422                   MOV.L       @R2,R4
    00000036 343C                   ADD         R3,R4
    00000038              L1115:                            
    00000038 A004                   BRA         L1116
    0000003A 6442                   MOV.L       @R4,R4
    0000003C              L1111:                            
    0000003C 9352                   MOV.W       L1169,R3   ; H'0570
    0000003E D22B                   MOV.L       L1169+8,R2 ; _symtab
    00000040 6422                   MOV.L       @R2,R4
    00000042 343C                   ADD         R3,R4
    00000044              L1116:                            
    00000044 D32A                   MOV.L       L1169+12,R3; _push
    00000046 430B                   JSR         @R3
    00000048 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           sin.c    10            eval();
    0000004A D22A                   MOV.L       L1169+16,R2; _eval
    0000004C 420B                   JSR         @R2
    0000004E 0009                   NOP
           sin.c    11            sine();
    00000050 4F26                   LDS.L       @R15+,PR
    00000052 6EF6                   MOV.L       @R15+,R14
           sin.c    12    }
           sin.c    13    
           sin.c    14    void
           sin.c    15    sine(void)
    00000054              _sine:                           ; function: sine
                                                           ; frame size=8
    00000054 2FE6                   MOV.L       R14,@-R15
    00000056 4F22                   STS.L       PR,@-R15
           sin.c    16    {
           sin.c    17            save();
    00000058 D327                   MOV.L       L1169+20,R3; _save
    0000005A 430B                   JSR         @R3
    0000005C 0009                   NOP
           sin.c    18            p1 = pop();
    0000005E DE22                   MOV.L       L1169+4,R14; _p1
    00000060 D226                   MOV.L       L1169+24,R2; _pop
    00000062 420B                   JSR         @R2
    00000064 0009                   NOP
           sin.c    19            if (car(p1) == symbol(ADD))
    00000066 6203                   MOV         R0,R2
    00000068 2E02                   MOV.L       R0,@R14
    0000006A 8428                   MOV.B       @(8,R2),R0
    0000006C 2008                   TST         R0,R0
    0000006E 8B02                   BF          L1118
    00000070 62E2                   MOV.L       @R14,R2
    00000072 A004                   BRA         L1119
    00000074 6322                   MOV.L       @R2,R3
    00000076              L1118:                            
    00000076 9235                   MOV.W       L1169,R2   ; H'0570
    00000078 D11C                   MOV.L       L1169+8,R1 ; _symtab
    0000007A 6312                   MOV.L       @R1,R3
    0000007C 332C                   ADD         R2,R3
    0000007E              L1119:                            
    0000007E D01B                   MOV.L       L1169+8,R0 ; _symtab
    00000080 6202                   MOV.L       @R0,R2
    00000082 720C                   ADD         #12,R2
    00000084 3320                   CMP/EQ      R2,R3
    00000086 8B03                   BF          L1117
           sin.c    20                    sine_of_angle_sum();
    00000088 B008                   BSR         _sine_of_angle_sum
    0000008A 0009                   NOP
    0000008C A002                   BRA         L1120
    0000008E 0009                   NOP
    00000090              L1117:                            
           sin.c    21            else
           sin.c    22                    sine_of_angle();
    00000090 B08E                   BSR         _sine_of_angle
    00000092 0009                   NOP
    00000094              L1120:                            
           sin.c    23            restore();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000094 4F26                   LDS.L       @R15+,PR
    00000096 D31A                   MOV.L       L1169+28,R3; _restore
    00000098 432B                   JMP         @R3
    0000009A 6EF6                   MOV.L       @R15+,R14
           sin.c    24    }
           sin.c    25    
           sin.c    26    // Use angle sum formula for special angles.
           sin.c    27    
           sin.c    28    #define A p3
           sin.c    29    #define B p4
           sin.c    30    
           sin.c    31    void
           sin.c    32    sine_of_angle_sum(void)
    0000009C              _sine_of_angle_sum:              ; function: sine_of_angle_sum
                                                           ; frame size=32
    0000009C 2FE6                   MOV.L       R14,@-R15
    0000009E 2FD6                   MOV.L       R13,@-R15
    000000A0 2FC6                   MOV.L       R12,@-R15
    000000A2 2FB6                   MOV.L       R11,@-R15
    000000A4 2FA6                   MOV.L       R10,@-R15
    000000A6 2F96                   MOV.L       R9,@-R15
    000000A8 2F86                   MOV.L       R8,@-R15
    000000AA 4F22                   STS.L       PR,@-R15
           sin.c    33    {
           sin.c    34            p2 = cdr(p1);
    000000AC D80E                   MOV.L       L1169+4,R8 ; _p1
    000000AE DE15                   MOV.L       L1169+32,R14; _p2
    000000B0 6282                   MOV.L       @R8,R2
    000000B2 8428                   MOV.B       @(8,R2),R0
    000000B4 2008                   TST         R0,R0
    000000B6 8B02                   BF          L1121
    000000B8 6282                   MOV.L       @R8,R2
    000000BA A004                   BRA         L1122
    000000BC 5321                   MOV.L       @(4,R2),R3
    000000BE              L1121:                            
    000000BE 9211                   MOV.W       L1169,R2   ; H'0570
    000000C0 D10A                   MOV.L       L1169+8,R1 ; _symtab
    000000C2 6312                   MOV.L       @R1,R3
    000000C4 332C                   ADD         R2,R3
    000000C6              L1122:                            
    000000C6 2E32                   MOV.L       R3,@R14
    000000C8 D90F                   MOV.L       L1169+36,R9; _cosine
    000000CA DA10                   MOV.L       L1169+40,R10; _multiply
    000000CC DB10                   MOV.L       L1169+44,R11; _p3
    000000CE DC11                   MOV.L       L1169+48,R12; _p4
    000000D0 DD07                   MOV.L       L1169+12,R13; _push
           sin.c    35            while (iscons(p2)) {
    000000D2 A060                   BRA         L1123
    000000D4 0009                   NOP
    000000D6              L1124:                            
           sin.c    36                    B = car(p2);
    000000D6 63E2                   MOV.L       @R14,R3
    000000D8 8438                   MOV.B       @(8,R3),R0
    000000DA 2008                   TST         R0,R0
    000000DC 8B1C                   BF          L1125
    000000DE 62E2                   MOV.L       @R14,R2
    000000E0 A01E                   BRA         L1126




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000E2 6222                   MOV.L       @R2,R2
    000000E4              L1169:                            
    000000E4 0570                   .DATA.W     H'0570
    000000E6 0000                   .DATA.W     0
    000000E8 <00000000>             .DATA.L     _p1
    000000EC <00000000>             .DATA.L     _symtab
    000000F0 <00000000>             .DATA.L     _push
    000000F4 <00000000>             .DATA.L     _eval
    000000F8 <00000000>             .DATA.L     _save
    000000FC <00000000>             .DATA.L     _pop
    00000100 <00000000>             .DATA.L     _restore
    00000104 <00000000>             .DATA.L     _p2
    00000108 <00000000>             .DATA.L     _cosine
    0000010C <00000000>             .DATA.L     _multiply
    00000110 <00000000>             .DATA.L     _p3
    00000114 <00000000>             .DATA.L     _p4
    00000118              L1125:                            
    00000118 937C                   MOV.W       L1170,R3   ; H'0570
    0000011A D13F                   MOV.L       L1170+4,R1 ; _symtab
    0000011C 6212                   MOV.L       @R1,R2
    0000011E 323C                   ADD         R3,R2
    00000120              L1126:                            
    00000120 2C22                   MOV.L       R2,@R12
           sin.c    37                    if (isnpi(B)) {
    00000122 D33E                   MOV.L       L1170+8,R3 ; _isnpi
    00000124 430B                   JSR         @R3
    00000126 6423                   MOV         R2,R4
    00000128 2008                   TST         R0,R0
    0000012A 8928                   BT          L1127
           sin.c    38                            push(p1);
    0000012C 4D0B                   JSR         @R13
    0000012E 6482                   MOV.L       @R8,R4
           sin.c    39                            push(B);
    00000130 4D0B                   JSR         @R13
    00000132 64C2                   MOV.L       @R12,R4
           sin.c    40                            subtract();
    00000134 D33A                   MOV.L       L1170+12,R3; _subtract
    00000136 430B                   JSR         @R3
    00000138 0009                   NOP
           sin.c    41                            A = pop();
    0000013A D23A                   MOV.L       L1170+16,R2; _pop
    0000013C 420B                   JSR         @R2
    0000013E 0009                   NOP
    00000140 2B02                   MOV.L       R0,@R11
           sin.c    42                            push(A);
    00000142 4D0B                   JSR         @R13
    00000144 6403                   MOV         R0,R4
           sin.c    43                            sine();
    00000146 BF85                   BSR         _sine
    00000148 0009                   NOP
           sin.c    44                            push(B);
    0000014A 4D0B                   JSR         @R13
    0000014C 64C2                   MOV.L       @R12,R4
           sin.c    45                            cosine();
    0000014E 490B                   JSR         @R9
    00000150 0009                   NOP
           sin.c    46                            multiply();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000152 4A0B                   JSR         @R10
    00000154 0009                   NOP
           sin.c    47                            push(A);
    00000156 4D0B                   JSR         @R13
    00000158 64B2                   MOV.L       @R11,R4
           sin.c    48                            cosine();
    0000015A 490B                   JSR         @R9
    0000015C 0009                   NOP
           sin.c    49                            push(B);
    0000015E 4D0B                   JSR         @R13
    00000160 64C2                   MOV.L       @R12,R4
           sin.c    50                            sine();
    00000162 BF77                   BSR         _sine
    00000164 0009                   NOP
           sin.c    51                            multiply();
    00000166 4A0B                   JSR         @R10
    00000168 0009                   NOP
           sin.c    52                            add();
    0000016A 4F26                   LDS.L       @R15+,PR
    0000016C D32E                   MOV.L       L1170+20,R3; _add
    0000016E 68F6                   MOV.L       @R15+,R8
    00000170 69F6                   MOV.L       @R15+,R9
    00000172 6AF6                   MOV.L       @R15+,R10
    00000174 6BF6                   MOV.L       @R15+,R11
    00000176 6CF6                   MOV.L       @R15+,R12
    00000178 6DF6                   MOV.L       @R15+,R13
    0000017A 432B                   JMP         @R3
    0000017C 6EF6                   MOV.L       @R15+,R14
    0000017E              L1127:                            
           sin.c    53                            return;
           sin.c    54                    }
           sin.c    55                    p2 = cdr(p2);
    0000017E 63E2                   MOV.L       @R14,R3
    00000180 8438                   MOV.B       @(8,R3),R0
    00000182 2008                   TST         R0,R0
    00000184 8B02                   BF          L1129
    00000186 62E2                   MOV.L       @R14,R2
    00000188 A004                   BRA         L1130
    0000018A 5221                   MOV.L       @(4,R2),R2
    0000018C              L1129:                            
    0000018C 9342                   MOV.W       L1170,R3   ; H'0570
    0000018E D122                   MOV.L       L1170+4,R1 ; _symtab
    00000190 6212                   MOV.L       @R1,R2
    00000192 323C                   ADD         R3,R2
    00000194              L1130:                            
    00000194 2E22                   MOV.L       R2,@R14
    00000196              L1123:                            
    00000196 63E2                   MOV.L       @R14,R3
    00000198 8438                   MOV.B       @(8,R3),R0
    0000019A 2008                   TST         R0,R0
    0000019C 899B                   BT          L1124
           sin.c    56            }
           sin.c    57            sine_of_angle();
    0000019E 4F26                   LDS.L       @R15+,PR
    000001A0 68F6                   MOV.L       @R15+,R8
    000001A2 69F6                   MOV.L       @R15+,R9
    000001A4 6AF6                   MOV.L       @R15+,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001A6 6BF6                   MOV.L       @R15+,R11
    000001A8 6CF6                   MOV.L       @R15+,R12
    000001AA 6DF6                   MOV.L       @R15+,R13
    000001AC A000                   BRA         _sine_of_angle
    000001AE 6EF6                   MOV.L       @R15+,R14
           sin.c    58    }
           sin.c    59    
           sin.c    60    void
           sin.c    61    sine_of_angle(void)
    000001B0              _sine_of_angle:                  ; function: sine_of_angle
                                                           ; frame size=60
                                                           ; used runtime library name:
                                                           ; __modls, __ltd
    000001B0 2FE6                   MOV.L       R14,@-R15
    000001B2 2FD6                   MOV.L       R13,@-R15
    000001B4 2FC6                   MOV.L       R12,@-R15
    000001B6 2FB6                   MOV.L       R11,@-R15
    000001B8 2FA6                   MOV.L       R10,@-R15
    000001BA 2F96                   MOV.L       R9,@-R15
    000001BC 2F86                   MOV.L       R8,@-R15
    000001BE 4F22                   STS.L       PR,@-R15
    000001C0 D91A                   MOV.L       L1170+24,R9; _multiply
    000001C2 7FF8                   ADD         #-8,R15
    000001C4 DA1A                   MOV.L       L1170+28,R10; _power
    000001C6 DD1B                   MOV.L       L1170+32,R13; _push_rational
    000001C8 D813                   MOV.L       L1170+4,R8 ; _symtab
    000001CA DB1B                   MOV.L       L1170+36,R11; _push
    000001CC DE1B                   MOV.L       L1170+40,R14; _p1
    000001CE 6CE2                   MOV.L       @R14,R12
    000001D0 84C8                   MOV.B       @(8,R12),R0
    000001D2 2008                   TST         R0,R0
    000001D4 8B01                   BF          L1132
    000001D6 A004                   BRA         L1133
    000001D8 63C2                   MOV.L       @R12,R3
    000001DA              L1132:                            
    000001DA 921B                   MOV.W       L1170,R2   ; H'0570
    000001DC D10E                   MOV.L       L1170+4,R1 ; _symtab
    000001DE 6312                   MOV.L       @R1,R3
    000001E0 332C                   ADD         R2,R3
    000001E2              L1133:                            
    000001E2 6282                   MOV.L       @R8,R2
    000001E4 7248                   ADD         #72,R2
    000001E6 3320                   CMP/EQ      R2,R3
    000001E8 8B38                   BF          L1131
           sin.c    62    {
           sin.c    63            int n;
           sin.c    64            double d;
           sin.c    65    
           sin.c    66            if (car(p1) == symbol(ARCSIN)) {
           sin.c    67                    push(cadr(p1));
    000001EA 64E2                   MOV.L       @R14,R4
    000001EC 8448                   MOV.B       @(8,R4),R0
    000001EE 2008                   TST         R0,R0
    000001F0 8B02                   BF          L1135
    000001F2 64E2                   MOV.L       @R14,R4
    000001F4 A004                   BRA         L1137
    000001F6 5441                   MOV.L       @(4,R4),R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001F8              L1135:                            
    000001F8 930C                   MOV.W       L1170,R3   ; H'0570
    000001FA D207                   MOV.L       L1170+4,R2 ; _symtab
    000001FC 6422                   MOV.L       @R2,R4
    000001FE 343C                   ADD         R3,R4
    00000200              L1137:                            
    00000200 8448                   MOV.B       @(8,R4),R0
    00000202 2008                   TST         R0,R0
    00000204 8B22                   BF          L1134
    00000206 64E2                   MOV.L       @R14,R4
    00000208 8448                   MOV.B       @(8,R4),R0
    0000020A 2008                   TST         R0,R0
    0000020C 8B18                   BF          L1136
    0000020E 64E2                   MOV.L       @R14,R4
    00000210 A01A                   BRA         L1138
    00000212 5441                   MOV.L       @(4,R4),R4
    00000214              L1170:                            
    00000214 0570                   .DATA.W     H'0570
    00000216 0000                   .DATA.W     0
    00000218 <00000000>             .DATA.L     _symtab
    0000021C <00000000>             .DATA.L     _isnpi
    00000220 <00000000>             .DATA.L     _subtract
    00000224 <00000000>             .DATA.L     _pop
    00000228 <00000000>             .DATA.L     _add
    0000022C <00000000>             .DATA.L     _multiply
    00000230 <00000000>             .DATA.L     _power
    00000234 <00000000>             .DATA.L     _push_rational
    00000238 <00000000>             .DATA.L     _push
    0000023C <00000000>             .DATA.L     _p1
    00000240              L1136:                            
    00000240 9379                   MOV.W       L1171,R3   ; H'0570
    00000242 D23D                   MOV.L       L1171+2,R2 ; _symtab
    00000244 6422                   MOV.L       @R2,R4
    00000246 343C                   ADD         R3,R4
    00000248              L1138:                            
    00000248 A004                   BRA         L1139
    0000024A 6442                   MOV.L       @R4,R4
    0000024C              L1134:                            
    0000024C 9373                   MOV.W       L1171,R3   ; H'0570
    0000024E D23A                   MOV.L       L1171+2,R2 ; _symtab
    00000250 6422                   MOV.L       @R2,R4
    00000252 343C                   ADD         R3,R4
    00000254              L1139:                            
    00000254 4B0B                   JSR         @R11
    00000256 0009                   NOP
           sin.c    68                    return;
    00000258 A15C                   BRA         L1140
    0000025A 0009                   NOP
    0000025C              L1131:                            
           sin.c    69            }
           sin.c    70    
           sin.c    71            if (isdouble(p1)) {
    0000025C 84C8                   MOV.B       @(8,R12),R0
    0000025E 600C                   EXTU.B      R0,R0
    00000260 8802                   CMP/EQ      #2,R0
    00000262 8B27                   BF          L1141
           sin.c    72                    d = sin(p1->u.d);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000264 52C1                   MOV.L       @(4,R12),R2
    00000266 2F26                   MOV.L       R2,@-R15
    00000268 62C2                   MOV.L       @R12,R2
    0000026A 2F26                   MOV.L       R2,@-R15
    0000026C D133                   MOV.L       L1171+6,R1 ; _sin
    0000026E 63F3                   MOV         R15,R3
    00000270 7308                   ADD         #8,R3
    00000272 410B                   JSR         @R1
    00000274 2F36                   MOV.L       R3,@-R15
           sin.c    73                    if (fabs(d) < 1e-10)
    00000276 7F04                   ADD         #4,R15
    00000278 D131                   MOV.L       L1171+10,R1; _fabs
    0000027A E208                   MOV         #8,R2
    0000027C 53F3                   MOV.L       @(12,R15),R3
    0000027E 2F36                   MOV.L       R3,@-R15
    00000280 53F3                   MOV.L       @(12,R15),R3
    00000282 2F36                   MOV.L       R3,@-R15
    00000284 32FC                   ADD         R15,R2
    00000286 410B                   JSR         @R1
    00000288 2F26                   MOV.L       R2,@-R15
    0000028A 7F0C                   ADD         #12,R15
    0000028C D22D                   MOV.L       L1171+14,R2; H'D9D7BDBB
    0000028E 2F26                   MOV.L       R2,@-R15
    00000290 D22D                   MOV.L       L1171+18,R2; H'3DDB7CDF
    00000292 D32E                   MOV.L       L1171+22,R3; __ltd
    00000294 430B                   JSR         @R3
    00000296 2F26                   MOV.L       R2,@-R15
    00000298 8800                   CMP/EQ      #0,R0
    0000029A 8903                   BT          L1142
           sin.c    74                            d = 0.0;
    0000029C 62F3                   MOV         R15,R2
    0000029E E100                   MOV         #0,R1
    000002A0 2212                   MOV.L       R1,@R2
    000002A2 1211                   MOV.L       R1,@(4,R2)
    000002A4              L1142:                            
           sin.c    75                    push_double(d);
    000002A4 53F1                   MOV.L       @(4,R15),R3
    000002A6 2F36                   MOV.L       R3,@-R15
    000002A8 53F1                   MOV.L       @(4,R15),R3
    000002AA D229                   MOV.L       L1171+26,R2; _push_double
    000002AC 420B                   JSR         @R2
    000002AE 2F36                   MOV.L       R3,@-R15
           sin.c    76                    return;
    000002B0 A130                   BRA         L1140
    000002B2 7F08                   ADD         #8,R15
    000002B4              L1141:                            
           sin.c    77            }
           sin.c    78    
           sin.c    79            // sine function is antisymmetric, sin(-x) = -sin(x)
           sin.c    80    
           sin.c    81            if (isnegative(p1)) {
    000002B4 D327                   MOV.L       L1171+30,R3; _isnegative
    000002B6 430B                   JSR         @R3
    000002B8 64C3                   MOV         R12,R4
    000002BA 2008                   TST         R0,R0
    000002BC 8911                   BT          L1143
           sin.c    82                    push(p1);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002BE 4B0B                   JSR         @R11
    000002C0 64E2                   MOV.L       @R14,R4
           sin.c    83                    negate();
    000002C2 D325                   MOV.L       L1171+34,R3; _negate
    000002C4 430B                   JSR         @R3
    000002C6 0009                   NOP
           sin.c    84                    sine();
    000002C8 BEC4                   BSR         _sine
    000002CA 0009                   NOP
           sin.c    85                    negate();
    000002CC D322                   MOV.L       L1171+34,R3; _negate
    000002CE 7F08                   ADD         #8,R15
    000002D0 4F26                   LDS.L       @R15+,PR
    000002D2 68F6                   MOV.L       @R15+,R8
    000002D4 69F6                   MOV.L       @R15+,R9
    000002D6 6AF6                   MOV.L       @R15+,R10
    000002D8 6BF6                   MOV.L       @R15+,R11
    000002DA 6CF6                   MOV.L       @R15+,R12
    000002DC 6DF6                   MOV.L       @R15+,R13
    000002DE 432B                   JMP         @R3
    000002E0 6EF6                   MOV.L       @R15+,R14
    000002E2              L1143:                            
    000002E2 DC1E                   MOV.L       L1171+38,R12; _push_integer
    000002E4 64E2                   MOV.L       @R14,R4
    000002E6 8448                   MOV.B       @(8,R4),R0
    000002E8 2008                   TST         R0,R0
    000002EA 8B01                   BF          L1145
    000002EC A004                   BRA         L1146
    000002EE 6242                   MOV.L       @R4,R2
    000002F0              L1145:                            
    000002F0 9321                   MOV.W       L1171,R3   ; H'0570
    000002F2 D111                   MOV.L       L1171+2,R1 ; _symtab
    000002F4 6212                   MOV.L       @R1,R2
    000002F6 323C                   ADD         R3,R2
    000002F8              L1146:                            
    000002F8 6382                   MOV.L       @R8,R3
    000002FA 7360                   ADD         #96,R3
    000002FC 3230                   CMP/EQ      R3,R2
    000002FE 8B69                   BF          L1144
           sin.c    86                    return;
           sin.c    87            }
           sin.c    88    
           sin.c    89            // sin(arctan(x)) = x / sqrt(1 + x^2)
           sin.c    90    
           sin.c    91            // see p. 173 of the CRC Handbook of Mathematical Sciences
           sin.c    92    
           sin.c    93            if (car(p1) == symbol(ARCTAN)) {
           sin.c    94                    push(cadr(p1));
    00000300 64E2                   MOV.L       @R14,R4
    00000302 8448                   MOV.B       @(8,R4),R0
    00000304 2008                   TST         R0,R0
    00000306 8B02                   BF          L1148
    00000308 64E2                   MOV.L       @R14,R4
    0000030A A004                   BRA         L1150
    0000030C 5441                   MOV.L       @(4,R4),R4
    0000030E              L1148:                            
    0000030E 9312                   MOV.W       L1171,R3   ; H'0570




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000310 D209                   MOV.L       L1171+2,R2 ; _symtab
    00000312 6422                   MOV.L       @R2,R4
    00000314 343C                   ADD         R3,R4
    00000316              L1150:                            
    00000316 8448                   MOV.B       @(8,R4),R0
    00000318 2008                   TST         R0,R0
    0000031A 8B21                   BF          L1147
    0000031C 64E2                   MOV.L       @R14,R4
    0000031E 8448                   MOV.B       @(8,R4),R0
    00000320 2008                   TST         R0,R0
    00000322 8B02                   BF          L1149
    00000324 64E2                   MOV.L       @R14,R4
    00000326 A004                   BRA         L1151
    00000328 5441                   MOV.L       @(4,R4),R4
    0000032A              L1149:                            
    0000032A 9304                   MOV.W       L1171,R3   ; H'0570
    0000032C D202                   MOV.L       L1171+2,R2 ; _symtab
    0000032E 6422                   MOV.L       @R2,R4
    00000330 343C                   ADD         R3,R4
    00000332              L1151:                            
    00000332 A019                   BRA         L1152
    00000334 6442                   MOV.L       @R4,R4
    00000336              L1171:                            
    00000336 0570                   .DATA.W     H'0570
    00000338 <00000000>             .DATA.L     _symtab
    0000033C <00000000>             .DATA.L     _sin
    00000340 <00000000>             .DATA.L     _fabs
    00000344 D9D7BDBB               .DATA.L     H'D9D7BDBB
    00000348 3DDB7CDF               .DATA.L     H'3DDB7CDF
    0000034C <00000000>             .DATA.L     __ltd
    00000350 <00000000>             .DATA.L     _push_double
    00000354 <00000000>             .DATA.L     _isnegative
    00000358 <00000000>             .DATA.L     _negate
    0000035C <00000000>             .DATA.L     _push_integer
    00000360              L1147:                            
    00000360 9333                   MOV.W       L1172,R3   ; H'0570
    00000362 D21A                   MOV.L       L1172+2,R2 ; _symtab
    00000364 6422                   MOV.L       @R2,R4
    00000366 343C                   ADD         R3,R4
    00000368              L1152:                            
    00000368 4B0B                   JSR         @R11
    0000036A 0009                   NOP
           sin.c    95                    push_integer(1);
    0000036C 4C0B                   JSR         @R12
    0000036E E401                   MOV         #1,R4
           sin.c    96                    push(cadr(p1));
    00000370 64E2                   MOV.L       @R14,R4
    00000372 8448                   MOV.B       @(8,R4),R0
    00000374 2008                   TST         R0,R0
    00000376 8B02                   BF          L1154
    00000378 64E2                   MOV.L       @R14,R4
    0000037A A004                   BRA         L1156
    0000037C 5441                   MOV.L       @(4,R4),R4
    0000037E              L1154:                            
    0000037E 9324                   MOV.W       L1172,R3   ; H'0570
    00000380 D212                   MOV.L       L1172+2,R2 ; _symtab
    00000382 6422                   MOV.L       @R2,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000384 343C                   ADD         R3,R4
    00000386              L1156:                            
    00000386 8448                   MOV.B       @(8,R4),R0
    00000388 2008                   TST         R0,R0
    0000038A 8B0C                   BF          L1153
    0000038C 64E2                   MOV.L       @R14,R4
    0000038E 8448                   MOV.B       @(8,R4),R0
    00000390 2008                   TST         R0,R0
    00000392 8B02                   BF          L1155
    00000394 64E2                   MOV.L       @R14,R4
    00000396 A004                   BRA         L1157
    00000398 5441                   MOV.L       @(4,R4),R4
    0000039A              L1155:                            
    0000039A 9316                   MOV.W       L1172,R3   ; H'0570
    0000039C D20B                   MOV.L       L1172+2,R2 ; _symtab
    0000039E 6422                   MOV.L       @R2,R4
    000003A0 343C                   ADD         R3,R4
    000003A2              L1157:                            
    000003A2 A004                   BRA         L1158
    000003A4 6442                   MOV.L       @R4,R4
    000003A6              L1153:                            
    000003A6 9310                   MOV.W       L1172,R3   ; H'0570
    000003A8 D208                   MOV.L       L1172+2,R2 ; _symtab
    000003AA 6422                   MOV.L       @R2,R4
    000003AC 343C                   ADD         R3,R4
    000003AE              L1158:                            
    000003AE 4B0B                   JSR         @R11
    000003B0 0009                   NOP
           sin.c    97                    push_integer(2);
    000003B2 4C0B                   JSR         @R12
    000003B4 E402                   MOV         #2,R4
           sin.c    98                    power();
    000003B6 4A0B                   JSR         @R10
    000003B8 0009                   NOP
           sin.c    99                    add();
    000003BA D305                   MOV.L       L1172+6,R3 ; _add
    000003BC 430B                   JSR         @R3
    000003BE 0009                   NOP
           sin.c   100                    push_rational(-1, 2);
    000003C0 E502                   MOV         #2,R5
    000003C2 4D0B                   JSR         @R13
    000003C4 E4FF                   MOV         #-1,R4
           sin.c   101                    power();
           sin.c   102                    multiply();
           sin.c   103                    return;
           sin.c   104            }
           sin.c   105    
           sin.c   106            // multiply by 180/pi
           sin.c   107    
           sin.c   108            push(p1);
           sin.c   109            push_integer(180);
           sin.c   110            multiply();
           sin.c   111            push_symbol(PI);
           sin.c   112            divide();
           sin.c   113    
           sin.c   114            n = pop_integer();
           sin.c   115    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           sin.c   116            if (n < 0) {
           sin.c   117                    push(symbol(SIN));
           sin.c   118                    push(p1);
           sin.c   119                    list(2);
           sin.c   120                    return;
           sin.c   121            }
           sin.c   122    
           sin.c   123            switch (n % 360) {
           sin.c   124            case 0:
           sin.c   125            case 180:
           sin.c   126                    push_integer(0);
           sin.c   127                    break;
           sin.c   128            case 30:
           sin.c   129            case 150:
           sin.c   130                    push_rational(1, 2);
           sin.c   131                    break;
           sin.c   132            case 210:
           sin.c   133            case 330:
           sin.c   134                    push_rational(-1, 2);
           sin.c   135                    break;
           sin.c   136            case 45:
           sin.c   137            case 135:
           sin.c   138                    push_rational(1, 2);
           sin.c   139                    push_integer(2);
           sin.c   140                    push_rational(1, 2);
           sin.c   141                    power();
           sin.c   142                    multiply();
           sin.c   143                    break;
    000003C6 A088                   BRA         L1167
    000003C8 0009                   NOP
    000003CA              L1172:                            
    000003CA 0570                   .DATA.W     H'0570
    000003CC <00000000>             .DATA.L     _symtab
    000003D0 <00000000>             .DATA.L     _add
    000003D4              L1144:                            
    000003D4 4B0B                   JSR         @R11
    000003D6 0009                   NOP
    000003D8 945A                   MOV.W       L1173,R4   ; H'00B4
    000003DA 4C0B                   JSR         @R12
    000003DC 0009                   NOP
    000003DE 490B                   JSR         @R9
    000003E0 0009                   NOP
    000003E2 D231                   MOV.L       L1173+24,R2; _push_symbol
    000003E4 420B                   JSR         @R2
    000003E6 E47F                   MOV         #127,R4
    000003E8 D330                   MOV.L       L1173+28,R3; _divide
    000003EA 430B                   JSR         @R3
    000003EC 0009                   NOP
    000003EE D230                   MOV.L       L1173+32,R2; _pop_integer
    000003F0 420B                   JSR         @R2
    000003F2 0009                   NOP
    000003F4 934D                   MOV.W       L1173+2,R3 ; H'0498
    000003F6 6503                   MOV         R0,R5
    000003F8 6482                   MOV.L       @R8,R4
    000003FA 4511                   CMP/PZ      R5
    000003FC 8D02                   BT/S        L1174
    000003FE 343C                   ADD         R3,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000400 A078                   BRA         L1166
    00000402 0009                   NOP
    00000404              L1174:                            
    00000404 9046                   MOV.W       L1173+4,R0 ; H'0168
    00000406 D22B                   MOV.L       L1173+36,R2; __modls
    00000408 420B                   JSR         @R2
    0000040A 6153                   MOV         R5,R1
    0000040C 8800                   CMP/EQ      #0,R0
    0000040E 8929                   BT          L1083
    00000410 913E                   MOV.W       L1173,R1   ; H'00B4
    00000412 3010                   CMP/EQ      R1,R0
    00000414 8926                   BT          L1084
    00000416 881E                   CMP/EQ      #30,R0
    00000418 8926                   BT          L1085
    0000041A 913C                   MOV.W       L1173+6,R1 ; H'0096
    0000041C 3010                   CMP/EQ      R1,R0
    0000041E 8923                   BT          L1086
    00000420 913A                   MOV.W       L1173+8,R1 ; H'00D2
    00000422 3010                   CMP/EQ      R1,R0
    00000424 8923                   BT          L1087
    00000426 9138                   MOV.W       L1173+10,R1; H'014A
    00000428 3010                   CMP/EQ      R1,R0
    0000042A 8920                   BT          L1088
    0000042C 882D                   CMP/EQ      #45,R0
    0000042E 8924                   BT          L1089
    00000430 9134                   MOV.W       L1173+12,R1; H'0087
    00000432 3010                   CMP/EQ      R1,R0
    00000434 8921                   BT          L1090
    00000436 9132                   MOV.W       L1173+14,R1; H'00E1
    00000438 3010                   CMP/EQ      R1,R0
    0000043A 8921                   BT          L1091
    0000043C 9130                   MOV.W       L1173+16,R1; H'013B
    0000043E 3010                   CMP/EQ      R1,R0
    00000440 891E                   BT          L1092
    00000442 883C                   CMP/EQ      #60,R0
    00000444 8938                   BT          L1093
    00000446 8878                   CMP/EQ      #120,R0
    00000448 8936                   BT          L1094
    0000044A 912A                   MOV.W       L1173+18,R1; H'00F0
    0000044C 3010                   CMP/EQ      R1,R0
    0000044E 893B                   BT          L1095
    00000450 9128                   MOV.W       L1173+20,R1; H'012C
    00000452 3010                   CMP/EQ      R1,R0
    00000454 8938                   BT          L1096
    00000456 885A                   CMP/EQ      #90,R0
    00000458 8945                   BT          L1097
    0000045A 9124                   MOV.W       L1173+22,R1; H'010E
    0000045C 3010                   CMP/EQ      R1,R0
    0000045E 8944                   BT          L1098
    00000460 A048                   BRA         L1166
    00000462 0009                   NOP
    00000464              L1083:                           ; case label 
    00000464              L1084:                           ; case label 
    00000464 A042                   BRA         L1168
    00000466 E400                   MOV         #0,R4
    00000468              L1085:                           ; case label 
    00000468              L1086:                           ; case label 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000468 E502                   MOV         #2,R5
    0000046A A002                   BRA         L1161
    0000046C E401                   MOV         #1,R4
    0000046E              L1087:                           ; case label 
    0000046E              L1088:                           ; case label 
    0000046E E502                   MOV         #2,R5
    00000470 E4FF                   MOV         #-1,R4
    00000472              L1161:                            
    00000472 4D0B                   JSR         @R13
    00000474 0009                   NOP
    00000476 A04D                   BRA         L1140
    00000478 0009                   NOP
    0000047A              L1089:                           ; case label 
    0000047A              L1090:                           ; case label 
    0000047A E502                   MOV         #2,R5
    0000047C A002                   BRA         L1162
    0000047E E401                   MOV         #1,R4
    00000480              L1091:                           ; case label 
           sin.c   144            case 225:
           sin.c   145            case 315:
    00000480              L1092:                           ; case label 
           sin.c   146                    push_rational(-1, 2);
    00000480 E502                   MOV         #2,R5
    00000482 E4FF                   MOV         #-1,R4
    00000484              L1162:                            
    00000484 4D0B                   JSR         @R13
    00000486 0009                   NOP
           sin.c   147                    push_integer(2);
    00000488 4C0B                   JSR         @R12
    0000048A E402                   MOV         #2,R4
    0000048C A017                   BRA         L1077
    0000048E 0009                   NOP
    00000490              L1173:                            
    00000490 00B4                   .DATA.W     H'00B4
    00000492 0498                   .DATA.W     H'0498
    00000494 0168                   .DATA.W     H'0168
    00000496 0096                   .DATA.W     H'0096
    00000498 00D2                   .DATA.W     H'00D2
    0000049A 014A                   .DATA.W     H'014A
    0000049C 0087                   .DATA.W     H'0087
    0000049E 00E1                   .DATA.W     H'00E1
    000004A0 013B                   .DATA.W     H'013B
    000004A2 00F0                   .DATA.W     H'00F0
    000004A4 012C                   .DATA.W     H'012C
    000004A6 010E                   .DATA.W     H'010E
    000004A8 <00000000>             .DATA.L     _push_symbol
    000004AC <00000000>             .DATA.L     _divide
    000004B0 <00000000>             .DATA.L     _pop_integer
    000004B4 <00000000>             .DATA.L     __modls
    000004B8              L1093:                           ; case label 
           sin.c   148                    push_rational(1, 2);
           sin.c   149                    power();
           sin.c   150                    multiply();
           sin.c   151                    break;
           sin.c   152            case 60:
           sin.c   153            case 120:
    000004B8              L1094:                           ; case label 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           sin.c   154                    push_rational(1, 2);
    000004B8 E502                   MOV         #2,R5
    000004BA A007                   BRA         L1163
    000004BC E401                   MOV         #1,R4
    000004BE              L1077:
           sin.c   155                    push_integer(3);
           sin.c   156                    push_rational(1, 2);
    000004BE E502                   MOV         #2,R5
    000004C0 4D0B                   JSR         @R13
    000004C2 E401                   MOV         #1,R4
           sin.c   157                    power();
           sin.c   158                    multiply();
           sin.c   159                    break;
    000004C4 A009                   BRA         L1167
    000004C6 0009                   NOP
    000004C8              L1095:                           ; case label 
           sin.c   160            case 240:
           sin.c   161            case 300:
    000004C8              L1096:                           ; case label 
           sin.c   162                    push_rational(-1, 2);
    000004C8 E502                   MOV         #2,R5
    000004CA E4FF                   MOV         #-1,R4
    000004CC              L1163:                            
    000004CC 4D0B                   JSR         @R13
    000004CE 0009                   NOP
           sin.c   163                    push_integer(3);
    000004D0 4C0B                   JSR         @R12
    000004D2 E403                   MOV         #3,R4
           sin.c   164                    push_rational(1, 2);
    000004D4 E502                   MOV         #2,R5
    000004D6 4D0B                   JSR         @R13
    000004D8 E401                   MOV         #1,R4
           sin.c   165                    power();
           sin.c   166                    multiply();
           sin.c   167                    break;
    000004DA              L1167:                            
    000004DA 4A0B                   JSR         @R10
    000004DC 0009                   NOP
    000004DE 490B                   JSR         @R9
    000004E0 0009                   NOP
    000004E2 A017                   BRA         L1140
    000004E4 0009                   NOP
    000004E6              L1097:                           ; case label 
           sin.c   168            case 90:
           sin.c   169                    push_integer(1);
           sin.c   170                    break;
    000004E6 A001                   BRA         L1168
    000004E8 E401                   MOV         #1,R4
    000004EA              L1098:                           ; case label 
           sin.c   171            case 270:
           sin.c   172                    push_integer(-1);
    000004EA E4FF                   MOV         #-1,R4
           sin.c   173                    break;
    000004EC              L1168:                            
    000004EC 4C0B                   JSR         @R12
    000004EE 0009                   NOP
    000004F0 A010                   BRA         L1140




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004F2 0009                   NOP
    000004F4              L1166:                            
    000004F4 4B0B                   JSR         @R11
    000004F6 0009                   NOP
           sin.c   174            default:
           sin.c   175                    push(symbol(SIN));
           sin.c   176                    push(p1);
    000004F8 4B0B                   JSR         @R11
    000004FA 64E2                   MOV.L       @R14,R4
           sin.c   177                    list(2);
    000004FC D20A                   MOV.L       L1175,R2   ; _list
    000004FE E402                   MOV         #2,R4
    00000500 7F08                   ADD         #8,R15
    00000502 4F26                   LDS.L       @R15+,PR
    00000504 68F6                   MOV.L       @R15+,R8
    00000506 69F6                   MOV.L       @R15+,R9
    00000508 6AF6                   MOV.L       @R15+,R10
    0000050A 6BF6                   MOV.L       @R15+,R11
    0000050C 6CF6                   MOV.L       @R15+,R12
    0000050E 6DF6                   MOV.L       @R15+,R13
    00000510 422B                   JMP         @R2
    00000512 6EF6                   MOV.L       @R15+,R14
    00000514              L1140:                            
           sin.c   178                    break;
           sin.c   179            }
           sin.c   180    }
    00000514 7F08                   ADD         #8,R15
    00000516 4F26                   LDS.L       @R15+,PR
    00000518 68F6                   MOV.L       @R15+,R8
    0000051A 69F6                   MOV.L       @R15+,R9
    0000051C 6AF6                   MOV.L       @R15+,R10
    0000051E 6BF6                   MOV.L       @R15+,R11
    00000520 6CF6                   MOV.L       @R15+,R12
    00000522 6DF6                   MOV.L       @R15+,R13
    00000524 000B                   RTS
    00000526 6EF6                   MOV.L       @R15+,R14
    00000528              L1175:                            
    00000528 <00000000>             .DATA.L     _list























SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:29  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      180



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               0000052C Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 0000052C Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           29
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           4
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           110






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkDD74.tmp 

