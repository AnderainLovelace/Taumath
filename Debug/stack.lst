SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:30  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\stack.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         stack.c     1    //       _______
         stack.c     2    //      |       | <- stack
         stack.c     3    //      |       |
         stack.c     4    //      |_______|
         stack.c     5    //      |       | <- stack + tos
         stack.c     6    //      |       |
         stack.c     7    //      |       |
         stack.c     8    //      |_______|
         stack.c     9    //      |       | <- frame
         stack.c    10    //      |_______|
         stack.c    11    //                <- stack + TOS
         stack.c    12    //
         stack.c    13    //      The stack grows from low memory towards high memory. This is so that
         stack.c    14    //      multiple expressions can be pushed on the stack and then accessed as an
         stack.c    15    //      array.
         stack.c    16    //
         stack.c    17    //      The frame area holds local variables and grows from high memory towards
         stack.c    18    //      low memory. The frame area makes local variables visible to the garbage
         stack.c    19    //      collector.
         stack.c    20    
         stack.c    21    #include "stdafx.h"
         stack.c    22    #include "defs.h"
         stack.c    23    
         stack.c    24    U **frame, **stack;
         stack.c    25    int tos;
         stack.c    26    
         stack.c    27    void
         stack.c    28    push(U *p)
P   00000000              _push:                           ; function: push
                                                           ; frame size=12
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 4F22                   STS.L       PR,@-R15
         stack.c    29    {
         stack.c    30            if (stack + tos >= frame)
    00000004 DE36                   MOV.L       L1090+4,R14; _tos
    00000006 7FFC                   ADD         #-4,R15
    00000008 D136                   MOV.L       L1090+8,R1 ; _stack
    0000000A 2F42                   MOV.L       R4,@R15
    0000000C 63E2                   MOV.L       @R14,R3
    0000000E 4308                   SHLL2       R3
    00000010 6212                   MOV.L       @R1,R2
    00000012 332C                   ADD         R2,R3
    00000014 D234                   MOV.L       L1090+12,R2; _frame
    00000016 6022                   MOV.L       @R2,R0
    00000018 3302                   CMP/HS      R0,R3
    0000001A 8B03                   BF          L1081
         stack.c    31                    stop("stack overflow");
    0000001C D433                   MOV.L       L1090+16,R4; L1060
    0000001E D334                   MOV.L       L1090+20,R3; _stop
    00000020 430B                   JSR         @R3
    00000022 0009                   NOP
    00000024              L1081:                            
         stack.c    32            stack[tos++] = p;
    00000024 62E2                   MOV.L       @R14,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:30  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000026 7201                   ADD         #1,R2
    00000028 2E22                   MOV.L       R2,@R14
    0000002A 72FF                   ADD         #-1,R2
    0000002C D32D                   MOV.L       L1090+8,R3 ; _stack
    0000002E 4208                   SHLL2       R2
    00000030 61F2                   MOV.L       @R15,R1
    00000032 6032                   MOV.L       @R3,R0
    00000034 0216                   MOV.L       R1,@(R0,R2)
         stack.c    33    }
    00000036 7F04                   ADD         #4,R15
    00000038 4F26                   LDS.L       @R15+,PR
    0000003A 000B                   RTS
    0000003C 6EF6                   MOV.L       @R15+,R14
         stack.c    34    
         stack.c    35    U *
         stack.c    36    pop()
    0000003E              _pop:                            ; function: pop
                                                           ; frame size=8
    0000003E 2FE6                   MOV.L       R14,@-R15
    00000040 4F22                   STS.L       PR,@-R15
         stack.c    37    {
         stack.c    38            if (tos == 0)
    00000042 DE27                   MOV.L       L1090+4,R14; _tos
    00000044 63E2                   MOV.L       @R14,R3
    00000046 2338                   TST         R3,R3
    00000048 8B03                   BF          L1082
         stack.c    39                    stop("stack underflow");
    0000004A D42A                   MOV.L       L1090+24,R4; L1062
    0000004C D328                   MOV.L       L1090+20,R3; _stop
    0000004E 430B                   JSR         @R3
    00000050 0009                   NOP
    00000052              L1082:                            
         stack.c    40            return stack[--tos];
    00000052 60E2                   MOV.L       @R14,R0
    00000054 D223                   MOV.L       L1090+8,R2 ; _stack
    00000056 70FF                   ADD         #-1,R0
    00000058 2E02                   MOV.L       R0,@R14
    0000005A 4008                   SHLL2       R0
    0000005C 6322                   MOV.L       @R2,R3
    0000005E 003E                   MOV.L       @(R0,R3),R0
         stack.c    41    }
    00000060 4F26                   LDS.L       @R15+,PR
    00000062 000B                   RTS
    00000064 6EF6                   MOV.L       @R15+,R14
         stack.c    42    
         stack.c    43    void
         stack.c    44    push_frame(int n)
    00000066              _push_frame:                     ; function: push_frame
                                                           ; frame size=12
         stack.c    45    {
         stack.c    46            int i;
         stack.c    47            frame -= n;
    00000066 6343                   MOV         R4,R3
         stack.c    48            if (frame < stack + tos)
    00000068 D11D                   MOV.L       L1090+4,R1 ; _tos
    0000006A 4308                   SHLL2       R3
    0000006C D01D                   MOV.L       L1090+8,R0 ; _stack




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:30  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000006E 2FE6                   MOV.L       R14,@-R15
    00000070 2FD6                   MOV.L       R13,@-R15
    00000072 4F22                   STS.L       PR,@-R15
    00000074 DE1C                   MOV.L       L1090+12,R14; _frame
    00000076 62E2                   MOV.L       @R14,R2
    00000078 3238                   SUB         R3,R2
    0000007A 2E22                   MOV.L       R2,@R14
    0000007C 6312                   MOV.L       @R1,R3
    0000007E 4308                   SHLL2       R3
    00000080 6202                   MOV.L       @R0,R2
    00000082 332C                   ADD         R2,R3
    00000084 61E2                   MOV.L       @R14,R1
    00000086 3132                   CMP/HS      R3,R1
    00000088 8D04                   BT/S        L1084
    0000008A 6D43                   MOV         R4,R13
         stack.c    49                    stop("frame overflow, circular reference?");
    0000008C D41A                   MOV.L       L1090+28,R4; L1066
    0000008E D118                   MOV.L       L1090+20,R1; _stop
    00000090 410B                   JSR         @R1
    00000092 0009                   NOP
    00000094              L1084:                            
         stack.c    50            for (i = 0; i < n; i++)
    00000094 D719                   MOV.L       L1090+32,R7; _symtab
    00000096 4D15                   CMP/PL      R13
    00000098 9620                   MOV.W       L1090,R6   ; H'0570
    0000009A E500                   MOV         #0,R5
    0000009C 8F08                   BF/S        L1085
    0000009E 6453                   MOV         R5,R4
    000000A0              L1086:                            
         stack.c    51                    frame[i] = symbol(NIL);
    000000A0 60E2                   MOV.L       @R14,R0
    000000A2 7501                   ADD         #1,R5
    000000A4 6272                   MOV.L       @R7,R2
    000000A6 35D3                   CMP/GE      R13,R5
    000000A8 326C                   ADD         R6,R2
    000000AA 0426                   MOV.L       R2,@(R0,R4)
    000000AC 8FF8                   BF/S        L1086
    000000AE 7404                   ADD         #4,R4
    000000B0              L1085:                            
         stack.c    52    }
    000000B0 4F26                   LDS.L       @R15+,PR
    000000B2 6DF6                   MOV.L       @R15+,R13
    000000B4 000B                   RTS
    000000B6 6EF6                   MOV.L       @R15+,R14
         stack.c    53    
         stack.c    54    void
         stack.c    55    pop_frame(int n)
    000000B8              _pop_frame:                      ; function: pop_frame
                                                           ; frame size=0
         stack.c    56    {
         stack.c    57            frame += n;
    000000B8 D50B                   MOV.L       L1090+12,R5; _frame
    000000BA 4408                   SHLL2       R4
         stack.c    58            if (frame > stack + TOS)
    000000BC D109                   MOV.L       L1090+8,R1 ; _stack
    000000BE 6352                   MOV.L       @R5,R3
    000000C0 334C                   ADD         R4,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:30  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000C2 2532                   MOV.L       R3,@R5
    000000C4 930B                   MOV.W       L1090+2,R3 ; H'07D0
    000000C6 6212                   MOV.L       @R1,R2
    000000C8 6052                   MOV.L       @R5,R0
    000000CA 323C                   ADD         R3,R2
    000000CC 3026                   CMP/HI      R2,R0
    000000CE 8B03                   BF          L1087
         stack.c    59                    stop("frame underflow");
    000000D0 D40B                   MOV.L       L1090+36,R4; L1069
    000000D2 D107                   MOV.L       L1090+20,R1; _stop
    000000D4 412B                   JMP         @R1
    000000D6 0009                   NOP
    000000D8              L1087:                            
         stack.c    60    }
    000000D8 000B                   RTS
    000000DA 0009                   NOP
    000000DC              L1090:                            
    000000DC 0570                   .DATA.W     H'0570
    000000DE 07D0                   .DATA.W     H'07D0
    000000E0 <00000000>             .DATA.L     _tos
    000000E4 <00000000>             .DATA.L     _stack
    000000E8 <00000000>             .DATA.L     _frame
    000000EC <00000000>             .DATA.L     L1060
    000000F0 <00000000>             .DATA.L     _stop
    000000F4 <00000000>             .DATA.L     L1062
    000000F8 <00000000>             .DATA.L     L1066
    000000FC <00000000>             .DATA.L     _symtab
    00000100 <00000000>             .DATA.L     L1069
         stack.c    61    
         stack.c    62    void
         stack.c    63    save(void)
    00000104              _save:                           ; function: save
                                                           ; frame size=8
    00000104 2FE6                   MOV.L       R14,@-R15
    00000106 4F22                   STS.L       PR,@-R15
         stack.c    64    {
         stack.c    65            frame -= 10;
    00000108 DE42                   MOV.L       L1091+2,R14; _frame
    0000010A 63E2                   MOV.L       @R14,R3
         stack.c    66            if (frame < stack + tos)
    0000010C D142                   MOV.L       L1091+6,R1 ; _tos
    0000010E 73D8                   ADD         #-40,R3
    00000110 D042                   MOV.L       L1091+10,R0; _stack
    00000112 2E32                   MOV.L       R3,@R14
    00000114 6212                   MOV.L       @R1,R2
    00000116 4208                   SHLL2       R2
    00000118 6302                   MOV.L       @R0,R3
    0000011A 323C                   ADD         R3,R2
    0000011C 61E2                   MOV.L       @R14,R1
    0000011E 3122                   CMP/HS      R2,R1
    00000120 8903                   BT          L1088
         stack.c    67                    stop("frame overflow, circular reference?");
    00000122 D43F                   MOV.L       L1091+14,R4; L1066
    00000124 D13F                   MOV.L       L1091+18,R1; _stop
    00000126 410B                   JSR         @R1
    00000128 0009                   NOP
    0000012A              L1088:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:30  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         stack.c    68            frame[0] = p0;
    0000012A 63E2                   MOV.L       @R14,R3
    0000012C D13E                   MOV.L       L1091+22,R1; _p0
    0000012E 6212                   MOV.L       @R1,R2
         stack.c    69            frame[1] = p1;
    00000130 D03E                   MOV.L       L1091+26,R0; _p1
    00000132 2322                   MOV.L       R2,@R3
    00000134 63E2                   MOV.L       @R14,R3
    00000136 6202                   MOV.L       @R0,R2
         stack.c    70            frame[2] = p2;
    00000138 D13D                   MOV.L       L1091+30,R1; _p2
    0000013A 1321                   MOV.L       R2,@(4,R3)
    0000013C 63E2                   MOV.L       @R14,R3
    0000013E 6212                   MOV.L       @R1,R2
         stack.c    71            frame[3] = p3;
    00000140 D03C                   MOV.L       L1091+34,R0; _p3
    00000142 1322                   MOV.L       R2,@(8,R3)
    00000144 63E2                   MOV.L       @R14,R3
    00000146 6202                   MOV.L       @R0,R2
         stack.c    72            frame[4] = p4;
    00000148 D13B                   MOV.L       L1091+38,R1; _p4
    0000014A 1323                   MOV.L       R2,@(12,R3)
    0000014C 63E2                   MOV.L       @R14,R3
    0000014E 6212                   MOV.L       @R1,R2
         stack.c    73            frame[5] = p5;
    00000150 D03A                   MOV.L       L1091+42,R0; _p5
    00000152 1324                   MOV.L       R2,@(16,R3)
    00000154 63E2                   MOV.L       @R14,R3
    00000156 6202                   MOV.L       @R0,R2
         stack.c    74            frame[6] = p6;
    00000158 D139                   MOV.L       L1091+46,R1; _p6
    0000015A 1325                   MOV.L       R2,@(20,R3)
    0000015C 63E2                   MOV.L       @R14,R3
    0000015E 6212                   MOV.L       @R1,R2
         stack.c    75            frame[7] = p7;
    00000160 D038                   MOV.L       L1091+50,R0; _p7
    00000162 1326                   MOV.L       R2,@(24,R3)
    00000164 63E2                   MOV.L       @R14,R3
    00000166 6202                   MOV.L       @R0,R2
    00000168 1327                   MOV.L       R2,@(28,R3)
         stack.c    76            frame[8] = p8;
    0000016A 63E2                   MOV.L       @R14,R3
    0000016C D136                   MOV.L       L1091+54,R1; _p8
    0000016E 6212                   MOV.L       @R1,R2
         stack.c    77            frame[9] = p9;
    00000170 D036                   MOV.L       L1091+58,R0; _p9
    00000172 1328                   MOV.L       R2,@(32,R3)
    00000174 63E2                   MOV.L       @R14,R3
    00000176 6202                   MOV.L       @R0,R2
    00000178 1329                   MOV.L       R2,@(36,R3)
         stack.c    78    }
    0000017A 4F26                   LDS.L       @R15+,PR
    0000017C 000B                   RTS
    0000017E 6EF6                   MOV.L       @R15+,R14
         stack.c    79    
         stack.c    80    void
         stack.c    81    restore(void)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:30  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000180              _restore:                        ; function: restore
                                                           ; frame size=8
    00000180 2FE6                   MOV.L       R14,@-R15
    00000182 4F22                   STS.L       PR,@-R15
         stack.c    82    {
         stack.c    83            if (frame > stack + TOS - 10)
    00000184 DE23                   MOV.L       L1091+2,R14; _frame
    00000186 9344                   MOV.W       L1091,R3   ; H'07A8
    00000188 D124                   MOV.L       L1091+10,R1; _stack
    0000018A 6212                   MOV.L       @R1,R2
    0000018C 60E2                   MOV.L       @R14,R0
    0000018E 323C                   ADD         R3,R2
    00000190 3026                   CMP/HI      R2,R0
    00000192 8B03                   BF          L1089
         stack.c    84                    stop("frame underflow");
    00000194 D42E                   MOV.L       L1091+62,R4; L1069
    00000196 D123                   MOV.L       L1091+18,R1; _stop
    00000198 410B                   JSR         @R1
    0000019A 0009                   NOP
    0000019C              L1089:                            
         stack.c    85            p0 = frame[0];
    0000019C 63E2                   MOV.L       @R14,R3
    0000019E 6232                   MOV.L       @R3,R2
    000001A0 D121                   MOV.L       L1091+22,R1; _p0
    000001A2 2122                   MOV.L       R2,@R1
         stack.c    86            p1 = frame[1];
    000001A4 63E2                   MOV.L       @R14,R3
    000001A6 5231                   MOV.L       @(4,R3),R2
    000001A8 D020                   MOV.L       L1091+26,R0; _p1
    000001AA 2022                   MOV.L       R2,@R0
         stack.c    87            p2 = frame[2];
    000001AC 63E2                   MOV.L       @R14,R3
    000001AE 5232                   MOV.L       @(8,R3),R2
    000001B0 D31F                   MOV.L       L1091+30,R3; _p2
    000001B2 2322                   MOV.L       R2,@R3
         stack.c    88            p3 = frame[3];
    000001B4 61E2                   MOV.L       @R14,R1
    000001B6 5213                   MOV.L       @(12,R1),R2
    000001B8 D11E                   MOV.L       L1091+34,R1; _p3
    000001BA 2122                   MOV.L       R2,@R1
         stack.c    89            p4 = frame[4];
    000001BC 62E2                   MOV.L       @R14,R2
    000001BE 5024                   MOV.L       @(16,R2),R0
    000001C0 D21D                   MOV.L       L1091+38,R2; _p4
    000001C2 2202                   MOV.L       R0,@R2
         stack.c    90            p5 = frame[5];
    000001C4 63E2                   MOV.L       @R14,R3
    000001C6 5035                   MOV.L       @(20,R3),R0
    000001C8 D31C                   MOV.L       L1091+42,R3; _p5
    000001CA 2302                   MOV.L       R0,@R3
         stack.c    91            p6 = frame[6];
    000001CC 61E2                   MOV.L       @R14,R1
    000001CE 5016                   MOV.L       @(24,R1),R0
    000001D0 D11B                   MOV.L       L1091+46,R1; _p6
    000001D2 2102                   MOV.L       R0,@R1
         stack.c    92            p7 = frame[7];
    000001D4 62E2                   MOV.L       @R14,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:30  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001D6 5027                   MOV.L       @(28,R2),R0
    000001D8 D21A                   MOV.L       L1091+50,R2; _p7
    000001DA 2202                   MOV.L       R0,@R2
         stack.c    93            p8 = frame[8];
    000001DC 63E2                   MOV.L       @R14,R3
    000001DE 5038                   MOV.L       @(32,R3),R0
    000001E0 D319                   MOV.L       L1091+54,R3; _p8
    000001E2 2302                   MOV.L       R0,@R3
         stack.c    94            p9 = frame[9];
    000001E4 61E2                   MOV.L       @R14,R1
    000001E6 5019                   MOV.L       @(36,R1),R0
    000001E8 D118                   MOV.L       L1091+58,R1; _p9
    000001EA 2102                   MOV.L       R0,@R1
         stack.c    95            frame += 10;
    000001EC 62E2                   MOV.L       @R14,R2
    000001EE 7228                   ADD         #40,R2
    000001F0 2E22                   MOV.L       R2,@R14
         stack.c    96    }
    000001F2 4F26                   LDS.L       @R15+,PR
    000001F4 000B                   RTS
    000001F6 6EF6                   MOV.L       @R15+,R14
         stack.c    97    
         stack.c    98    // Local U * is OK here because there is no functional path to the garbage collector.
         stack.c    99    
         stack.c   100    void
         stack.c   101    swap(void)
    000001F8              _swap:                           ; function: swap
                                                           ; frame size=12
    000001F8 4F22                   STS.L       PR,@-R15
    000001FA 7FF8                   ADD         #-8,R15
         stack.c   102    {
         stack.c   103            U *p, *q;
         stack.c   104            p = pop();
    000001FC BF1F                   BSR         _pop
    000001FE 0009                   NOP
         stack.c   105            q = pop();
    00000200 BF1D                   BSR         _pop
    00000202 1F01                   MOV.L       R0,@(4,R15)
    00000204 2F02                   MOV.L       R0,@R15
         stack.c   106            push(p);
    00000206 BEFB                   BSR         _push
    00000208 54F1                   MOV.L       @(4,R15),R4
         stack.c   107            push(q);
    0000020A 64F2                   MOV.L       @R15,R4
    0000020C 7F08                   ADD         #8,R15
    0000020E AEF7                   BRA         _push
    00000210 4F26                   LDS.L       @R15+,PR
    00000212              L1091:                            
    00000212 07A8                   .DATA.W     H'07A8
    00000214 <00000000>             .DATA.L     _frame
    00000218 <00000000>             .DATA.L     _tos
    0000021C <00000000>             .DATA.L     _stack
    00000220 <00000000>             .DATA.L     L1066
    00000224 <00000000>             .DATA.L     _stop
    00000228 <00000000>             .DATA.L     _p0
    0000022C <00000000>             .DATA.L     _p1
    00000230 <00000000>             .DATA.L     _p2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:30  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000234 <00000000>             .DATA.L     _p3
    00000238 <00000000>             .DATA.L     _p4
    0000023C <00000000>             .DATA.L     _p5
    00000240 <00000000>             .DATA.L     _p6
    00000244 <00000000>             .DATA.L     _p7
    00000248 <00000000>             .DATA.L     _p8
    0000024C <00000000>             .DATA.L     _p9
    00000250 <00000000>             .DATA.L     L1069
         stack.c   108    }
         stack.c   109    
         stack.c   110    // Local U * is OK here because there is no functional path to the garbage collector.
         stack.c   111    
         stack.c   112    void
         stack.c   113    dupl(void)
    00000254              _dupl:                           ; function: dupl
                                                           ; frame size=8
    00000254 2FE6                   MOV.L       R14,@-R15
    00000256 4F22                   STS.L       PR,@-R15
         stack.c   114    {
         stack.c   115            U *p;
         stack.c   116            p = pop();
    00000258 BEF1                   BSR         _pop
    0000025A 0009                   NOP
    0000025C 6E03                   MOV         R0,R14
         stack.c   117            push(p);
    0000025E BECF                   BSR         _push
    00000260 6403                   MOV         R0,R4
         stack.c   118            push(p);
    00000262 64E3                   MOV         R14,R4
    00000264 4F26                   LDS.L       @R15+,PR
    00000266 AECB                   BRA         _push
    00000268 6EF6                   MOV.L       @R15+,R14
         stack.c   119    }
C   00000000              L1060:
    00000000 737461636B             .SDATA      "stack overflow"
             206F766572   
             666C6F77     
    0000000E 00                     .DATA.B     H'00
    0000000F 00000001               .RES.B      1
    00000010              L1062:
    00000010 737461636B             .SDATA      "stack underflow"
             20756E6465   
             72666C6F77   
    0000001F 00                     .DATA.B     H'00
    00000020              L1066:
    00000020 6672616D65             .SDATA      "frame overflow, circular reference?"
             206F766572   
             666C6F772C   
             2063697263   
             756C617220   
             7265666572   
             656E63653F   
    00000043 00                     .DATA.B     H'00
    00000044              L1069:
    00000044 6672616D65             .SDATA      "frame underflow"
             20756E6465   
             72666C6F77   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:30  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000053 00                     .DATA.B     H'00
B   00000000              _tos:                            ; static: tos
    00000000 00000004               .RES.L      1
    00000004              _stack:                          ; static: stack
    00000004 00000004               .RES.L      1
    00000008              _frame:                          ; static: frame
    00000008 00000004               .RES.L      1






















































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:30  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      119



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               0000026A Byte(s)
CONSTANT SECTION (C):                               00000054 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               0000000C Byte(s)

 TOTAL PROGRAM SIZE: 000002CA Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           12
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          11
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            37






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkE015.tmp 

