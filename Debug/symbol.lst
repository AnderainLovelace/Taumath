SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\symbol.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        symbol.c     1    // The symbol table is a simple array of struct U.
        symbol.c     2    
        symbol.c     3    #include "stdafx.h"
        symbol.c     4    #include "defs.h"
        symbol.c     5    
        symbol.c     6    // put symbol at index n
        symbol.c     7    
        symbol.c     8    void
        symbol.c     9    std_symbol(char *s, int n)
P   00000000              _std_symbol:                     ; function: std_symbol
                                                           ; frame size=0
        symbol.c    10    {
        symbol.c    11            U *p;
        symbol.c    12            p = symtab + n;
    00000000 D149                   MOV.L       L1111+6,R1 ; _symtab
    00000002 6353                   MOV         R5,R3
    00000004 6212                   MOV.L       @R1,R2
    00000006 4500                   SHLL        R5
    00000008 353C                   ADD         R3,R5
    0000000A 4508                   SHLL2       R5
    0000000C 352C                   ADD         R2,R5
        symbol.c    13            p->u.printname = s;
        symbol.c    14    }
    0000000E 000B                   RTS
    00000010 2542                   MOV.L       R4,@R5
        symbol.c    15    
        symbol.c    16    // symbol lookup, create symbol if need be
        symbol.c    17    
        symbol.c    18    U *
        symbol.c    19    usr_symbol(char *s)
    00000012              _usr_symbol:                     ; function: usr_symbol
                                                           ; frame size=20
                                                           ; used runtime library name:
                                                           ; __slow_strcpy, __slow_strcmp1
    00000012 2FE6                   MOV.L       R14,@-R15
    00000014 2FD6                   MOV.L       R13,@-R15
        symbol.c    20    {
        symbol.c    21            int i;
        symbol.c    22            U *p;
        symbol.c    23            for (i = 0; i < NSYM; i++) {
    00000016 EE00                   MOV         #0,R14
    00000018 2FC6                   MOV.L       R12,@-R15
    0000001A 6C43                   MOV         R4,R12
    0000001C DD42                   MOV.L       L1111+6,R13; _symtab
    0000001E 2FB6                   MOV.L       R11,@-R15
    00000020 4F22                   STS.L       PR,@-R15
    00000022 9B7E                   MOV.W       L1111,R11  ; H'01F4
    00000024              L1094:                            
        symbol.c    24                    if (symtab[i].u.printname == 0)
    00000024 61D2                   MOV.L       @R13,R1
    00000026 63E3                   MOV         R14,R3
    00000028 62E3                   MOV         R14,R2
    0000002A 4300                   SHLL        R3
    0000002C 332C                   ADD         R2,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000002E 4308                   SHLL2       R3
    00000030 331C                   ADD         R1,R3
    00000032 6232                   MOV.L       @R3,R2
    00000034 2228                   TST         R2,R2
    00000036 8917                   BT          L1093
        symbol.c    25                            break;
        symbol.c    26                    if (strcmp(s, symtab[i].u.printname) == 0)
    00000038 62D2                   MOV.L       @R13,R2
    0000003A 65E3                   MOV         R14,R5
    0000003C 63E3                   MOV         R14,R3
    0000003E 4500                   SHLL        R5
    00000040 353C                   ADD         R3,R5
    00000042 4508                   SHLL2       R5
    00000044 D339                   MOV.L       L1111+10,R3; __slow_strcmp1
    00000046 352C                   ADD         R2,R5
    00000048 6552                   MOV.L       @R5,R5
    0000004A 430B                   JSR         @R3
    0000004C 64C3                   MOV         R12,R4
    0000004E 2008                   TST         R0,R0
    00000050 8B07                   BF          L1097
        symbol.c    27                            return symtab + i;
    00000052 60E3                   MOV         R14,R0
    00000054 62D2                   MOV.L       @R13,R2
    00000056 63E3                   MOV         R14,R3
    00000058 4000                   SHLL        R0
    0000005A 303C                   ADD         R3,R0
    0000005C 4008                   SHLL2       R0
    0000005E A01D                   BRA         L1098
    00000060 302C                   ADD         R2,R0
    00000062              L1097:                            
    00000062 7E01                   ADD         #1,R14
    00000064 3EB3                   CMP/GE      R11,R14
    00000066 8BDD                   BF          L1094
    00000068              L1093:                            
        symbol.c    28            }
        symbol.c    29            if (i == NSYM)
    00000068 3EB0                   CMP/EQ      R11,R14
    0000006A 8B03                   BF          L1099
        symbol.c    30                    stop("symbol table overflow");
    0000006C D430                   MOV.L       L1111+14,R4; L1067
    0000006E D331                   MOV.L       L1111+18,R3; _stop
    00000070 430B                   JSR         @R3
    00000072 0009                   NOP
    00000074              L1099:                            
        symbol.c    31            p = symtab + i;
    00000074 62D2                   MOV.L       @R13,R2
    00000076 63E3                   MOV         R14,R3
    00000078 4E00                   SHLL        R14
    0000007A 3E3C                   ADD         R3,R14
        symbol.c    32            {
        symbol.c    33                    char * new_s = calloc(strlen(s)+1,1);
    0000007C D32E                   MOV.L       L1111+22,R3; _strlen
    0000007E 4E08                   SHLL2       R14
    00000080 3E2C                   ADD         R2,R14
    00000082 430B                   JSR         @R3
    00000084 64C3                   MOV         R12,R4
    00000086 6403                   MOV         R0,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000088 D22C                   MOV.L       L1111+26,R2; _calloc
    0000008A 7401                   ADD         #1,R4
    0000008C 420B                   JSR         @R2
    0000008E E501                   MOV         #1,R5
        symbol.c    34                    strcpy(new_s,s);
    00000090 D32B                   MOV.L       L1111+30,R3; __slow_strcpy
    00000092 6403                   MOV         R0,R4
    00000094 430B                   JSR         @R3
    00000096 61C3                   MOV         R12,R1
        symbol.c    35                    p->u.printname = new_s;
    00000098 2E42                   MOV.L       R4,@R14
        symbol.c    36                    //p->u.printname = strdup(s);
        symbol.c    37            }
        symbol.c    38            return p;
    0000009A 60E3                   MOV         R14,R0
        symbol.c    39    }
    0000009C              L1098:                            
    0000009C 4F26                   LDS.L       @R15+,PR
    0000009E 6BF6                   MOV.L       @R15+,R11
    000000A0 6CF6                   MOV.L       @R15+,R12
    000000A2 6DF6                   MOV.L       @R15+,R13
    000000A4 000B                   RTS
    000000A6 6EF6                   MOV.L       @R15+,R14
        symbol.c    40    
        symbol.c    41    // get the symbol's printname
        symbol.c    42    
        symbol.c    43    char *
        symbol.c    44    get_printname(U *p)
    000000A8              _get_printname:                  ; function: get_printname
                                                           ; frame size=8
    000000A8 4F22                   STS.L       PR,@-R15
        symbol.c    45    {
        symbol.c    46            if (p->k != SYM)
    000000AA 6043                   MOV         R4,R0
    000000AC 7FFC                   ADD         #-4,R15
    000000AE 2F42                   MOV.L       R4,@R15
    000000B0 8408                   MOV.B       @(8,R0),R0
    000000B2 600C                   EXTU.B      R0,R0
    000000B4 8805                   CMP/EQ      #5,R0
    000000B6 8903                   BT          L1100
        symbol.c    47                    stop("symbol error");
    000000B8 D422                   MOV.L       L1111+34,R4; L1072
    000000BA D21E                   MOV.L       L1111+18,R2; _stop
    000000BC 420B                   JSR         @R2
    000000BE 0009                   NOP
    000000C0              L1100:                            
        symbol.c    48            return p->u.printname;
    000000C0 60F2                   MOV.L       @R15,R0
    000000C2 6002                   MOV.L       @R0,R0
        symbol.c    49    }
    000000C4 7F04                   ADD         #4,R15
    000000C6 4F26                   LDS.L       @R15+,PR
    000000C8 000B                   RTS
    000000CA 0009                   NOP
        symbol.c    50    
        symbol.c    51    // clears the arglist too
        symbol.c    52    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        symbol.c    53    void
        symbol.c    54    set_binding(U *p, U *q)
    000000CC              _set_binding:                    ; function: set_binding
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __divls
    000000CC 2FE6                   MOV.L       R14,@-R15
    000000CE 6E43                   MOV         R4,R14
    000000D0 4F22                   STS.L       PR,@-R15
    000000D2 7FFC                   ADD         #-4,R15
    000000D4 2F52                   MOV.L       R5,@R15
        symbol.c    55    {
        symbol.c    56            if (p->k != SYM)
    000000D6 84E8                   MOV.B       @(8,R14),R0
    000000D8 600C                   EXTU.B      R0,R0
    000000DA 8805                   CMP/EQ      #5,R0
    000000DC 8903                   BT          L1102
        symbol.c    57                    stop("symbol error");
    000000DE D419                   MOV.L       L1111+34,R4; L1072
    000000E0 D214                   MOV.L       L1111+18,R2; _stop
    000000E2 420B                   JSR         @R2
    000000E4 0009                   NOP
    000000E6              L1102:                            
        symbol.c    58            binding[p - symtab] = q;
    000000E6 E50C                   MOV         #12,R5
    000000E8 D40F                   MOV.L       L1111+6,R4 ; _symtab
    000000EA 61E3                   MOV         R14,R1
    000000EC D216                   MOV.L       L1111+38,R2; __divls
    000000EE 6342                   MOV.L       @R4,R3
    000000F0 3138                   SUB         R3,R1
    000000F2 420B                   JSR         @R2
    000000F4 6053                   MOV         R5,R0
    000000F6 4008                   SHLL2       R0
    000000F8 D214                   MOV.L       L1111+42,R2; _binding
    000000FA 6322                   MOV.L       @R2,R3
    000000FC 61F2                   MOV.L       @R15,R1
    000000FE 0316                   MOV.L       R1,@(R0,R3)
        symbol.c    59            arglist[p - symtab] = symbol(NIL);
    00000100 6342                   MOV.L       @R4,R3
    00000102 3E38                   SUB         R3,R14
    00000104 D310                   MOV.L       L1111+38,R3; __divls
    00000106 61E3                   MOV         R14,R1
    00000108 430B                   JSR         @R3
    0000010A 6053                   MOV         R5,R0
    0000010C D310                   MOV.L       L1111+46,R3; _arglist
    0000010E 4008                   SHLL2       R0
    00000110 9208                   MOV.W       L1111+2,R2 ; H'0570
    00000112 6132                   MOV.L       @R3,R1
    00000114 6342                   MOV.L       @R4,R3
    00000116 332C                   ADD         R2,R3
    00000118 0136                   MOV.L       R3,@(R0,R1)
        symbol.c    60    }
    0000011A 7F04                   ADD         #4,R15
    0000011C 4F26                   LDS.L       @R15+,PR
    0000011E 000B                   RTS
    00000120 6EF6                   MOV.L       @R15+,R14
    00000122              L1111:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000122 01F4                   .DATA.W     H'01F4
    00000124 0570                   .DATA.W     H'0570
    00000126 0000                   .DATA.W     0
    00000128 <00000000>             .DATA.L     _symtab
    0000012C <00000000>             .DATA.L     __slow_strcmp1
    00000130 <00000000>             .DATA.L     L1067
    00000134 <00000000>             .DATA.L     _stop
    00000138 <00000000>             .DATA.L     _strlen
    0000013C <00000000>             .DATA.L     _calloc
    00000140 <00000000>             .DATA.L     __slow_strcpy
    00000144 <00000000>             .DATA.L     L1072
    00000148 <00000000>             .DATA.L     __divls
    0000014C <00000000>             .DATA.L     _binding
    00000150 <00000000>             .DATA.L     _arglist
        symbol.c    61    
        symbol.c    62    U *
        symbol.c    63    get_binding(U *p)
    00000154              _get_binding:                    ; function: get_binding
                                                           ; frame size=8
                                                           ; used runtime library name:
                                                           ; __divls
    00000154 4F22                   STS.L       PR,@-R15
        symbol.c    64    {
        symbol.c    65            if (p->k != SYM)
    00000156 6043                   MOV         R4,R0
    00000158 7FFC                   ADD         #-4,R15
    0000015A 2F42                   MOV.L       R4,@R15
    0000015C 8408                   MOV.B       @(8,R0),R0
    0000015E 600C                   EXTU.B      R0,R0
    00000160 8805                   CMP/EQ      #5,R0
    00000162 8903                   BT          L1103
        symbol.c    66                    stop("symbol error");
    00000164 D43C                   MOV.L       L1112,R4   ; L1072
    00000166 D23D                   MOV.L       L1112+4,R2 ; _stop
    00000168 420B                   JSR         @R2
    0000016A 0009                   NOP
    0000016C              L1103:                            
        symbol.c    67            return binding[p - symtab];
    0000016C D23C                   MOV.L       L1112+8,R2 ; _symtab
    0000016E 6322                   MOV.L       @R2,R3
    00000170 61F2                   MOV.L       @R15,R1
    00000172 3138                   SUB         R3,R1
    00000174 D33B                   MOV.L       L1112+12,R3; __divls
    00000176 430B                   JSR         @R3
    00000178 E00C                   MOV         #12,R0
    0000017A 4008                   SHLL2       R0
    0000017C D33A                   MOV.L       L1112+16,R3; _binding
    0000017E 6132                   MOV.L       @R3,R1
    00000180 001E                   MOV.L       @(R0,R1),R0
        symbol.c    68    }
    00000182 7F04                   ADD         #4,R15
    00000184 4F26                   LDS.L       @R15+,PR
    00000186 000B                   RTS
    00000188 0009                   NOP
        symbol.c    69    
        symbol.c    70    void
        symbol.c    71    set_binding_and_arglist(U *p, U *q, U *r)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000018A              _set_binding_and_arglist:        ; function: set_binding_and_arglist
                                                           ; frame size=16
                                                           ; used runtime library name:
                                                           ; __divls
    0000018A 2FE6                   MOV.L       R14,@-R15
    0000018C 4F22                   STS.L       PR,@-R15
    0000018E 6E43                   MOV         R4,R14
    00000190 7FF8                   ADD         #-8,R15
    00000192 1F51                   MOV.L       R5,@(4,R15)
    00000194 2F62                   MOV.L       R6,@R15
        symbol.c    72    {
        symbol.c    73            if (p->k != SYM)
    00000196 84E8                   MOV.B       @(8,R14),R0
    00000198 600C                   EXTU.B      R0,R0
    0000019A 8805                   CMP/EQ      #5,R0
    0000019C 8903                   BT          L1105
        symbol.c    74                    stop("symbol error");
    0000019E D42E                   MOV.L       L1112,R4   ; L1072
    000001A0 D22E                   MOV.L       L1112+4,R2 ; _stop
    000001A2 420B                   JSR         @R2
    000001A4 0009                   NOP
    000001A6              L1105:                            
        symbol.c    75            binding[p - symtab] = q;
    000001A6 E50C                   MOV         #12,R5
    000001A8 D42D                   MOV.L       L1112+8,R4 ; _symtab
    000001AA 61E3                   MOV         R14,R1
    000001AC D22D                   MOV.L       L1112+12,R2; __divls
    000001AE 6342                   MOV.L       @R4,R3
    000001B0 3138                   SUB         R3,R1
    000001B2 420B                   JSR         @R2
    000001B4 6053                   MOV         R5,R0
    000001B6 4008                   SHLL2       R0
    000001B8 D22B                   MOV.L       L1112+16,R2; _binding
    000001BA 6322                   MOV.L       @R2,R3
    000001BC 51F1                   MOV.L       @(4,R15),R1
    000001BE 0316                   MOV.L       R1,@(R0,R3)
        symbol.c    76            arglist[p - symtab] = r;
    000001C0 6342                   MOV.L       @R4,R3
    000001C2 3E38                   SUB         R3,R14
    000001C4 D327                   MOV.L       L1112+12,R3; __divls
    000001C6 61E3                   MOV         R14,R1
    000001C8 430B                   JSR         @R3
    000001CA 6053                   MOV         R5,R0
    000001CC D327                   MOV.L       L1112+20,R3; _arglist
    000001CE 4008                   SHLL2       R0
    000001D0 62F2                   MOV.L       @R15,R2
    000001D2 6132                   MOV.L       @R3,R1
    000001D4 0126                   MOV.L       R2,@(R0,R1)
        symbol.c    77    }
    000001D6 7F08                   ADD         #8,R15
    000001D8 4F26                   LDS.L       @R15+,PR
    000001DA 000B                   RTS
    000001DC 6EF6                   MOV.L       @R15+,R14
        symbol.c    78    
        symbol.c    79    U *
        symbol.c    80    get_arglist(U *p)
    000001DE              _get_arglist:                    ; function: get_arglist




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=8
                                                           ; used runtime library name:
                                                           ; __divls
        symbol.c    81    {
        symbol.c    82            if (p->k != SYM)
    000001DE 6043                   MOV         R4,R0
    000001E0 4F22                   STS.L       PR,@-R15
    000001E2 7FFC                   ADD         #-4,R15
    000001E4 2F42                   MOV.L       R4,@R15
    000001E6 8408                   MOV.B       @(8,R0),R0
    000001E8 600C                   EXTU.B      R0,R0
    000001EA 8805                   CMP/EQ      #5,R0
    000001EC 8903                   BT          L1106
        symbol.c    83                    stop("symbol error");
    000001EE D41A                   MOV.L       L1112,R4   ; L1072
    000001F0 D21A                   MOV.L       L1112+4,R2 ; _stop
    000001F2 420B                   JSR         @R2
    000001F4 0009                   NOP
    000001F6              L1106:                            
        symbol.c    84            return arglist[p - symtab];
    000001F6 D21A                   MOV.L       L1112+8,R2 ; _symtab
    000001F8 61F2                   MOV.L       @R15,R1
    000001FA 6322                   MOV.L       @R2,R3
    000001FC 3138                   SUB         R3,R1
    000001FE D319                   MOV.L       L1112+12,R3; __divls
    00000200 430B                   JSR         @R3
    00000202 E00C                   MOV         #12,R0
    00000204 D319                   MOV.L       L1112+20,R3; _arglist
    00000206 4008                   SHLL2       R0
    00000208 6132                   MOV.L       @R3,R1
    0000020A 001E                   MOV.L       @(R0,R1),R0
        symbol.c    85    }
    0000020C 7F04                   ADD         #4,R15
    0000020E 4F26                   LDS.L       @R15+,PR
    00000210 000B                   RTS
    00000212 0009                   NOP
        symbol.c    86    
        symbol.c    87    // get symbol's number from ptr
        symbol.c    88    
        symbol.c    89    int
        symbol.c    90    symnum(U *p)
    00000214              _symnum:                         ; function: symnum
                                                           ; frame size=8
                                                           ; used runtime library name:
                                                           ; __divls
    00000214 4F22                   STS.L       PR,@-R15
        symbol.c    91    {
        symbol.c    92            if (p->k != SYM)
    00000216 6043                   MOV         R4,R0
    00000218 7FFC                   ADD         #-4,R15
    0000021A 2F42                   MOV.L       R4,@R15
    0000021C 8408                   MOV.B       @(8,R0),R0
    0000021E 600C                   EXTU.B      R0,R0
    00000220 8805                   CMP/EQ      #5,R0
    00000222 8903                   BT          L1108
        symbol.c    93                    stop("symbol error");
    00000224 D40C                   MOV.L       L1112,R4   ; L1072




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000226 D20D                   MOV.L       L1112+4,R2 ; _stop
    00000228 420B                   JSR         @R2
    0000022A 0009                   NOP
    0000022C              L1108:                            
        symbol.c    94            return (int) (p - symtab);
    0000022C D20C                   MOV.L       L1112+8,R2 ; _symtab
    0000022E 6322                   MOV.L       @R2,R3
    00000230 61F2                   MOV.L       @R15,R1
    00000232 3138                   SUB         R3,R1
    00000234 D30B                   MOV.L       L1112+12,R3; __divls
    00000236 430B                   JSR         @R3
    00000238 E00C                   MOV         #12,R0
        symbol.c    95    }
    0000023A 7F04                   ADD         #4,R15
    0000023C 4F26                   LDS.L       @R15+,PR
    0000023E 000B                   RTS
    00000240 0009                   NOP
        symbol.c    96    
        symbol.c    97    // push indexed symbol
        symbol.c    98    
        symbol.c    99    void
        symbol.c   100    push_symbol(int k)
    00000242              _push_symbol:                    ; function: push_symbol
                                                           ; frame size=4
        symbol.c   101    {
        symbol.c   102            push(symtab + k);
    00000242 6343                   MOV         R4,R3
    00000244 D106                   MOV.L       L1112+8,R1 ; _symtab
    00000246 2F46                   MOV.L       R4,@-R15
    00000248 6212                   MOV.L       @R1,R2
    0000024A 4400                   SHLL        R4
    0000024C 343C                   ADD         R3,R4
    0000024E 4408                   SHLL2       R4
    00000250 D307                   MOV.L       L1112+24,R3; _push
    00000252 342C                   ADD         R2,R4
    00000254 432B                   JMP         @R3
    00000256 7F04                   ADD         #4,R15
    00000258              L1112:                            
    00000258 <00000000>             .DATA.L     L1072
    0000025C <00000000>             .DATA.L     _stop
    00000260 <00000000>             .DATA.L     _symtab
    00000264 <00000000>             .DATA.L     __divls
    00000268 <00000000>             .DATA.L     _binding
    0000026C <00000000>             .DATA.L     _arglist
    00000270 <00000000>             .DATA.L     _push
        symbol.c   103    }
        symbol.c   104    
        symbol.c   105    void
        symbol.c   106    clear_symbols(void)
    00000274              _clear_symbols:                  ; function: clear_symbols
                                                           ; frame size=12
    00000274 2FD6                   MOV.L       R13,@-R15
        symbol.c   107    {
        symbol.c   108            int i;
        symbol.c   109            for (i = 0; i < NSYM; i++) {
    00000276 E000                   MOV         #0,R0
    00000278 911A                   MOV.W       L1113+2,R1 ; H'0570




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000027A 6703                   MOV         R0,R7
    0000027C 9D17                   MOV.W       L1113,R13  ; H'01F4
    0000027E 6403                   MOV         R0,R4
    00000280 2FC6                   MOV.L       R12,@-R15
    00000282 6503                   MOV         R0,R5
    00000284 D60D                   MOV.L       L1113+14,R6; _symtab
    00000286 2FB6                   MOV.L       R11,@-R15
    00000288 DB0A                   MOV.L       L1113+6,R11; _arglist
    0000028A DC0B                   MOV.L       L1113+10,R12; _binding
    0000028C              L1110:                            
        symbol.c   110                    binding[i] = symtab + i;
    0000028C 60C2                   MOV.L       @R12,R0
    0000028E 7701                   ADD         #1,R7
    00000290 6362                   MOV.L       @R6,R3
    00000292 37D3                   CMP/GE      R13,R7
    00000294 335C                   ADD         R5,R3
    00000296 750C                   ADD         #12,R5
    00000298 0436                   MOV.L       R3,@(R0,R4)
        symbol.c   111                    arglist[i] = symbol(NIL);
    0000029A 60B2                   MOV.L       @R11,R0
    0000029C 6262                   MOV.L       @R6,R2
    0000029E 321C                   ADD         R1,R2
    000002A0 0426                   MOV.L       R2,@(R0,R4)
    000002A2 8FF3                   BF/S        L1110
    000002A4 7404                   ADD         #4,R4
        symbol.c   112            }
        symbol.c   113    }
    000002A6 6BF6                   MOV.L       @R15+,R11
    000002A8 6CF6                   MOV.L       @R15+,R12
    000002AA 000B                   RTS
    000002AC 6DF6                   MOV.L       @R15+,R13
    000002AE              L1113:                            
    000002AE 01F4                   .DATA.W     H'01F4
    000002B0 0570                   .DATA.W     H'0570
    000002B2 0000                   .DATA.W     0
    000002B4 <00000000>             .DATA.L     _arglist
    000002B8 <00000000>             .DATA.L     _binding
    000002BC <00000000>             .DATA.L     _symtab
C   00000000              L1067:
    00000000 73796D626F             .SDATA      "symbol table overflow"
             6C20746162   
             6C65206F76   
             6572666C6F   
             77           
    00000015 00                     .DATA.B     H'00
    00000016 00000002               .RES.W      1
    00000018              L1072:
    00000018 73796D626F             .SDATA      "symbol error"
             6C20657272   
             6F72         
    00000024 00                     .DATA.B     H'00










SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      113



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000002C0 Byte(s)
CONSTANT SECTION (C):                               00000025 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000002E5 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           10
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          10
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            37






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkE3EF.tmp 

