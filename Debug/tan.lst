SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\tan.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           tan.c     1    // Tangent function of numerical and symbolic arguments
           tan.c     2    
           tan.c     3    #include "stdafx.h"
           tan.c     4    #include "defs.h"
           tan.c     5    
           tan.c     6    void
           tan.c     7    eval_tan(void)
P   00000000              _eval_tan:                       ; function: eval_tan
                                                           ; frame size=8
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 4F22                   STS.L       PR,@-R15
           tan.c     8    {
           tan.c     9            push(cadr(p1));
    00000004 DE38                   MOV.L       L1114+2,R14; _p1
    00000006 64E2                   MOV.L       @R14,R4
    00000008 8448                   MOV.B       @(8,R4),R0
    0000000A 2008                   TST         R0,R0
    0000000C 8B02                   BF          L1090
    0000000E 64E2                   MOV.L       @R14,R4
    00000010 A004                   BRA         L1092
    00000012 5441                   MOV.L       @(4,R4),R4
    00000014              L1090:                            
    00000014 9367                   MOV.W       L1114,R3   ; H'0570
    00000016 D235                   MOV.L       L1114+6,R2 ; _symtab
    00000018 6422                   MOV.L       @R2,R4
    0000001A 343C                   ADD         R3,R4
    0000001C              L1092:                            
    0000001C 8448                   MOV.B       @(8,R4),R0
    0000001E 2008                   TST         R0,R0
    00000020 8B0C                   BF          L1089
    00000022 64E2                   MOV.L       @R14,R4
    00000024 8448                   MOV.B       @(8,R4),R0
    00000026 2008                   TST         R0,R0
    00000028 8B02                   BF          L1091
    0000002A 64E2                   MOV.L       @R14,R4
    0000002C A004                   BRA         L1093
    0000002E 5441                   MOV.L       @(4,R4),R4
    00000030              L1091:                            
    00000030 9359                   MOV.W       L1114,R3   ; H'0570
    00000032 D22E                   MOV.L       L1114+6,R2 ; _symtab
    00000034 6422                   MOV.L       @R2,R4
    00000036 343C                   ADD         R3,R4
    00000038              L1093:                            
    00000038 A004                   BRA         L1094
    0000003A 6442                   MOV.L       @R4,R4
    0000003C              L1089:                            
    0000003C 9353                   MOV.W       L1114,R3   ; H'0570
    0000003E D22B                   MOV.L       L1114+6,R2 ; _symtab
    00000040 6422                   MOV.L       @R2,R4
    00000042 343C                   ADD         R3,R4
    00000044              L1094:                            
    00000044 D32A                   MOV.L       L1114+10,R3; _push
    00000046 430B                   JSR         @R3
    00000048 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

           tan.c    10            eval();
    0000004A D22A                   MOV.L       L1114+14,R2; _eval
    0000004C 420B                   JSR         @R2
    0000004E 0009                   NOP
           tan.c    11            tangent();
    00000050 4F26                   LDS.L       @R15+,PR
    00000052 6EF6                   MOV.L       @R15+,R14
           tan.c    12    }
           tan.c    13    
           tan.c    14    void
           tan.c    15    tangent(void)
    00000054              _tangent:                        ; function: tangent
                                                           ; frame size=4
    00000054 4F22                   STS.L       PR,@-R15
           tan.c    16    {
           tan.c    17            save();
    00000056 D328                   MOV.L       L1114+18,R3; _save
    00000058 430B                   JSR         @R3
    0000005A 0009                   NOP
           tan.c    18            yytangent();
    0000005C B003                   BSR         _yytangent
    0000005E 0009                   NOP
           tan.c    19            restore();
    00000060 D326                   MOV.L       L1114+22,R3; _restore
    00000062 432B                   JMP         @R3
    00000064 4F26                   LDS.L       @R15+,PR
           tan.c    20    }
           tan.c    21    
           tan.c    22    void
           tan.c    23    yytangent(void)
    00000066              _yytangent:                      ; function: yytangent
                                                           ; frame size=52
                                                           ; used runtime library name:
                                                           ; __modls, __ltd
    00000066 2FE6                   MOV.L       R14,@-R15
    00000068 2FD6                   MOV.L       R13,@-R15
    0000006A 2FC6                   MOV.L       R12,@-R15
    0000006C 2FB6                   MOV.L       R11,@-R15
    0000006E 2FA6                   MOV.L       R10,@-R15
    00000070 4F22                   STS.L       PR,@-R15
    00000072 7FF8                   ADD         #-8,R15
           tan.c    24    {
           tan.c    25            int n;
           tan.c    26            double d;
           tan.c    27    
           tan.c    28            p1 = pop();
    00000074 DE1C                   MOV.L       L1114+2,R14; _p1
    00000076 D322                   MOV.L       L1114+26,R3; _pop
    00000078 430B                   JSR         @R3
    0000007A 0009                   NOP
    0000007C 2E02                   MOV.L       R0,@R14
    0000007E 6D03                   MOV         R0,R13
    00000080 DC1B                   MOV.L       L1114+10,R12; _push
    00000082 84D8                   MOV.B       @(8,R13),R0
    00000084 2008                   TST         R0,R0
    00000086 8B02                   BF          L1096
    00000088 62E2                   MOV.L       @R14,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000008A A004                   BRA         L1097
    0000008C 6222                   MOV.L       @R2,R2
    0000008E              L1096:                            
    0000008E 932A                   MOV.W       L1114,R3   ; H'0570
    00000090 D116                   MOV.L       L1114+6,R1 ; _symtab
    00000092 6212                   MOV.L       @R1,R2
    00000094 323C                   ADD         R3,R2
    00000096              L1097:                            
    00000096 D015                   MOV.L       L1114+6,R0 ; _symtab
    00000098 6302                   MOV.L       @R0,R3
    0000009A 7360                   ADD         #96,R3
    0000009C 3230                   CMP/EQ      R3,R2
    0000009E 8B31                   BF          L1095
           tan.c    29    
           tan.c    30            if (car(p1) == symbol(ARCTAN)) {
           tan.c    31                    push(cadr(p1));
    000000A0 64E2                   MOV.L       @R14,R4
    000000A2 8448                   MOV.B       @(8,R4),R0
    000000A4 2008                   TST         R0,R0
    000000A6 8B02                   BF          L1099
    000000A8 64E2                   MOV.L       @R14,R4
    000000AA A004                   BRA         L1101
    000000AC 5441                   MOV.L       @(4,R4),R4
    000000AE              L1099:                            
    000000AE 931A                   MOV.W       L1114,R3   ; H'0570
    000000B0 D20E                   MOV.L       L1114+6,R2 ; _symtab
    000000B2 6422                   MOV.L       @R2,R4
    000000B4 343C                   ADD         R3,R4
    000000B6              L1101:                            
    000000B6 8448                   MOV.B       @(8,R4),R0
    000000B8 2008                   TST         R0,R0
    000000BA 8B0C                   BF          L1098
    000000BC 64E2                   MOV.L       @R14,R4
    000000BE 8448                   MOV.B       @(8,R4),R0
    000000C0 2008                   TST         R0,R0
    000000C2 8B02                   BF          L1100
    000000C4 64E2                   MOV.L       @R14,R4
    000000C6 A004                   BRA         L1102
    000000C8 5441                   MOV.L       @(4,R4),R4
    000000CA              L1100:                            
    000000CA 930C                   MOV.W       L1114,R3   ; H'0570
    000000CC D207                   MOV.L       L1114+6,R2 ; _symtab
    000000CE 6422                   MOV.L       @R2,R4
    000000D0 343C                   ADD         R3,R4
    000000D2              L1102:                            
    000000D2 A004                   BRA         L1103
    000000D4 6442                   MOV.L       @R4,R4
    000000D6              L1098:                            
    000000D6 9306                   MOV.W       L1114,R3   ; H'0570
    000000D8 D204                   MOV.L       L1114+6,R2 ; _symtab
    000000DA 6422                   MOV.L       @R2,R4
    000000DC 343C                   ADD         R3,R4
    000000DE              L1103:                            
    000000DE 4C0B                   JSR         @R12
    000000E0 0009                   NOP
           tan.c    32                    return;
    000000E2 A105                   BRA         L1104




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000E4 0009                   NOP
    000000E6              L1114:                            
    000000E6 0570                   .DATA.W     H'0570
    000000E8 <00000000>             .DATA.L     _p1
    000000EC <00000000>             .DATA.L     _symtab
    000000F0 <00000000>             .DATA.L     _push
    000000F4 <00000000>             .DATA.L     _eval
    000000F8 <00000000>             .DATA.L     _save
    000000FC <00000000>             .DATA.L     _restore
    00000100 <00000000>             .DATA.L     _pop
    00000104              L1095:                            
           tan.c    33            }
           tan.c    34    
           tan.c    35            if (isdouble(p1)) {
    00000104 84D8                   MOV.B       @(8,R13),R0
    00000106 600C                   EXTU.B      R0,R0
    00000108 8802                   CMP/EQ      #2,R0
    0000010A 8B27                   BF          L1105
           tan.c    36                    d = tan(p1->u.d);
    0000010C 52D1                   MOV.L       @(4,R13),R2
    0000010E 2F26                   MOV.L       R2,@-R15
    00000110 62D2                   MOV.L       @R13,R2
    00000112 2F26                   MOV.L       R2,@-R15
    00000114 D118                   MOV.L       L1115,R1   ; _tan
    00000116 63F3                   MOV         R15,R3
    00000118 7308                   ADD         #8,R3
    0000011A 410B                   JSR         @R1
    0000011C 2F36                   MOV.L       R3,@-R15
           tan.c    37                    if (fabs(d) < 1e-10)
    0000011E 7F04                   ADD         #4,R15
    00000120 D116                   MOV.L       L1115+4,R1 ; _fabs
    00000122 E208                   MOV         #8,R2
    00000124 53F3                   MOV.L       @(12,R15),R3
    00000126 2F36                   MOV.L       R3,@-R15
    00000128 53F3                   MOV.L       @(12,R15),R3
    0000012A 2F36                   MOV.L       R3,@-R15
    0000012C 32FC                   ADD         R15,R2
    0000012E 410B                   JSR         @R1
    00000130 2F26                   MOV.L       R2,@-R15
    00000132 7F0C                   ADD         #12,R15
    00000134 D212                   MOV.L       L1115+8,R2 ; H'D9D7BDBB
    00000136 2F26                   MOV.L       R2,@-R15
    00000138 D212                   MOV.L       L1115+12,R2; H'3DDB7CDF
    0000013A D313                   MOV.L       L1115+16,R3; __ltd
    0000013C 430B                   JSR         @R3
    0000013E 2F26                   MOV.L       R2,@-R15
    00000140 8800                   CMP/EQ      #0,R0
    00000142 8903                   BT          L1106
           tan.c    38                            d = 0.0;
    00000144 62F3                   MOV         R15,R2
    00000146 E100                   MOV         #0,R1
    00000148 2212                   MOV.L       R1,@R2
    0000014A 1211                   MOV.L       R1,@(4,R2)
    0000014C              L1106:                            
           tan.c    39                    push_double(d);
    0000014C 53F1                   MOV.L       @(4,R15),R3
    0000014E 2F36                   MOV.L       R3,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000150 53F1                   MOV.L       @(4,R15),R3
    00000152 D20E                   MOV.L       L1115+20,R2; _push_double
    00000154 420B                   JSR         @R2
    00000156 2F36                   MOV.L       R3,@-R15
           tan.c    40                    return;
    00000158 A0CA                   BRA         L1104
    0000015A 7F08                   ADD         #8,R15
    0000015C              L1105:                            
           tan.c    41            }
           tan.c    42    
           tan.c    43            // tan function is antisymmetric, tan(-x) = -tan(x)
           tan.c    44    
           tan.c    45            if (isnegative(p1)) {
    0000015C D30C                   MOV.L       L1115+24,R3; _isnegative
    0000015E 430B                   JSR         @R3
    00000160 64D3                   MOV         R13,R4
    00000162 2008                   TST         R0,R0
    00000164 8918                   BT          L1107
           tan.c    46                    push(p1);
    00000166 4C0B                   JSR         @R12
    00000168 64E2                   MOV.L       @R14,R4
           tan.c    47                    negate();
    0000016A D30A                   MOV.L       L1115+28,R3; _negate
    0000016C 430B                   JSR         @R3
    0000016E 0009                   NOP
           tan.c    48                    tangent();
    00000170 BF70                   BSR         _tangent
    00000172 0009                   NOP
    00000174 A0A5                   BRA         L1068
    00000176 0009                   NOP
    00000178              L1115:                            
    00000178 <00000000>             .DATA.L     _tan
    0000017C <00000000>             .DATA.L     _fabs
    00000180 D9D7BDBB               .DATA.L     H'D9D7BDBB
    00000184 3DDB7CDF               .DATA.L     H'3DDB7CDF
    00000188 <00000000>             .DATA.L     __ltd
    0000018C <00000000>             .DATA.L     _push_double
    00000190 <00000000>             .DATA.L     _isnegative
    00000194 <00000000>             .DATA.L     _negate
    00000198              L1107:                            
           tan.c    49                    negate();
           tan.c    50                    return;
           tan.c    51            }
           tan.c    52    
           tan.c    53            // multiply by 180/pi
           tan.c    54    
           tan.c    55            push(p1);
    00000198 4C0B                   JSR         @R12
    0000019A 64E2                   MOV.L       @R14,R4
           tan.c    56            push_integer(180);
    0000019C DD35                   MOV.L       L1116+22,R13; _push_integer
    0000019E 945E                   MOV.W       L1116,R4   ; H'00B4
    000001A0 4D0B                   JSR         @R13
    000001A2 0009                   NOP
           tan.c    57            multiply();
    000001A4 D234                   MOV.L       L1116+26,R2; _multiply
    000001A6 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001A8 0009                   NOP
           tan.c    58            push_symbol(PI);
    000001AA D334                   MOV.L       L1116+30,R3; _push_symbol
    000001AC 430B                   JSR         @R3
    000001AE E47F                   MOV         #127,R4
           tan.c    59            divide();
    000001B0 D233                   MOV.L       L1116+34,R2; _divide
    000001B2 420B                   JSR         @R2
    000001B4 0009                   NOP
           tan.c    60    
           tan.c    61            n = pop_integer();
    000001B6 D333                   MOV.L       L1116+38,R3; _pop_integer
    000001B8 430B                   JSR         @R3
    000001BA 0009                   NOP
    000001BC 9350                   MOV.W       L1116+2,R3 ; H'04E0
    000001BE 6503                   MOV         R0,R5
    000001C0 D231                   MOV.L       L1116+42,R2; _symtab
    000001C2 4511                   CMP/PZ      R5
    000001C4 6422                   MOV.L       @R2,R4
    000001C6 8D02                   BT/S        L1117
    000001C8 343C                   ADD         R3,R4
    000001CA A083                   BRA         L1113
    000001CC 0009                   NOP
    000001CE              L1117:                            
           tan.c    62    
           tan.c    63            if (n < 0) {
           tan.c    64                    push(symbol(TAN));
           tan.c    65                    push(p1);
           tan.c    66                    list(2);
           tan.c    67                    return;
           tan.c    68            }
           tan.c    69    
           tan.c    70            switch (n % 360) {
    000001CE DA2F                   MOV.L       L1116+46,R10; _power
    000001D0 DB2F                   MOV.L       L1116+50,R11; _push_rational
    000001D2 9046                   MOV.W       L1116+4,R0 ; H'0168
    000001D4 D22F                   MOV.L       L1116+54,R2; __modls
    000001D6 420B                   JSR         @R2
    000001D8 6153                   MOV         R5,R1
    000001DA 8800                   CMP/EQ      #0,R0
    000001DC 8924                   BT          L1071
    000001DE 913E                   MOV.W       L1116,R1   ; H'00B4
    000001E0 3010                   CMP/EQ      R1,R0
    000001E2 8921                   BT          L1072
    000001E4 881E                   CMP/EQ      #30,R0
    000001E6 8921                   BT          L1073
    000001E8 913C                   MOV.W       L1116+6,R1 ; H'00D2
    000001EA 3010                   CMP/EQ      R1,R0
    000001EC 891E                   BT          L1074
    000001EE 913A                   MOV.W       L1116+8,R1 ; H'0096
    000001F0 3010                   CMP/EQ      R1,R0
    000001F2 891E                   BT          L1075
    000001F4 9138                   MOV.W       L1116+10,R1; H'014A
    000001F6 3010                   CMP/EQ      R1,R0
    000001F8 891B                   BT          L1076
    000001FA 882D                   CMP/EQ      #45,R0
    000001FC 892D                   BT          L1077




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001FE 9134                   MOV.W       L1116+12,R1; H'00E1
    00000200 3010                   CMP/EQ      R1,R0
    00000202 892A                   BT          L1078
    00000204 9132                   MOV.W       L1116+14,R1; H'0087
    00000206 3010                   CMP/EQ      R1,R0
    00000208 8946                   BT          L1079
    0000020A 9130                   MOV.W       L1116+16,R1; H'013B
    0000020C 3010                   CMP/EQ      R1,R0
    0000020E 8943                   BT          L1080
    00000210 883C                   CMP/EQ      #60,R0
    00000212 8946                   BT          L1081
    00000214 912C                   MOV.W       L1116+18,R1; H'00F0
    00000216 3010                   CMP/EQ      R1,R0
    00000218 8943                   BT          L1082
    0000021A 8878                   CMP/EQ      #120,R0
    0000021C 894A                   BT          L1083
    0000021E 9128                   MOV.W       L1116+20,R1; H'012C
    00000220 3010                   CMP/EQ      R1,R0
    00000222 8947                   BT          L1084
    00000224 A056                   BRA         L1113
    00000226 0009                   NOP
    00000228              L1071:                           ; case label 
           tan.c    71            case 0:
           tan.c    72            case 180:
    00000228              L1072:                           ; case label 
           tan.c    73                    push_integer(0);
           tan.c    74                    break;
    00000228 A037                   BRA         L1112
    0000022A E400                   MOV         #0,R4
    0000022C              L1073:                           ; case label 
           tan.c    75            case 30:
           tan.c    76            case 210:
    0000022C              L1074:                           ; case label 
           tan.c    77                    push_rational(1, 3);
    0000022C E503                   MOV         #3,R5
    0000022E A002                   BRA         L1110
    00000230 E401                   MOV         #1,R4
    00000232              L1075:                           ; case label 
           tan.c    78                    push_integer(3);
           tan.c    79                    push_rational(1, 2);
           tan.c    80                    power();
           tan.c    81                    multiply();
           tan.c    82                    break;
           tan.c    83            case 150:
           tan.c    84            case 330:
    00000232              L1076:                           ; case label 
           tan.c    85                    push_rational(-1, 3);
    00000232 E503                   MOV         #3,R5
    00000234 E4FF                   MOV         #-1,R4
    00000236              L1110:                            
    00000236 4B0B                   JSR         @R11
    00000238 0009                   NOP
           tan.c    86                    push_integer(3);
    0000023A 4D0B                   JSR         @R13
    0000023C E403                   MOV         #3,R4
           tan.c    87                    push_rational(1, 2);
    0000023E E502                   MOV         #2,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000240 4B0B                   JSR         @R11
    00000242 E401                   MOV         #1,R4
           tan.c    88                    power();
    00000244 4A0B                   JSR         @R10
    00000246 0009                   NOP
           tan.c    89                    multiply();
    00000248 D20B                   MOV.L       L1116+26,R2; _multiply
    0000024A 7F08                   ADD         #8,R15
    0000024C 4F26                   LDS.L       @R15+,PR
    0000024E 6AF6                   MOV.L       @R15+,R10
    00000250 6BF6                   MOV.L       @R15+,R11
    00000252 6CF6                   MOV.L       @R15+,R12
    00000254 6DF6                   MOV.L       @R15+,R13
    00000256 422B                   JMP         @R2
    00000258 6EF6                   MOV.L       @R15+,R14
    0000025A              L1077:                           ; case label 
           tan.c    90                    break;
           tan.c    91            case 45:
           tan.c    92            case 225:
    0000025A              L1078:                           ; case label 
           tan.c    93                    push_integer(1);
           tan.c    94                    break;
    0000025A A01E                   BRA         L1112
    0000025C E401                   MOV         #1,R4
    0000025E              L1116:                            
    0000025E 00B4                   .DATA.W     H'00B4
    00000260 04E0                   .DATA.W     H'04E0
    00000262 0168                   .DATA.W     H'0168
    00000264 00D2                   .DATA.W     H'00D2
    00000266 0096                   .DATA.W     H'0096
    00000268 014A                   .DATA.W     H'014A
    0000026A 00E1                   .DATA.W     H'00E1
    0000026C 0087                   .DATA.W     H'0087
    0000026E 013B                   .DATA.W     H'013B
    00000270 00F0                   .DATA.W     H'00F0
    00000272 012C                   .DATA.W     H'012C
    00000274 <00000000>             .DATA.L     _push_integer
    00000278 <00000000>             .DATA.L     _multiply
    0000027C <00000000>             .DATA.L     _push_symbol
    00000280 <00000000>             .DATA.L     _divide
    00000284 <00000000>             .DATA.L     _pop_integer
    00000288 <00000000>             .DATA.L     _symtab
    0000028C <00000000>             .DATA.L     _power
    00000290 <00000000>             .DATA.L     _push_rational
    00000294 <00000000>             .DATA.L     __modls
    00000298              L1079:                           ; case label 
           tan.c    95            case 135:
           tan.c    96            case 315:
    00000298              L1080:                           ; case label 
           tan.c    97                    push_integer(-1);
    00000298 E4FF                   MOV         #-1,R4
           tan.c    98                    break;
    0000029A              L1112:                            
    0000029A 4D0B                   JSR         @R13
    0000029C 0009                   NOP
    0000029E A027                   BRA         L1104
    000002A0 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002A2              L1081:                           ; case label 
           tan.c    99            case 60:
           tan.c   100            case 240:
    000002A2              L1082:                           ; case label 
           tan.c   101                    push_integer(3);
    000002A2 4D0B                   JSR         @R13
    000002A4 E403                   MOV         #3,R4
           tan.c   102                    push_rational(1, 2);
    000002A6 E502                   MOV         #2,R5
    000002A8 4B0B                   JSR         @R11
    000002AA E401                   MOV         #1,R4
           tan.c   103                    power();
    000002AC 4A0B                   JSR         @R10
    000002AE 0009                   NOP
           tan.c   104                    break;
    000002B0 A01E                   BRA         L1104
    000002B2 0009                   NOP
    000002B4              L1083:                           ; case label 
           tan.c   105            case 120:
           tan.c   106            case 300:
    000002B4              L1084:                           ; case label 
           tan.c   107                    push_integer(3);
    000002B4 4D0B                   JSR         @R13
    000002B6 E403                   MOV         #3,R4
           tan.c   108                    push_rational(1, 2);
    000002B8 E502                   MOV         #2,R5
    000002BA 4B0B                   JSR         @R11
    000002BC E401                   MOV         #1,R4
           tan.c   109                    power();
    000002BE 4A0B                   JSR         @R10
    000002C0 0009                   NOP
    000002C2              L1068:
           tan.c   110                    negate();
    000002C2 7F08                   ADD         #8,R15
    000002C4 D30E                   MOV.L       L1118,R3   ; _negate
    000002C6 4F26                   LDS.L       @R15+,PR
    000002C8 6AF6                   MOV.L       @R15+,R10
    000002CA 6BF6                   MOV.L       @R15+,R11
    000002CC 6CF6                   MOV.L       @R15+,R12
    000002CE 6DF6                   MOV.L       @R15+,R13
    000002D0 432B                   JMP         @R3
    000002D2 6EF6                   MOV.L       @R15+,R14
    000002D4              L1113:                            
    000002D4 4C0B                   JSR         @R12
    000002D6 0009                   NOP
           tan.c   111                    break;
           tan.c   112            default:
           tan.c   113                    push(symbol(TAN));
           tan.c   114                    push(p1);
    000002D8 4C0B                   JSR         @R12
    000002DA 64E2                   MOV.L       @R14,R4
           tan.c   115                    list(2);
    000002DC D309                   MOV.L       L1118+4,R3 ; _list
    000002DE E402                   MOV         #2,R4
    000002E0 7F08                   ADD         #8,R15
    000002E2 4F26                   LDS.L       @R15+,PR
    000002E4 6AF6                   MOV.L       @R15+,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002E6 6BF6                   MOV.L       @R15+,R11
    000002E8 6CF6                   MOV.L       @R15+,R12
    000002EA 6DF6                   MOV.L       @R15+,R13
    000002EC 432B                   JMP         @R3
    000002EE 6EF6                   MOV.L       @R15+,R14
    000002F0              L1104:                            
           tan.c   116                    break;
           tan.c   117            }
           tan.c   118    }
    000002F0 7F08                   ADD         #8,R15
    000002F2 4F26                   LDS.L       @R15+,PR
    000002F4 6AF6                   MOV.L       @R15+,R10
    000002F6 6BF6                   MOV.L       @R15+,R11
    000002F8 6CF6                   MOV.L       @R15+,R12
    000002FA 6DF6                   MOV.L       @R15+,R13
    000002FC 000B                   RTS
    000002FE 6EF6                   MOV.L       @R15+,R14
    00000300              L1118:                            
    00000300 <00000000>             .DATA.L     _negate
    00000304 <00000000>             .DATA.L     _list
           tan.c   119    








































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:31  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      119



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000308 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000308 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           22
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           3
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            67






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkE528.tmp 

