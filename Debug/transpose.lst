SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\transpose.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      transpose.     1    // Transpose tensor indices
      transpose.     2    
      transpose.     3    #include "stdafx.h"
      transpose.     4    #include "defs.h"
      transpose.     5    static void ytranspose(void);
      transpose.     6    
      transpose.     7    void
      transpose.     8    eval_transpose(void)
P   00000000              _eval_transpose:                 ; function: eval_transpose
                                                           ; frame size=16
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 2FC6                   MOV.L       R12,@-R15
    00000006 4F22                   STS.L       PR,@-R15
      transpose.     9    {
      transpose.    10            push(cadr(p1));
    00000008 DD33                   MOV.L       L1164+2,R13; _push
    0000000A DE34                   MOV.L       L1164+6,R14; _p1
    0000000C 64E2                   MOV.L       @R14,R4
    0000000E 8448                   MOV.B       @(8,R4),R0
    00000010 2008                   TST         R0,R0
    00000012 8B02                   BF          L1087
    00000014 64E2                   MOV.L       @R14,R4
    00000016 A004                   BRA         L1089
    00000018 5441                   MOV.L       @(4,R4),R4
    0000001A              L1087:                            
    0000001A 935C                   MOV.W       L1164,R3   ; H'0570
    0000001C D230                   MOV.L       L1164+10,R2; _symtab
    0000001E 6422                   MOV.L       @R2,R4
    00000020 343C                   ADD         R3,R4
    00000022              L1089:                            
    00000022 8448                   MOV.B       @(8,R4),R0
    00000024 2008                   TST         R0,R0
    00000026 8B0C                   BF          L1086
    00000028 64E2                   MOV.L       @R14,R4
    0000002A 8448                   MOV.B       @(8,R4),R0
    0000002C 2008                   TST         R0,R0
    0000002E 8B02                   BF          L1088
    00000030 64E2                   MOV.L       @R14,R4
    00000032 A004                   BRA         L1090
    00000034 5441                   MOV.L       @(4,R4),R4
    00000036              L1088:                            
    00000036 934E                   MOV.W       L1164,R3   ; H'0570
    00000038 D229                   MOV.L       L1164+10,R2; _symtab
    0000003A 6422                   MOV.L       @R2,R4
    0000003C 343C                   ADD         R3,R4
    0000003E              L1090:                            
    0000003E A004                   BRA         L1091
    00000040 6442                   MOV.L       @R4,R4
    00000042              L1086:                            
    00000042 9348                   MOV.W       L1164,R3   ; H'0570
    00000044 D226                   MOV.L       L1164+10,R2; _symtab
    00000046 6422                   MOV.L       @R2,R4
    00000048 343C                   ADD         R3,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000004A              L1091:                            
    0000004A 4D0B                   JSR         @R13
    0000004C 0009                   NOP
      transpose.    11            eval();
    0000004E DC25                   MOV.L       L1164+14,R12; _eval
    00000050 4C0B                   JSR         @R12
    00000052 0009                   NOP
      transpose.    12            if (cddr(p1) == symbol(NIL)) {
    00000054 63E2                   MOV.L       @R14,R3
    00000056 8438                   MOV.B       @(8,R3),R0
    00000058 2008                   TST         R0,R0
    0000005A 8B02                   BF          L1094
    0000005C 62E2                   MOV.L       @R14,R2
    0000005E A004                   BRA         L1096
    00000060 5221                   MOV.L       @(4,R2),R2
    00000062              L1094:                            
    00000062 9338                   MOV.W       L1164,R3   ; H'0570
    00000064 D11E                   MOV.L       L1164+10,R1; _symtab
    00000066 6212                   MOV.L       @R1,R2
    00000068 323C                   ADD         R3,R2
    0000006A              L1096:                            
    0000006A 8428                   MOV.B       @(8,R2),R0
    0000006C 2008                   TST         R0,R0
    0000006E 8B0C                   BF          L1093
    00000070 63E2                   MOV.L       @R14,R3
    00000072 8438                   MOV.B       @(8,R3),R0
    00000074 2008                   TST         R0,R0
    00000076 8B02                   BF          L1095
    00000078 62E2                   MOV.L       @R14,R2
    0000007A A004                   BRA         L1097
    0000007C 5221                   MOV.L       @(4,R2),R2
    0000007E              L1095:                            
    0000007E 932A                   MOV.W       L1164,R3   ; H'0570
    00000080 D117                   MOV.L       L1164+10,R1; _symtab
    00000082 6212                   MOV.L       @R1,R2
    00000084 323C                   ADD         R3,R2
    00000086              L1097:                            
    00000086 A004                   BRA         L1098
    00000088 5321                   MOV.L       @(4,R2),R3
    0000008A              L1093:                            
    0000008A 9224                   MOV.W       L1164,R2   ; H'0570
    0000008C D114                   MOV.L       L1164+10,R1; _symtab
    0000008E 6312                   MOV.L       @R1,R3
    00000090 332C                   ADD         R2,R3
    00000092              L1098:                            
    00000092 9220                   MOV.W       L1164,R2   ; H'0570
    00000094 D112                   MOV.L       L1164+10,R1; _symtab
    00000096 6012                   MOV.L       @R1,R0
    00000098 302C                   ADD         R2,R0
    0000009A 3300                   CMP/EQ      R0,R3
    0000009C 8B07                   BF          L1092
      transpose.    13                    push_integer(1);
    0000009E D112                   MOV.L       L1164+18,R1; _push_integer
    000000A0 410B                   JSR         @R1
    000000A2 E401                   MOV         #1,R4
      transpose.    14                    push_integer(2);
    000000A4 D310                   MOV.L       L1164+18,R3; _push_integer




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000A6 430B                   JSR         @R3
    000000A8 E402                   MOV         #2,R4
    000000AA A0F7                   BRA         L1099
    000000AC 0009                   NOP
    000000AE              L1092:                            
      transpose.    15            } else {
      transpose.    16                    push(caddr(p1));
    000000AE 64E2                   MOV.L       @R14,R4
    000000B0 8448                   MOV.B       @(8,R4),R0
    000000B2 2008                   TST         R0,R0
    000000B4 8B02                   BF          L1102
    000000B6 64E2                   MOV.L       @R14,R4
    000000B8 A003                   BRA         L1107
    000000BA 5441                   MOV.L       @(4,R4),R4
    000000BC              L1102:                            
    000000BC D308                   MOV.L       L1164+10,R3; _symtab
    000000BE 6432                   MOV.L       @R3,R4
    000000C0 342C                   ADD         R2,R4
    000000C2              L1107:                            
    000000C2 8448                   MOV.B       @(8,R4),R0
    000000C4 2008                   TST         R0,R0
    000000C6 8B17                   BF          L1101
    000000C8 64E2                   MOV.L       @R14,R4
    000000CA 8448                   MOV.B       @(8,R4),R0
    000000CC 2008                   TST         R0,R0
    000000CE 8B0D                   BF          L1103
    000000D0 64E2                   MOV.L       @R14,R4
    000000D2 A00F                   BRA         L1108
    000000D4 5441                   MOV.L       @(4,R4),R4
    000000D6              L1164:                            
    000000D6 0570                   .DATA.W     H'0570
    000000D8 <00000000>             .DATA.L     _push
    000000DC <00000000>             .DATA.L     _p1
    000000E0 <00000000>             .DATA.L     _symtab
    000000E4 <00000000>             .DATA.L     _eval
    000000E8 <00000000>             .DATA.L     _push_integer
    000000EC              L1103:                            
    000000EC 935D                   MOV.W       L1165,R3   ; H'0570
    000000EE D22F                   MOV.L       L1165+2,R2 ; _symtab
    000000F0 6422                   MOV.L       @R2,R4
    000000F2 343C                   ADD         R3,R4
    000000F4              L1108:                            
    000000F4 A004                   BRA         L1109
    000000F6 5441                   MOV.L       @(4,R4),R4
    000000F8              L1101:                            
    000000F8 9357                   MOV.W       L1165,R3   ; H'0570
    000000FA D22C                   MOV.L       L1165+2,R2 ; _symtab
    000000FC 6422                   MOV.L       @R2,R4
    000000FE 343C                   ADD         R3,R4
    00000100              L1109:                            
    00000100 8448                   MOV.B       @(8,R4),R0
    00000102 2008                   TST         R0,R0
    00000104 8B20                   BF          L1100
    00000106 64E2                   MOV.L       @R14,R4
    00000108 8448                   MOV.B       @(8,R4),R0
    0000010A 2008                   TST         R0,R0
    0000010C 8B02                   BF          L1105




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000010E 64E2                   MOV.L       @R14,R4
    00000110 A004                   BRA         L1110
    00000112 5441                   MOV.L       @(4,R4),R4
    00000114              L1105:                            
    00000114 9349                   MOV.W       L1165,R3   ; H'0570
    00000116 D225                   MOV.L       L1165+2,R2 ; _symtab
    00000118 6422                   MOV.L       @R2,R4
    0000011A 343C                   ADD         R3,R4
    0000011C              L1110:                            
    0000011C 8448                   MOV.B       @(8,R4),R0
    0000011E 2008                   TST         R0,R0
    00000120 8B0C                   BF          L1104
    00000122 64E2                   MOV.L       @R14,R4
    00000124 8448                   MOV.B       @(8,R4),R0
    00000126 2008                   TST         R0,R0
    00000128 8B02                   BF          L1106
    0000012A 64E2                   MOV.L       @R14,R4
    0000012C A004                   BRA         L1111
    0000012E 5441                   MOV.L       @(4,R4),R4
    00000130              L1106:                            
    00000130 933B                   MOV.W       L1165,R3   ; H'0570
    00000132 D21E                   MOV.L       L1165+2,R2 ; _symtab
    00000134 6422                   MOV.L       @R2,R4
    00000136 343C                   ADD         R3,R4
    00000138              L1111:                            
    00000138 A004                   BRA         L1112
    0000013A 5441                   MOV.L       @(4,R4),R4
    0000013C              L1104:                            
    0000013C 9335                   MOV.W       L1165,R3   ; H'0570
    0000013E D21B                   MOV.L       L1165+2,R2 ; _symtab
    00000140 6422                   MOV.L       @R2,R4
    00000142 343C                   ADD         R3,R4
    00000144              L1112:                            
    00000144 A004                   BRA         L1113
    00000146 6442                   MOV.L       @R4,R4
    00000148              L1100:                            
    00000148 932F                   MOV.W       L1165,R3   ; H'0570
    0000014A D218                   MOV.L       L1165+2,R2 ; _symtab
    0000014C 6422                   MOV.L       @R2,R4
    0000014E 343C                   ADD         R3,R4
    00000150              L1113:                            
    00000150 4D0B                   JSR         @R13
    00000152 0009                   NOP
      transpose.    17                    eval();
    00000154 4C0B                   JSR         @R12
    00000156 0009                   NOP
      transpose.    18                    push(cadddr(p1));
    00000158 64E2                   MOV.L       @R14,R4
    0000015A 8448                   MOV.B       @(8,R4),R0
    0000015C 2008                   TST         R0,R0
    0000015E 8B02                   BF          L1117
    00000160 64E2                   MOV.L       @R14,R4
    00000162 A004                   BRA         L1129
    00000164 5441                   MOV.L       @(4,R4),R4
    00000166              L1117:                            
    00000166 9320                   MOV.W       L1165,R3   ; H'0570
    00000168 D210                   MOV.L       L1165+2,R2 ; _symtab




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000016A 6422                   MOV.L       @R2,R4
    0000016C 343C                   ADD         R3,R4
    0000016E              L1129:                            
    0000016E 8448                   MOV.B       @(8,R4),R0
    00000170 2008                   TST         R0,R0
    00000172 8B0C                   BF          L1116
    00000174 64E2                   MOV.L       @R14,R4
    00000176 8448                   MOV.B       @(8,R4),R0
    00000178 2008                   TST         R0,R0
    0000017A 8B02                   BF          L1118
    0000017C 64E2                   MOV.L       @R14,R4
    0000017E A004                   BRA         L1130
    00000180 5441                   MOV.L       @(4,R4),R4
    00000182              L1118:                            
    00000182 9312                   MOV.W       L1165,R3   ; H'0570
    00000184 D209                   MOV.L       L1165+2,R2 ; _symtab
    00000186 6422                   MOV.L       @R2,R4
    00000188 343C                   ADD         R3,R4
    0000018A              L1130:                            
    0000018A A004                   BRA         L1131
    0000018C 5441                   MOV.L       @(4,R4),R4
    0000018E              L1116:                            
    0000018E 930C                   MOV.W       L1165,R3   ; H'0570
    00000190 D206                   MOV.L       L1165+2,R2 ; _symtab
    00000192 6422                   MOV.L       @R2,R4
    00000194 343C                   ADD         R3,R4
    00000196              L1131:                            
    00000196 8448                   MOV.B       @(8,R4),R0
    00000198 2008                   TST         R0,R0
    0000019A 8B23                   BF          L1115
    0000019C 64E2                   MOV.L       @R14,R4
    0000019E 8448                   MOV.B       @(8,R4),R0
    000001A0 2008                   TST         R0,R0
    000001A2 8B05                   BF          L1120
    000001A4 64E2                   MOV.L       @R14,R4
    000001A6 A007                   BRA         L1132
    000001A8 5441                   MOV.L       @(4,R4),R4
    000001AA              L1165:                            
    000001AA 0570                   .DATA.W     H'0570
    000001AC <00000000>             .DATA.L     _symtab
    000001B0              L1120:                            
    000001B0 9362                   MOV.W       L1166,R3   ; H'0570
    000001B2 D232                   MOV.L       L1166+4,R2 ; _symtab
    000001B4 6422                   MOV.L       @R2,R4
    000001B6 343C                   ADD         R3,R4
    000001B8              L1132:                            
    000001B8 8448                   MOV.B       @(8,R4),R0
    000001BA 2008                   TST         R0,R0
    000001BC 8B0C                   BF          L1119
    000001BE 64E2                   MOV.L       @R14,R4
    000001C0 8448                   MOV.B       @(8,R4),R0
    000001C2 2008                   TST         R0,R0
    000001C4 8B02                   BF          L1121
    000001C6 64E2                   MOV.L       @R14,R4
    000001C8 A004                   BRA         L1133
    000001CA 5441                   MOV.L       @(4,R4),R4
    000001CC              L1121:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001CC 9354                   MOV.W       L1166,R3   ; H'0570
    000001CE D22B                   MOV.L       L1166+4,R2 ; _symtab
    000001D0 6422                   MOV.L       @R2,R4
    000001D2 343C                   ADD         R3,R4
    000001D4              L1133:                            
    000001D4 A004                   BRA         L1134
    000001D6 5441                   MOV.L       @(4,R4),R4
    000001D8              L1119:                            
    000001D8 934E                   MOV.W       L1166,R3   ; H'0570
    000001DA D228                   MOV.L       L1166+4,R2 ; _symtab
    000001DC 6422                   MOV.L       @R2,R4
    000001DE 343C                   ADD         R3,R4
    000001E0              L1134:                            
    000001E0 A004                   BRA         L1135
    000001E2 5441                   MOV.L       @(4,R4),R4
    000001E4              L1115:                            
    000001E4 9348                   MOV.W       L1166,R3   ; H'0570
    000001E6 D225                   MOV.L       L1166+4,R2 ; _symtab
    000001E8 6422                   MOV.L       @R2,R4
    000001EA 343C                   ADD         R3,R4
    000001EC              L1135:                            
    000001EC 8448                   MOV.B       @(8,R4),R0
    000001EE 2008                   TST         R0,R0
    000001F0 8B4C                   BF          L1114
    000001F2 64E2                   MOV.L       @R14,R4
    000001F4 8448                   MOV.B       @(8,R4),R0
    000001F6 2008                   TST         R0,R0
    000001F8 8B02                   BF          L1124
    000001FA 64E2                   MOV.L       @R14,R4
    000001FC A004                   BRA         L1136
    000001FE 5441                   MOV.L       @(4,R4),R4
    00000200              L1124:                            
    00000200 933A                   MOV.W       L1166,R3   ; H'0570
    00000202 D21E                   MOV.L       L1166+4,R2 ; _symtab
    00000204 6422                   MOV.L       @R2,R4
    00000206 343C                   ADD         R3,R4
    00000208              L1136:                            
    00000208 8448                   MOV.B       @(8,R4),R0
    0000020A 2008                   TST         R0,R0
    0000020C 8B0C                   BF          L1123
    0000020E 64E2                   MOV.L       @R14,R4
    00000210 8448                   MOV.B       @(8,R4),R0
    00000212 2008                   TST         R0,R0
    00000214 8B02                   BF          L1125
    00000216 64E2                   MOV.L       @R14,R4
    00000218 A004                   BRA         L1137
    0000021A 5441                   MOV.L       @(4,R4),R4
    0000021C              L1125:                            
    0000021C 932C                   MOV.W       L1166,R3   ; H'0570
    0000021E D217                   MOV.L       L1166+4,R2 ; _symtab
    00000220 6422                   MOV.L       @R2,R4
    00000222 343C                   ADD         R3,R4
    00000224              L1137:                            
    00000224 A004                   BRA         L1138
    00000226 5441                   MOV.L       @(4,R4),R4
    00000228              L1123:                            
    00000228 9326                   MOV.W       L1166,R3   ; H'0570




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000022A D214                   MOV.L       L1166+4,R2 ; _symtab
    0000022C 6422                   MOV.L       @R2,R4
    0000022E 343C                   ADD         R3,R4
    00000230              L1138:                            
    00000230 8448                   MOV.B       @(8,R4),R0
    00000232 2008                   TST         R0,R0
    00000234 8B24                   BF          L1122
    00000236 64E2                   MOV.L       @R14,R4
    00000238 8448                   MOV.B       @(8,R4),R0
    0000023A 2008                   TST         R0,R0
    0000023C 8B02                   BF          L1127
    0000023E 64E2                   MOV.L       @R14,R4
    00000240 A004                   BRA         L1139
    00000242 5441                   MOV.L       @(4,R4),R4
    00000244              L1127:                            
    00000244 9318                   MOV.W       L1166,R3   ; H'0570
    00000246 D20D                   MOV.L       L1166+4,R2 ; _symtab
    00000248 6422                   MOV.L       @R2,R4
    0000024A 343C                   ADD         R3,R4
    0000024C              L1139:                            
    0000024C 8448                   MOV.B       @(8,R4),R0
    0000024E 2008                   TST         R0,R0
    00000250 8B0C                   BF          L1126
    00000252 64E2                   MOV.L       @R14,R4
    00000254 8448                   MOV.B       @(8,R4),R0
    00000256 2008                   TST         R0,R0
    00000258 8B02                   BF          L1128
    0000025A 64E2                   MOV.L       @R14,R4
    0000025C A004                   BRA         L1140
    0000025E 5441                   MOV.L       @(4,R4),R4
    00000260              L1128:                            
    00000260 930A                   MOV.W       L1166,R3   ; H'0570
    00000262 D206                   MOV.L       L1166+4,R2 ; _symtab
    00000264 6422                   MOV.L       @R2,R4
    00000266 343C                   ADD         R3,R4
    00000268              L1140:                            
    00000268 A004                   BRA         L1141
    0000026A 5441                   MOV.L       @(4,R4),R4
    0000026C              L1126:                            
    0000026C 9304                   MOV.W       L1166,R3   ; H'0570
    0000026E D203                   MOV.L       L1166+4,R2 ; _symtab
    00000270 6422                   MOV.L       @R2,R4
    00000272 343C                   ADD         R3,R4
    00000274              L1141:                            
    00000274 A008                   BRA         L1142
    00000276 5441                   MOV.L       @(4,R4),R4
    00000278              L1166:                            
    00000278 0570                   .DATA.W     H'0570
    0000027A 0000                   .DATA.W     0
    0000027C <00000000>             .DATA.L     _symtab
    00000280              L1122:                            
    00000280 9341                   MOV.W       L1167,R3   ; H'0570
    00000282 D222                   MOV.L       L1167+6,R2 ; _symtab
    00000284 6422                   MOV.L       @R2,R4
    00000286 343C                   ADD         R3,R4
    00000288              L1142:                            
    00000288 A004                   BRA         L1143




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000028A 6442                   MOV.L       @R4,R4
    0000028C              L1114:                            
    0000028C 933B                   MOV.W       L1167,R3   ; H'0570
    0000028E D21F                   MOV.L       L1167+6,R2 ; _symtab
    00000290 6422                   MOV.L       @R2,R4
    00000292 343C                   ADD         R3,R4
    00000294              L1143:                            
    00000294 4D0B                   JSR         @R13
    00000296 0009                   NOP
      transpose.    19                    eval();
    00000298 4C0B                   JSR         @R12
    0000029A 0009                   NOP
    0000029C              L1099:                            
      transpose.    20            }
      transpose.    21            transpose();
    0000029C 4F26                   LDS.L       @R15+,PR
    0000029E 6CF6                   MOV.L       @R15+,R12
    000002A0 6DF6                   MOV.L       @R15+,R13
    000002A2 6EF6                   MOV.L       @R15+,R14
      transpose.    22    }
      transpose.    23    
      transpose.    24    void
      transpose.    25    transpose(void)
    000002A4              _transpose:                      ; function: transpose
                                                           ; frame size=4
    000002A4 4F22                   STS.L       PR,@-R15
      transpose.    26    {
      transpose.    27            save();
    000002A6 D31A                   MOV.L       L1167+10,R3; _save
    000002A8 430B                   JSR         @R3
    000002AA 0009                   NOP
      transpose.    28            ytranspose();
    000002AC B003                   BSR         __$ytranspose
    000002AE 0009                   NOP
      transpose.    29            restore();
    000002B0 D318                   MOV.L       L1167+14,R3; _restore
    000002B2 432B                   JMP         @R3
    000002B4 4F26                   LDS.L       @R15+,PR
      transpose.    30    }
      transpose.    31    
      transpose.    32    static void
      transpose.    33    ytranspose(void)
    000002B6              __$ytranspose:                   ; function: ytranspose
                                                           ; frame size=252
    000002B6 2FE6                   MOV.L       R14,@-R15
    000002B8 2FD6                   MOV.L       R13,@-R15
    000002BA 2FC6                   MOV.L       R12,@-R15
    000002BC 2FB6                   MOV.L       R11,@-R15
    000002BE 2FA6                   MOV.L       R10,@-R15
    000002C0 2F96                   MOV.L       R9,@-R15
    000002C2 2F86                   MOV.L       R8,@-R15
    000002C4 4F22                   STS.L       PR,@-R15
    000002C6 4F12                   STS.L       MACL,@-R15
    000002C8 901E                   MOV.W       L1167+2,R0 ; H'FF28
    000002CA 3F0C                   ADD         R0,R15
      transpose.    34    {
      transpose.    35            int i, j, k, l, m, ndim, nelem, t;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      transpose.    36            int ai[MAXDIM], an[MAXDIM];
      transpose.    37            U **a, **b;
      transpose.    38    
      transpose.    39            p3 = pop();
    000002CC DE12                   MOV.L       L1167+18,R14; _pop
    000002CE 4E0B                   JSR         @R14
    000002D0 0009                   NOP
    000002D2 D312                   MOV.L       L1167+22,R3; _p3
      transpose.    40            p2 = pop();
    000002D4 DD12                   MOV.L       L1167+26,R13; _p2
    000002D6 4E0B                   JSR         @R14
    000002D8 2302                   MOV.L       R0,@R3
      transpose.    41            p1 = pop();
    000002DA DC12                   MOV.L       L1167+30,R12; _p1
    000002DC 4E0B                   JSR         @R14
    000002DE 2D02                   MOV.L       R0,@R13
    000002E0 2C02                   MOV.L       R0,@R12
    000002E2 6403                   MOV         R0,R4
    000002E4 D810                   MOV.L       L1167+34,R8; _push
    000002E6 8448                   MOV.B       @(8,R4),R0
    000002E8 600C                   EXTU.B      R0,R0
    000002EA 8804                   CMP/EQ      #4,R0
    000002EC 8926                   BT          L1144
      transpose.    42    
      transpose.    43            if (!istensor(p1)) {
      transpose.    44                    if (!iszero(p1))
    000002EE D20F                   MOV.L       L1167+38,R2; _iszero
    000002F0 420B                   JSR         @R2
    000002F2 0009                   NOP
    000002F4 2008                   TST         R0,R0
    000002F6 8B03                   BF          L1145
      transpose.    45                            stop("transpose: tensor expected, 1st arg is not a tensor");
    000002F8 D40D                   MOV.L       L1167+42,R4; L1077
    000002FA D20E                   MOV.L       L1167+46,R2; _stop
    000002FC 420B                   JSR         @R2
    000002FE 0009                   NOP
    00000300              L1145:                            
      transpose.    46                    push(zero);
    00000300 D30D                   MOV.L       L1167+50,R3; _zero
      transpose.    47                    return;
    00000302 A108                   BRA         L1163
    00000304 6432                   MOV.L       @R3,R4
    00000306              L1167:                            
    00000306 0570                   .DATA.W     H'0570
    00000308 FF28                   .DATA.W     H'FF28
    0000030A 0000                   .DATA.W     0
    0000030C <00000000>             .DATA.L     _symtab
    00000310 <00000000>             .DATA.L     _save
    00000314 <00000000>             .DATA.L     _restore
    00000318 <00000000>             .DATA.L     _pop
    0000031C <00000000>             .DATA.L     _p3
    00000320 <00000000>             .DATA.L     _p2
    00000324 <00000000>             .DATA.L     _p1
    00000328 <00000000>             .DATA.L     _push
    0000032C <00000000>             .DATA.L     _iszero
    00000330 <00000000>             .DATA.L     L1077
    00000334 <00000000>             .DATA.L     _stop




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000338 <00000000>             .DATA.L     _zero
    0000033C              L1144:                            
      transpose.    48            }
      transpose.    49    
      transpose.    50            ndim = p1->u.tensor->ndim;
    0000033C 6542                   MOV.L       @R4,R5
      transpose.    51            nelem = p1->u.tensor->nelem;
    0000033E E064                   MOV         #100,R0
    00000340 6E52                   MOV.L       @R5,R14
    00000342 025E                   MOV.L       @(R0,R5),R2
    00000344 1F22                   MOV.L       R2,@(8,R15)
      transpose.    52    
      transpose.    53            // vector?
      transpose.    54    
      transpose.    55            if (ndim == 1) {
    00000346 60E3                   MOV         R14,R0
    00000348 8801                   CMP/EQ      #1,R0
    0000034A 8B01                   BF          L1168
    0000034C A0E3                   BRA         L1163
    0000034E 0009                   NOP
    00000350              L1168:                            
      transpose.    56                    push(p1);
      transpose.    57                    return;
      transpose.    58            }
      transpose.    59    
      transpose.    60            push(p2);
    00000350 480B                   JSR         @R8
    00000352 64D2                   MOV.L       @R13,R4
      transpose.    61            l = pop_integer();
    00000354 D239                   MOV.L       L1169,R2   ; _pop_integer
    00000356 420B                   JSR         @R2
    00000358 0009                   NOP
    0000035A 6903                   MOV         R0,R9
      transpose.    62    
      transpose.    63            push(p3);
    0000035C D338                   MOV.L       L1169+4,R3 ; _p3
    0000035E 480B                   JSR         @R8
    00000360 6432                   MOV.L       @R3,R4
      transpose.    64            m = pop_integer();
    00000362 D236                   MOV.L       L1169,R2   ; _pop_integer
    00000364 420B                   JSR         @R2
    00000366 0009                   NOP
      transpose.    65    
      transpose.    66            if (l < 1 || l > ndim || m < 1 || m > ndim)
    00000368 E401                   MOV         #1,R4
    0000036A 3943                   CMP/GE      R4,R9
    0000036C 8F06                   BF/S        L1149
    0000036E 2F02                   MOV.L       R0,@R15
    00000370 39E7                   CMP/GT      R14,R9
    00000372 8903                   BT          L1149
    00000374 3043                   CMP/GE      R4,R0
    00000376 8B01                   BF          L1149
    00000378 30E7                   CMP/GT      R14,R0
    0000037A 8B03                   BF          L1148
    0000037C              L1149:                            
      transpose.    67                    stop("transpose: index out of range");
    0000037C D431                   MOV.L       L1169+8,R4 ; L1079




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000037E D332                   MOV.L       L1169+12,R3; _stop
    00000380 430B                   JSR         @R3
    00000382 0009                   NOP
    00000384              L1148:                            
      transpose.    68    
      transpose.    69            l--;
      transpose.    70            m--;
    00000384 62F2                   MOV.L       @R15,R2
    00000386 79FF                   ADD         #-1,R9
      transpose.    71    
      transpose.    72            p2 = alloc_tensor(nelem);
    00000388 D330                   MOV.L       L1169+16,R3; _alloc_tensor
    0000038A 72FF                   ADD         #-1,R2
    0000038C 2F22                   MOV.L       R2,@R15
    0000038E 430B                   JSR         @R3
    00000390 54F2                   MOV.L       @(8,R15),R4
      transpose.    73    
      transpose.    74            p2->u.tensor->ndim = ndim;
    00000392 6203                   MOV         R0,R2
    00000394 2D02                   MOV.L       R0,@R13
      transpose.    75    
      transpose.    76            for (i = 0; i < ndim; i++)
    00000396 E400                   MOV         #0,R4
    00000398 6322                   MOV.L       @R2,R3
    0000039A 4E15                   CMP/PL      R14
    0000039C 23E2                   MOV.L       R14,@R3
    0000039E 6643                   MOV         R4,R6
    000003A0 8F0F                   BF/S        L1150
    000003A2 6543                   MOV         R4,R5
    000003A4              L1151:                            
      transpose.    77                    p2->u.tensor->dim[i] = p1->u.tensor->dim[i];
    000003A4 60D2                   MOV.L       @R13,R0
    000003A6 7601                   ADD         #1,R6
    000003A8 6302                   MOV.L       @R0,R3
    000003AA 36E3                   CMP/GE      R14,R6
    000003AC 60C2                   MOV.L       @R12,R0
    000003AE 7304                   ADD         #4,R3
    000003B0 6002                   MOV.L       @R0,R0
    000003B2 335C                   ADD         R5,R3
    000003B4 6203                   MOV         R0,R2
    000003B6 7204                   ADD         #4,R2
    000003B8 325C                   ADD         R5,R2
    000003BA 6122                   MOV.L       @R2,R1
    000003BC 2312                   MOV.L       R1,@R3
    000003BE 8FF1                   BF/S        L1151
    000003C0 7504                   ADD         #4,R5
    000003C2              L1150:                            
      transpose.    78    
      transpose.    79            p2->u.tensor->dim[l] = p1->u.tensor->dim[m];
    000003C2 6A93                   MOV         R9,R10
    000003C4 6BF2                   MOV.L       @R15,R11
    000003C6 4A08                   SHLL2       R10
    000003C8 60D2                   MOV.L       @R13,R0
    000003CA 4B08                   SHLL2       R11
    000003CC 6302                   MOV.L       @R0,R3
    000003CE 7304                   ADD         #4,R3
    000003D0 60C2                   MOV.L       @R12,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003D2 33AC                   ADD         R10,R3
    000003D4 6202                   MOV.L       @R0,R2
    000003D6 7204                   ADD         #4,R2
    000003D8 32BC                   ADD         R11,R2
    000003DA 6122                   MOV.L       @R2,R1
    000003DC 2312                   MOV.L       R1,@R3
      transpose.    80            p2->u.tensor->dim[m] = p1->u.tensor->dim[l];
    000003DE 60D2                   MOV.L       @R13,R0
    000003E0 6302                   MOV.L       @R0,R3
    000003E2 7304                   ADD         #4,R3
    000003E4 60C2                   MOV.L       @R12,R0
    000003E6 33BC                   ADD         R11,R3
    000003E8 6002                   MOV.L       @R0,R0
    000003EA 6203                   MOV         R0,R2
    000003EC 7204                   ADD         #4,R2
    000003EE 32AC                   ADD         R10,R2
    000003F0 6122                   MOV.L       @R2,R1
    000003F2 2312                   MOV.L       R1,@R3
      transpose.    81    
      transpose.    82            a = p1->u.tensor->elem;
    000003F4 63C2                   MOV.L       @R12,R3
    000003F6 6132                   MOV.L       @R3,R1
    000003F8 7168                   ADD         #104,R1
    000003FA 2F12                   MOV.L       R1,@R15
      transpose.    83            b = p2->u.tensor->elem;
    000003FC 63D2                   MOV.L       @R13,R3
    000003FE 6232                   MOV.L       @R3,R2
    00000400 6123                   MOV         R2,R1
    00000402 7168                   ADD         #104,R1
    00000404 1F15                   MOV.L       R1,@(20,R15)
      transpose.    84    
      transpose.    85            for (i = 0; i < ndim; i++) {
    00000406 6943                   MOV         R4,R9
    00000408 6743                   MOV         R4,R7
    0000040A 66F3                   MOV         R15,R6
    0000040C 7618                   ADD         #24,R6
    0000040E 65F3                   MOV         R15,R5
    00000410 4E15                   CMP/PL      R14
    00000412 8F0C                   BF/S        L1152
    00000414 7578                   ADD         #120,R5
    00000416              L1153:                            
      transpose.    86                    ai[i] = 0;
    00000416 6073                   MOV         R7,R0
    00000418 0546                   MOV.L       R4,@(R0,R5)
    0000041A 7901                   ADD         #1,R9
      transpose.    87                    an[i] = p1->u.tensor->dim[i];
    0000041C 63C2                   MOV.L       @R12,R3
    0000041E 39E3                   CMP/GE      R14,R9
    00000420 6332                   MOV.L       @R3,R3
    00000422 7304                   ADD         #4,R3
    00000424 337C                   ADD         R7,R3
    00000426 6332                   MOV.L       @R3,R3
    00000428 0636                   MOV.L       R3,@(R0,R6)
    0000042A 8FF4                   BF/S        L1153
    0000042C 7704                   ADD         #4,R7
    0000042E              L1152:                            
      transpose.    88            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      transpose.    89    
      transpose.    90            // copy components from a to b
      transpose.    91    
      transpose.    92            for (i = 0; i < nelem; i++) {
    0000042E 6943                   MOV         R4,R9
    00000430 63F2                   MOV.L       @R15,R3
    00000432 62E3                   MOV         R14,R2
    00000434 1F34                   MOV.L       R3,@(16,R15)
    00000436 72FF                   ADD         #-1,R2
    00000438 A069                   BRA         L1154
    0000043A 1F23                   MOV.L       R2,@(12,R15)
    0000043C              L1169:                            
    0000043C <00000000>             .DATA.L     _pop_integer
    00000440 <00000000>             .DATA.L     _p3
    00000444 <00000000>             .DATA.L     L1079
    00000448 <00000000>             .DATA.L     _stop
    0000044C <00000000>             .DATA.L     _alloc_tensor
    00000450              L1155:                            
      transpose.    93    
      transpose.    94                    t = ai[l]; ai[l] = ai[m]; ai[m] = t;
    00000450 67A3                   MOV         R10,R7
    00000452 375C                   ADD         R5,R7
    00000454 6372                   MOV.L       @R7,R3
    00000456 6CB3                   MOV         R11,R12
    00000458 2F32                   MOV.L       R3,@R15
      transpose.    95                    t = an[l]; an[l] = an[m]; an[m] = t;
      transpose.    96    
      transpose.    97                    k = 0;
      transpose.    98                    for (j = 0; j < ndim; j++)
    0000045A 4E15                   CMP/PL      R14
    0000045C 3C5C                   ADD         R5,R12
    0000045E 63C2                   MOV.L       @R12,R3
    00000460 2732                   MOV.L       R3,@R7
    00000462 67A3                   MOV         R10,R7
    00000464 62F2                   MOV.L       @R15,R2
    00000466 376C                   ADD         R6,R7
    00000468 2C22                   MOV.L       R2,@R12
    0000046A 6CB3                   MOV         R11,R12
    0000046C 2F72                   MOV.L       R7,@R15
    0000046E 3C6C                   ADD         R6,R12
    00000470 6772                   MOV.L       @R7,R7
    00000472 63F2                   MOV.L       @R15,R3
    00000474 62C2                   MOV.L       @R12,R2
    00000476 2322                   MOV.L       R2,@R3
    00000478 2C72                   MOV.L       R7,@R12
    0000047A 6C43                   MOV         R4,R12
    0000047C 2F42                   MOV.L       R4,@R15
    0000047E 8F0D                   BF/S        L1156
    00000480 67C3                   MOV         R12,R7
    00000482              L1157:                            
      transpose.    99                            k = (k * an[j]) + ai[j];
    00000482 6073                   MOV         R7,R0
    00000484 61F2                   MOV.L       @R15,R1
    00000486 036E                   MOV.L       @(R0,R6),R3
    00000488 025E                   MOV.L       @(R0,R5),R2
    0000048A 7101                   ADD         #1,R1
    0000048C 03C7                   MUL.L       R12,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000048E 31E3                   CMP/GE      R14,R1
    00000490 2F12                   MOV.L       R1,@R15
    00000492 031A                   STS         MACL,R3
    00000494 332C                   ADD         R2,R3
    00000496 6C33                   MOV         R3,R12
    00000498 8FF3                   BF/S        L1157
    0000049A 7704                   ADD         #4,R7
    0000049C              L1156:                            
      transpose.   100    
      transpose.   101                    t = ai[l]; ai[l] = ai[m]; ai[m] = t;
    0000049C 67A3                   MOV         R10,R7
    0000049E 375C                   ADD         R5,R7
    000004A0 1F71                   MOV.L       R7,@(4,R15)
    000004A2 62B3                   MOV         R11,R2
    000004A4 6772                   MOV.L       @R7,R7
      transpose.   102                    t = an[l]; an[l] = an[m]; an[m] = t;
      transpose.   103    
      transpose.   104                    b[k] = a[i];
    000004A6 4C08                   SHLL2       R12
    000004A8 53F1                   MOV.L       @(4,R15),R3
    000004AA 325C                   ADD         R5,R2
    000004AC 2F22                   MOV.L       R2,@R15
    000004AE 6122                   MOV.L       @R2,R1
    000004B0 2312                   MOV.L       R1,@R3
    000004B2 62B3                   MOV         R11,R2
    000004B4 63F2                   MOV.L       @R15,R3
    000004B6 326C                   ADD         R6,R2
    000004B8 2372                   MOV.L       R7,@R3
    000004BA 67A3                   MOV         R10,R7
    000004BC 376C                   ADD         R6,R7
    000004BE 1F71                   MOV.L       R7,@(4,R15)
    000004C0 6772                   MOV.L       @R7,R7
    000004C2 53F1                   MOV.L       @(4,R15),R3
    000004C4 2F22                   MOV.L       R2,@R15
    000004C6 6122                   MOV.L       @R2,R1
    000004C8 2312                   MOV.L       R1,@R3
    000004CA 63F2                   MOV.L       @R15,R3
    000004CC 2372                   MOV.L       R7,@R3
    000004CE 50F5                   MOV.L       @(20,R15),R0
    000004D0 53F4                   MOV.L       @(16,R15),R3
    000004D2 7304                   ADD         #4,R3
    000004D4 1F34                   MOV.L       R3,@(16,R15)
    000004D6 73FC                   ADD         #-4,R3
    000004D8 6232                   MOV.L       @R3,R2
    000004DA 0C26                   MOV.L       R2,@(R0,R12)
      transpose.   105    
      transpose.   106                    for (j = ndim - 1; j >= 0; j--) {
    000004DC 5CF3                   MOV.L       @(12,R15),R12
    000004DE 67C3                   MOV         R12,R7
    000004E0 4708                   SHLL2       R7
    000004E2 6373                   MOV         R7,R3
    000004E4 335C                   ADD         R5,R3
    000004E6 7304                   ADD         #4,R3
    000004E8 4C11                   CMP/PZ      R12
    000004EA 8F0F                   BF/S        L1158
    000004EC 2F32                   MOV.L       R3,@R15
    000004EE              L1159:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      transpose.   107                            if (++ai[j] < an[j])
    000004EE 6073                   MOV         R7,R0
    000004F0 035E                   MOV.L       @(R0,R5),R3
    000004F2 7301                   ADD         #1,R3
    000004F4 0536                   MOV.L       R3,@(R0,R5)
    000004F6 026E                   MOV.L       @(R0,R6),R2
    000004F8 3323                   CMP/GE      R2,R3
    000004FA 8B07                   BF          L1158
      transpose.   108                                    break;
      transpose.   109                            ai[j] = 0;
    000004FC 62F2                   MOV.L       @R15,R2
    000004FE 7CFF                   ADD         #-1,R12
    00000500 72FC                   ADD         #-4,R2
    00000502 4C11                   CMP/PZ      R12
    00000504 2F22                   MOV.L       R2,@R15
    00000506 2242                   MOV.L       R4,@R2
    00000508 8DF1                   BT/S        L1159
    0000050A 77FC                   ADD         #-4,R7
    0000050C              L1158:                            
    0000050C 7901                   ADD         #1,R9
    0000050E              L1154:                            
    0000050E 52F2                   MOV.L       @(8,R15),R2
    00000510 3923                   CMP/GE      R2,R9
    00000512 8B9D                   BF          L1155
      transpose.   110                    }
      transpose.   111            }
      transpose.   112    
      transpose.   113            push(p2);
    00000514 64D2                   MOV.L       @R13,R4
      transpose.   114            return;
    00000516              L1163:                            
    00000516 480B                   JSR         @R8
    00000518 0009                   NOP
      transpose.   115    }
    0000051A 910A                   MOV.W       L1170,R1   ; H'00D8
    0000051C 3F1C                   ADD         R1,R15
    0000051E 4F16                   LDS.L       @R15+,MACL
    00000520 4F26                   LDS.L       @R15+,PR
    00000522 68F6                   MOV.L       @R15+,R8
    00000524 69F6                   MOV.L       @R15+,R9
    00000526 6AF6                   MOV.L       @R15+,R10
    00000528 6BF6                   MOV.L       @R15+,R11
    0000052A 6CF6                   MOV.L       @R15+,R12
    0000052C 6DF6                   MOV.L       @R15+,R13
    0000052E 000B                   RTS
    00000530 6EF6                   MOV.L       @R15+,R14
    00000532              L1170:                            
    00000532 00D8                   .DATA.W     H'00D8
      transpose.   116    
C   00000000              L1077:
    00000000 7472616E73             .SDATA      "transpose: tensor expected, 1st arg is not a tensor"
             706F73653A   
             2074656E73   
             6F72206578   
             7065637465   
             642C203173   
             7420617267   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             206973206E   
             6F74206120   
             74656E736F   
             72           
    00000033 00                     .DATA.B     H'00
    00000034              L1079:
    00000034 7472616E73             .SDATA      "transpose: index out of range"
             706F73653A   
             20696E6465   
             78206F7574   
             206F662072   
             616E6765     
    00000051 00                     .DATA.B     H'00
















































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:34  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      116



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000534 Byte(s)
CONSTANT SECTION (C):                               00000052 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000586 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           15
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           2
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            99






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkEDF5.tmp 

