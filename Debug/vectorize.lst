SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:35  PAGE    1

************ OBJECT LISTING ************

FILE NAME: E:\Anderain\fx-9860\fxTaumath\vectorize.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

      vectorize.     1    #include "stdafx.h"
      vectorize.     2    
      vectorize.     3    //-----------------------------------------------------------------------------
      vectorize.     4    //
      vectorize.     5    //      Encapsulate stack values in a vector
      vectorize.     6    //
      vectorize.     7    //      Input:          n               Number of values on stack
      vectorize.     8    //
      vectorize.     9    //                      tos-n           Start of value
      vectorize.    10    //
      vectorize.    11    //      Output:         Vector on stack
      vectorize.    12    //
      vectorize.    13    //-----------------------------------------------------------------------------
      vectorize.    14    
      vectorize.    15    #include "defs.h"
      vectorize.    16    
      vectorize.    17    void
      vectorize.    18    vectorize(int n)
P   00000000              _vectorize:                      ; function: vectorize
                                                           ; frame size=12
    00000000 2FE6                   MOV.L       R14,@-R15
    00000002 2FD6                   MOV.L       R13,@-R15
    00000004 4F22                   STS.L       PR,@-R15
      vectorize.    19    {
      vectorize.    20            int i;
      vectorize.    21    
      vectorize.    22            save();
    00000006 D317                   MOV.L       L1063,R3   ; _save
    00000008 430B                   JSR         @R3
    0000000A 6E43                   MOV         R4,R14
      vectorize.    23    
      vectorize.    24            p1 = alloc_tensor(n);
    0000000C DD16                   MOV.L       L1063+4,R13; _p1
    0000000E D217                   MOV.L       L1063+8,R2 ; _alloc_tensor
    00000010 420B                   JSR         @R2
    00000012 64E3                   MOV         R14,R4
    00000014 2D02                   MOV.L       R0,@R13
      vectorize.    25    
      vectorize.    26            p1->u.tensor->ndim = 1;
    00000016 6303                   MOV         R0,R3
      vectorize.    27            p1->u.tensor->dim[0] = n;
      vectorize.    28    
      vectorize.    29            for (i = 0; i < n; i++)
    00000018 D615                   MOV.L       L1063+12,R6; _stack
    0000001A 4E15                   CMP/PL      R14
    0000001C D515                   MOV.L       L1063+16,R5; _tos
    0000001E E101                   MOV         #1,R1
    00000020 6232                   MOV.L       @R3,R2
    00000022 2212                   MOV.L       R1,@R2
    00000024 63D2                   MOV.L       @R13,R3
    00000026 6232                   MOV.L       @R3,R2
    00000028 12E1                   MOV.L       R14,@(4,R2)
    0000002A 8F10                   BF/S        L1061
    0000002C E400                   MOV         #0,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:35  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000002E              L1062:                            
      vectorize.    30                    p1->u.tensor->elem[i] = stack[tos - n + i];
    0000002E 6343                   MOV         R4,R3
    00000030 60D2                   MOV.L       @R13,R0
    00000032 4308                   SHLL2       R3
    00000034 6202                   MOV.L       @R0,R2
    00000036 7268                   ADD         #104,R2
    00000038 6052                   MOV.L       @R5,R0
    0000003A 332C                   ADD         R2,R3
    0000003C 6262                   MOV.L       @R6,R2
    0000003E 30E8                   SUB         R14,R0
    00000040 304C                   ADD         R4,R0
    00000042 4008                   SHLL2       R0
    00000044 012E                   MOV.L       @(R0,R2),R1
    00000046 7401                   ADD         #1,R4
    00000048 2312                   MOV.L       R1,@R3
    0000004A 34E3                   CMP/GE      R14,R4
    0000004C 8BEF                   BF          L1062
    0000004E              L1061:                            
      vectorize.    31    
      vectorize.    32            tos -= n;
    0000004E 6252                   MOV.L       @R5,R2
      vectorize.    33    
      vectorize.    34            push(p1);
    00000050 D309                   MOV.L       L1063+20,R3; _push
    00000052 32E8                   SUB         R14,R2
    00000054 2522                   MOV.L       R2,@R5
    00000056 430B                   JSR         @R3
    00000058 64D2                   MOV.L       @R13,R4
      vectorize.    35    
      vectorize.    36            restore();
    0000005A 4F26                   LDS.L       @R15+,PR
    0000005C D207                   MOV.L       L1063+24,R2; _restore
    0000005E 6DF6                   MOV.L       @R15+,R13
    00000060 422B                   JMP         @R2
    00000062 6EF6                   MOV.L       @R15+,R14
    00000064              L1063:                            
    00000064 <00000000>             .DATA.L     _save
    00000068 <00000000>             .DATA.L     _p1
    0000006C <00000000>             .DATA.L     _alloc_tensor
    00000070 <00000000>             .DATA.L     _stack
    00000074 <00000000>             .DATA.L     _tos
    00000078 <00000000>             .DATA.L     _push
    0000007C <00000000>             .DATA.L     _restore
      vectorize.    37    }
















SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jul-2013 13:37:35  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:       37



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000080 Byte(s)
CONSTANT SECTION (C):                               00000000 Byte(s)
DATA     SECTION (D):                               00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000080 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:            7
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           1
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:            11






























*** COMMAND PARAMETER ***


  -subcommand=C:\Users\ADMINI~1\AppData\Local\Temp\hmkF162.tmp 

